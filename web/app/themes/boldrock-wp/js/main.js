/******/ (function(modules) { // webpackBootstrap
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		;
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest(requestTimeout) { // eslint-disable-line no-unused-vars
/******/ 		requestTimeout = requestTimeout || 10000;
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if(typeof XMLHttpRequest === "undefined")
/******/ 				return reject(new Error("No browser support"));
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = requestTimeout;
/******/ 				request.send(null);
/******/ 			} catch(err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if(request.readyState !== 4) return;
/******/ 				if(request.status === 0) {
/******/ 					// timeout
/******/ 					reject(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 				} else if(request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if(request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch(e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "f176a6f2233f97f5e1ac"; // eslint-disable-line no-unused-vars
/******/ 	var hotRequestTimeout = 10000;
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotCurrentChildModule; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 				} else {
/******/ 					hotCurrentParents = [moduleId];
/******/ 					hotCurrentChildModule = request;
/******/ 				}
/******/ 				if(me.children.indexOf(request) < 0)
/******/ 					me.children.push(request);
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name) && name !== "e") {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		fn.e = function(chunkId) {
/******/ 			if(hotStatus === "ready")
/******/ 				hotSetStatus("prepare");
/******/ 			hotChunksLoading++;
/******/ 			return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 				finishChunkLoading();
/******/ 				throw err;
/******/ 			});
/******/ 	
/******/ 			function finishChunkLoading() {
/******/ 				hotChunksLoading--;
/******/ 				if(hotStatus === "prepare") {
/******/ 					if(!hotWaitingFilesMap[chunkId]) {
/******/ 						hotEnsureUpdateChunk(chunkId);
/******/ 					}
/******/ 					if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 						hotUpdateDownloaded();
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotCurrentChildModule !== moduleId,
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotCurrentChildModule = undefined;
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest(hotRequestTimeout).then(function(update) {
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			var chunkId = 0;
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if(!deferred) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			// Wrap deferred object in Promise to mark it as a well-handled Promise to
/******/ 			// avoid triggering uncaught exception warning in Chrome.
/******/ 			// See https://bugs.chromium.org/p/chromium/issues/detail?id=465666
/******/ 			Promise.resolve().then(function() {
/******/ 				return hotApply(hotApplyOnUpdate);
/******/ 			}).then(
/******/ 				function(result) {
/******/ 					deferred.resolve(result);
/******/ 				},
/******/ 				function(err) {
/******/ 					deferred.reject(err);
/******/ 				}
/******/ 			);
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 	
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/ 	
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while(queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if(module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(!parent) continue;
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 	
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn("[HMR] unexpected require(" + result.moduleId + ") to disposed module");
/******/ 		};
/******/ 	
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				var result;
/******/ 				if(hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if(result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch(result.type) {
/******/ 					case "self-declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of self decline: " + result.moduleId + chainInfo);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if(options.onUnaccepted)
/******/ 							options.onUnaccepted(result);
/******/ 						if(!options.ignoreUnaccepted)
/******/ 							abortError = new Error("Aborted because " + moduleId + " is not accepted" + chainInfo);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if(options.onAccepted)
/******/ 							options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if(options.onDisposed)
/******/ 							options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if(abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if(doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for(moduleId in result.outdatedDependencies) {
/******/ 						if(Object.prototype.hasOwnProperty.call(result.outdatedDependencies, moduleId)) {
/******/ 							if(!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if(doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if(hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/ 	
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// when disposing there is no need to call dispose handler
/******/ 			delete outdatedDependencies[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for(j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if(idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					var callbacks = [];
/******/ 					for(i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 						dependency = moduleOutdatedDependencies[i];
/******/ 						cb = module.hot._acceptedDependencies[dependency];
/******/ 						if(cb) {
/******/ 							if(callbacks.indexOf(cb) >= 0) continue;
/******/ 							callbacks.push(cb);
/******/ 						}
/******/ 					}
/******/ 					for(i = 0; i < callbacks.length; i++) {
/******/ 						cb = callbacks[i];
/******/ 						try {
/******/ 							cb(moduleOutdatedDependencies);
/******/ 						} catch(err) {
/******/ 							if(options.onErrored) {
/******/ 								options.onErrored({
/******/ 									type: "accept-errored",
/******/ 									moduleId: moduleId,
/******/ 									dependencyId: moduleOutdatedDependencies[i],
/******/ 									error: err
/******/ 								});
/******/ 							}
/******/ 							if(!options.ignoreErrored) {
/******/ 								if(!error)
/******/ 									error = err;
/******/ 							}
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err2) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								orginalError: err, // TODO remove in webpack 4
/******/ 								originalError: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err2;
/******/ 						}
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if(options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if(!options.ignoreErrored) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		return new Promise(function(resolve) {
/******/ 			resolve(outdatedModules);
/******/ 		});
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "http://localhost:3001/";
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return hotCreateRequire(0)(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-html/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/css-loader/index.js?{\"sourceMap\":true}!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/style.scss":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("./node_modules/css-loader/lib/css-base.js")(true);
// imports


// module
exports.push([module.i, ".white{color:#fff;fill:#fff}html{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}html{font-family:sans-serif;-webkit-box-sizing:border-box;box-sizing:border-box;font-size:62.5%;line-height:1.4;color:#7d776d;height:100%;font-family:adelle,serif;font-weight:100}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit}body{background:#fff;height:100%;overflow-x:hidden}dl,ol,ul{list-style-type:none;margin:0;padding:0}p{margin:0}p+p{margin-top:10px}li,li>span,p{font-size:16px;font-size:1.6rem;font-family:adelle,serif;color:#969087;font-weight:100;line-height:1.8}strong{font-weight:700}em{font-style:italic}h3{font-weight:400;font-size:22px;font-size:2.2rem}h1{color:#5e5952;font-size:3.8rem;letter-spacing:.05rem;margin:10px 0}h1,h2{font-family:vinyl,serif;text-transform:uppercase}h2{font-size:3.2rem;letter-spacing:.1rem;margin:0;margin-bottom:10px}h3{font-family:adelle,serif;font-weight:100;text-transform:none;font-size:2.6rem}h4{font-family:myriad-pro,serif;font-weight:700;letter-spacing:.2rem;font-size:1.6rem}h4,h5{text-transform:uppercase;margin:0}h5{font-size:1.5rem;font-weight:500;height:20px;line-height:20px;margin-bottom:20px;font-family:vinyl,serif;letter-spacing:.05rem}.sm-margin{margin:10px 0!important}.med-margin{margin:20px 0!important}.lg-margin{margin:30px 0!important}.page-wrapper{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;height:100%}footer,header{-ms-flex:none;-webkit-box-flex:0;flex:none}.content-area{-ms-flex:1 0 auto;-webkit-box-flex:1;flex:1 0 auto;width:100%}.content-area:after{content:\"\\A0\";display:block;height:0;visibility:hidden}.center{text-align:center}body.loading{-webkit-animation-name:f;animation-name:f;-webkit-animation-duration:.55s;animation-duration:.55s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.2,.3,.25,.9);animation-timing-function:cubic-bezier(.2,.3,.25,.9)}#main.flyUp,body.is-loaded{-webkit-animation-name:e;animation-name:e}#main.flyUp,.anim,body.is-loaded{-webkit-animation-duration:.55s;animation-duration:.55s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.2,.3,.25,.9);animation-timing-function:cubic-bezier(.2,.3,.25,.9)}.anim.infinite{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}.anim.hinge{-webkit-animation-duration:1s;animation-duration:1s}@-webkit-keyframes a{0%{opacity:0}to{opacity:1}}@keyframes a{0%{opacity:0}to{opacity:1}}.fadeIn{-webkit-animation-name:a;animation-name:a}.fadeInDown{-webkit-animation-name:b;animation-name:b;-webkit-animation-delay:.5s;animation-delay:.5s}@-webkit-keyframes b{0%{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes b{0%{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@-webkit-keyframes c{0%{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes c{0%{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInLeft{-webkit-animation-name:c;animation-name:c}@-webkit-keyframes d{0%{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes d{0%{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInRight{-webkit-animation-name:d;animation-name:d}@-webkit-keyframes e{0%{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes e{0%{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInUp{-webkit-animation-name:e;animation-name:e}@-webkit-keyframes f{0%{opacity:1}to{opacity:0}}@keyframes f{0%{opacity:1}to{opacity:0}}.fadeOut{-webkit-animation-name:f;animation-name:f}@-webkit-keyframes g{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0);display:none}}@keyframes g{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0);display:none}}.fadeOutDown{-webkit-animation-name:g;animation-name:g}@-webkit-keyframes h{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}}@keyframes h{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}}.fadeOutLeft{-webkit-animation-name:h;animation-name:h}@-webkit-keyframes i{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}}@keyframes i{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}}.fadeOutRight{-webkit-animation-name:i;animation-name:i}@-webkit-keyframes j{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}}@keyframes j{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}}.fadeOutUp{-webkit-animation-name:j;animation-name:j}@-webkit-keyframes k{0%{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}to{opacity:1;-webkit-transform:none;transform:none;-webkit-filter:none;filter:none}}@keyframes k{0%{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}to{opacity:1;-webkit-transform:none;transform:none;-webkit-filter:none;filter:none}}.fadeInScale{-webkit-animation-name:k;animation-name:k}@-webkit-keyframes l{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1);-webkit-filter:none;filter:none}to{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}}@keyframes l{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1);-webkit-filter:none;filter:none}to{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}}.fadeOutScale{-webkit-animation-name:l;animation-name:l}.preloader{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(228,227,226,.95);z-index:1999;text-align:center}.preloader .spinner{width:300px;height:300px;position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;text-align:center}.preloader .spinner .spinner-logo{width:100%;height:100%}.preloader .spinner .spinner-logo img{width:100%}.animated{-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-fill-mode:both;animation-fill-mode:both}.animated.infinite{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}.animated.bounceIn,.animated.bounceOut,.animated.flipOutX,.animated.flipOutY{-webkit-animation-duration:.75s;animation-duration:.75s}@-webkit-keyframes m{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-30px,0);transform:translate3d(0,-30px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-15px,0);transform:translate3d(0,-15px,0)}90%{-webkit-transform:translate3d(0,-4px,0);transform:translate3d(0,-4px,0)}}@keyframes m{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-30px,0);transform:translate3d(0,-30px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-15px,0);transform:translate3d(0,-15px,0)}90%{-webkit-transform:translate3d(0,-4px,0);transform:translate3d(0,-4px,0)}}@-webkit-keyframes n{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-5px,0);transform:translate3d(0,-5px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-3px,0);transform:translate3d(0,-3px,0)}90%{-webkit-transform:translate3d(0,-1px,0);transform:translate3d(0,-1px,0)}}@keyframes n{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-5px,0);transform:translate3d(0,-5px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-3px,0);transform:translate3d(0,-3px,0)}90%{-webkit-transform:translate3d(0,-1px,0);transform:translate3d(0,-1px,0)}}.bounce{-webkit-animation-name:m;animation-name:m;-webkit-transform-origin:center bottom;transform-origin:center bottom;-webkit-animation-delay:3s;animation-delay:3s}@-webkit-keyframes o{20%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}50%,55%{opacity:1;-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}to{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}}@keyframes o{20%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}50%,55%{opacity:1;-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}to{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}}.bounceOut{-webkit-animation-name:o;animation-name:o}article{padding-top:120px}.home article{padding-top:0}section{padding:4rem 0}section.header-push{padding-top:160px}.outer-container{width:80%;margin:0 auto;max-width:1200px;padding:4rem 0}.inner-container-b{display:block}.inner-container-f{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.inner-container-f>.content{-ms-flex:1;-webkit-box-flex:1;flex:1}.small{max-width:600px}.med,.small{margin:0 auto}.med{max-width:800px}.lg{max-width:1000px;margin:0 auto}.centered{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.centered,.spaced{-ms-flex-align:center;-webkit-box-align:center;align-items:center}.spaced{-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.npt{padding-top:0!important}.np{padding:0!important}.npb{padding-bottom:0!important}@media screen and (max-width:900px){article{padding-top:60px}section.header-push{padding-top:100px}}@media screen and (max-width:767px){section{padding:6rem 0}.outer-container{width:90%}}.screen-reader-text{clip:rect(1px,1px,1px,1px);position:absolute!important;height:1px;width:1px;overflow:hidden}.screen-reader-text:focus{background-color:#fff;border-radius:3px;-webkit-box-shadow:0 0 2px 2px rgba(0,0,0,.6);box-shadow:0 0 2px 2px rgba(0,0,0,.6);clip:auto!important;color:green;display:block;font-size:8.75px;font-size:.875rem;font-weight:700;height:auto;left:5px;line-height:normal;padding:15px 23px 14px;text-decoration:none;top:5px;width:auto;z-index:100000}#content[tabindex=\"-1\"]:focus{outline:0}.top-bar{background:gray;height:46px;z-index:10}.top-bar .top-bar-outer{width:100%;height:46px;background:#97928a;padding:0 30px;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.top-bar .top-bar-outer,.top-bar .top-menu{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.top-bar .top-menu{height:100%}.top-bar .top-menu a{padding:20px;font-family:myriad-pro,serif;font-size:1.4rem;letter-spacing:.15rem;color:#fff;font-weight:700}.top-bar .top-menu a:last-of-type{padding-right:0}#masthead{position:absolute;width:100%;height:120px;-webkit-box-shadow:none;box-shadow:none;z-index:10;top:46px;background-color:#fff;will-change:height,background-color;-webkit-transition-property:height,background-color;transition-property:height,background-color;-webkit-transition-duration:.25s;transition-duration:.25s}#masthead:before{content:\"desktop\";display:none}#masthead:after{content:\"\";display:block;width:100%;height:1px;background:rgba(0,0,0,.15);position:absolute;bottom:-1px}#masthead .header-outer{width:100%;height:100%;padding:0 30px}#masthead .navRoot{width:100%;height:100%;display:-ms-flexbox;display:-webkit-box;display:flex}#masthead .navRoot_logo{width:80px;height:90px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;margin:15px 0}#masthead .navRoot_logo .logo-is-not-fixed{display:block;width:100%;height:100%}#masthead .navRoot_logo .logo-is-fixed{display:none;width:100%;height:100%}#masthead .navRoot_menu{height:100%;margin-left:30px;-ms-flex:1;-webkit-box-flex:1;flex:1}#masthead .navRoot_menu ul{height:100%}#masthead .navRoot_menu li{height:100%;display:inline-block;padding:0 30px}#masthead .navRoot_menu a{line-height:120px;height:120px;font-size:1.8rem;letter-spacing:.15rem;color:#7d776d;font-family:vinyl,serif;will-change:color,line-height,height;-webkit-transition-property:color,line-height,height;transition-property:color,line-height,height;-webkit-transition-duration:.25s;transition-duration:.25s}#masthead .navRoot_finder{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;height:100%}#masthead .navRoot_finder .cider_finder_button{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;font-family:vinyl,serif;font-size:1.6rem;letter-spacing:.15rem}#masthead .navRoot_finder .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}#masthead .navRoot_finder .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}#masthead .navRoot_finder .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}#masthead .navRoot_finder .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}#masthead .navRoot_finder .cider_finder_button:hover span{opacity:0}#masthead .navRoot_mobile{display:none}#masthead #hard_cider,#masthead #line,#masthead #rock{fill:#000}#masthead #bold{fill:#eaa821}.cider_wrapper_inner{width:100vw;padding:20px 60px;height:160px}.cider_wrapper_inner li{height:120px}.cider_wrapper_inner li a{width:100%;height:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between;position:relative}.cider_wrapper_inner li .emblem{position:absolute;top:-20px;right:25px;font-size:1.1rem;width:50px;height:50px}.cider_wrapper_inner li .emblem svg{fill:#19353b}.cider_wrapper_inner .cider_thumbnail{height:70%}.cider_wrapper_inner .cider_thumbnail img{max-height:100%;will-change:transform;-webkit-transition:-webkit-transform .2s ease-in-out;transition:-webkit-transform .2s ease-in-out;transition:transform .2s ease-in-out;transition:transform .2s ease-in-out,-webkit-transform .2s ease-in-out;-webkit-transform:scale(1);transform:scale(1)}.cider_wrapper_inner li:hover img{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-transition:-webkit-transform .2s ease-in-out;transition:-webkit-transform .2s ease-in-out;transition:transform .2s ease-in-out;transition:transform .2s ease-in-out,-webkit-transform .2s ease-in-out}.sub-nav-root{position:absolute;top:120px;left:0;right:0;display:block;opacity:0;pointer-events:none;will-change:opacity;-webkit-transition:opacity .25s ease-in-out;transition:opacity .25s ease-in-out}.sub-nav-root a{font-family:myriad-pro,serif;text-align:center;font-weight:500;color:#7d776d;font-size:1.4rem;display:block;letter-spacing:.15rem}.sub-nav-root #aboutMenu a,.sub-nav-root #visitMenu a{-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:color .25s,-webkit-transform .25s;transition:color .25s,-webkit-transform .25s;transition:transform .25s,color .25s;transition:transform .25s,color .25s,-webkit-transform .25s}.sub-nav-root #aboutMenu a:hover,.sub-nav-root #visitMenu a:hover{-webkit-transform:translateX(2px);transform:translateX(2px);color:#5e5952}.dropdown-bg{position:absolute;top:0;left:0;will-change:transform;background:#fff;overflow:hidden;width:380px;height:500px;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-box-shadow:0 5px 15px rgba(0,0,0,.1);box-shadow:0 5px 15px rgba(0,0,0,.1);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.home #masthead,.home #masthead:after{background:0 0}.home #masthead .navRoot_menu a{color:#fff}.home #masthead #bold,.home #masthead #hard_cider,.home #masthead #line{fill:#fff}.home #masthead #rock{fill:#eea821}#masthead.is-dropdown-visible,.home #masthead.is-dropdown-visible{background:#fff}#masthead.is-dropdown-visible:after,.home #masthead.is-dropdown-visible:after{background:rgba(0,0,0,.15)}#masthead.is-dropdown-visible #hard_cider,#masthead.is-dropdown-visible #line,#masthead.is-dropdown-visible #rock,.home #masthead.is-dropdown-visible #hard_cider,.home #masthead.is-dropdown-visible #line,.home #masthead.is-dropdown-visible #rock{fill:#000}#masthead.is-dropdown-visible #bold,.home #masthead.is-dropdown-visible #bold{fill:#eea821}#masthead.is-dropdown-visible .navRoot_menu a,.home #masthead.is-dropdown-visible .navRoot_menu a{color:#7d776d}#masthead.is-dropdown-visible .sub-nav-root,.home #masthead.is-dropdown-visible .sub-nav-root{opacity:1;pointer-events:auto}.sub-nav-wrapper{overflow:hidden;position:absolute;top:0;left:0;will-change:transform,width,height;-webkit-transition-property:width,height,-webkit-transform;transition-property:width,height,-webkit-transform;transition-property:transform,width,height;transition-property:transform,width,height,-webkit-transform;-webkit-transition-duration:.25s;transition-duration:.25s}.dropdown-content{opacity:0;position:absolute;top:0;left:0;will-change:opacity;-webkit-transition:opacity .15s ease-in-out;transition:opacity .15s ease-in-out}.dropdown-content.go-left{-webkit-transform:translateX(-150px);transform:translateX(-150px);opacity:0}.dropdown-content.go-right{-webkit-transform:translateX(150px);transform:translateX(150px);opacity:0}.dropdown-content.is-active{-webkit-transform:translateX(0);transform:translateX(0);opacity:1;z-index:500}.sub-menu{margin:10px 0}.sub-menu li{padding:10px 30px}#masthead.is-fixed{position:fixed;top:0;background-color:#fff!important;height:70px;-webkit-transition:background-color .25s,height .25s;transition:background-color .25s,height .25s;-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,.15);box-shadow:0 0 5px 0 rgba(0,0,0,.15)}#masthead.is-fixed .navRoot_logo{height:40px}#masthead.is-fixed .navRoot_logo .logo-is-not-fixed{display:none}#masthead.is-fixed .navRoot_logo .logo-is-fixed{display:block}#masthead.is-fixed .navRoot_menu a{height:70px;line-height:70px;color:#7d776d}#masthead.is-fixed .sub-nav-root{top:70px}@media screen and (max-width:900px){.top-bar{display:none}#masthead,#masthead.is-fixed{top:0;height:60px;position:fixed;background:#fff}#masthead.is-fixed:before,#masthead:before{content:\"mobile\"}#masthead.is-fixed .navRoot_finder,#masthead.is-fixed .navRoot_menu,#masthead.is-fixed .sub-nav-root,#masthead .navRoot_finder,#masthead .navRoot_menu,#masthead .sub-nav-root{display:none}#masthead.is-fixed .navRoot_logo,#masthead .navRoot_logo{width:100px;height:40px;margin:10px 0;z-index:50}#masthead.is-fixed .navRoot_logo .logo-is-not-fixed,#masthead .navRoot_logo .logo-is-not-fixed{display:none}#masthead.is-fixed .navRoot_logo .logo-is-fixed,#masthead.is-fixed .navRoot_mobile,#masthead .navRoot_logo .logo-is-fixed,#masthead .navRoot_mobile{display:block}#masthead.is-fixed .mobile_outer_wrap,#masthead .mobile_outer_wrap{position:fixed;top:0;left:0;right:0;bottom:0;background:#97928a;z-index:20;padding:30px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;max-height:0;overflow:hidden;opacity:0;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}#masthead.is-fixed .mobile_outer_wrap.mmenu-is-visible,#masthead .mobile_outer_wrap.mmenu-is-visible{max-height:100%;opacity:1;-webkit-transition:max-height .2s,opacity .2s;transition:max-height .2s,opacity .2s}#masthead.is-fixed ul.mobile-menu,#masthead ul.mobile-menu{margin-bottom:40px}#masthead.is-fixed ul.mobile-menu li,#masthead ul.mobile-menu li{height:50px;line-height:50px;text-align:center}#masthead.is-fixed ul.mobile-menu li a,#masthead ul.mobile-menu li a{color:#fff;font-size:1.7rem}#masthead.is-fixed .mobile_trigger,#masthead .mobile_trigger{position:fixed;top:15px;right:30px;width:30px;height:30px;display:block;z-index:400;cursor:pointer}#masthead.is-fixed .mobile_trigger span,#masthead .mobile_trigger span{position:absolute;width:30px;height:3px;background-color:#97928a;top:50%;margin-top:-1px;border-radius:1px;display:block;will-change:background-color;-webkit-transition:background-color .3s;transition:background-color .3s}#masthead.is-fixed .mobile_trigger span:before,#masthead .mobile_trigger span:before{top:-8px}#masthead.is-fixed .mobile_trigger span:after,#masthead.is-fixed .mobile_trigger span:before,#masthead .mobile_trigger span:after,#masthead .mobile_trigger span:before{content:\"\";position:absolute;background-color:#97928a;width:100%;height:100%;border-radius:1px;left:0;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform:rotate(0);transform:rotate(0);will-change:transform,background-color;-webkit-transition:background-color .3s,-webkit-transform .3s;transition:background-color .3s,-webkit-transform .3s;transition:transform .3s,background-color .3s;transition:transform .3s,background-color .3s,-webkit-transform .3s}#masthead.is-fixed .mobile_trigger span:after,#masthead .mobile_trigger span:after{bottom:-8px}#masthead.is-fixed .mobile_trigger.mmenu-is-open span,#masthead .mobile_trigger.mmenu-is-open span{background:0 0}#masthead.is-fixed .mobile_trigger.mmenu-is-open span:before,#masthead .mobile_trigger.mmenu-is-open span:before{top:0;background-color:#fff;-webkit-transform:rotate(135deg);transform:rotate(135deg)}#masthead.is-fixed .mobile_trigger.mmenu-is-open span:after,#masthead .mobile_trigger.mmenu-is-open span:after{bottom:0;background-color:#fff;-webkit-transform:rotate(225deg);transform:rotate(225deg)}}#loader{background:#d4a74d;position:fixed;top:0;height:4px;left:0;width:0;z-index:200;-webkit-transition:all .25s cubic-bezier(.2,.3,.25,.9) 0ms;transition:all .25s cubic-bezier(.2,.3,.25,.9) 0ms}.wood{background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/br_prefooter_background.jpg);border-top:10px solid #e5e4e2}.wood img{width:50%;padding:40px 0;margin:0 auto}.prefooter-menu{display:none}.footer-outer{padding:30px;width:100%;max-width:1400px;margin:0 auto}.footer-bottom .footer-outer{padding:15px 30px}.footer-top{background:#97928a}.footer-bottom{background:#8b857d;color:#fff;text-align:center}.footer-bottom a.footer-link,.footer-bottom p{margin:0;font-family:myriad-pro,serif;font-size:1.2rem;text-transform:uppercase;letter-spacing:.05rem;color:rgba(228,227,226,.6)}.footer-bottom a.footer-link{text-transform:uppercase;text-decoration:underline;font-weight:400;will-change:color;-webkit-transition:color .2s;transition:color .2s}.footer-bottom a.footer-link:hover{color:#e5e4e2}.footer-root{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.footer-root>div{margin-right:4em}.footer-root>div:last-of-type{margin-right:0}.footerRoot_logo a{display:block;width:120px}.footerRoot_logo #bold,.footerRoot_logo #hard_cider,.footerRoot_logo #line,.footerRoot_logo #rock{fill:rgba(228,227,226,.6)}.footerRoot_newsletter{max-width:300px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.footerRoot_newsletter h4{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;text-transform:uppercase;font-size:1.4rem;margin:0}.footerRoot_newsletter p{margin:0;font-size:1.3rem;font-family:myriad-pro,serif;color:rgba(228,227,226,.4)}.footerRoot_newsletter form{margin-top:20px;width:100%;border:2px solid rgba(228,227,226,.6);position:relative}.footerRoot_newsletter input[type=text]{background:0 0;border:0;color:rgba(228,227,226,.6);padding:10px 5px;border-radius:0;width:100%;line-height:20px}.footerRoot_newsletter .submit_button{position:absolute;top:0;right:0;height:100%;background:rgba(228,227,226,.6)}.footerRoot_newsletter .submit_button:before{content:\"\";display:block;position:absolute;width:20px;height:10px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/icons/raw/arrowalt.svg);background-size:cover;background-position:50%;top:50%;left:50%;margin-top:-5px;margin-left:-10px;z-index:5;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.footerRoot_newsletter .submit_button input[type=submit]{border:0;background:0 0;margin:0;height:100%;width:40px;font-size:0;line-height:0;position:relative;z-index:12}.footerRoot_newsletter .submit_button:hover:before{-webkit-transform:translateX(2px);transform:translateX(2px)}.footerRoot_menu li a{font-size:1.3rem;font-family:myriad-pro,serif;color:rgba(228,227,226,.6);font-weight:600;letter-spacing:.1rem;display:inline-block;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:color .25s,-webkit-transform .25s;transition:color .25s,-webkit-transform .25s;transition:transform .25s,color .25s;transition:transform .25s,color .25s,-webkit-transform .25s}.footerRoot_menu li a:hover{-webkit-transform:translateX(2px);transform:translateX(2px);color:#e5e4e2}.footerRoot_primary .footer_ciderFinder{margin-top:20px}.footerRoot_primary .footer_ciderFinder .cider_finder_button{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;float:right;font-family:vinyl,serif;font-size:1.4rem;letter-spacing:.1rem}.footerRoot_primary .footer_ciderFinder .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}.footerRoot_primary .footer_ciderFinder .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover span{opacity:0}@media screen and (max-width:900px){footer{height:300px;position:relative;margin-top:60px}.prefooter-menu{height:60px;width:100%;display:block;z-index:3;position:relative}.prefooter-menu .footer-sticky{display:-ms-flexbox;display:-webkit-box;display:flex;height:100%}.prefooter-menu .footer-sticky li{-ms-flex:1;-webkit-box-flex:1;flex:1;height:60px;line-height:60px;text-align:center}.prefooter-menu .footer-sticky li a{color:#fff}.prefooter-menu .footer-sticky li:first-child{background:#ad4418}.prefooter-menu .footer-sticky li:nth-child(2){background:#973b15}.prefooter-menu .footer-sticky li:nth-child(3){background:#813212}.prefooter-menu.pfm-is-fixed{position:fixed;bottom:0}.prefooter-menu.pfm-is-flow{position:absolute;top:-60px}.footer-root{display:block}.footerRoot_logo{float:right}.footerRoot_menu{display:none}.footerRoot_primary{margin-top:40px}.footer_ciderFinder{display:none}}@media screen and (max-width:580px){.footerRoot_logo{display:none}.footer-root .footerRoot_newsletter{max-width:400px;margin:0 auto;text-align:center}.footer-root .footerRoot_primary{margin-top:40px}.footer-root .footerRoot_primary ul.social{text-align:center;display:block}}.hero{background-position:50%;background-size:cover;background-repeat:no-repeat;position:relative;background-color:#a9a6a1}.hero img{width:100%}.hero .hero-wrapper{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background-size:cover;background-repeat:no-repeat;background-position:50%;-webkit-animation:p .6s ease-in-out;animation:p .6s ease-in-out}.hero-mills-river-cidery{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/mills-river-hero.jpg)}.hero-nellysford-cidery{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/nellysford-hero.jpg)}.hero-carter-mountain{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/carter-mountain-hero.jpg)}.hero-chiles-peach{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/chiles-peach-hero.jpg)}.hero-nellysford-barrel-barn{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/barrel-barn-complete.jpg)}.hero-core{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/make-it-happen-3x1.jpg)}.hero-about{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/about-hero.jpg)}.hero-cider101{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/cider101-hero.jpg)}.hero-finder{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/finder-hero.jpg)}@-webkit-keyframes p{0%{opacity:0}50%{opacity:0}to{opacity:1}}@keyframes p{0%{opacity:0}50%{opacity:0}to{opacity:1}}.home .hero{position:relative;background-color:#000}.home .hero-wrapper{position:absolute;top:0;left:0;bottom:0;right:0;background:rgba(0,0,0,.5);display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;z-index:2;overflow:hidden}.home .hero-content img{width:50%;max-width:480px}.home #vidpause{position:absolute;bottom:10px;right:10px;display:none}video#bgvid{position:absolute;top:0;left:0;background-size:cover;z-index:1;width:auto;height:100%;-webkit-transition:opacity 1s;transition:opacity 1s}video#bgVidFull{position:fixed;top:50%;left:50%;min-width:100%;min-height:100%;width:auto;height:auto;z-index:-100;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/poster.jpg) no-repeat;background-size:cover}.stopfade{opacity:.5}.hero-content{position:absolute;top:0;left:0;bottom:0;right:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.hero-content h1{font-size:90px;text-shadow:1px 1px 20px rgba(0,0,0,.6);color:#fff}@media screen and (max-width:800px){video#bgvid{display:none}.home .hero{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/poster-sm.jpg);background-size:cover;background-position:50%;margin-top:60px}.hero-content h1{font-size:60px}}@media screen and (max-width:600px){.hero-content h1{font-size:38px}}@media screen and (min-width:1600px){.hero img{width:100%}}.age-gate-logo img{width:100%;height:auto;margin:0 auto;max-width:320px}h2.age-gate-subheading{color:#97928a;margin-bottom:0}p.age-gate-remember-wrapper{display:none}button.age-gate-submit-no,button.age-gate-submit-yes{border:0;border-radius:3px;padding:5px 20px;margin:20px 10px 0;font-family:vinyl,serif;text-transform:uppercase;font-size:1.6rem;color:#fff;outline:0;background:#973b15}ul.breadcrumbs{display:-ms-flexbox;display:-webkit-box;display:flex}ul.breadcrumbs li,ul.breadcrumbs li a{font-family:vinyl,serif;font-size:1.4rem;text-transform:uppercase}.breadcrumbs-wrapper .outer-container{height:100%}.breadcrumbs-wrapper ul.breadcrumbs{height:100%;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.av_overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:#2e8b57;z-index:10000}.av_overlay#hello{display:block}.av_overlay#goodbye{display:none}.home-intro{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding-bottom:6rem}.home-intro h1{color:#7e7970;letter-spacing:.1rem;font-size:48px}.home-intro .flex-grid{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.home-intro .flex-grid>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.home-intro .flex-grid .illustration{position:relative}.home-intro .flex-grid .illustration img{width:80%;margin:0 auto}.home-intro .flex-grid .illustration .link-overlay a{font-size:2rem;position:relative;display:block;width:160px;margin:0 auto;font-family:vinyl,serif;cursor:pointer;will-change:transform;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.home-intro .flex-grid .illustration .link-overlay a .text{position:relative;color:#fff;z-index:2;display:block;text-align:center}.home-intro .flex-grid .illustration .link-overlay a .banner{position:absolute;top:0;left:0;right:0;bottom:0}.home-intro .flex-grid .illustration .link-overlay a .banner svg{fill:#973b15;-webkit-transition:fill .25s;transition:fill .25s}.home-intro .flex-grid .illustration .link-overlay a:hover{-webkit-transform:translateY(-2px);transform:translateY(-2px)}.home-intro .flex-grid .illustration .link-overlay a:hover .banner svg{fill:#813212}.home-lineup{background-color:#5e5952;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg.svg);position:relative;background-size:cover}.home-lineup:after,.home-lineup:before{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.home-lineup .inner-container-b{position:relative}.home-lineup .inner-container-b h3{color:#fff;font-family:vinyl,serif;font-size:48px;text-transform:uppercase;margin:0;margin-bottom:5px}.home-lineup .lineup-image{position:absolute;bottom:-4em;right:0;max-width:300px}.middle{display:none;background-color:#fef2e6;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg2.svg)}.middle .three-blocks{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.middle .three-blocks>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.middle .three-blocks .block-inner{background:#fff;height:200px;border:1px solid #fff;-o-border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderHorizontal_white.svg) 27 round repeat;border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderHorizontal_white.svg) 27 fill round repeat;position:relative}.middle .three-blocks .block-inner:after{content:\"\";width:100%;height:100%;top:0;left:0;border:1px solid #fff;z-index:2;display:block;-o-border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderVertical_white.svg) 27 round repeat;border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderVertical_white.svg) 27 fill round repeat}.founders{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/overlayimage-updated.jpg);background-size:cover;padding:4rem 0;position:relative;background-position:bottom}.founders:before{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3.svg);z-index:2;content:\"\";background-size:contain;background-repeat:no-repeat;background-position:100%}.founders:after{width:100%;height:20px;content:\"\";display:block;position:absolute;bottom:-10px;z-index:1;background-size:cover;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/gray-stroke.svg)}.founders .content.emblem{-ms-flex:0 0 30%;-webkit-box-flex:0;flex:0 0 30%;-webkit-transform:rotate(-30deg);transform:rotate(-30deg)}.founders .content.text{-ms-flex:0 0 60%;-webkit-box-flex:0;flex:0 0 60%;margin-left:40px;max-width:600px}.founders .content.text h3{color:#fff;line-height:1.8;font-size:2.2rem;text-align:center}.instagram-wrapper{background:gray;position:relative}.instagram-wrapper .insta-overlay{position:absolute;top:0;left:0;bottom:0;right:0;background:rgba(212,167,77,.1)}.instagram-wrapper .insta-banner{position:absolute;bottom:-25px;left:50%;margin-left:-125px;height:50px;width:250px;z-index:2}.instagram-wrapper .insta-banner .insta-banner-inner{background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/banner.svg);background-size:contain;background-repeat:no-repeat;position:relative}.instagram-wrapper .insta-banner .insta-banner-inner h4{color:#fff;font-family:vinyl,serif;position:absolute;top:0;left:0;right:0;bottom:0;text-align:center;line-height:50px;height:50px;font-size:1.7rem;margin:0}#instafeed{-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:0;margin-right:0;list-style:none}#instafeed>*{padding:0;-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}@media (min-width:540px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:786px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}#instafeed a{overflow:hidden;position:relative;background-size:cover;background-position:center}.insta-image{position:absolute;top:0;left:0;right:0;bottom:0}.orchard{border-top:10px solid #e5e4e2;border-bottom:10px solid #e5e4e2;position:relative}.orchard .prefooter-content{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.orchard .prefooter-content img{width:50%;margin-top:-5%}.orchard img{width:100%}.prefooter{background:#e5e4e2;padding:0;position:relative}.prefooter .content{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}@media screen and (max-width:900px){.home-lineup .lineup-image{width:50%}.founders .content.emblem{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-webkit-transform:rotate(0deg);transform:rotate(0deg)}.founders .content.emblem img{margin:0 auto;max-width:200px}.founders .content.text{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin:0 auto;text-align:center}}@media screen and (max-width:600px){.home-lineup .lineup-image{display:none}.home-lineup .text{text-align:center}}.single-location-intro{position:relative}.single-location-intro:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.flex-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.location_callout{-ms-flex:0 0 400px;-webkit-box-flex:0;flex:0 0 400px;background:#f1f1ef;margin-left:40px;padding:30px;border:1px solid #e5e4e2}.location_callout h4{font-size:1.4rem;margin:10px 0}.location_callout p{margin:0}.location_callout li{font-size:1.6rem;font-weight:300}.callout_item{margin-bottom:40px}.callout_item:last-of-type{margin-bottom:0}.callout_item li,.callout_item p{line-height:1.6}.location_general{-ms-flex-positive:4;-webkit-box-flex:4;flex-grow:4;-ms-flex-preferred-size:0%;flex-basis:0%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.location_general p{margin:0}.location_features{-ms-flex-positive:1;-webkit-box-flex:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;-ms-flex-preferred-size:0%;flex-basis:0%}.location_images{width:100%;background:#708090;margin-top:2rem;position:relative}.image_holder{position:absolute;top:0;left:0;right:0;bottom:0}.images_reel_init .slick-list{padding:0}.images_reel_init ul.slick-dots{display:inline-block;position:absolute;bottom:20px;left:50%;cursor:pointer}.images_reel_init ul.slick-dots li:before{background:rgba(255,255,255,.8)}.images_reel_init ul.slick-dots li.slick-active:before{background:#fff}.features-list{-webkit-column-count:2;column-count:2;margin-top:30px;margin-bottom:15px}.features-list li{font-size:1.4rem;font-weight:500;text-transform:uppercase;position:relative;height:40px;line-height:40px;padding-left:50px;letter-spacing:.1rem;font-size:1.3rem;margin-bottom:10px;font-family:myriad-pro,serif;color:#a9a6a1}.features-list li span{position:absolute;top:0;left:0;bottom:0;width:40px}.features-list li span svg{fill:#a9a6a1}.features-list li.feature-link a{color:#a9a6a1;will-change:color;-webkit-transition:color .25s;transition:color .25s;cursor:pointer}.features-list li.feature-link svg{fill:#a9a6a1;will-change:fill;-webkit-transition:fill .25s;transition:fill .25s}.features-list li.feature-link:hover a{color:#d4a74d}.features-list li.feature-link:hover svg{fill:#d4a74d}.food-menu-link-wrapper{margin:20px 0}.food-menu-link-wrapper a{text-transform:none;font-weight:600;text-decoration:underline;color:#c69c54;letter-spacing:0;font-size:1.6rem}.special_hours_list li{padding:10px 0;font-size:1.6rem;border-bottom:1px solid gray}.special_hours_list li:last-of-type{border-bottom:none}.special_hours_list li span{display:block}.special_hours_list .day{display:block;font-weight:600;padding-bottom:3px}.email_link,.map_link,.phone_link{display:block;font-size:1.3rem;letter-spacing:.1rem;color:gray;height:16px;line-height:16px;position:relative;padding-left:20px;margin:10px 0}.email_link:before,.map_link:before,.phone_link:before{content:\"\";width:16px;height:16px;background:gray;position:absolute;top:0;left:0;display:block}.phone_link{margin-bottom:10px}#ajax-posts,#simple_posts{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin:20px -25px;list-style:none;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}#ajax-posts>*,#simple_posts>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.location-events{padding:6rem 0}.location-events #simple_posts{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.location-events #simple_posts>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.location-events #simple_posts>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.location-events #simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.location-events #simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.todays_hours_wrap{height:50px;background:#be9a5c;position:absolute;bottom:-50px;width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;color:#fff}.todays_hours_wrap a{letter-spacing:.1rem;color:#e5e4e2;margin-left:10px;height:30px;line-height:28px;display:inline-block;padding:0 10px;border:1px solid;font-weight:500}.hours_list{margin-bottom:20px}.hours_list_item .day{width:140px;display:inline-block;font-weight:600}#btn-spevent,.hours_wrapper a{color:#fff;display:inline-block;background:#c69c54;padding:0 10px;height:40px;line-height:40px;margin-top:20px;font-size:1.4rem;font-family:vinyl,serif;font-weight:700;letter-spacing:.15rem;border-radius:3px}.location-events{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.location-events .event-inner-wrap{display:block;background:#fff;-webkit-box-shadow:none;box-shadow:none;white-space:normal;height:100%;will-change:transform,box-shadow;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:box-shadow .35s,transform .35s;transition:box-shadow .35s,transform .35s,-webkit-box-shadow .35s,-webkit-transform .35s}.location-events .event-inner-wrap:hover{-webkit-box-shadow:0 0 12px rgba(0,0,0,.1);box-shadow:0 0 12px rgba(0,0,0,.1);-webkit-transform:translateY(-2px);transform:translateY(-2px)}.location-events .event_image_wrapper{margin-bottom:10px;background:gray}.location-events .event_info_wrapper{text-align:left;padding:10px}.location-events .event_info_wrapper p{margin:0;font-size:1.5rem;letter-spacing:.05rem}.location-events .event_info_wrapper h4{font-size:1.6rem;margin-bottom:5px;color:#19353b}.location-events .event_day,.location-events .event_time{display:block}@media screen and (max-width:1100px){.location_callout{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%;margin:0 auto;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.location_callout .address_wrapper{margin-right:40px}.location_callout .social_wrapper:after,.location_callout .social_wrapper:before{content:\"\";display:table;table-layout:fixed;clear:both}.location_callout .hours_wrapper{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%}.location_general{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-top:40px}.features-list{-webkit-column-count:3;column-count:3}}@media screen and (max-width:850px){.todays_hours_wrap h4{font-size:1.6rem;font-weight:500;letter-spacing:.15rem;text-align:center}.todays_hours_wrap h4 span{display:block}.features-list{-webkit-column-count:2;column-count:2}}@media screen and (max-width:786px){#simple_posts{-ms-flex-pack:start;-webkit-box-pack:start;justify-content:flex-start}}@media screen and (max-width:650px){.features-list{-webkit-column-count:1;column-count:1}}.single-cider-intro{background-color:#e5e4e2;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);position:relative}.single-cider-intro:after{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.content-cider-image{-ms-flex:0 0 320px;-webkit-box-flex:0;flex:0 0 320px;height:300px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-vat1.png);background-size:contain;background-position:50%;background-repeat:no-repeat;margin-right:40px}.bg-wild-cherry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-cherry.png)}.bg-blood-orange{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-blood-orange.png)}.bg-carolina-apple{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ca-apple.png)}.bg-carolina-draft{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ca-draft.png)}.bg-citrus{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-citrus.png)}.bg-ipa{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ipa.png)}.bg-orchard-frost{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-orchard-frost.png)}.bg-peach{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-peach.png)}.bg-pear{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-pear.png)}.bg-premium-dry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-premium-dry.png)}.bg-virginia-apple{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-va-apple.png)}.bg-virginia-draft{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-va-draft.png)}.bg-vintage-dry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-vintage-dry.png)}.bg-variety-crate{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-variety-crate.png)}.content-cider-info{-ms-flex:1;-webkit-box-flex:1;flex:1}.flip-container{-webkit-perspective:1000px;perspective:1000px;margin-left:35%}.flip-container.hover .flipper,.flip-container:hover .flipper{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.back,.flip-container,.front{width:320px;height:400px}.flipper{-webkit-transition:.6s;transition:.6s;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;position:relative}.back,.front{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:0;left:0}.back img,.front img{margin:0 auto;width:auto;max-height:100%}.front{z-index:2;-webkit-transform:rotateY(0deg);transform:rotateY(0deg);background-repeat:no-repeat}.back{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.info-specific{margin-top:40px;position:relative}.info-specific .avail-icon{display:block;width:100px;height:100px;position:absolute;top:-80px;right:-30px}.info-specific .avail-icon svg{fill:#a9a6a1}.cider-info-list{background:#fff;border:1px solid #cbc9c5;position:relative;margin-bottom:40px;text-align:left}.cider-info-list li{border-bottom:1px solid #cbc9c5;display:-ms-flexbox;display:-webkit-box;display:flex}.cider-info-list li:last-of-type{border-bottom:none}.cider-info-list li .cider-icon{width:60px;border-right:1px solid #cbc9c5}.cider-info-list li .cider-icon svg{height:60px;fill:#cbc9c5}.cider-info-list li .cider-content{-ms-flex:1;-webkit-box-flex:1;flex:1;padding:10px}.cider-info-list li .cider-content span{line-height:1.2}.cider-info-list li .cider-content .info-item-head{display:block;font-weight:600;font-size:1.4rem;text-transform:uppercase}.cider-info-list:after{content:\"\";position:absolute;bottom:-13px;left:-1px;right:-1px;height:14px;background-color:#cbc9c5;background:repeating-linear-gradient(45deg,#cbc9c5,#cbc9c5 8px,#bfbcb8 0,#bfbcb8 16px)}.mustache>p{display:inline-block;font-size:1.4rem;margin:0 auto;margin-right:20px;text-transform:uppercase;letter-spacing:.15rem;font-family:vinyl,serif}.find-this-wrapper{margin-top:40px}.find-this-wrapper .cider_finder_button{border-radius:3px;position:relative;background-color:#97928a;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;font-size:1.4rem;font-family:vinyl,serif;letter-spacing:.1rem}.find-this-wrapper .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}.find-this-wrapper .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#afaba5}.find-this-wrapper .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.find-this-wrapper .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}.find-this-wrapper .cider_finder_button:hover span{opacity:0}.other-ciders{padding:0;background:#e5e4e2;position:relative}.other-ciders:after{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.other-ciders h4{text-align:center;margin-bottom:20px}.other-ciders .cider_wrapper_inner{width:100%;padding:20px 30px}.other-ciders .cider_wrapper_inner a{font-family:vinyl,serif;color:#7d776d}.middle-stack{position:relative}.middle-stack:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.cider-recipes{background-color:#a9a6a1;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/recipes.jpg);background-size:cover;-ms-flex:1;-webkit-box-flex:1;flex:1;margin-left:10px;position:relative}.cider-recipes:before{background:rgba(126,119,109,.85);top:0;left:0;right:0;bottom:0;position:absolute;z-index:1;content:\"\";-webkit-transition:background .35s ease-in-out;transition:background .35s ease-in-out}.cider-recipes a{position:absolute;top:10px;left:10px;bottom:10px;right:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;padding:10px;border:1px solid #fff;text-align:center;z-index:2;color:#fff;-webkit-transition:color .35s,border .35s;transition:color .35s,border .35s}.cider-recipes h3{margin:0}.cider-recipes:hover:before{background:rgba(126,119,109,.4)}.cider-recipes:hover a{border:1px solid #fff;color:#fff}.a{-ms-flex:0 0 40%;-webkit-box-flex:0;flex:0 0 40%;background-color:#e5e4e2;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg-light.svg);background-size:cover}.a,.b{margin-bottom:10px}.b{-ms-flex-positive:0;-webkit-box-flex:0;flex-grow:0;-ms-flex-negative:0;flex-shrink:0;width:calc(60% - 10px);background:gray;margin-left:10px}.cider-video{-ms-flex:0 0 70%;-webkit-box-flex:0;flex:0 0 70%}.cider-page-header .outer-container{display:none}.cider-listing{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding:6rem 0}.cider-listing .outer-container{border-bottom:1px solid #e5e4e2}.cider-listing:last-of-type .outer-container{border-bottom:none}.cider-listing h2{text-align:center;margin-bottom:40px}.cider-listing .cider-archive-list{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.cider-listing .cider-archive-list>*{padding:20px;-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}@media (min-width:540px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.cider-listing .cider-image-holder{width:100%;height:270px;margin:0 auto}.cider-listing .cider-image-holder img{max-height:100%;width:auto}.cider-listing .cider-link h3{font-size:1.6rem;text-align:center;-webkit-transition:color .35s ease-in-out;transition:color .35s ease-in-out;font-family:vinyl,serif;text-transform:uppercase;color:#97928a}.cider-listing .cider-link img{margin:0 auto;margin-bottom:40px;-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0);-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.cider-listing .cider-link:hover h3{color:#2e8b57}.cider-listing .cider-link:hover img{-webkit-transform:scale(1.05) translateY(10px);transform:scale(1.05) translateY(10px)}.cider_list_images{width:100%;position:relative}.cider_list_images img{width:100%}@media screen and (max-width:1040px){.single-cider-intro .content-cider-image{margin:0 auto;margin-bottom:20px}.single-cider-intro .content-cider-info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%;text-align:center}.a{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;width:calc(50% - 5px);-ms-flex:0 0 calc(50% - 5px);-webkit-box-flex:0;flex:0 0 calc(50% - 5px);margin-bottom:10px;margin-right:5px}.b{-ms-flex-order:4;-webkit-box-ordinal-group:5;order:4;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.b,.cider-video{width:100%;margin:0}.cider-video{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-bottom:10px}.cider-recipes{-ms-flex-order:3;-webkit-box-ordinal-group:4;order:3;-ms-flex:0 0 calc(50% - 5px);-webkit-box-flex:0;flex:0 0 calc(50% - 5px);width:calc(50% - 5px);margin-bottom:10px;margin-left:5px}}@media screen and (max-width:700px){.a{margin-right:0}.a,.cider-recipes{width:100%;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.cider-recipes{margin-left:0;min-height:120px}.other-ciders{display:none}}.event_image_wrapper{width:100%;background:#fff;position:relative}.event_image_wrapper>*{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.event_image_wrapper>* img{width:100%}.archive-page-header{padding-top:120px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);text-align:center;border-bottom:1px solid #e5e4e2}.event-listings{position:relative}.event-listings .overlay-wrapper{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;background-size:contain;background-repeat:repeat}.event-listings .outer-container{z-index:2;position:relative}.post-type-archive-event .inner-container-f{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.post-type-archive-event .inner-container-f>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.post-type-archive-event .type-event .event-inner-wrap{display:inline-block;width:100%;background:#fff;-webkit-box-shadow:none;box-shadow:none;white-space:normal;-webkit-transform:translateY(0);transform:translateY(0);will-change:box-shadow,transform;-webkit-transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:box-shadow .35s,transform .35s;transition:box-shadow .35s,transform .35s,-webkit-box-shadow .35s,-webkit-transform .35s}.post-type-archive-event .type-event .event-inner-wrap:hover{-webkit-box-shadow:0 0 12px rgba(0,0,0,.1);box-shadow:0 0 12px rgba(0,0,0,.1);-webkit-transform:translateY(-2px);transform:translateY(-2px)}.post-type-archive-event .type-event .event_info_wrapper{padding:10px}.post-type-archive-event .type-event h4.event-title{margin:0;margin-bottom:5px;color:#7d776d}.post-type-archive-event .type-event p{margin:0;text-transform:none;font-size:1.5rem;letter-spacing:.05rem}.post-type-archive-event .chiles-events .event_info_wrapper{border-bottom:5px solid #973b15}.post-type-archive-event .nellysford-events .event_info_wrapper{border-bottom:5px solid #d4a74d}.post-type-archive-event .mills-events .event_info_wrapper{border-bottom:5px solid #973b15}.post-type-archive-event .carter-events .event_info_wrapper{border-bottom:5px solid #19353b}.post-type-archive-event .offsite-events .event_info_wrapper{border-bottom:5px solid #c69c54}.single-event h1{margin-top:-8px;line-height:1.2;margin-bottom:10px;font-size:42px}.single-event h5{font-size:20px}.single-event .icon-separator{width:8px;height:8px;display:inline-block;background:#d4a74d;margin:0 10px;margin-bottom:3px}.single-event .event_image_wrapper{margin-bottom:10px}.single-event .event_info .event-meta{background:#f8f8f8;border:1px solid #e5e4e2;margin-left:40px;padding:20px 3em;height:100%}.single-event .event_info .event-meta li{padding:10px 0}.single-event .list-head{display:block;text-transform:uppercase;font-family:vinyl,serif}.single-event .breadcrumbs-wrapper{background-color:transparent;margin-bottom:20px}@media screen and (max-width:1040px){.single-event .event_blurb,.single-event .event_info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.single-event .event_info{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-bottom:20px}.single-event .event_info .event-meta{margin:0;padding:20px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.single-event .event_info .event-meta li{-ms-flex:0 0 50%;-webkit-box-flex:0;flex:0 0 50%;padding:10px}.single-event .event_info .event-meta li:nth-of-type(2){-ms-flex-order:3;-webkit-box-ordinal-group:4;order:3}.single-event .event_info .event-meta li:nth-of-type(3){-ms-flex-order:4;-webkit-box-ordinal-group:5;order:4}}#changeme span{font-size:1.8rem;display:block}.event-listings-head{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.plink{display:inline-block;height:24px;line-height:24px;padding-right:10px;padding-left:25px;position:relative;font-family:myriad-pro,serif;letter-spacing:.15rem;font-size:1.1rem;font-weight:700;will-change:color;-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}.plink span{width:20px;height:20px;display:block;position:absolute;left:0;top:2px}.plink span svg{will-change:fill;-webkit-transition:fill .2s ease-in-out;transition:fill .2s ease-in-out;fill:#7d776d}.plink:hover{color:#973b15}.plink:hover span svg{fill:#973b15}.event-listings .outer-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:start;-webkit-box-align:start;align-items:flex-start}.event-listings .event-list{-ms-flex:1;-webkit-box-flex:1;flex:1}.event-listings .filter-list{-ms-flex:0 0 25%;-webkit-box-flex:0;flex:0 0 25%;margin-left:40px;min-width:250px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);border:1px solid #e5e4e2}.event-listings .filter-list .filter-list-inner{padding:20px;text-align:center}.event-listings .filter-list .filter-list-inner h4{margin-bottom:10px}.event-listings .filter-list .btn-val{display:block;width:100%;margin:0 auto;height:30px;border:1px solid #a9a6a1;background-color:transparent;margin-bottom:5px;outline:0;font-size:1.2rem;-webkit-transform:translateX(0);transform:translateX(0);will-change:transform,background;-webkit-transition:all .25s ease-in-out;transition:all .25s ease-in-out}.event-listings .filter-list .btn-val:last-of-type{margin-bottom:0}.event-listings .filter-list .btn-val:hover{-webkit-transform:translateX(2px);transform:translateX(2px)}.event-listings .filter-list .btn-val.is-active{background-color:#a9a6a1;color:#fff}.event-card{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-bottom:4rem}.event-card-left{position:relative;-ms-flex:0 0 40%;-webkit-box-flex:0;flex:0 0 40%;min-width:300px}.event-card-left .event_image{position:absolute;top:0;left:0;right:0;bottom:0}.event-card-right h4{font-family:vinyl,serif}.event-card-right h3{margin:0}.event-card-right p{margin:0;line-height:1.3}.event-card-right a{margin:20px 0;display:inline-block;color:#973b15;font-family:vinyl,serif;font-size:1.4rem}.event-card-right{-ms-flex:1;-webkit-box-flex:1;flex:1}.event-card-right .event-card-inner{padding-left:20px}@media screen and (max-width:900px){.archive-page-header{padding-top:60px}}@media screen and (max-width:1040px){.event-listings .event-list{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.event-listings .filter-list{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-left:0;margin-bottom:40px}.event-listings .filter-list .filter-list-inner{text-align:left}.event-listings .filter-list .btn-val{display:inline-block;width:auto}}@media screen and (max-width:800px){.single-event h5{font-size:1.4rem}.single-event .event_info .event-meta li{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;padding:10px}}@media screen and (max-width:650px){.event-listings-head{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.event-listings-head h1#changeme{text-align:center}.event-listings-head .events-list-buttons{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;text-align:center}.event-listings .filter-list .filter-list-inner{text-align:center}.event-listings .filter-list .filter-list-inner .btn-val{width:100%}.event-card-left{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.event-card-right .event-card-inner{padding-left:0;padding-top:20px}}.locations-listings{position:relative}.locations-listings:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.locations-listing{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.locations-listing>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}.locations-listing .location-image-wrap{background-color:#f0fff0;position:relative}.locations-listing .location-image-wrap .seasonal-taproom-banner{background:#d4a74d;padding:10px;color:#fff;font-family:vinyl,serif;font-size:1.4rem;position:absolute;top:0;left:0}.locations-listing .location-image-wrap .location-thumbnail{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.locations-listing .location-image-wrap .location-thumbnail img{will-change:transform;-webkit-transform:scale(1);transform:scale(1);-webkit-transition:-webkit-transform .75s;transition:-webkit-transform .75s;transition:transform .75s;transition:transform .75s,-webkit-transform .75s}.locations-listing .location-image-wrap .location-thumbnail:hover img{-webkit-transform:scale(1.03);transform:scale(1.03)}.locations-listing h3{margin:20px 0;color:#19353b}.locations-listing p{text-transform:none;letter-spacing:.05rem;white-space:normal}.location-details .icon-link{color:#7d776d;font-family:adelle,serif}.location-details .icon-link span svg{fill:#7d776d}.cider-review-wrapper .quote-inner-wrapper{width:100%;height:100%;padding:10px 20px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.cider-review-wrapper .quote-inner-wrapper .top{width:100%;height:60px;position:relative}.cider-review-wrapper .quote-inner-wrapper .top .quote-icon{height:40px;width:40px;position:absolute;top:50%;margin-top:-20px;left:50%;margin-left:-20px}.cider-review-wrapper .quote-inner-wrapper .top .quote-icon svg{fill:#97928a}.cider-review-wrapper .quote-inner-wrapper .top:before{left:0}.cider-review-wrapper .quote-inner-wrapper .top:after,.cider-review-wrapper .quote-inner-wrapper .top:before{width:calc(50% - 20px);height:1px;background:#97928a;position:absolute;top:50%;margin-top:-.5px;border-radius:2px;content:\"\"}.cider-review-wrapper .quote-inner-wrapper .top:after{right:0}.cider-review-wrapper .quote-inner-wrapper .quote-content{text-align:center}.cider-review-wrapper .quote-inner-wrapper .quote-content p{font-size:1.7rem;margin:0}.cider-review-wrapper .quote-inner-wrapper .bottom{width:100%;height:60px;position:relative}.cider-review-wrapper .quote-inner-wrapper .bottom:before{width:100%;height:1px;background:#a9a6a1;position:absolute;top:50%;margin-top:-.5px;left:0;border-radius:2px;content:\"\"}.no-hero-header{background:#f7f7f7;text-align:center}.blog-list-item{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:40px 0;border-bottom:2px solid #edebea}.blog-list-item-info{-ms-flex:1 0 66.666%;-webkit-box-flex:1;flex:1 0 66.666%}.blog-list-item-info .bli-cat,.blog-list-item-info a{color:#c69c54;font-family:myriad-pro,serif;font-size:1.4rem;font-weight:600}.blog-list-item-info a{letter-spacing:.15rem;display:inline-block;margin-top:20px}.blog-list-item-info h3{margin:5px 0}.blog-list-item-info .bli-meta{font-size:1.4rem;margin-bottom:10px}.blog-list-item-info .bli-excerpt{padding-right:60px}.blog-list-item-image{-ms-flex:1 0 33.333%;-webkit-box-flex:1;flex:1 0 33.333%}.link-button{display:inline-block;color:#fff;text-transform:uppercase;background-color:#a9a6a1;font-family:vinyl,serif;padding:5px 15px;border-radius:2px;font-size:1.3rem;letter-spacing:.15rem;-webkit-transition:background-color .25s ease-in-out;transition:background-color .25s ease-in-out}.link-button:hover{background-color:#9d9994;color:#fff}@media screen and (max-width:767px){.blog-list-item-info{-ms-flex:1 0 100%;-webkit-box-flex:1;flex:1 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.blog-list-item-image{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-bottom:20px}}.breadcrumbs-wrapper{background:#f1f1ef;height:40px;line-height:40px}figure{margin:0}figcaption.wp-caption-text{font-size:1.5rem;padding:5px 0;font-style:italic}img.alignright{float:right;margin:0 0 1em 1em}img.alignleft{float:left;margin:0 1em 1em 0}img.aligncenter{display:block;margin-left:auto;margin-right:auto}.alignright{float:right;margin-left:40px}.alignleft{float:left;margin-right:40px}.aligncenter{display:block;margin-left:auto;margin-right:auto}.entry-title{margin:0}.entry-meta{font-size:1.4rem;font-style:italic}.the-post-content{margin-top:30px}.the-post-footer{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;margin-top:30px}.tags-icon{width:20px;height:20px;display:inline-block}.tags-icon svg{fill:gray}.tag-list>li{display:inline-block}.tag-list>li a{font-size:1.4rem;font-weight:300;letter-spacing:0;text-transform:none;color:gray}.tag-list>li:after{content:\",\";padding-right:5px}.tag-list>li:last-of-type:after{content:\"\"}.recipe-image-wrapper{position:relative;width:40%;max-width:400px;margin-left:40px}.recipe-image-wrapper>*{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.recipe-image-wrapper>* img{width:100%}.recipe-meta{-ms-flex:1;-webkit-box-flex:1;flex:1}.recipe-meta .breadcrumb{margin-bottom:10px}.recipe-meta .recipe-details{margin-top:20px}.recipe-meta .recipe-details p{margin:0}.recipe-meta .recipe-details p.recipe-description{margin:10px 0}.the-recipe-ingredients h4{margin-bottom:10px}.recipe-ingredients-list{list-style-type:disc;padding-left:20px}.the-recipe-directions{margin-top:20px}.the-recipe-directions h4{margin-bottom:10px}.the-recipe-source{margin-top:10px}.post-wrapper-Recipes{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.post-wrapper-Recipes>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.post-wrapper-Recipes .blog-list-item{border-bottom:none;padding:0}.post-wrapper-Recipes .blog-list-item a{margin:20px 0;font-family:vinyl,serif;color:#7d776d;font-size:1.6rem;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.post-wrapper-Recipes .blog-list-item a:hover{-webkit-transform:translateX(2px);transform:translateX(2px)}@media screen and (max-width:1000px){.recipe-meta{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.recipe-image-wrapper{width:100%;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-left:0;margin-bottom:10px}}.question{position:relative;margin-bottom:20px}.question:hover{cursor:pointer}.question h4{display:block;width:100%;padding-left:40px;line-height:40px;position:relative}.question .faq-icon{width:24px;height:24px;display:inline-block;position:absolute;top:8px;left:4px;fill:#7d776d;-webkit-transform:rotate(0deg);transform:rotate(0deg);-webkit-transition:-webkit-transform .35s;transition:-webkit-transform .35s;transition:transform .35s;transition:transform .35s,-webkit-transform .35s}.answer{max-height:0;overflow:hidden;-webkit-transition:max-height .25s ease-in-out;transition:max-height .25s ease-in-out}.answer p{width:100%;margin:0;padding:0 0 20px 40px}.question.is-expanded .faq-icon{-webkit-transform:rotate(45deg);transform:rotate(45deg);fill:#973b15}@media screen and (max-width:1000px){.question h4{display:block;width:100%;padding-left:40px;line-height:1.4}}.about-intro{position:relative}.about-intro:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.about-image-grid{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.about-image-grid .content{margin:0 10px}.about-quote-text{text-align:center}.about-quote-text h3{display:inline-block;line-height:50px;border-top:2px solid #973b15;border-bottom:2px solid #973b15;text-transform:uppercase;font-size:2.4rem;letter-spacing:.15rem;color:#973b15;font-family:vinyl,serif}.about-grid .outer-container-full{position:relative;background-size:cover}.about-grid .container-overlay{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background:rgba(0,0,0,.2);-ms-flex-pack:start;-webkit-box-pack:start;justify-content:flex-start}.about-grid .container-overlay .content{width:500px;margin-left:15%}.about-grid .container-overlay h2{color:#fff;text-transform:uppercase;font-size:64px}.about-bottom-text{position:relative}.about-bottom-text:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.stop-by .outer-container-full{position:relative;background-size:cover;background-repeat:no-repeat}.stop-by .container-overlay{position:absolute;top:0;left:0;right:0;bottom:0;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background:rgba(0,0,0,.25);-ms-flex-pack:end;-webkit-box-pack:end;justify-content:flex-end}.stop-by .container-overlay,.stop-by .container-overlay .content{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.stop-by .container-overlay .content{width:400px;margin-right:15%;background:#f1f1ef;border-radius:3px;padding:20px;text-align:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.stop-by .container-overlay .content p{margin-top:10px}@media screen and (max-width:900px){.stop-by .container-overlay{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.stop-by .container-overlay .content{margin:0}}@media screen and (max-width:700px){.about-image-grid .content{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-bottom:20px}.about-image-grid .content:last-of-type{margin-bottom:0}.about-image-grid .content img{width:100%}.about-quote-text h3{line-height:30px}.about-grid .container-overlay h2{font-size:36px;text-align:center}.about-grid .container-overlay .content{margin:0 auto;width:70%}.stop-by .outer-container-full{min-height:300px}.stop-by .container-overlay .content{margin:0 auto;width:90%}}.cider101-intro{background:#f2f2f2}.process-slider{width:80%;max-width:550px;margin:0 auto;text-align:center}.process-slider .slick-dots{position:relative;padding:0 40px}.process-slider .slick-dots:after{content:\"\";width:100%;position:absolute;top:50%;margin-top:-1px;height:2px;background:#7d776d;left:0;border-radius:2px;z-index:-1}.process-slider .slick-dots li:before{display:none}.process-slider .slick-dots li{width:24px;height:24px;border-radius:100%;border:2px solid #7d776d;background:#fff;text-align:center;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;cursor:pointer}.process-slider .slick-dots li a{letter-spacing:0;font-size:1.1rem;line-height:23px;height:22px;color:#7d776d;font-family:vinyl,serif}.process-slider .slick-dots li.slick-active{background:#7d776d}.process-slider .slick-dots li.slick-active a{color:#fff}.process-slide{padding:20px}.process-slide .process-description-wrapper{margin-top:10px}.cider-facts{background:#5e5952;padding:6rem 0}.cider-facts h3{color:#fff;text-align:center}.fact-wrapper{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.fact-wrapper>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.fact-wrapper>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:786px){.fact-wrapper>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:1140px){.fact-wrapper>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.fact-wrapper h4{height:40px;line-height:40px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;color:#fff}.fact-wrapper h4 .icon{display:inline-block;width:20px;height:20px;margin-right:5px}.fact-wrapper h4 .icon svg{fill:#fff}.fact-wrapper p{padding-left:25px;margin:0;color:#f2f2f2}.inner-container-f .commit-column{display:-ms-flexbox;display:-webkit-box;display:flex;padding:10px;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.inner-container-f .commit-column .event_image_wrapper{width:60%}.inner-container-f .commit-column .quote-text{margin-left:20px;-ms-flex:1;-webkit-box-flex:1;flex:1}.inner-container-f .commit-column .blurb-text{margin-right:20px;-ms-flex:1;-webkit-box-flex:1;flex:1}.callout-wrapper{background:#f1f1ef;padding:20px;position:relative;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.callout-wrapper:after{content:\"\";position:absolute;top:10px;left:10px;right:10px;bottom:10px;border:1px solid #e5e4e2}.callout-wrapper p{margin:0;text-align:center}.values{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.values .value{background:#fff;border:1px solid #e5e4e2;position:relative;margin:10px 0}.values .value .heading{width:200px;position:absolute;top:0;left:0;bottom:0;border-right:1px solid #e5e4e2;padding:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.values .value .heading span{position:absolute;top:0;left:0;right:0;bottom:0}.values .value .heading span svg{fill:rgba(151,59,21,.2)}.values .value .heading h4{position:relative;z-index:2}.values .value .content{padding:20px 20px 20px 220px}@media screen and (max-width:900px){.inner-container-f .commit-column{-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.inner-container-f .commit-column .event_image_wrapper{width:100%;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1}.inner-container-f .commit-column .quote-text{margin-left:0;margin-top:20px;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.inner-container-f .commit-column .blurb-text{margin-right:0;margin-top:20px;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}}@media screen and (max-width:700px){.values .value{padding-top:80px}.values .value .heading{width:100%;border-right:none;border-bottom:1px solid #e5e4e2;height:80px}.values .value .content{text-align:center;padding-left:20px}}.story-intro{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.history-banner{position:absolute;top:-15px;left:50%;margin-left:-65px;width:130px;height:30px}.history-banner img{width:100%}.our-history{position:relative}.our-history:before{content:\"\";width:1px;background:#e5e4e2;position:absolute;top:0;bottom:0;left:50%}.history-wrap{max-width:1000px;margin:0 auto}.history-item{display:-ms-flexbox;display:-webkit-box;display:flex;padding:8rem 0;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between;-ms-flex-wrap:wrap;flex-wrap:wrap;opacity:0;position:relative;-webkit-transform:translateY(50px);transform:translateY(50px);-webkit-transition:all 1s ease-out;transition:all 1s ease-out}.history-item .history-head{position:absolute;top:0;right:0;left:0;text-align:center}.history-item .history-head .history-head-content{display:inline-block;background:#f1f1ef;border:1px solid #e5e4e2;height:26px;line-height:26px;width:100px;text-align:center;font-size:1.4rem;font-family:vinyl,serif;text-transform:uppercase;color:#a9a6a1}.history-item .side-one{-ms-flex:1;-webkit-box-flex:1;flex:1;margin-right:20px;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1}.history-item .side-one .event_image_wrapper{background:#fff}.history-item .side-two{-ms-flex:0 0 45%;-webkit-box-flex:0;flex:0 0 45%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin-right:0;margin-left:40px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;background:#fff}.history-item:nth-child(odd) .side-one{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin-left:20px;margin-right:0}.history-item:nth-child(odd) .side-two{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-right:40px;margin-left:0}.history-item.fade-in{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}@media screen and (max-width:960px){.history-wrap{max-width:600px}.history-item{margin:4rem 0}.history-item .side-one,.history-item .side-two{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin:0;text-align:center}.history-item:nth-child(odd) .side-one{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin:0}.history-item:nth-child(odd) .side-two{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin:0}}.contact-blurb{-ms-flex:1;-webkit-box-flex:1;flex:1}.contact-info{margin-left:50px}@media screen and (max-width:700px){.contact-blurb,.contact-info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.contact-info{margin-left:0}}.contact-form{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding:6rem 0}.popup-item-wrap{position:relative;display:inline-block;margin-right:10px}.popup-item-wrap .popup-item-emblem-wrap{width:70px;height:70px}.popup-item-wrap .popup-item-emblem-wrap a.popup-item-emblem{cursor:pointer}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem{width:70px;height:70px;display:inline-block;position:relative}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem svg{fill:#d4a74d}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count{position:absolute;top:0;left:0;right:0;bottom:0;font-family:vinyl,serif;color:#fff;padding-top:14px}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count span{display:block;text-align:center;line-height:1;font-size:10px;text-transform:uppercase}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count span.number{font-size:18px}.popup-item-wrap .popup-item-emblem-wrap .popup-triangle{display:none;width:0;height:0;position:absolute;border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid #fff;bottom:-10px;left:25px;z-index:3;opacity:0;-webkit-transition:opacity .25s;transition:opacity .25s}.popup-item-wrap .popup-item-content{display:none;width:200px;background:#fff;padding:20px;position:absolute;top:100%;-webkit-transform:translate(-50%,10px);transform:translate(-50%,10px);margin-left:35px;-webkit-box-shadow:1px 2px 2px 0 rgba(0,0,0,.1);box-shadow:1px 2px 2px 0 rgba(0,0,0,.1);z-index:2;opacity:0;-webkit-transition:opacity .25s;transition:opacity .25s;text-align:center}.popup-item-wrap:hover .popup-item-content,.popup-item-wrap:hover .popup-item-emblem-wrap .popup-triangle{display:inline-block;opacity:1}.awards-wrap{margin-top:20px}.awards-header{padding-bottom:10px;padding-top:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:end;-webkit-box-align:end;align-items:flex-end;margin-bottom:10px}.awards-header h2{margin:0;font-size:2rem}ul.awards-items-list{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;border:1px solid #e5e4e2}ul.awards-items-list li.awards-item{background:#fff;width:50%;padding:10px;padding-left:30px;border-top:1px solid #e5e4e2;position:relative;font-size:1.4rem}ul.awards-items-list li.awards-item:first-child,ul.awards-items-list li.awards-item:nth-child(2){border-top:none}ul.awards-items-list li.awards-item span{position:absolute;width:20px;height:20px;background-size:cover;background-position:50%;background-repeat:no-repeat;top:50%;margin-top:-11px;left:5px}ul.awards-items-list li.awards-item span.award-icon-gold{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/gold-medal.png)}ul.awards-items-list li.awards-item span.award-icon-silver{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/silver-medal.png)}ul.awards-items-list li.awards-item span.award-icon-bronze{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bronze-medal.png)}ul.awards-items-list:after{height:100%;content:\"\";width:1px;background:#e5e4e2;position:absolute;top:0;left:50%}.awards-items-trigger{width:100%;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;background:#cbc9c5;color:#fff;font-family:vinyl,serif;text-transform:uppercase;text-align:center;padding:5px 0;position:relative;z-index:2;margin-top:10px}.awards-items-trigger:before{content:\"Show More\"}.awards-items-trigger.show-less:before{content:\"Show Less\"}@media screen and (max-width:1140px){ul.awards-items-list:after{display:none}ul.awards-items-list li.awards-item{width:100%}ul.awards-items-list li.awards-item:nth-child(2){border-top:1px solid #e5e4e2}}.finder-intro .inner-container-b{margin-bottom:10px}.finder-intro .iframe-wrapper iframe{position:static;width:100%;max-width:100%}.sc_clearfix:after{content:\"\";display:table;table-layout:fixed;clear:both}#sc_calendar table{width:100%;border-collapse:collapse;float:left}#sc_calendar th{background:#fdfdfd;text-align:center;text-transform:capitalize;padding:3px 4px!important;font-size:1.2rem}#sc_calendar td,#sc_calendar th{width:13.25%;border:1px solid #ddd}#sc_calendar td{font-size:11px;padding:0!important}#sc_calendar td.calendar-day{background:#fbfbfb;height:40px}#sc_calendar td.calendar-day-np{background:#f0f0f0}#sc_calendar td div.sc_day_div{padding:8px}#sc_events_calendar_head{padding:8px;background:#f0f0f0;border:1px solid #ddd;border-bottom:0}#sc_event_nav_wrap,#sc_event_select,#sc_events_calendar_head h2{width:33%;float:left;margin:0;clear:none}#sc_event_nav_wrap{text-align:right}#sc_event_nav_wrap form{display:inline;text-align:right}#sc_events_calendar_head h2{text-align:center;line-height:26px;font-size:1.8rem}#sc_events_calendar_head select{font-size:.7rem}#sc_events_calendar_head input{font-size:1rem;padding:2px 10px}#sc_events_calendar input,#sc_events_calendar select{margin:0 5px 0 0}.sc_small #sc_event_nav_wrap{margin:8px 0 0}.sc_small #sc_event_nav_wrap,.sc_small #sc_event_select{float:none;width:100%}.sc_small #sc_calendar td div{padding:1px}.sc_small #sc_event_nav_next,.sc_small #sc_event_nav_prev{display:block;width:50%;float:left}.sc_small #sc_event_nav_prev{text-align:left}#sc_calendar td div.day-number{float:right;margin:-6px -4px 0 0}.sc_small #sc_calendar td div.day-number{float:none;text-align:right;padding:0;margin:-3px 1px 0 0}.sc_event_details{margin:0 0 15px}.sc_events_list .sc_event{clear:both}.sc_events_list .sc_event_categories,.sc_events_list .sc_event_date,.sc_events_list .sc_event_link,.sc_events_list .sc_event_time,.sc_events_list .sc_event_title{float:left;clear:left}.sc_events_calendar a{white-space:normal;padding-top:2px;font-size:1.2rem;text-transform:none;color:#973b15}#content .inner-container{overflow:hidden}@media only screen and (max-width:680px){.sc-table{overflow:hidden}.sc-table th{display:none}#content .sc-table tr td{display:block;text-align:left;padding-left:50%;width:auto}.sc-table td:first-child{padding-top:.5em}.sc-table td:last-child{padding-bottom:.5em}.sc-table td:first-child{background-color:rgba(0,0,0,.1)}#sc_calendar td.calendar-day{height:auto;overflow:hidden}#sc_calendar .sc-table td.calendar-day-np{display:none}#sc_calendar td div.day-number{float:left;margin:0 5px 5px 0}#sc-calendar .sc-table .sc_day_div{overflow:hidden}#sc_events_calendar_head h2{width:100%;margin:0 0 10px}#sc_event_nav_wrap{text-align:center;margin:0 auto;float:none}#sc_event_nav_wrap form{display:inline;text-align:center}}.all-media .inner-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.all-media .inner-container>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.all-media .inner-container>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:786px){.all-media .inner-container>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.all-media .inner-container>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}a.button{padding:0 40px;background:0 0;text-decoration:none;color:#19353b;text-transform:uppercase;font-weight:700;letter-spacing:.2rem;font-size:14px;font-size:1.4rem;-webkit-transition:-webkit-transform .25s ease-in-out;transition:-webkit-transform .25s ease-in-out;transition:transform .25s ease-in-out;transition:transform .25s ease-in-out,-webkit-transform .25s ease-in-out}.icon-button,a.button{display:inline-block;height:40px;line-height:40px}.icon-button{background:gray;padding:0 30px;padding-right:55px;position:relative;color:#fff}.icon-button .button-text{display:inline-block}.icon-button .button-icon{width:20px;height:20px;background:#00f;display:inline-block;position:absolute;top:50%;margin-top:-10px;right:25px;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.icon-button:hover{color:#fff}.icon-button:hover .button-icon{-webkit-transform:translateX(3px);transform:translateX(3px);opacity:1;-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.slideButton{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px}.slideButton:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0}.slideButton:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.slideButton:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.slideButton:hover:after{-webkit-animation:r .4s;animation:r .4s}.slideButton:hover span{opacity:0}@-webkit-keyframes q{0%{-webkit-transform:translateY(0);transform:translateY(0)}50%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:1}51%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:0}52%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:0}53%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:1}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes q{0%{-webkit-transform:translateY(0);transform:translateY(0)}50%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:1}51%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:0}52%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:0}53%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:1}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes r{0%{-webkit-transform:translateY(0);transform:translateY(0)}to{-webkit-transform:translateY(-200%);transform:translateY(-200%)}}@keyframes r{0%{-webkit-transform:translateY(0);transform:translateY(0)}to{-webkit-transform:translateY(-200%);transform:translateY(-200%)}}.share-buttons{display:none}a{text-transform:uppercase;text-decoration:none;white-space:nowrap;font-size:inherit;color:#7d776d;cursor:pointer}a:active,a:focus,a:hover{outline:0}a.link{height:40px;line-height:40px;margin-top:20px}a.link,a.maplink{display:inline-block;position:relative}a.maplink{height:24px;padding-right:25px;padding-left:10px;line-height:24px;font-family:myriad-pro,serif;font-weight:600;letter-spacing:.1rem;font-size:1.3rem;margin:5px 0;color:#fff;background:#97928a;border-radius:3px}a.maplink span{width:20px;height:20px;display:block;position:absolute;top:2px;right:0;will-change:transform}a.maplink span svg{fill:#fff}a.maplink:hover span{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:n;animation-name:n;-webkit-transform-origin:center bottom;transform-origin:center bottom}a.emaillink{text-transform:none;color:inherit}.breadcrumb{font-family:vinyl,serif;font-size:1.4rem;text-transform:uppercase}.breadcrumb a{color:#7d776d}.breadcrumb .current{color:#97928a}a.arrow-button{display:inline-block;height:30px;line-height:30px;position:relative;text-transform:none;font-weight:600;font-size:1.6rem;color:#973b15;margin:20px 0}a.arrow-button span{width:30px;height:30px;display:block;position:absolute;top:0;right:-35px;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}a.arrow-button span svg{fill:#973b15}a.arrow-button:hover span{-webkit-transform:translateX(3px);transform:translateX(3px)}.button-bg{background:#19353b;padding:5px 45px 5px 15px;display:inline-block;border-radius:3px;margin-top:10px}.button-bg a.arrow-button{color:#fff;margin:0}.button-bg a.arrow-button span svg{fill:#fff}.home-lineup a.arrow-button{color:#e5e4e2;margin:5px 0;font-size:2rem;letter-spacing:.05rem}.home-lineup a.arrow-button span svg{fill:#e5e4e2}.icon-link{display:block;line-height:30px;position:relative;padding-left:35px;font-size:1.6rem;font-family:vinyl,serif;color:#973b15;text-transform:uppercase;margin:5px 0}.icon-link span{width:30px;height:30px;display:block;position:absolute;top:0;left:0}.icon-link span svg{fill:#973b15}.inline-link,p>a{text-transform:none;color:#d4a74d;-webkit-transition:color .2s;transition:color .2s;font-weight:600}.inline-link:hover,p>a:hover{color:#a9a6a1}.email-link,.phone-link{font-size:1.6rem;color:#7d776d;display:block;line-height:30px;position:relative;padding-left:35px;text-transform:none}.email-link span,.phone-link span{width:30px;height:30px;display:block;position:absolute;top:0;left:0}.email-link span svg,.phone-link span svg{fill:#7d776d}input[type=color],input[type=date],input[type=datetime-local],input[type=datetime],input[type=email],input[type=month],input[type=number],input[type=password],input[type=range],input[type=search],input[type=tel],input[type=text],input[type=time],input[type=url],input[type=week],textarea{color:#97928a;border:1px solid #e5e4e2;border-radius:3px;padding:3px}input[type=color]:focus,input[type=date]:focus,input[type=datetime-local]:focus,input[type=datetime]:focus,input[type=email]:focus,input[type=month]:focus,input[type=number]:focus,input[type=password]:focus,input[type=range]:focus,input[type=search]:focus,input[type=tel]:focus,input[type=text]:focus,input[type=time]:focus,input[type=url]:focus,input[type=week]:focus,textarea:focus{color:#973b15;border:1px solid #973b15;outline:0}select{border:1px solid #e5e4e2}textarea{width:100%}::-webkit-input-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}::-moz-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}:-ms-input-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}:-moz-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}#gform_1 .gfield_label{display:none}#gform_1 input[type=submit]{border:0;font-size:1.4rem;font-family:vinyl,serif;color:#fff;background:#973b15;padding:10px 20px;text-transform:uppercase;border-radius:3px}.newsletter_form form input[type=email]:focus,.newsletter_form form input[type=text]:focus{color:#e5e4e2;outline:0;border:0}.newsletter_form form ::-webkit-input-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form ::-moz-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form :-ms-input-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form :-moz-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}@media screen and (min-width:786px){.split-list ul{-webkit-column-count:2;column-count:2}}#gform_2 ::-webkit-input-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 ::-moz-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 :-ms-input-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 :-moz-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 input[type=submit]{border:0;font-size:1.4rem;font-family:vinyl,serif;color:#fff;background:#973b15;padding:10px 20px;text-transform:uppercase;border-radius:3px}#gform_2 .gform_wrapper .top_label .gfield_label{display:none!important}#gform_2 .gfield_radio label{color:#7d776d;font-family:adelle,serif;font-size:1.4rem}#gform_2 .gfield_label{color:#97928a;font-size:1.4rem;font-family:myriad-pro,serif;letter-spacing:.15rem;text-transform:uppercase;font-weight:600}@media screen and (max-width:768px){#gform_2 .se-no-label .gfield_label{display:none}#gform_2 ::-webkit-input-placeholder{color:#7d776d}#gform_2 ::-moz-placeholder{color:#7d776d}#gform_2 :-ms-input-placeholder{color:#7d776d}#gform_2 :-moz-placeholder{color:#7d776d}}.overflow-hidden{overflow:hidden}.hours-modal{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(202,200,196,.9);display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;z-index:3000;overflow-y:auto;cursor:pointer;visibility:hidden;opacity:0;-webkit-transition:opacity .3s 0,visibility 0 .3s;transition:opacity .3s 0,visibility 0 .3s}.hours-modal-container{position:relative;width:90%;max-width:600px;background:rgba(228,227,226,.6);cursor:auto;border-radius:.25em;-webkit-transform:translateY(-30px);transform:translateY(-30px);-webkit-transition-property:-webkit-transform;transition-property:-webkit-transform;transition-property:transform;transition-property:transform,-webkit-transform;-webkit-transition-duration:.3s;transition-duration:.3s}#hours-food,#hours-special,#special-event{display:none;padding:30px;background:rgba(255,255,255,.9);-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,.15);box-shadow:0 0 5px 0 rgba(0,0,0,.15);max-height:70vh;overflow:scroll}.hours-modal.is-visible{visibility:visible;opacity:1;-webkit-transition:opacity .3s 0,visibility 0 .3s;transition:opacity .3s 0,visibility 0 .3s}.hours-modal.is-visible .hours-modal-container{-webkit-transform:translateY(0);transform:translateY(0)}#hours-food.is-selected,#hours-special.is-selected,#special-event.is-selected,.close-hrs{display:block}.close-hrs{position:absolute;width:40px;height:40px;right:0;top:-40px;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/148866/cd-icon-close.svg) no-repeat 50%;text-indent:100%;white-space:nowrap;overflow:hidden}.sphrs_inner_wrap h3{font-family:vinyl,serif;font-size:2rem;text-transform:uppercase;border-bottom:1px solid #e5e4e2}@media only screen and (min-width:600px){.cd-user-modal-container{margin:4em auto}.sphrs_inner_wrap h3{font-size:2.6rem}}img{height:auto;max-width:100%;border:0;outline:0;display:block}.aspect{width:100%;z-index:-10;position:relative;opacity:0}svg{height:100%;width:100%;display:block}.spriteSheet{max-height:0}.spinner-logo{width:150px;height:150px}.social{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.social li{display:inline-block;width:28px;height:28px;background-color:rgba(255,255,255,.8);border-radius:100%;margin:0 10px;cursor:pointer;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:background-color .25s,-webkit-transform .25s;transition:background-color .25s,-webkit-transform .25s;transition:transform .25s,background-color .25s;transition:transform .25s,background-color .25s,-webkit-transform .25s}.social li:first-of-type{margin-left:0}.social li:last-of-type{margin-right:0}.social li a{width:20px;height:20px;margin:4px;display:block}.social li:hover{background-color:#fff;-webkit-transform:translateY(-2px);transform:translateY(-2px)}.top-bar .social svg{fill:#7d776d}footer .social svg{fill:#97928a}.callout_item .social li{background-color:rgba(126,119,109,.8)}.callout_item .social li:hover{background-color:#7d776d}.callout_item .social svg{fill:#f1f1ef}.embed-container{position:relative;padding-bottom:56.25%;height:0;overflow:hidden;max-width:100%;height:auto}.embed-container iframe{position:absolute;top:0;left:0;width:100%;height:100%}#instafeed{display:-ms-flexbox;display:-webkit-box;display:flex}.slick-slider{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-ms-touch-action:pan-y;touch-action:pan-y;-webkit-tap-highlight-color:transparent}.slick-list,.slick-slider{position:relative;display:block}.slick-list{overflow:hidden;margin:0;padding:10px 0}.slick-list:focus{outline:0}.slick-list.dragging{cursor:pointer;cursor:hand}.slick-slider .slick-list,.slick-slider .slick-track{-webkit-transform:translateZ(0);transform:translateZ(0)}.slick-track{position:relative;top:0;left:0;display:block}.slick-track:after,.slick-track:before{display:table;content:\"\"}.slick-track:after{clear:both}.slick-loading .slick-track{visibility:hidden}.slick-slide{display:none;float:left;outline:0;height:100%;min-height:1px}[dir=rtl] .slick-slide{float:right}.slick-slide img{display:block}.slick-slide.slick-loading img{display:none}.slick-slide.dragging img{pointer-events:none}.slick-initialized .slick-slide{display:block}.slick-loading .slick-slide{visibility:hidden}.slick-vertical .slick-slide{display:block;height:auto;border:1px solid transparent}.slick-arrow.slick-hidden{display:none}.slick-dots{display:inline-block;margin:0 auto;margin-top:20px}.slick-dots li{float:left;margin:0 5px;position:relative}.slick-dots li button{display:none}.slick-dots li:before{width:7px;height:7px;background:#a9a9a9;display:block;content:\"\";border-radius:100%;-webkit-transition:background .2s ease-in-out;transition:background .2s ease-in-out}.slick-dots li.slick-active:before{background:gray;-webkit-transition:background .2s ease-in-out;transition:background .2s ease-in-out}.slick-next,.slick-prev{font-size:0;line-height:0;position:absolute;top:50%;display:block;width:30px;height:30px;margin-top:-15px;padding:0;cursor:pointer;color:transparent;border:0;outline:0;background:0 0}.slick-next:before,.slick-prev:before{content:\"\";width:30px;height:30px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/icons/raw/caratalt.svg);background-size:cover;background-position:50%;display:block}.slick-prev{left:-30px;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.slick-next{right:-30px}.flex{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.search-form,.finder{max-width:1600px;margin:0 auto}.hero.fh-400{height:300px;min-height:300px}.finder{min-height:calc(100vh - 300px)}.headerSpacer{height:120px;width:100%;display:block}.search-col{-webkit-box-flex:0;-ms-flex:0 0 calc(100% - 80px);flex:0 0 calc(100% - 80px);-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2;margin:40px}.map-col{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}#map{height:400px}.search{background:#f7f7f7;padding:40px}.search-col h3{margin-top:0}.search-col h5{margin-bottom:0;font-size:16px;color:#c69c54}.search-col p{margin:0}.search-col a{color:#969087;font-weight:600}.location-qwrap{width:100%;height:40px}.marker-icon-btn{display:-webkit-box;display:-ms-flexbox;display:flex;height:40px;font-size:1.6rem;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.marker-icon-btn span{-webkit-box-flex:1;-ms-flex:1;flex:1}.marker-icon-btn .location-btn-wrap{display:-webkit-box;display:-ms-flexbox;display:flex}.marker-icon-btn .location-btn-wrap button{padding:0 10px;background:#be9a5c;height:30px;line-height:30px;margin-right:10px;border:0;font-family:\"vinyl\";color:#fff;font-size:1.6rem;letter-spacing:.15rem;text-transform:uppercase}.pagination{padding:10px 0;border-top:1px solid #ddd;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}#locationResults{position:relative;height:calc(100vh - 140px);overflow-y:scroll}.search-form{width:100%;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}input[type=text]{color:gray;border:2px solid #cab282;padding:0 16px;height:40px;line-height:36px;margin:10px 5px;width:calc(50% - 10px);font-size:16px;background:0 0}#zip::-webkit-input-placeholder{color:gray;font-size:16px;opacity:1}#zip::-moz-placeholder{color:gray;font-size:16px;opacity:1}#zip:-ms-input-placeholder{color:gray;font-size:16px;opacity:1}#zip:-moz-placeholder{color:gray;font-size:16px;opacity:1}.custom-select{position:relative;font-size:1.6rem;color:#969087;margin:10px 5px}.custom-select select{display:none}.select-selected{background-color:transparent;color:gray;border:2px solid #be9a5c;padding:0 16px;height:40px;line-height:36px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-selected:after{position:absolute;content:\"\";top:18px;right:10px;width:0;height:0;border:6px solid transparent;border-color:#be9a5c transparent transparent transparent}.select-selected.select-arrow-active:after{border-color:transparent transparent #be9a5c transparent;top:12px}.select-items div{color:gray;padding:8px 16px;border:2px solid #e5e4e2;border-top:none;border-bottom:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-items{position:absolute;background-color:#fff;top:100%;left:0;right:0;z-index:99}.select-items:after{content:'';width:100%;height:2px;background:#e5e4e2;position:absolute;bottom:0;left:0}.select-hide{display:none}.select-items div:hover,.same-as-selected{background-color:rgba(0,0,0,.1)}.page-id-9410 footer{background:#000}.location{margin-bottom:20px}.location h5{line-height:1.2;height:auto}#zip{display:none}#zip.is-shown{display:block}.is-hidden{display:none}.loading-active{color:red}.location-complete{color:green}.slideButton{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;border:0;text-transform:uppercase;margin:10px 0}.slideButton:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0}.slideButton:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.card-holder{position:relative;width:100%;height:40px}.card-front{z-index:8;background:#fff}.card-back{z-index:4;background:#fff}.card-holder:hover .card-front{-webkit-transform:rotateX(-.5turn);transform:rotateX(-.5turn)}.card-holder:hover .card-back{-webkit-transform:rotateX(0turn);transform:rotateX(0turn)}.card{position:absolute;width:100%;height:100%;-webkit-transition:-webkit-transform 1s ease;transition:-webkit-transform 1s ease;transition:transform 1s ease;transition:transform 1s ease,-webkit-transform 1s ease;-webkit-backface-visibility:hidden;backface-visibility:hidden}.container{-webkit-perspective:1000px;perspective:1000px}.cider_finder_button{cursor:pointer;font-family:\"vinyl\";letter-spacing:.15rem;font-size:1.6rem}@media screen and (min-width:768px){.hero.fh-400{height:350px;min-height:350px}.finder{height:100vh;min-height:600px}.search-col{-webkit-box-flex:0;-ms-flex:0 0 320px;flex:0 0 320px}.search-col .content{-webkit-transform:translateX(-400px);transform:translateX(-400px);-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1;-webkit-transition:all 200ms cubic-bezier(.61,.92,.68,1.14) 0s;transition:all 200ms cubic-bezier(.61,.92,.68,1.14) 0s}.search-col.results-revealed .content{-webkit-transform:translateX(0);transform:translateX(0)}.map-col{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}#map{height:100vh;min-height:600px}}@media screen and (min-width:1240px){.search-form{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}}", "", {"version":3,"sources":["/Users/mni7a/Desktop/Sites/boldrock.com/src/styles/style.scss"],"names":[],"mappings":"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","file":"style.scss","sourcesContent":[".white{color:#fff;fill:#fff}html{-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}html{font-family:sans-serif;-webkit-box-sizing:border-box;box-sizing:border-box;font-size:62.5%;line-height:1.4;color:#7d776d;height:100%;font-family:adelle,serif;font-weight:100}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit}body{background:#fff;height:100%;overflow-x:hidden}dl,ol,ul{list-style-type:none;margin:0;padding:0}p{margin:0}p+p{margin-top:10px}li,li>span,p{font-size:16px;font-size:1.6rem;font-family:adelle,serif;color:#969087;font-weight:100;line-height:1.8}strong{font-weight:700}em{font-style:italic}h3{font-weight:400;font-size:22px;font-size:2.2rem}h1{color:#5e5952;font-size:3.8rem;letter-spacing:.05rem;margin:10px 0}h1,h2{font-family:vinyl,serif;text-transform:uppercase}h2{font-size:3.2rem;letter-spacing:.1rem;margin:0;margin-bottom:10px}h3{font-family:adelle,serif;font-weight:100;text-transform:none;font-size:2.6rem}h4{font-family:myriad-pro,serif;font-weight:700;letter-spacing:.2rem;font-size:1.6rem}h4,h5{text-transform:uppercase;margin:0}h5{font-size:1.5rem;font-weight:500;height:20px;line-height:20px;margin-bottom:20px;font-family:vinyl,serif;letter-spacing:.05rem}.sm-margin{margin:10px 0!important}.med-margin{margin:20px 0!important}.lg-margin{margin:30px 0!important}.page-wrapper{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;height:100%}footer,header{-ms-flex:none;-webkit-box-flex:0;flex:none}.content-area{-ms-flex:1 0 auto;-webkit-box-flex:1;flex:1 0 auto;width:100%}.content-area:after{content:\"\\00a0\";display:block;height:0;visibility:hidden}.center{text-align:center}body.loading{-webkit-animation-name:f;animation-name:f;-webkit-animation-duration:.55s;animation-duration:.55s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.2,.3,.25,.9);animation-timing-function:cubic-bezier(.2,.3,.25,.9)}#main.flyUp,body.is-loaded{-webkit-animation-name:e;animation-name:e}#main.flyUp,.anim,body.is-loaded{-webkit-animation-duration:.55s;animation-duration:.55s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-timing-function:cubic-bezier(.2,.3,.25,.9);animation-timing-function:cubic-bezier(.2,.3,.25,.9)}.anim.infinite{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}.anim.hinge{-webkit-animation-duration:1s;animation-duration:1s}@-webkit-keyframes a{0%{opacity:0}to{opacity:1}}@keyframes a{0%{opacity:0}to{opacity:1}}.fadeIn{-webkit-animation-name:a;animation-name:a}.fadeInDown{-webkit-animation-name:b;animation-name:b;-webkit-animation-delay:.5s;animation-delay:.5s}@-webkit-keyframes b{0%{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes b{0%{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@-webkit-keyframes c{0%{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes c{0%{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInLeft{-webkit-animation-name:c;animation-name:c}@-webkit-keyframes d{0%{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes d{0%{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInRight{-webkit-animation-name:d;animation-name:d}@-webkit-keyframes e{0%{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}@keyframes e{0%{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0)}to{opacity:1;-webkit-transform:none;transform:none}}.fadeInUp{-webkit-animation-name:e;animation-name:e}@-webkit-keyframes f{0%{opacity:1}to{opacity:0}}@keyframes f{0%{opacity:1}to{opacity:0}}.fadeOut{-webkit-animation-name:f;animation-name:f}@-webkit-keyframes g{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0);display:none}}@keyframes g{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,12px,0);transform:translate3d(0,12px,0);display:none}}.fadeOutDown{-webkit-animation-name:g;animation-name:g}@-webkit-keyframes h{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}}@keyframes h{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(-12px,0,0);transform:translate3d(-12px,0,0)}}.fadeOutLeft{-webkit-animation-name:h;animation-name:h}@-webkit-keyframes i{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}}@keyframes i{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(12px,0,0);transform:translate3d(12px,0,0)}}.fadeOutRight{-webkit-animation-name:i;animation-name:i}@-webkit-keyframes j{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}}@keyframes j{0%{opacity:1}to{opacity:0;-webkit-transform:translate3d(0,-12px,0);transform:translate3d(0,-12px,0)}}.fadeOutUp{-webkit-animation-name:j;animation-name:j}@-webkit-keyframes k{0%{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}to{opacity:1;-webkit-transform:none;transform:none;-webkit-filter:none;filter:none}}@keyframes k{0%{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}to{opacity:1;-webkit-transform:none;transform:none;-webkit-filter:none;filter:none}}.fadeInScale{-webkit-animation-name:k;animation-name:k}@-webkit-keyframes l{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1);-webkit-filter:none;filter:none}to{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}}@keyframes l{0%{opacity:1;-webkit-transform:scale(1);transform:scale(1);-webkit-filter:none;filter:none}to{opacity:0;-webkit-transform:scale(.9875);transform:scale(.9875);-webkit-filter:blur(4px);filter:blur(4px)}}.fadeOutScale{-webkit-animation-name:l;animation-name:l}.preloader{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(228,227,226,.95);z-index:1999;text-align:center}.preloader .spinner{width:300px;height:300px;position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;text-align:center}.preloader .spinner .spinner-logo{width:100%;height:100%}.preloader .spinner .spinner-logo img{width:100%}.animated{-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-fill-mode:both;animation-fill-mode:both}.animated.infinite{-webkit-animation-iteration-count:infinite;animation-iteration-count:infinite}.animated.bounceIn,.animated.bounceOut,.animated.flipOutX,.animated.flipOutY{-webkit-animation-duration:.75s;animation-duration:.75s}@-webkit-keyframes m{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-30px,0);transform:translate3d(0,-30px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-15px,0);transform:translate3d(0,-15px,0)}90%{-webkit-transform:translate3d(0,-4px,0);transform:translate3d(0,-4px,0)}}@keyframes m{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-30px,0);transform:translate3d(0,-30px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-15px,0);transform:translate3d(0,-15px,0)}90%{-webkit-transform:translate3d(0,-4px,0);transform:translate3d(0,-4px,0)}}@-webkit-keyframes n{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-5px,0);transform:translate3d(0,-5px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-3px,0);transform:translate3d(0,-3px,0)}90%{-webkit-transform:translate3d(0,-1px,0);transform:translate3d(0,-1px,0)}}@keyframes n{0%,20%,53%,80%,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1);-webkit-transform:translateZ(0);transform:translateZ(0)}40%,43%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-5px,0);transform:translate3d(0,-5px,0)}70%{-webkit-animation-timing-function:cubic-bezier(.755,.05,.855,.06);animation-timing-function:cubic-bezier(.755,.05,.855,.06);-webkit-transform:translate3d(0,-3px,0);transform:translate3d(0,-3px,0)}90%{-webkit-transform:translate3d(0,-1px,0);transform:translate3d(0,-1px,0)}}.bounce{-webkit-animation-name:m;animation-name:m;-webkit-transform-origin:center bottom;transform-origin:center bottom;-webkit-animation-delay:3s;animation-delay:3s}@-webkit-keyframes o{20%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}50%,55%{opacity:1;-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}to{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}}@keyframes o{20%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}50%,55%{opacity:1;-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}to{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}}.bounceOut{-webkit-animation-name:o;animation-name:o}article{padding-top:120px}.home article{padding-top:0}section{padding:4rem 0}section.header-push{padding-top:160px}.outer-container{width:80%;margin:0 auto;max-width:1200px;padding:4rem 0}.inner-container-b{display:block}.inner-container-f{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.inner-container-f>.content{-ms-flex:1;-webkit-box-flex:1;flex:1}.small{max-width:600px}.med,.small{margin:0 auto}.med{max-width:800px}.lg{max-width:1000px;margin:0 auto}.centered{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.centered,.spaced{-ms-flex-align:center;-webkit-box-align:center;align-items:center}.spaced{-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.npt{padding-top:0!important}.np{padding:0!important}.npb{padding-bottom:0!important}@media screen and (max-width:900px){article{padding-top:60px}section.header-push{padding-top:100px}}@media screen and (max-width:767px){section{padding:6rem 0}.outer-container{width:90%}}.screen-reader-text{clip:rect(1px,1px,1px,1px);position:absolute!important;height:1px;width:1px;overflow:hidden}.screen-reader-text:focus{background-color:#fff;border-radius:3px;-webkit-box-shadow:0 0 2px 2px rgba(0,0,0,.6);box-shadow:0 0 2px 2px rgba(0,0,0,.6);clip:auto!important;color:green;display:block;font-size:8.75px;font-size:.875rem;font-weight:700;height:auto;left:5px;line-height:normal;padding:15px 23px 14px;text-decoration:none;top:5px;width:auto;z-index:100000}#content[tabindex=\"-1\"]:focus{outline:0}.top-bar{background:gray;height:46px;z-index:10}.top-bar .top-bar-outer{width:100%;height:46px;background:#97928a;padding:0 30px;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.top-bar .top-bar-outer,.top-bar .top-menu{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.top-bar .top-menu{height:100%}.top-bar .top-menu a{padding:20px;font-family:myriad-pro,serif;font-size:1.4rem;letter-spacing:.15rem;color:#fff;font-weight:700}.top-bar .top-menu a:last-of-type{padding-right:0}#masthead{position:absolute;width:100%;height:120px;-webkit-box-shadow:none;box-shadow:none;z-index:10;top:46px;background-color:#fff;will-change:height,background-color;-webkit-transition-property:height,background-color;transition-property:height,background-color;-webkit-transition-duration:.25s;transition-duration:.25s}#masthead:before{content:\"desktop\";display:none}#masthead:after{content:\"\";display:block;width:100%;height:1px;background:rgba(0,0,0,.15);position:absolute;bottom:-1px}#masthead .header-outer{width:100%;height:100%;padding:0 30px}#masthead .navRoot{width:100%;height:100%;display:-ms-flexbox;display:-webkit-box;display:flex}#masthead .navRoot_logo{width:80px;height:90px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;margin:15px 0}#masthead .navRoot_logo .logo-is-not-fixed{display:block;width:100%;height:100%}#masthead .navRoot_logo .logo-is-fixed{display:none;width:100%;height:100%}#masthead .navRoot_menu{height:100%;margin-left:30px;-ms-flex:1;-webkit-box-flex:1;flex:1}#masthead .navRoot_menu ul{height:100%}#masthead .navRoot_menu li{height:100%;display:inline-block;padding:0 30px}#masthead .navRoot_menu a{line-height:120px;height:120px;font-size:1.8rem;letter-spacing:.15rem;color:#7d776d;font-family:vinyl,serif;will-change:color,line-height,height;-webkit-transition-property:color,line-height,height;transition-property:color,line-height,height;-webkit-transition-duration:.25s;transition-duration:.25s}#masthead .navRoot_finder{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;height:100%}#masthead .navRoot_finder .cider_finder_button{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;font-family:vinyl,serif;font-size:1.6rem;letter-spacing:.15rem}#masthead .navRoot_finder .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}#masthead .navRoot_finder .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}#masthead .navRoot_finder .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}#masthead .navRoot_finder .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}#masthead .navRoot_finder .cider_finder_button:hover span{opacity:0}#masthead .navRoot_mobile{display:none}#masthead #hard_cider,#masthead #line,#masthead #rock{fill:#000}#masthead #bold{fill:#eaa821}.cider_wrapper_inner{width:100vw;padding:20px 60px;height:160px}.cider_wrapper_inner li{height:120px}.cider_wrapper_inner li a{width:100%;height:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between;position:relative}.cider_wrapper_inner li .emblem{position:absolute;top:-20px;right:25px;font-size:1.1rem;width:50px;height:50px}.cider_wrapper_inner li .emblem svg{fill:#19353b}.cider_wrapper_inner .cider_thumbnail{height:70%}.cider_wrapper_inner .cider_thumbnail img{max-height:100%;will-change:transform;-webkit-transition:-webkit-transform .2s ease-in-out;transition:-webkit-transform .2s ease-in-out;transition:transform .2s ease-in-out;transition:transform .2s ease-in-out,-webkit-transform .2s ease-in-out;-webkit-transform:scale(1);transform:scale(1)}.cider_wrapper_inner li:hover img{-webkit-transform:scale(1.2);transform:scale(1.2);-webkit-transition:-webkit-transform .2s ease-in-out;transition:-webkit-transform .2s ease-in-out;transition:transform .2s ease-in-out;transition:transform .2s ease-in-out,-webkit-transform .2s ease-in-out}.sub-nav-root{position:absolute;top:120px;left:0;right:0;display:block;opacity:0;pointer-events:none;will-change:opacity;-webkit-transition:opacity .25s ease-in-out;transition:opacity .25s ease-in-out}.sub-nav-root a{font-family:myriad-pro,serif;text-align:center;font-weight:500;color:#7d776d;font-size:1.4rem;display:block;letter-spacing:.15rem}.sub-nav-root #aboutMenu a,.sub-nav-root #visitMenu a{-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:color .25s,-webkit-transform .25s;transition:color .25s,-webkit-transform .25s;transition:transform .25s,color .25s;transition:transform .25s,color .25s,-webkit-transform .25s}.sub-nav-root #aboutMenu a:hover,.sub-nav-root #visitMenu a:hover{-webkit-transform:translateX(2px);transform:translateX(2px);color:#5e5952}.dropdown-bg{position:absolute;top:0;left:0;will-change:transform;background:#fff;overflow:hidden;width:380px;height:500px;-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-box-shadow:0 5px 15px rgba(0,0,0,.1);box-shadow:0 5px 15px rgba(0,0,0,.1);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.home #masthead,.home #masthead:after{background:0 0}.home #masthead .navRoot_menu a{color:#fff}.home #masthead #bold,.home #masthead #hard_cider,.home #masthead #line{fill:#fff}.home #masthead #rock{fill:#eea821}#masthead.is-dropdown-visible,.home #masthead.is-dropdown-visible{background:#fff}#masthead.is-dropdown-visible:after,.home #masthead.is-dropdown-visible:after{background:rgba(0,0,0,.15)}#masthead.is-dropdown-visible #hard_cider,#masthead.is-dropdown-visible #line,#masthead.is-dropdown-visible #rock,.home #masthead.is-dropdown-visible #hard_cider,.home #masthead.is-dropdown-visible #line,.home #masthead.is-dropdown-visible #rock{fill:#000}#masthead.is-dropdown-visible #bold,.home #masthead.is-dropdown-visible #bold{fill:#eea821}#masthead.is-dropdown-visible .navRoot_menu a,.home #masthead.is-dropdown-visible .navRoot_menu a{color:#7d776d}#masthead.is-dropdown-visible .sub-nav-root,.home #masthead.is-dropdown-visible .sub-nav-root{opacity:1;pointer-events:auto}.sub-nav-wrapper{overflow:hidden;position:absolute;top:0;left:0;will-change:transform,width,height;-webkit-transition-property:width,height,-webkit-transform;transition-property:width,height,-webkit-transform;transition-property:transform,width,height;transition-property:transform,width,height,-webkit-transform;-webkit-transition-duration:.25s;transition-duration:.25s}.dropdown-content{opacity:0;position:absolute;top:0;left:0;will-change:opacity;-webkit-transition:opacity .15s ease-in-out;transition:opacity .15s ease-in-out}.dropdown-content.go-left{-webkit-transform:translateX(-150px);transform:translateX(-150px);opacity:0}.dropdown-content.go-right{-webkit-transform:translateX(150px);transform:translateX(150px);opacity:0}.dropdown-content.is-active{-webkit-transform:translateX(0);transform:translateX(0);opacity:1;z-index:500}.sub-menu{margin:10px 0}.sub-menu li{padding:10px 30px}#masthead.is-fixed{position:fixed;top:0;background-color:#fff!important;height:70px;-webkit-transition:background-color .25s,height .25s;transition:background-color .25s,height .25s;-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,.15);box-shadow:0 0 5px 0 rgba(0,0,0,.15)}#masthead.is-fixed .navRoot_logo{height:40px}#masthead.is-fixed .navRoot_logo .logo-is-not-fixed{display:none}#masthead.is-fixed .navRoot_logo .logo-is-fixed{display:block}#masthead.is-fixed .navRoot_menu a{height:70px;line-height:70px;color:#7d776d}#masthead.is-fixed .sub-nav-root{top:70px}@media screen and (max-width:900px){.top-bar{display:none}#masthead,#masthead.is-fixed{top:0;height:60px;position:fixed;background:#fff}#masthead.is-fixed:before,#masthead:before{content:\"mobile\"}#masthead.is-fixed .navRoot_finder,#masthead.is-fixed .navRoot_menu,#masthead.is-fixed .sub-nav-root,#masthead .navRoot_finder,#masthead .navRoot_menu,#masthead .sub-nav-root{display:none}#masthead.is-fixed .navRoot_logo,#masthead .navRoot_logo{width:100px;height:40px;margin:10px 0;z-index:50}#masthead.is-fixed .navRoot_logo .logo-is-not-fixed,#masthead .navRoot_logo .logo-is-not-fixed{display:none}#masthead.is-fixed .navRoot_logo .logo-is-fixed,#masthead.is-fixed .navRoot_mobile,#masthead .navRoot_logo .logo-is-fixed,#masthead .navRoot_mobile{display:block}#masthead.is-fixed .mobile_outer_wrap,#masthead .mobile_outer_wrap{position:fixed;top:0;left:0;right:0;bottom:0;background:#97928a;z-index:20;padding:30px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;max-height:0;overflow:hidden;opacity:0;-webkit-transition:opacity .2s ease-in-out;transition:opacity .2s ease-in-out}#masthead.is-fixed .mobile_outer_wrap.mmenu-is-visible,#masthead .mobile_outer_wrap.mmenu-is-visible{max-height:100%;opacity:1;-webkit-transition:max-height .2s,opacity .2s;transition:max-height .2s,opacity .2s}#masthead.is-fixed ul.mobile-menu,#masthead ul.mobile-menu{margin-bottom:40px}#masthead.is-fixed ul.mobile-menu li,#masthead ul.mobile-menu li{height:50px;line-height:50px;text-align:center}#masthead.is-fixed ul.mobile-menu li a,#masthead ul.mobile-menu li a{color:#fff;font-size:1.7rem}#masthead.is-fixed .mobile_trigger,#masthead .mobile_trigger{position:fixed;top:15px;right:30px;width:30px;height:30px;display:block;z-index:400;cursor:pointer}#masthead.is-fixed .mobile_trigger span,#masthead .mobile_trigger span{position:absolute;width:30px;height:3px;background-color:#97928a;top:50%;margin-top:-1px;border-radius:1px;display:block;will-change:background-color;-webkit-transition:background-color .3s;transition:background-color .3s}#masthead.is-fixed .mobile_trigger span:before,#masthead .mobile_trigger span:before{top:-8px}#masthead.is-fixed .mobile_trigger span:after,#masthead.is-fixed .mobile_trigger span:before,#masthead .mobile_trigger span:after,#masthead .mobile_trigger span:before{content:\"\";position:absolute;background-color:#97928a;width:100%;height:100%;border-radius:1px;left:0;-webkit-backface-visibility:hidden;backface-visibility:hidden;-webkit-transform:rotate(0);transform:rotate(0);will-change:transform,background-color;-webkit-transition:background-color .3s,-webkit-transform .3s;transition:background-color .3s,-webkit-transform .3s;transition:transform .3s,background-color .3s;transition:transform .3s,background-color .3s,-webkit-transform .3s}#masthead.is-fixed .mobile_trigger span:after,#masthead .mobile_trigger span:after{bottom:-8px}#masthead.is-fixed .mobile_trigger.mmenu-is-open span,#masthead .mobile_trigger.mmenu-is-open span{background:0 0}#masthead.is-fixed .mobile_trigger.mmenu-is-open span:before,#masthead .mobile_trigger.mmenu-is-open span:before{top:0;background-color:#fff;-webkit-transform:rotate(135deg);transform:rotate(135deg)}#masthead.is-fixed .mobile_trigger.mmenu-is-open span:after,#masthead .mobile_trigger.mmenu-is-open span:after{bottom:0;background-color:#fff;-webkit-transform:rotate(225deg);transform:rotate(225deg)}}#loader{background:#d4a74d;position:fixed;top:0;height:4px;left:0;width:0;z-index:200;-webkit-transition:all .25s cubic-bezier(.2,.3,.25,.9) 0ms;transition:all .25s cubic-bezier(.2,.3,.25,.9) 0ms}.wood{background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/br_prefooter_background.jpg);border-top:10px solid #e5e4e2}.wood img{width:50%;padding:40px 0;margin:0 auto}.prefooter-menu{display:none}.footer-outer{padding:30px;width:100%;max-width:1400px;margin:0 auto}.footer-bottom .footer-outer{padding:15px 30px}.footer-top{background:#97928a}.footer-bottom{background:#8b857d;color:#fff;text-align:center}.footer-bottom a.footer-link,.footer-bottom p{margin:0;font-family:myriad-pro,serif;font-size:1.2rem;text-transform:uppercase;letter-spacing:.05rem;color:rgba(228,227,226,.6)}.footer-bottom a.footer-link{text-transform:uppercase;text-decoration:underline;font-weight:400;will-change:color;-webkit-transition:color .2s;transition:color .2s}.footer-bottom a.footer-link:hover{color:#e5e4e2}.footer-root{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.footer-root>div{margin-right:4em}.footer-root>div:last-of-type{margin-right:0}.footerRoot_logo a{display:block;width:120px}.footerRoot_logo #bold,.footerRoot_logo #hard_cider,.footerRoot_logo #line,.footerRoot_logo #rock{fill:rgba(228,227,226,.6)}.footerRoot_newsletter{max-width:300px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.footerRoot_newsletter h4{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;text-transform:uppercase;font-size:1.4rem;margin:0}.footerRoot_newsletter p{margin:0;font-size:1.3rem;font-family:myriad-pro,serif;color:rgba(228,227,226,.4)}.footerRoot_newsletter form{margin-top:20px;width:100%;border:2px solid rgba(228,227,226,.6);position:relative}.footerRoot_newsletter input[type=text]{background:0 0;border:0;color:rgba(228,227,226,.6);padding:10px 5px;border-radius:0;width:100%;line-height:20px}.footerRoot_newsletter .submit_button{position:absolute;top:0;right:0;height:100%;background:rgba(228,227,226,.6)}.footerRoot_newsletter .submit_button:before{content:\"\";display:block;position:absolute;width:20px;height:10px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/icons/raw/arrowalt.svg);background-size:cover;background-position:50%;top:50%;left:50%;margin-top:-5px;margin-left:-10px;z-index:5;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.footerRoot_newsletter .submit_button input[type=submit]{border:0;background:0 0;margin:0;height:100%;width:40px;font-size:0;line-height:0;position:relative;z-index:12}.footerRoot_newsletter .submit_button:hover:before{-webkit-transform:translateX(2px);transform:translateX(2px)}.footerRoot_menu li a{font-size:1.3rem;font-family:myriad-pro,serif;color:rgba(228,227,226,.6);font-weight:600;letter-spacing:.1rem;display:inline-block;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:color .25s,-webkit-transform .25s;transition:color .25s,-webkit-transform .25s;transition:transform .25s,color .25s;transition:transform .25s,color .25s,-webkit-transform .25s}.footerRoot_menu li a:hover{-webkit-transform:translateX(2px);transform:translateX(2px);color:#e5e4e2}.footerRoot_primary .footer_ciderFinder{margin-top:20px}.footerRoot_primary .footer_ciderFinder .cider_finder_button{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;float:right;font-family:vinyl,serif;font-size:1.4rem;letter-spacing:.1rem}.footerRoot_primary .footer_ciderFinder .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}.footerRoot_primary .footer_ciderFinder .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}.footerRoot_primary .footer_ciderFinder .cider_finder_button:hover span{opacity:0}@media screen and (max-width:900px){footer{height:300px;position:relative;margin-top:60px}.prefooter-menu{height:60px;width:100%;display:block;z-index:3;position:relative}.prefooter-menu .footer-sticky{display:-ms-flexbox;display:-webkit-box;display:flex;height:100%}.prefooter-menu .footer-sticky li{-ms-flex:1;-webkit-box-flex:1;flex:1;height:60px;line-height:60px;text-align:center}.prefooter-menu .footer-sticky li a{color:#fff}.prefooter-menu .footer-sticky li:first-child{background:#ad4418}.prefooter-menu .footer-sticky li:nth-child(2){background:#973b15}.prefooter-menu .footer-sticky li:nth-child(3){background:#813212}.prefooter-menu.pfm-is-fixed{position:fixed;bottom:0}.prefooter-menu.pfm-is-flow{position:absolute;top:-60px}.footer-root{display:block}.footerRoot_logo{float:right}.footerRoot_menu{display:none}.footerRoot_primary{margin-top:40px}.footer_ciderFinder{display:none}}@media screen and (max-width:580px){.footerRoot_logo{display:none}.footer-root .footerRoot_newsletter{max-width:400px;margin:0 auto;text-align:center}.footer-root .footerRoot_primary{margin-top:40px}.footer-root .footerRoot_primary ul.social{text-align:center;display:block}}.hero{background-position:50%;background-size:cover;background-repeat:no-repeat;position:relative;background-color:#a9a6a1}.hero img{width:100%}.hero .hero-wrapper{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background-size:cover;background-repeat:no-repeat;background-position:50%;-webkit-animation:p .6s ease-in-out;animation:p .6s ease-in-out}.hero-mills-river-cidery{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/mills-river-hero.jpg)}.hero-nellysford-cidery{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/nellysford-hero.jpg)}.hero-carter-mountain{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/carter-mountain-hero.jpg)}.hero-chiles-peach{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/chiles-peach-hero.jpg)}.hero-nellysford-barrel-barn{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/barrel-barn-complete.jpg)}.hero-core{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/make-it-happen-3x1.jpg)}.hero-about{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/about-hero.jpg)}.hero-cider101{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/cider101-hero.jpg)}.hero-finder{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/finder-hero.jpg)}@-webkit-keyframes p{0%{opacity:0}50%{opacity:0}to{opacity:1}}@keyframes p{0%{opacity:0}50%{opacity:0}to{opacity:1}}.home .hero{position:relative;background-color:#000}.home .hero-wrapper{position:absolute;top:0;left:0;bottom:0;right:0;background:rgba(0,0,0,.5);display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;z-index:2;overflow:hidden}.home .hero-content img{width:50%;max-width:480px}.home #vidpause{position:absolute;bottom:10px;right:10px;display:none}video#bgvid{position:absolute;top:0;left:0;background-size:cover;z-index:1;width:auto;height:100%;-webkit-transition:opacity 1s;transition:opacity 1s}video#bgVidFull{position:fixed;top:50%;left:50%;min-width:100%;min-height:100%;width:auto;height:auto;z-index:-100;-webkit-transform:translateX(-50%) translateY(-50%);transform:translateX(-50%) translateY(-50%);background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/poster.jpg) no-repeat;background-size:cover}.stopfade{opacity:.5}.hero-content{position:absolute;top:0;left:0;bottom:0;right:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.hero-content h1{font-size:90px;text-shadow:1px 1px 20px rgba(0,0,0,.6);color:#fff}@media screen and (max-width:800px){video#bgvid{display:none}.home .hero{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/poster-sm.jpg);background-size:cover;background-position:50%;margin-top:60px}.hero-content h1{font-size:60px}}@media screen and (max-width:600px){.hero-content h1{font-size:38px}}@media screen and (min-width:1600px){.hero img{width:100%}}.age-gate-logo img{width:100%;height:auto;margin:0 auto;max-width:320px}h2.age-gate-subheading{color:#97928a;margin-bottom:0}p.age-gate-remember-wrapper{display:none}button.age-gate-submit-no,button.age-gate-submit-yes{border:0;border-radius:3px;padding:5px 20px;margin:20px 10px 0;font-family:vinyl,serif;text-transform:uppercase;font-size:1.6rem;color:#fff;outline:0;background:#973b15}ul.breadcrumbs{display:-ms-flexbox;display:-webkit-box;display:flex}ul.breadcrumbs li,ul.breadcrumbs li a{font-family:vinyl,serif;font-size:1.4rem;text-transform:uppercase}.breadcrumbs-wrapper .outer-container{height:100%}.breadcrumbs-wrapper ul.breadcrumbs{height:100%;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.av_overlay{position:fixed;top:0;left:0;right:0;bottom:0;background:#2e8b57;z-index:10000}.av_overlay#hello{display:block}.av_overlay#goodbye{display:none}.home-intro{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding-bottom:6rem}.home-intro h1{color:#7e7970;letter-spacing:.1rem;font-size:48px}.home-intro .flex-grid{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.home-intro .flex-grid>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.home-intro .flex-grid>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.home-intro .flex-grid .illustration{position:relative}.home-intro .flex-grid .illustration img{width:80%;margin:0 auto}.home-intro .flex-grid .illustration .link-overlay a{font-size:2rem;position:relative;display:block;width:160px;margin:0 auto;font-family:vinyl,serif;cursor:pointer;will-change:transform;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.home-intro .flex-grid .illustration .link-overlay a .text{position:relative;color:#fff;z-index:2;display:block;text-align:center}.home-intro .flex-grid .illustration .link-overlay a .banner{position:absolute;top:0;left:0;right:0;bottom:0}.home-intro .flex-grid .illustration .link-overlay a .banner svg{fill:#973b15;-webkit-transition:fill .25s;transition:fill .25s}.home-intro .flex-grid .illustration .link-overlay a:hover{-webkit-transform:translateY(-2px);transform:translateY(-2px)}.home-intro .flex-grid .illustration .link-overlay a:hover .banner svg{fill:#813212}.home-lineup{background-color:#5e5952;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg.svg);position:relative;background-size:cover}.home-lineup:after,.home-lineup:before{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.home-lineup .inner-container-b{position:relative}.home-lineup .inner-container-b h3{color:#fff;font-family:vinyl,serif;font-size:48px;text-transform:uppercase;margin:0;margin-bottom:5px}.home-lineup .lineup-image{position:absolute;bottom:-4em;right:0;max-width:300px}.middle{display:none;background-color:#fef2e6;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg2.svg)}.middle .three-blocks{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.middle .three-blocks>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.middle .three-blocks>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.middle .three-blocks .block-inner{background:#fff;height:200px;border:1px solid #fff;-o-border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderHorizontal_white.svg) 27 round repeat;border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderHorizontal_white.svg) 27 fill round repeat;position:relative}.middle .three-blocks .block-inner:after{content:\"\";width:100%;height:100%;top:0;left:0;border:1px solid #fff;z-index:2;display:block;-o-border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderVertical_white.svg) 27 round repeat;border-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/borderVertical_white.svg) 27 fill round repeat}.founders{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/overlayimage-updated.jpg);background-size:cover;padding:4rem 0;position:relative;background-position:bottom}.founders:before{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3.svg);z-index:2;content:\"\";background-size:contain;background-repeat:no-repeat;background-position:100%}.founders:after{width:100%;height:20px;content:\"\";display:block;position:absolute;bottom:-10px;z-index:1;background-size:cover;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/gray-stroke.svg)}.founders .content.emblem{-ms-flex:0 0 30%;-webkit-box-flex:0;flex:0 0 30%;-webkit-transform:rotate(-30deg);transform:rotate(-30deg)}.founders .content.text{-ms-flex:0 0 60%;-webkit-box-flex:0;flex:0 0 60%;margin-left:40px;max-width:600px}.founders .content.text h3{color:#fff;line-height:1.8;font-size:2.2rem;text-align:center}.instagram-wrapper{background:gray;position:relative}.instagram-wrapper .insta-overlay{position:absolute;top:0;left:0;bottom:0;right:0;background:rgba(212,167,77,.1)}.instagram-wrapper .insta-banner{position:absolute;bottom:-25px;left:50%;margin-left:-125px;height:50px;width:250px;z-index:2}.instagram-wrapper .insta-banner .insta-banner-inner{background:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/banner.svg);background-size:contain;background-repeat:no-repeat;position:relative}.instagram-wrapper .insta-banner .insta-banner-inner h4{color:#fff;font-family:vinyl,serif;position:absolute;top:0;left:0;right:0;bottom:0;text-align:center;line-height:50px;height:50px;font-size:1.7rem;margin:0}#instafeed{-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:0;margin-right:0;list-style:none}#instafeed>*{padding:0;-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}@media (min-width:540px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:786px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){#instafeed>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}#instafeed a{overflow:hidden;position:relative;background-size:cover;background-position:center}.insta-image{position:absolute;top:0;left:0;right:0;bottom:0}.orchard{border-top:10px solid #e5e4e2;border-bottom:10px solid #e5e4e2;position:relative}.orchard .prefooter-content{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.orchard .prefooter-content img{width:50%;margin-top:-5%}.orchard img{width:100%}.prefooter{background:#e5e4e2;padding:0;position:relative}.prefooter .content{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}@media screen and (max-width:900px){.home-lineup .lineup-image{width:50%}.founders .content.emblem{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-webkit-transform:rotate(0deg);transform:rotate(0deg)}.founders .content.emblem img{margin:0 auto;max-width:200px}.founders .content.text{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin:0 auto;text-align:center}}@media screen and (max-width:600px){.home-lineup .lineup-image{display:none}.home-lineup .text{text-align:center}}.single-location-intro{position:relative}.single-location-intro:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.flex-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.location_callout{-ms-flex:0 0 400px;-webkit-box-flex:0;flex:0 0 400px;background:#f1f1ef;margin-left:40px;padding:30px;border:1px solid #e5e4e2}.location_callout h4{font-size:1.4rem;margin:10px 0}.location_callout p{margin:0}.location_callout li{font-size:1.6rem;font-weight:300}.callout_item{margin-bottom:40px}.callout_item:last-of-type{margin-bottom:0}.callout_item li,.callout_item p{line-height:1.6}.location_general{-ms-flex-positive:4;-webkit-box-flex:4;flex-grow:4;-ms-flex-preferred-size:0%;flex-basis:0%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.location_general p{margin:0}.location_features{-ms-flex-positive:1;-webkit-box-flex:1;flex-grow:1;-ms-flex-negative:0;flex-shrink:0;-ms-flex-preferred-size:0%;flex-basis:0%}.location_images{width:100%;background:#708090;margin-top:2rem;position:relative}.image_holder{position:absolute;top:0;left:0;right:0;bottom:0}.images_reel_init .slick-list{padding:0}.images_reel_init ul.slick-dots{display:inline-block;position:absolute;bottom:20px;left:50%;cursor:pointer}.images_reel_init ul.slick-dots li:before{background:rgba(255,255,255,.8)}.images_reel_init ul.slick-dots li.slick-active:before{background:#fff}.features-list{-webkit-column-count:2;column-count:2;margin-top:30px;margin-bottom:15px}.features-list li{font-size:1.4rem;font-weight:500;text-transform:uppercase;position:relative;height:40px;line-height:40px;padding-left:50px;letter-spacing:.1rem;font-size:1.3rem;margin-bottom:10px;font-family:myriad-pro,serif;color:#a9a6a1}.features-list li span{position:absolute;top:0;left:0;bottom:0;width:40px}.features-list li span svg{fill:#a9a6a1}.features-list li.feature-link a{color:#a9a6a1;will-change:color;-webkit-transition:color .25s;transition:color .25s;cursor:pointer}.features-list li.feature-link svg{fill:#a9a6a1;will-change:fill;-webkit-transition:fill .25s;transition:fill .25s}.features-list li.feature-link:hover a{color:#d4a74d}.features-list li.feature-link:hover svg{fill:#d4a74d}.food-menu-link-wrapper{margin:20px 0}.food-menu-link-wrapper a{text-transform:none;font-weight:600;text-decoration:underline;color:#c69c54;letter-spacing:0;font-size:1.6rem}.special_hours_list li{padding:10px 0;font-size:1.6rem;border-bottom:1px solid gray}.special_hours_list li:last-of-type{border-bottom:none}.special_hours_list li span{display:block}.special_hours_list .day{display:block;font-weight:600;padding-bottom:3px}.email_link,.map_link,.phone_link{display:block;font-size:1.3rem;letter-spacing:.1rem;color:gray;height:16px;line-height:16px;position:relative;padding-left:20px;margin:10px 0}.email_link:before,.map_link:before,.phone_link:before{content:\"\";width:16px;height:16px;background:gray;position:absolute;top:0;left:0;display:block}.phone_link{margin-bottom:10px}#ajax-posts,#simple_posts{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin:20px -25px;list-style:none;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}#ajax-posts>*,#simple_posts>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){#ajax-posts>*,#simple_posts>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.location-events{padding:6rem 0}.location-events #simple_posts{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.location-events #simple_posts>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.location-events #simple_posts>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.location-events #simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:1140px){.location-events #simple_posts>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.todays_hours_wrap{height:50px;background:#be9a5c;position:absolute;bottom:-50px;width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;color:#fff}.todays_hours_wrap a{letter-spacing:.1rem;color:#e5e4e2;margin-left:10px;height:30px;line-height:28px;display:inline-block;padding:0 10px;border:1px solid;font-weight:500}.hours_list{margin-bottom:20px}.hours_list_item .day{width:140px;display:inline-block;font-weight:600}#btn-spevent,.hours_wrapper a{color:#fff;display:inline-block;background:#c69c54;padding:0 10px;height:40px;line-height:40px;margin-top:20px;font-size:1.4rem;font-family:vinyl,serif;font-weight:700;letter-spacing:.15rem;border-radius:3px}.location-events{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.location-events .event-inner-wrap{display:block;background:#fff;-webkit-box-shadow:none;box-shadow:none;white-space:normal;height:100%;will-change:transform,box-shadow;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:box-shadow .35s,transform .35s;transition:box-shadow .35s,transform .35s,-webkit-box-shadow .35s,-webkit-transform .35s}.location-events .event-inner-wrap:hover{-webkit-box-shadow:0 0 12px rgba(0,0,0,.1);box-shadow:0 0 12px rgba(0,0,0,.1);-webkit-transform:translateY(-2px);transform:translateY(-2px)}.location-events .event_image_wrapper{margin-bottom:10px;background:gray}.location-events .event_info_wrapper{text-align:left;padding:10px}.location-events .event_info_wrapper p{margin:0;font-size:1.5rem;letter-spacing:.05rem}.location-events .event_info_wrapper h4{font-size:1.6rem;margin-bottom:5px;color:#19353b}.location-events .event_day,.location-events .event_time{display:block}@media screen and (max-width:1100px){.location_callout{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%;margin:0 auto;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.location_callout .address_wrapper{margin-right:40px}.location_callout .social_wrapper:after,.location_callout .social_wrapper:before{content:\"\";display:table;table-layout:fixed;clear:both}.location_callout .hours_wrapper{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%}.location_general{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-top:40px}.features-list{-webkit-column-count:3;column-count:3}}@media screen and (max-width:850px){.todays_hours_wrap h4{font-size:1.6rem;font-weight:500;letter-spacing:.15rem;text-align:center}.todays_hours_wrap h4 span{display:block}.features-list{-webkit-column-count:2;column-count:2}}@media screen and (max-width:786px){#simple_posts{-ms-flex-pack:start;-webkit-box-pack:start;justify-content:flex-start}}@media screen and (max-width:650px){.features-list{-webkit-column-count:1;column-count:1}}.single-cider-intro{background-color:#e5e4e2;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);position:relative}.single-cider-intro:after{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.content-cider-image{-ms-flex:0 0 320px;-webkit-box-flex:0;flex:0 0 320px;height:300px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-vat1.png);background-size:contain;background-position:50%;background-repeat:no-repeat;margin-right:40px}.bg-wild-cherry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-cherry.png)}.bg-blood-orange{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-blood-orange.png)}.bg-carolina-apple{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ca-apple.png)}.bg-carolina-draft{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ca-draft.png)}.bg-citrus{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-citrus.png)}.bg-ipa{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-ipa.png)}.bg-orchard-frost{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-orchard-frost.png)}.bg-peach{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-peach.png)}.bg-pear{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-pear.png)}.bg-premium-dry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-premium-dry.png)}.bg-virginia-apple{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-va-apple.png)}.bg-virginia-draft{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-va-draft.png)}.bg-vintage-dry{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-vintage-dry.png)}.bg-variety-crate{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/boldRock-products-variety-crate.png)}.content-cider-info{-ms-flex:1;-webkit-box-flex:1;flex:1}.flip-container{-webkit-perspective:1000px;perspective:1000px;margin-left:35%}.flip-container.hover .flipper,.flip-container:hover .flipper{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.back,.flip-container,.front{width:320px;height:400px}.flipper{-webkit-transition:.6s;transition:.6s;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;position:relative}.back,.front{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:0;left:0}.back img,.front img{margin:0 auto;width:auto;max-height:100%}.front{z-index:2;-webkit-transform:rotateY(0deg);transform:rotateY(0deg);background-repeat:no-repeat}.back{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.info-specific{margin-top:40px;position:relative}.info-specific .avail-icon{display:block;width:100px;height:100px;position:absolute;top:-80px;right:-30px}.info-specific .avail-icon svg{fill:#a9a6a1}.cider-info-list{background:#fff;border:1px solid #cbc9c5;position:relative;margin-bottom:40px;text-align:left}.cider-info-list li{border-bottom:1px solid #cbc9c5;display:-ms-flexbox;display:-webkit-box;display:flex}.cider-info-list li:last-of-type{border-bottom:none}.cider-info-list li .cider-icon{width:60px;border-right:1px solid #cbc9c5}.cider-info-list li .cider-icon svg{height:60px;fill:#cbc9c5}.cider-info-list li .cider-content{-ms-flex:1;-webkit-box-flex:1;flex:1;padding:10px}.cider-info-list li .cider-content span{line-height:1.2}.cider-info-list li .cider-content .info-item-head{display:block;font-weight:600;font-size:1.4rem;text-transform:uppercase}.cider-info-list:after{content:\"\";position:absolute;bottom:-13px;left:-1px;right:-1px;height:14px;background-color:#cbc9c5;background:repeating-linear-gradient(45deg,#cbc9c5,#cbc9c5 8px,#bfbcb8 0,#bfbcb8 16px)}.mustache>p{display:inline-block;font-size:1.4rem;margin:0 auto;margin-right:20px;text-transform:uppercase;letter-spacing:.15rem;font-family:vinyl,serif}.find-this-wrapper{margin-top:40px}.find-this-wrapper .cider_finder_button{border-radius:3px;position:relative;background-color:#97928a;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;font-size:1.4rem;font-family:vinyl,serif;letter-spacing:.1rem}.find-this-wrapper .cider_finder_button:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0;color:#fff}.find-this-wrapper .cider_finder_button:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#afaba5}.find-this-wrapper .cider_finder_button:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.find-this-wrapper .cider_finder_button:hover:after{-webkit-animation:r .4s;animation:r .4s}.find-this-wrapper .cider_finder_button:hover span{opacity:0}.other-ciders{padding:0;background:#e5e4e2;position:relative}.other-ciders:after{width:100%;height:10px;background:#97928a;content:\"\";display:block;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/wood-bg-01.svg)}.other-ciders h4{text-align:center;margin-bottom:20px}.other-ciders .cider_wrapper_inner{width:100%;padding:20px 30px}.other-ciders .cider_wrapper_inner a{font-family:vinyl,serif;color:#7d776d}.middle-stack{position:relative}.middle-stack:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.cider-recipes{background-color:#a9a6a1;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/recipes.jpg);background-size:cover;-ms-flex:1;-webkit-box-flex:1;flex:1;margin-left:10px;position:relative}.cider-recipes:before{background:rgba(126,119,109,.85);top:0;left:0;right:0;bottom:0;position:absolute;z-index:1;content:\"\";-webkit-transition:background .35s ease-in-out;transition:background .35s ease-in-out}.cider-recipes a{position:absolute;top:10px;left:10px;bottom:10px;right:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;padding:10px;border:1px solid #fff;text-align:center;z-index:2;color:#fff;-webkit-transition:color .35s,border .35s;transition:color .35s,border .35s}.cider-recipes h3{margin:0}.cider-recipes:hover:before{background:rgba(126,119,109,.4)}.cider-recipes:hover a{border:1px solid #fff;color:#fff}.a{-ms-flex:0 0 40%;-webkit-box-flex:0;flex:0 0 40%;background-color:#e5e4e2;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg-light.svg);background-size:cover}.a,.b{margin-bottom:10px}.b{-ms-flex-positive:0;-webkit-box-flex:0;flex-grow:0;-ms-flex-negative:0;flex-shrink:0;width:calc(60% - 10px);background:gray;margin-left:10px}.cider-video{-ms-flex:0 0 70%;-webkit-box-flex:0;flex:0 0 70%}.cider-page-header .outer-container{display:none}.cider-listing{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding:6rem 0}.cider-listing .outer-container{border-bottom:1px solid #e5e4e2}.cider-listing:last-of-type .outer-container{border-bottom:none}.cider-listing h2{text-align:center;margin-bottom:40px}.cider-listing .cider-archive-list{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.cider-listing .cider-archive-list>*{padding:20px;-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}@media (min-width:540px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}@media (min-width:786px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){.cider-listing .cider-archive-list>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.cider-listing .cider-image-holder{width:100%;height:270px;margin:0 auto}.cider-listing .cider-image-holder img{max-height:100%;width:auto}.cider-listing .cider-link h3{font-size:1.6rem;text-align:center;-webkit-transition:color .35s ease-in-out;transition:color .35s ease-in-out;font-family:vinyl,serif;text-transform:uppercase;color:#97928a}.cider-listing .cider-link img{margin:0 auto;margin-bottom:40px;-webkit-transform:scale(1) translateY(0);transform:scale(1) translateY(0);-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.cider-listing .cider-link:hover h3{color:#2e8b57}.cider-listing .cider-link:hover img{-webkit-transform:scale(1.05) translateY(10px);transform:scale(1.05) translateY(10px)}.cider_list_images{width:100%;position:relative}.cider_list_images img{width:100%}@media screen and (max-width:1040px){.single-cider-intro .content-cider-image{margin:0 auto;margin-bottom:20px}.single-cider-intro .content-cider-info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;width:100%;text-align:center}.a{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;width:calc(50% - 5px);-ms-flex:0 0 calc(50% - 5px);-webkit-box-flex:0;flex:0 0 calc(50% - 5px);margin-bottom:10px;margin-right:5px}.b{-ms-flex-order:4;-webkit-box-ordinal-group:5;order:4;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.b,.cider-video{width:100%;margin:0}.cider-video{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-bottom:10px}.cider-recipes{-ms-flex-order:3;-webkit-box-ordinal-group:4;order:3;-ms-flex:0 0 calc(50% - 5px);-webkit-box-flex:0;flex:0 0 calc(50% - 5px);width:calc(50% - 5px);margin-bottom:10px;margin-left:5px}}@media screen and (max-width:700px){.a{margin-right:0}.a,.cider-recipes{width:100%;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.cider-recipes{margin-left:0;min-height:120px}.other-ciders{display:none}}.event_image_wrapper{width:100%;background:#fff;position:relative}.event_image_wrapper>*{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.event_image_wrapper>* img{width:100%}.archive-page-header{padding-top:120px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);text-align:center;border-bottom:1px solid #e5e4e2}.event-listings{position:relative}.event-listings .overlay-wrapper{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;background-size:contain;background-repeat:repeat}.event-listings .outer-container{z-index:2;position:relative}.post-type-archive-event .inner-container-f{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.post-type-archive-event .inner-container-f>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.post-type-archive-event .inner-container-f>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.post-type-archive-event .type-event .event-inner-wrap{display:inline-block;width:100%;background:#fff;-webkit-box-shadow:none;box-shadow:none;white-space:normal;-webkit-transform:translateY(0);transform:translateY(0);will-change:box-shadow,transform;-webkit-transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:-webkit-box-shadow .35s,-webkit-transform .35s;transition:box-shadow .35s,transform .35s;transition:box-shadow .35s,transform .35s,-webkit-box-shadow .35s,-webkit-transform .35s}.post-type-archive-event .type-event .event-inner-wrap:hover{-webkit-box-shadow:0 0 12px rgba(0,0,0,.1);box-shadow:0 0 12px rgba(0,0,0,.1);-webkit-transform:translateY(-2px);transform:translateY(-2px)}.post-type-archive-event .type-event .event_info_wrapper{padding:10px}.post-type-archive-event .type-event h4.event-title{margin:0;margin-bottom:5px;color:#7d776d}.post-type-archive-event .type-event p{margin:0;text-transform:none;font-size:1.5rem;letter-spacing:.05rem}.post-type-archive-event .chiles-events .event_info_wrapper{border-bottom:5px solid #973b15}.post-type-archive-event .nellysford-events .event_info_wrapper{border-bottom:5px solid #d4a74d}.post-type-archive-event .mills-events .event_info_wrapper{border-bottom:5px solid #973b15}.post-type-archive-event .carter-events .event_info_wrapper{border-bottom:5px solid #19353b}.post-type-archive-event .offsite-events .event_info_wrapper{border-bottom:5px solid #c69c54}.single-event h1{margin-top:-8px;line-height:1.2;margin-bottom:10px;font-size:42px}.single-event h5{font-size:20px}.single-event .icon-separator{width:8px;height:8px;display:inline-block;background:#d4a74d;margin:0 10px;margin-bottom:3px}.single-event .event_image_wrapper{margin-bottom:10px}.single-event .event_info .event-meta{background:#f8f8f8;border:1px solid #e5e4e2;margin-left:40px;padding:20px 3em;height:100%}.single-event .event_info .event-meta li{padding:10px 0}.single-event .list-head{display:block;text-transform:uppercase;font-family:vinyl,serif}.single-event .breadcrumbs-wrapper{background-color:transparent;margin-bottom:20px}@media screen and (max-width:1040px){.single-event .event_blurb,.single-event .event_info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.single-event .event_info{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-bottom:20px}.single-event .event_info .event-meta{margin:0;padding:20px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.single-event .event_info .event-meta li{-ms-flex:0 0 50%;-webkit-box-flex:0;flex:0 0 50%;padding:10px}.single-event .event_info .event-meta li:nth-of-type(2){-ms-flex-order:3;-webkit-box-ordinal-group:4;order:3}.single-event .event_info .event-meta li:nth-of-type(3){-ms-flex-order:4;-webkit-box-ordinal-group:5;order:4}}#changeme span{font-size:1.8rem;display:block}.event-listings-head{-ms-flex-wrap:wrap;flex-wrap:wrap;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.plink{display:inline-block;height:24px;line-height:24px;padding-right:10px;padding-left:25px;position:relative;font-family:myriad-pro,serif;letter-spacing:.15rem;font-size:1.1rem;font-weight:700;will-change:color;-webkit-transition:color .2s ease-in-out;transition:color .2s ease-in-out}.plink span{width:20px;height:20px;display:block;position:absolute;left:0;top:2px}.plink span svg{will-change:fill;-webkit-transition:fill .2s ease-in-out;transition:fill .2s ease-in-out;fill:#7d776d}.plink:hover{color:#973b15}.plink:hover span svg{fill:#973b15}.event-listings .outer-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:start;-webkit-box-align:start;align-items:flex-start}.event-listings .event-list{-ms-flex:1;-webkit-box-flex:1;flex:1}.event-listings .filter-list{-ms-flex:0 0 25%;-webkit-box-flex:0;flex:0 0 25%;margin-left:40px;min-width:250px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);border:1px solid #e5e4e2}.event-listings .filter-list .filter-list-inner{padding:20px;text-align:center}.event-listings .filter-list .filter-list-inner h4{margin-bottom:10px}.event-listings .filter-list .btn-val{display:block;width:100%;margin:0 auto;height:30px;border:1px solid #a9a6a1;background-color:transparent;margin-bottom:5px;outline:0;font-size:1.2rem;-webkit-transform:translateX(0);transform:translateX(0);will-change:transform,background;-webkit-transition:all .25s ease-in-out;transition:all .25s ease-in-out}.event-listings .filter-list .btn-val:last-of-type{margin-bottom:0}.event-listings .filter-list .btn-val:hover{-webkit-transform:translateX(2px);transform:translateX(2px)}.event-listings .filter-list .btn-val.is-active{background-color:#a9a6a1;color:#fff}.event-card{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-bottom:4rem}.event-card-left{position:relative;-ms-flex:0 0 40%;-webkit-box-flex:0;flex:0 0 40%;min-width:300px}.event-card-left .event_image{position:absolute;top:0;left:0;right:0;bottom:0}.event-card-right h4{font-family:vinyl,serif}.event-card-right h3{margin:0}.event-card-right p{margin:0;line-height:1.3}.event-card-right a{margin:20px 0;display:inline-block;color:#973b15;font-family:vinyl,serif;font-size:1.4rem}.event-card-right{-ms-flex:1;-webkit-box-flex:1;flex:1}.event-card-right .event-card-inner{padding-left:20px}@media screen and (max-width:900px){.archive-page-header{padding-top:60px}}@media screen and (max-width:1040px){.event-listings .event-list{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.event-listings .filter-list{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-left:0;margin-bottom:40px}.event-listings .filter-list .filter-list-inner{text-align:left}.event-listings .filter-list .btn-val{display:inline-block;width:auto}}@media screen and (max-width:800px){.single-event h5{font-size:1.4rem}.single-event .event_info .event-meta li{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;padding:10px}}@media screen and (max-width:650px){.event-listings-head{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.event-listings-head h1#changeme{text-align:center}.event-listings-head .events-list-buttons{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;text-align:center}.event-listings .filter-list .filter-list-inner{text-align:center}.event-listings .filter-list .filter-list-inner .btn-val{width:100%}.event-card-left{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.event-card-right .event-card-inner{padding-left:0;padding-top:20px}}.locations-listings{position:relative}.locations-listings:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.locations-listing{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.locations-listing>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.locations-listing>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}.locations-listing .location-image-wrap{background-color:#f0fff0;position:relative}.locations-listing .location-image-wrap .seasonal-taproom-banner{background:#d4a74d;padding:10px;color:#fff;font-family:vinyl,serif;font-size:1.4rem;position:absolute;top:0;left:0}.locations-listing .location-image-wrap .location-thumbnail{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.locations-listing .location-image-wrap .location-thumbnail img{will-change:transform;-webkit-transform:scale(1);transform:scale(1);-webkit-transition:-webkit-transform .75s;transition:-webkit-transform .75s;transition:transform .75s;transition:transform .75s,-webkit-transform .75s}.locations-listing .location-image-wrap .location-thumbnail:hover img{-webkit-transform:scale(1.03);transform:scale(1.03)}.locations-listing h3{margin:20px 0;color:#19353b}.locations-listing p{text-transform:none;letter-spacing:.05rem;white-space:normal}.location-details .icon-link{color:#7d776d;font-family:adelle,serif}.location-details .icon-link span svg{fill:#7d776d}.cider-review-wrapper .quote-inner-wrapper{width:100%;height:100%;padding:10px 20px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between}.cider-review-wrapper .quote-inner-wrapper .top{width:100%;height:60px;position:relative}.cider-review-wrapper .quote-inner-wrapper .top .quote-icon{height:40px;width:40px;position:absolute;top:50%;margin-top:-20px;left:50%;margin-left:-20px}.cider-review-wrapper .quote-inner-wrapper .top .quote-icon svg{fill:#97928a}.cider-review-wrapper .quote-inner-wrapper .top:before{left:0}.cider-review-wrapper .quote-inner-wrapper .top:after,.cider-review-wrapper .quote-inner-wrapper .top:before{width:calc(50% - 20px);height:1px;background:#97928a;position:absolute;top:50%;margin-top:-.5px;border-radius:2px;content:\"\"}.cider-review-wrapper .quote-inner-wrapper .top:after{right:0}.cider-review-wrapper .quote-inner-wrapper .quote-content{text-align:center}.cider-review-wrapper .quote-inner-wrapper .quote-content p{font-size:1.7rem;margin:0}.cider-review-wrapper .quote-inner-wrapper .bottom{width:100%;height:60px;position:relative}.cider-review-wrapper .quote-inner-wrapper .bottom:before{width:100%;height:1px;background:#a9a6a1;position:absolute;top:50%;margin-top:-.5px;left:0;border-radius:2px;content:\"\"}.no-hero-header{background:#f7f7f7;text-align:center}.blog-list-item{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;padding:40px 0;border-bottom:2px solid #edebea}.blog-list-item-info{-ms-flex:1 0 66.666%;-webkit-box-flex:1;flex:1 0 66.666%}.blog-list-item-info .bli-cat,.blog-list-item-info a{color:#c69c54;font-family:myriad-pro,serif;font-size:1.4rem;font-weight:600}.blog-list-item-info a{letter-spacing:.15rem;display:inline-block;margin-top:20px}.blog-list-item-info h3{margin:5px 0}.blog-list-item-info .bli-meta{font-size:1.4rem;margin-bottom:10px}.blog-list-item-info .bli-excerpt{padding-right:60px}.blog-list-item-image{-ms-flex:1 0 33.333%;-webkit-box-flex:1;flex:1 0 33.333%}.link-button{display:inline-block;color:#fff;text-transform:uppercase;background-color:#a9a6a1;font-family:vinyl,serif;padding:5px 15px;border-radius:2px;font-size:1.3rem;letter-spacing:.15rem;-webkit-transition:background-color .25s ease-in-out;transition:background-color .25s ease-in-out}.link-button:hover{background-color:#9d9994;color:#fff}@media screen and (max-width:767px){.blog-list-item-info{-ms-flex:1 0 100%;-webkit-box-flex:1;flex:1 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.blog-list-item-image{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-bottom:20px}}.breadcrumbs-wrapper{background:#f1f1ef;height:40px;line-height:40px}figure{margin:0}figcaption.wp-caption-text{font-size:1.5rem;padding:5px 0;font-style:italic}img.alignright{float:right;margin:0 0 1em 1em}img.alignleft{float:left;margin:0 1em 1em 0}img.aligncenter{display:block;margin-left:auto;margin-right:auto}.alignright{float:right;margin-left:40px}.alignleft{float:left;margin-right:40px}.aligncenter{display:block;margin-left:auto;margin-right:auto}.entry-title{margin:0}.entry-meta{font-size:1.4rem;font-style:italic}.the-post-content{margin-top:30px}.the-post-footer{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;margin-top:30px}.tags-icon{width:20px;height:20px;display:inline-block}.tags-icon svg{fill:gray}.tag-list>li{display:inline-block}.tag-list>li a{font-size:1.4rem;font-weight:300;letter-spacing:0;text-transform:none;color:gray}.tag-list>li:after{content:\",\";padding-right:5px}.tag-list>li:last-of-type:after{content:\"\"}.recipe-image-wrapper{position:relative;width:40%;max-width:400px;margin-left:40px}.recipe-image-wrapper>*{position:absolute;top:0;left:0;right:0;bottom:0;overflow:hidden}.recipe-image-wrapper>* img{width:100%}.recipe-meta{-ms-flex:1;-webkit-box-flex:1;flex:1}.recipe-meta .breadcrumb{margin-bottom:10px}.recipe-meta .recipe-details{margin-top:20px}.recipe-meta .recipe-details p{margin:0}.recipe-meta .recipe-details p.recipe-description{margin:10px 0}.the-recipe-ingredients h4{margin-bottom:10px}.recipe-ingredients-list{list-style-type:disc;padding-left:20px}.the-recipe-directions{margin-top:20px}.the-recipe-directions h4{margin-bottom:10px}.the-recipe-source{margin-top:10px}.post-wrapper-Recipes{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.post-wrapper-Recipes>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:786px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}@media (min-width:1140px){.post-wrapper-Recipes>*{-ms-flex-preferred-size:25%;flex-basis:25%;max-width:25%}}.post-wrapper-Recipes .blog-list-item{border-bottom:none;padding:0}.post-wrapper-Recipes .blog-list-item a{margin:20px 0;font-family:vinyl,serif;color:#7d776d;font-size:1.6rem;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}.post-wrapper-Recipes .blog-list-item a:hover{-webkit-transform:translateX(2px);transform:translateX(2px)}@media screen and (max-width:1000px){.recipe-meta{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.recipe-image-wrapper{width:100%;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-left:0;margin-bottom:10px}}.question{position:relative;margin-bottom:20px}.question:hover{cursor:pointer}.question h4{display:block;width:100%;padding-left:40px;line-height:40px;position:relative}.question .faq-icon{width:24px;height:24px;display:inline-block;position:absolute;top:8px;left:4px;fill:#7d776d;-webkit-transform:rotate(0deg);transform:rotate(0deg);-webkit-transition:-webkit-transform .35s;transition:-webkit-transform .35s;transition:transform .35s;transition:transform .35s,-webkit-transform .35s}.answer{max-height:0;overflow:hidden;-webkit-transition:max-height .25s ease-in-out;transition:max-height .25s ease-in-out}.answer p{width:100%;margin:0;padding:0 0 20px 40px}.question.is-expanded .faq-icon{-webkit-transform:rotate(45deg);transform:rotate(45deg);fill:#973b15}@media screen and (max-width:1000px){.question h4{display:block;width:100%;padding-left:40px;line-height:1.4}}.about-intro{position:relative}.about-intro:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.about-image-grid{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.about-image-grid .content{margin:0 10px}.about-quote-text{text-align:center}.about-quote-text h3{display:inline-block;line-height:50px;border-top:2px solid #973b15;border-bottom:2px solid #973b15;text-transform:uppercase;font-size:2.4rem;letter-spacing:.15rem;color:#973b15;font-family:vinyl,serif}.about-grid .outer-container-full{position:relative;background-size:cover}.about-grid .container-overlay{position:absolute;top:0;left:0;right:0;bottom:0;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background:rgba(0,0,0,.2);-ms-flex-pack:start;-webkit-box-pack:start;justify-content:flex-start}.about-grid .container-overlay .content{width:500px;margin-left:15%}.about-grid .container-overlay h2{color:#fff;text-transform:uppercase;font-size:64px}.about-bottom-text{position:relative}.about-bottom-text:after{position:absolute;top:0;bottom:0;left:0;right:0;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/grunge-bg3-dark.svg);z-index:2;content:\"\";background-repeat:no-repeat;background-position:100%;z-index:-1;background-size:contain;background-repeat:repeat}.stop-by .outer-container-full{position:relative;background-size:cover;background-repeat:no-repeat}.stop-by .container-overlay{position:absolute;top:0;left:0;right:0;bottom:0;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;background:rgba(0,0,0,.25);-ms-flex-pack:end;-webkit-box-pack:end;justify-content:flex-end}.stop-by .container-overlay,.stop-by .container-overlay .content{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.stop-by .container-overlay .content{width:400px;margin-right:15%;background:#f1f1ef;border-radius:3px;padding:20px;text-align:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.stop-by .container-overlay .content p{margin-top:10px}@media screen and (max-width:900px){.stop-by .container-overlay{-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.stop-by .container-overlay .content{margin:0}}@media screen and (max-width:700px){.about-image-grid .content{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin-bottom:20px}.about-image-grid .content:last-of-type{margin-bottom:0}.about-image-grid .content img{width:100%}.about-quote-text h3{line-height:30px}.about-grid .container-overlay h2{font-size:36px;text-align:center}.about-grid .container-overlay .content{margin:0 auto;width:70%}.stop-by .outer-container-full{min-height:300px}.stop-by .container-overlay .content{margin:0 auto;width:90%}}.cider101-intro{background:#f2f2f2}.process-slider{width:80%;max-width:550px;margin:0 auto;text-align:center}.process-slider .slick-dots{position:relative;padding:0 40px}.process-slider .slick-dots:after{content:\"\";width:100%;position:absolute;top:50%;margin-top:-1px;height:2px;background:#7d776d;left:0;border-radius:2px;z-index:-1}.process-slider .slick-dots li:before{display:none}.process-slider .slick-dots li{width:24px;height:24px;border-radius:100%;border:2px solid #7d776d;background:#fff;text-align:center;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;cursor:pointer}.process-slider .slick-dots li a{letter-spacing:0;font-size:1.1rem;line-height:23px;height:22px;color:#7d776d;font-family:vinyl,serif}.process-slider .slick-dots li.slick-active{background:#7d776d}.process-slider .slick-dots li.slick-active a{color:#fff}.process-slide{padding:20px}.process-slide .process-description-wrapper{margin-top:10px}.cider-facts{background:#5e5952;padding:6rem 0}.cider-facts h3{color:#fff;text-align:center}.fact-wrapper{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-25px;margin-right:-25px;list-style:none}.fact-wrapper>*{padding:25px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.fact-wrapper>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:786px){.fact-wrapper>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:1140px){.fact-wrapper>*{-ms-flex-preferred-size:33.33333%;flex-basis:33.33333%;max-width:33.33333%}}.fact-wrapper h4{height:40px;line-height:40px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;color:#fff}.fact-wrapper h4 .icon{display:inline-block;width:20px;height:20px;margin-right:5px}.fact-wrapper h4 .icon svg{fill:#fff}.fact-wrapper p{padding-left:25px;margin:0;color:#f2f2f2}.inner-container-f .commit-column{display:-ms-flexbox;display:-webkit-box;display:flex;padding:10px;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}.inner-container-f .commit-column .event_image_wrapper{width:60%}.inner-container-f .commit-column .quote-text{margin-left:20px;-ms-flex:1;-webkit-box-flex:1;flex:1}.inner-container-f .commit-column .blurb-text{margin-right:20px;-ms-flex:1;-webkit-box-flex:1;flex:1}.callout-wrapper{background:#f1f1ef;padding:20px;position:relative;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.callout-wrapper:after{content:\"\";position:absolute;top:10px;left:10px;right:10px;bottom:10px;border:1px solid #e5e4e2}.callout-wrapper p{margin:0;text-align:center}.values{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.values .value{background:#fff;border:1px solid #e5e4e2;position:relative;margin:10px 0}.values .value .heading{width:200px;position:absolute;top:0;left:0;bottom:0;border-right:1px solid #e5e4e2;padding:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center}.values .value .heading span{position:absolute;top:0;left:0;right:0;bottom:0}.values .value .heading span svg{fill:rgba(151,59,21,.2)}.values .value .heading h4{position:relative;z-index:2}.values .value .content{padding:20px 20px 20px 220px}@media screen and (max-width:900px){.inner-container-f .commit-column{-ms-flex-direction:column;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.inner-container-f .commit-column .event_image_wrapper{width:100%;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1}.inner-container-f .commit-column .quote-text{margin-left:0;margin-top:20px;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}.inner-container-f .commit-column .blurb-text{margin-right:0;margin-top:20px;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2}}@media screen and (max-width:700px){.values .value{padding-top:80px}.values .value .heading{width:100%;border-right:none;border-bottom:1px solid #e5e4e2;height:80px}.values .value .content{text-align:center;padding-left:20px}}.story-intro{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png)}.history-banner{position:absolute;top:-15px;left:50%;margin-left:-65px;width:130px;height:30px}.history-banner img{width:100%}.our-history{position:relative}.our-history:before{content:\"\";width:1px;background:#e5e4e2;position:absolute;top:0;bottom:0;left:50%}.history-wrap{max-width:1000px;margin:0 auto}.history-item{display:-ms-flexbox;display:-webkit-box;display:flex;padding:8rem 0;-ms-flex-pack:justify;-webkit-box-pack:justify;justify-content:space-between;-ms-flex-wrap:wrap;flex-wrap:wrap;opacity:0;position:relative;-webkit-transform:translateY(50px);transform:translateY(50px);-webkit-transition:all 1s ease-out;transition:all 1s ease-out}.history-item .history-head{position:absolute;top:0;right:0;left:0;text-align:center}.history-item .history-head .history-head-content{display:inline-block;background:#f1f1ef;border:1px solid #e5e4e2;height:26px;line-height:26px;width:100px;text-align:center;font-size:1.4rem;font-family:vinyl,serif;text-transform:uppercase;color:#a9a6a1}.history-item .side-one{-ms-flex:1;-webkit-box-flex:1;flex:1;margin-right:20px;-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1}.history-item .side-one .event_image_wrapper{background:#fff}.history-item .side-two{-ms-flex:0 0 45%;-webkit-box-flex:0;flex:0 0 45%;-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin-right:0;margin-left:40px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;background:#fff}.history-item:nth-child(odd) .side-one{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin-left:20px;margin-right:0}.history-item:nth-child(odd) .side-two{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin-right:40px;margin-left:0}.history-item.fade-in{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}@media screen and (max-width:960px){.history-wrap{max-width:600px}.history-item{margin:4rem 0}.history-item .side-one,.history-item .side-two{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;margin:0;text-align:center}.history-item:nth-child(odd) .side-one{-ms-flex-order:1;-webkit-box-ordinal-group:2;order:1;margin:0}.history-item:nth-child(odd) .side-two{-ms-flex-order:2;-webkit-box-ordinal-group:3;order:2;margin:0}}.contact-blurb{-ms-flex:1;-webkit-box-flex:1;flex:1}.contact-info{margin-left:50px}@media screen and (max-width:700px){.contact-blurb,.contact-info{-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%}.contact-info{margin-left:0}}.contact-form{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bg-noise.png);padding:6rem 0}.popup-item-wrap{position:relative;display:inline-block;margin-right:10px}.popup-item-wrap .popup-item-emblem-wrap{width:70px;height:70px}.popup-item-wrap .popup-item-emblem-wrap a.popup-item-emblem{cursor:pointer}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem{width:70px;height:70px;display:inline-block;position:relative}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem svg{fill:#d4a74d}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count{position:absolute;top:0;left:0;right:0;bottom:0;font-family:vinyl,serif;color:#fff;padding-top:14px}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count span{display:block;text-align:center;line-height:1;font-size:10px;text-transform:uppercase}.popup-item-wrap .popup-item-emblem-wrap .popup-item-emblem .count span.number{font-size:18px}.popup-item-wrap .popup-item-emblem-wrap .popup-triangle{display:none;width:0;height:0;position:absolute;border-left:10px solid transparent;border-right:10px solid transparent;border-bottom:10px solid #fff;bottom:-10px;left:25px;z-index:3;opacity:0;-webkit-transition:opacity .25s;transition:opacity .25s}.popup-item-wrap .popup-item-content{display:none;width:200px;background:#fff;padding:20px;position:absolute;top:100%;-webkit-transform:translate(-50%,10px);transform:translate(-50%,10px);margin-left:35px;-webkit-box-shadow:1px 2px 2px 0 rgba(0,0,0,.1);box-shadow:1px 2px 2px 0 rgba(0,0,0,.1);z-index:2;opacity:0;-webkit-transition:opacity .25s;transition:opacity .25s;text-align:center}.popup-item-wrap:hover .popup-item-content,.popup-item-wrap:hover .popup-item-emblem-wrap .popup-triangle{display:inline-block;opacity:1}.awards-wrap{margin-top:20px}.awards-header{padding-bottom:10px;padding-top:10px;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:end;-webkit-box-align:end;align-items:flex-end;margin-bottom:10px}.awards-header h2{margin:0;font-size:2rem}ul.awards-items-list{width:100%;display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;position:relative;border:1px solid #e5e4e2}ul.awards-items-list li.awards-item{background:#fff;width:50%;padding:10px;padding-left:30px;border-top:1px solid #e5e4e2;position:relative;font-size:1.4rem}ul.awards-items-list li.awards-item:first-child,ul.awards-items-list li.awards-item:nth-child(2){border-top:none}ul.awards-items-list li.awards-item span{position:absolute;width:20px;height:20px;background-size:cover;background-position:50%;background-repeat:no-repeat;top:50%;margin-top:-11px;left:5px}ul.awards-items-list li.awards-item span.award-icon-gold{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/gold-medal.png)}ul.awards-items-list li.awards-item span.award-icon-silver{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/silver-medal.png)}ul.awards-items-list li.awards-item span.award-icon-bronze{background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/images/dist/bronze-medal.png)}ul.awards-items-list:after{height:100%;content:\"\";width:1px;background:#e5e4e2;position:absolute;top:0;left:50%}.awards-items-trigger{width:100%;-ms-flex:0 0 100%;-webkit-box-flex:0;flex:0 0 100%;background:#cbc9c5;color:#fff;font-family:vinyl,serif;text-transform:uppercase;text-align:center;padding:5px 0;position:relative;z-index:2;margin-top:10px}.awards-items-trigger:before{content:\"Show More\"}.awards-items-trigger.show-less:before{content:\"Show Less\"}@media screen and (max-width:1140px){ul.awards-items-list:after{display:none}ul.awards-items-list li.awards-item{width:100%}ul.awards-items-list li.awards-item:nth-child(2){border-top:1px solid #e5e4e2}}.finder-intro .inner-container-b{margin-bottom:10px}.finder-intro .iframe-wrapper iframe{position:static;width:100%;max-width:100%}.sc_clearfix:after{content:\"\";display:table;table-layout:fixed;clear:both}#sc_calendar table{width:100%;border-collapse:collapse;float:left}#sc_calendar th{background:#fdfdfd;text-align:center;text-transform:capitalize;padding:3px 4px!important;font-size:1.2rem}#sc_calendar td,#sc_calendar th{width:13.25%;border:1px solid #ddd}#sc_calendar td{font-size:11px;padding:0!important}#sc_calendar td.calendar-day{background:#fbfbfb;height:40px}#sc_calendar td.calendar-day-np{background:#f0f0f0}#sc_calendar td div.sc_day_div{padding:8px}#sc_events_calendar_head{padding:8px;background:#f0f0f0;border:1px solid #ddd;border-bottom:0}#sc_event_nav_wrap,#sc_event_select,#sc_events_calendar_head h2{width:33%;float:left;margin:0;clear:none}#sc_event_nav_wrap{text-align:right}#sc_event_nav_wrap form{display:inline;text-align:right}#sc_events_calendar_head h2{text-align:center;line-height:26px;font-size:1.8rem}#sc_events_calendar_head select{font-size:.7rem}#sc_events_calendar_head input{font-size:1rem;padding:2px 10px}#sc_events_calendar input,#sc_events_calendar select{margin:0 5px 0 0}.sc_small #sc_event_nav_wrap{margin:8px 0 0}.sc_small #sc_event_nav_wrap,.sc_small #sc_event_select{float:none;width:100%}.sc_small #sc_calendar td div{padding:1px}.sc_small #sc_event_nav_next,.sc_small #sc_event_nav_prev{display:block;width:50%;float:left}.sc_small #sc_event_nav_prev{text-align:left}#sc_calendar td div.day-number{float:right;margin:-6px -4px 0 0}.sc_small #sc_calendar td div.day-number{float:none;text-align:right;padding:0;margin:-3px 1px 0 0}.sc_event_details{margin:0 0 15px}.sc_events_list .sc_event{clear:both}.sc_events_list .sc_event_categories,.sc_events_list .sc_event_date,.sc_events_list .sc_event_link,.sc_events_list .sc_event_time,.sc_events_list .sc_event_title{float:left;clear:left}.sc_events_calendar a{white-space:normal;padding-top:2px;font-size:1.2rem;text-transform:none;color:#973b15}#content .inner-container{overflow:hidden}@media only screen and (max-width:680px){.sc-table{overflow:hidden}.sc-table th{display:none}#content .sc-table tr td{display:block;text-align:left;padding-left:50%;width:auto}.sc-table td:first-child{padding-top:.5em}.sc-table td:last-child{padding-bottom:.5em}.sc-table td:first-child{background-color:rgba(0,0,0,.1)}#sc_calendar td.calendar-day{height:auto;overflow:hidden}#sc_calendar .sc-table td.calendar-day-np{display:none}#sc_calendar td div.day-number{float:left;margin:0 5px 5px 0}#sc-calendar .sc-table .sc_day_div{overflow:hidden}#sc_events_calendar_head h2{width:100%;margin:0 0 10px}#sc_event_nav_wrap{text-align:center;margin:0 auto;float:none}#sc_event_nav_wrap form{display:inline;text-align:center}}.all-media .inner-container{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-direction:row;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-ms-flex-flow:wrap;flex-flow:wrap;margin-left:-20px;margin-right:-20px;list-style:none}.all-media .inner-container>*{padding:20px;-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}@media (min-width:540px){.all-media .inner-container>*{-ms-flex-preferred-size:100%;flex-basis:100%;max-width:100%}}@media (min-width:786px){.all-media .inner-container>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}@media (min-width:1140px){.all-media .inner-container>*{-ms-flex-preferred-size:50%;flex-basis:50%;max-width:50%}}a.button{padding:0 40px;background:0 0;text-decoration:none;color:#19353b;text-transform:uppercase;font-weight:700;letter-spacing:.2rem;font-size:14px;font-size:1.4rem;-webkit-transition:-webkit-transform .25s ease-in-out;transition:-webkit-transform .25s ease-in-out;transition:transform .25s ease-in-out;transition:transform .25s ease-in-out,-webkit-transform .25s ease-in-out}.icon-button,a.button{display:inline-block;height:40px;line-height:40px}.icon-button{background:gray;padding:0 30px;padding-right:55px;position:relative;color:#fff}.icon-button .button-text{display:inline-block}.icon-button .button-icon{width:20px;height:20px;background:#00f;display:inline-block;position:absolute;top:50%;margin-top:-10px;right:25px;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.icon-button:hover{color:#fff}.icon-button:hover .button-icon{-webkit-transform:translateX(3px);transform:translateX(3px);opacity:1;-webkit-transition:-webkit-transform .35s ease-in-out;transition:-webkit-transform .35s ease-in-out;transition:transform .35s ease-in-out;transition:transform .35s ease-in-out,-webkit-transform .35s ease-in-out}.slideButton{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px}.slideButton:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0}.slideButton:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.slideButton:hover:before{opacity:1;-webkit-animation:q .4s;animation:q .4s}.slideButton:hover:after{-webkit-animation:r .4s;animation:r .4s}.slideButton:hover span{opacity:0}@-webkit-keyframes q{0%{-webkit-transform:translateY(0);transform:translateY(0)}50%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:1}51%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:0}52%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:0}53%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:1}to{-webkit-transform:translateY(0);transform:translateY(0)}}@keyframes q{0%{-webkit-transform:translateY(0);transform:translateY(0)}50%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:1}51%{-webkit-transform:translateY(-150%);transform:translateY(-150%);opacity:0}52%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:0}53%{-webkit-transform:translateY(200%);transform:translateY(200%);opacity:1}to{-webkit-transform:translateY(0);transform:translateY(0)}}@-webkit-keyframes r{0%{-webkit-transform:translateY(0);transform:translateY(0)}to{-webkit-transform:translateY(-200%);transform:translateY(-200%)}}@keyframes r{0%{-webkit-transform:translateY(0);transform:translateY(0)}to{-webkit-transform:translateY(-200%);transform:translateY(-200%)}}.share-buttons{display:none}a{text-transform:uppercase;text-decoration:none;white-space:nowrap;font-size:inherit;color:#7d776d;cursor:pointer}a:active,a:focus,a:hover{outline:0}a.link{height:40px;line-height:40px;margin-top:20px}a.link,a.maplink{display:inline-block;position:relative}a.maplink{height:24px;padding-right:25px;padding-left:10px;line-height:24px;font-family:myriad-pro,serif;font-weight:600;letter-spacing:.1rem;font-size:1.3rem;margin:5px 0;color:#fff;background:#97928a;border-radius:3px}a.maplink span{width:20px;height:20px;display:block;position:absolute;top:2px;right:0;will-change:transform}a.maplink span svg{fill:#fff}a.maplink:hover span{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-fill-mode:both;animation-fill-mode:both;-webkit-animation-name:n;animation-name:n;-webkit-transform-origin:center bottom;transform-origin:center bottom}a.emaillink{text-transform:none;color:inherit}.breadcrumb{font-family:vinyl,serif;font-size:1.4rem;text-transform:uppercase}.breadcrumb a{color:#7d776d}.breadcrumb .current{color:#97928a}a.arrow-button{display:inline-block;height:30px;line-height:30px;position:relative;text-transform:none;font-weight:600;font-size:1.6rem;color:#973b15;margin:20px 0}a.arrow-button span{width:30px;height:30px;display:block;position:absolute;top:0;right:-35px;-webkit-transform:translateX(0);transform:translateX(0);-webkit-transition:-webkit-transform .25s;transition:-webkit-transform .25s;transition:transform .25s;transition:transform .25s,-webkit-transform .25s}a.arrow-button span svg{fill:#973b15}a.arrow-button:hover span{-webkit-transform:translateX(3px);transform:translateX(3px)}.button-bg{background:#19353b;padding:5px 45px 5px 15px;display:inline-block;border-radius:3px;margin-top:10px}.button-bg a.arrow-button{color:#fff;margin:0}.button-bg a.arrow-button span svg{fill:#fff}.home-lineup a.arrow-button{color:#e5e4e2;margin:5px 0;font-size:2rem;letter-spacing:.05rem}.home-lineup a.arrow-button span svg{fill:#e5e4e2}.icon-link{display:block;line-height:30px;position:relative;padding-left:35px;font-size:1.6rem;font-family:vinyl,serif;color:#973b15;text-transform:uppercase;margin:5px 0}.icon-link span{width:30px;height:30px;display:block;position:absolute;top:0;left:0}.icon-link span svg{fill:#973b15}.inline-link,p>a{text-transform:none;color:#d4a74d;-webkit-transition:color .2s;transition:color .2s;font-weight:600}.inline-link:hover,p>a:hover{color:#a9a6a1}.email-link,.phone-link{font-size:1.6rem;color:#7d776d;display:block;line-height:30px;position:relative;padding-left:35px;text-transform:none}.email-link span,.phone-link span{width:30px;height:30px;display:block;position:absolute;top:0;left:0}.email-link span svg,.phone-link span svg{fill:#7d776d}input[type=color],input[type=date],input[type=datetime-local],input[type=datetime],input[type=email],input[type=month],input[type=number],input[type=password],input[type=range],input[type=search],input[type=tel],input[type=text],input[type=time],input[type=url],input[type=week],textarea{color:#97928a;border:1px solid #e5e4e2;border-radius:3px;padding:3px}input[type=color]:focus,input[type=date]:focus,input[type=datetime-local]:focus,input[type=datetime]:focus,input[type=email]:focus,input[type=month]:focus,input[type=number]:focus,input[type=password]:focus,input[type=range]:focus,input[type=search]:focus,input[type=tel]:focus,input[type=text]:focus,input[type=time]:focus,input[type=url]:focus,input[type=week]:focus,textarea:focus{color:#973b15;border:1px solid #973b15;outline:0}select{border:1px solid #e5e4e2}textarea{width:100%}::-webkit-input-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}::-moz-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}:-ms-input-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}:-moz-placeholder{color:#97928a;font-family:adelle,serif;font-size:1.3rem}#gform_1 .gfield_label{display:none}#gform_1 input[type=submit]{border:0;font-size:1.4rem;font-family:vinyl,serif;color:#fff;background:#973b15;padding:10px 20px;text-transform:uppercase;border-radius:3px}.newsletter_form form input[type=email]:focus,.newsletter_form form input[type=text]:focus{color:#e5e4e2;outline:0;border:0}.newsletter_form form ::-webkit-input-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form ::-moz-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form :-ms-input-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}.newsletter_form form :-moz-placeholder{color:rgba(228,227,226,.6);font-family:myriad-pro,serif;font-size:1.4rem}@media screen and (min-width:786px){.split-list ul{-webkit-column-count:2;column-count:2}}#gform_2 ::-webkit-input-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 ::-moz-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 :-ms-input-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 :-moz-placeholder{color:#fff;font-family:adelle,serif;font-size:1.4rem}#gform_2 input[type=submit]{border:0;font-size:1.4rem;font-family:vinyl,serif;color:#fff;background:#973b15;padding:10px 20px;text-transform:uppercase;border-radius:3px}#gform_2 .gform_wrapper .top_label .gfield_label{display:none!important}#gform_2 .gfield_radio label{color:#7d776d;font-family:adelle,serif;font-size:1.4rem}#gform_2 .gfield_label{color:#97928a;font-size:1.4rem;font-family:myriad-pro,serif;letter-spacing:.15rem;text-transform:uppercase;font-weight:600}@media screen and (max-width:768px){#gform_2 .se-no-label .gfield_label{display:none}#gform_2 ::-webkit-input-placeholder{color:#7d776d}#gform_2 ::-moz-placeholder{color:#7d776d}#gform_2 :-ms-input-placeholder{color:#7d776d}#gform_2 :-moz-placeholder{color:#7d776d}}.overflow-hidden{overflow:hidden}.hours-modal{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(202,200,196,.9);display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center;-ms-flex-pack:center;-webkit-box-pack:center;justify-content:center;z-index:3000;overflow-y:auto;cursor:pointer;visibility:hidden;opacity:0;-webkit-transition:opacity .3s 0,visibility 0 .3s;transition:opacity .3s 0,visibility 0 .3s}.hours-modal-container{position:relative;width:90%;max-width:600px;background:rgba(228,227,226,.6);cursor:auto;border-radius:.25em;-webkit-transform:translateY(-30px);transform:translateY(-30px);-webkit-transition-property:-webkit-transform;transition-property:-webkit-transform;transition-property:transform;transition-property:transform,-webkit-transform;-webkit-transition-duration:.3s;transition-duration:.3s}#hours-food,#hours-special,#special-event{display:none;padding:30px;background:rgba(255,255,255,.9);-webkit-box-shadow:0 0 5px 0 rgba(0,0,0,.15);box-shadow:0 0 5px 0 rgba(0,0,0,.15);max-height:70vh;overflow:scroll}.hours-modal.is-visible{visibility:visible;opacity:1;-webkit-transition:opacity .3s 0,visibility 0 .3s;transition:opacity .3s 0,visibility 0 .3s}.hours-modal.is-visible .hours-modal-container{-webkit-transform:translateY(0);transform:translateY(0)}#hours-food.is-selected,#hours-special.is-selected,#special-event.is-selected,.close-hrs{display:block}.close-hrs{position:absolute;width:40px;height:40px;right:0;top:-40px;background:url(https://s3-us-west-2.amazonaws.com/s.cdpn.io/148866/cd-icon-close.svg) no-repeat 50%;text-indent:100%;white-space:nowrap;overflow:hidden}.sphrs_inner_wrap h3{font-family:vinyl,serif;font-size:2rem;text-transform:uppercase;border-bottom:1px solid #e5e4e2}@media only screen and (min-width:600px){.cd-user-modal-container{margin:4em auto}.sphrs_inner_wrap h3{font-size:2.6rem}}img{height:auto;max-width:100%;border:0;outline:0;display:block}.aspect{width:100%;z-index:-10;position:relative;opacity:0}svg{height:100%;width:100%;display:block}.spriteSheet{max-height:0}.spinner-logo{width:150px;height:150px}.social{display:-ms-flexbox;display:-webkit-box;display:flex;-ms-flex-align:center;-webkit-box-align:center;align-items:center}.social li{display:inline-block;width:28px;height:28px;background-color:rgba(255,255,255,.8);border-radius:100%;margin:0 10px;cursor:pointer;-webkit-transform:translateY(0);transform:translateY(0);-webkit-transition:background-color .25s,-webkit-transform .25s;transition:background-color .25s,-webkit-transform .25s;transition:transform .25s,background-color .25s;transition:transform .25s,background-color .25s,-webkit-transform .25s}.social li:first-of-type{margin-left:0}.social li:last-of-type{margin-right:0}.social li a{width:20px;height:20px;margin:4px;display:block}.social li:hover{background-color:#fff;-webkit-transform:translateY(-2px);transform:translateY(-2px)}.top-bar .social svg{fill:#7d776d}footer .social svg{fill:#97928a}.callout_item .social li{background-color:rgba(126,119,109,.8)}.callout_item .social li:hover{background-color:#7d776d}.callout_item .social svg{fill:#f1f1ef}.embed-container{position:relative;padding-bottom:56.25%;height:0;overflow:hidden;max-width:100%;height:auto}.embed-container iframe{position:absolute;top:0;left:0;width:100%;height:100%}#instafeed{display:-ms-flexbox;display:-webkit-box;display:flex}.slick-slider{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-ms-touch-action:pan-y;touch-action:pan-y;-webkit-tap-highlight-color:transparent}.slick-list,.slick-slider{position:relative;display:block}.slick-list{overflow:hidden;margin:0;padding:10px 0}.slick-list:focus{outline:0}.slick-list.dragging{cursor:pointer;cursor:hand}.slick-slider .slick-list,.slick-slider .slick-track{-webkit-transform:translateZ(0);transform:translateZ(0)}.slick-track{position:relative;top:0;left:0;display:block}.slick-track:after,.slick-track:before{display:table;content:\"\"}.slick-track:after{clear:both}.slick-loading .slick-track{visibility:hidden}.slick-slide{display:none;float:left;outline:0;height:100%;min-height:1px}[dir=rtl] .slick-slide{float:right}.slick-slide img{display:block}.slick-slide.slick-loading img{display:none}.slick-slide.dragging img{pointer-events:none}.slick-initialized .slick-slide{display:block}.slick-loading .slick-slide{visibility:hidden}.slick-vertical .slick-slide{display:block;height:auto;border:1px solid transparent}.slick-arrow.slick-hidden{display:none}.slick-dots{display:inline-block;margin:0 auto;margin-top:20px}.slick-dots li{float:left;margin:0 5px;position:relative}.slick-dots li button{display:none}.slick-dots li:before{width:7px;height:7px;background:#a9a9a9;display:block;content:\"\";border-radius:100%;-webkit-transition:background .2s ease-in-out;transition:background .2s ease-in-out}.slick-dots li.slick-active:before{background:gray;-webkit-transition:background .2s ease-in-out;transition:background .2s ease-in-out}.slick-next,.slick-prev{font-size:0;line-height:0;position:absolute;top:50%;display:block;width:30px;height:30px;margin-top:-15px;padding:0;cursor:pointer;color:transparent;border:0;outline:0;background:0 0}.slick-next:before,.slick-prev:before{content:\"\";width:30px;height:30px;background-image:url(http://brhs.flywheelsites.com/wp-content/themes/boldrock/icons/raw/caratalt.svg);background-size:cover;background-position:50%;display:block}.slick-prev{left:-30px;-webkit-transform:rotate(180deg);transform:rotate(180deg)}.slick-next{right:-30px}.flex{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap}.search-form,.finder{max-width:1600px;margin:0 auto}.hero.fh-400{height:300px;min-height:300px}.finder{min-height:calc(100vh - 300px)}.headerSpacer{height:120px;width:100%;display:block}.search-col{-webkit-box-flex:0;-ms-flex:0 0 calc(100% - 80px);flex:0 0 calc(100% - 80px);-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2;margin:40px}.map-col{-webkit-box-flex:0;-ms-flex:0 0 100%;flex:0 0 100%;-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1}#map{height:400px}.search{background:#f7f7f7;padding:40px}.search-col h3{margin-top:0}.search-col h5{margin-bottom:0;font-size:16px;color:#c69c54}.search-col p{margin:0}.search-col a{color:#969087;font-weight:600}.location-qwrap{width:100%;height:40px}.marker-icon-btn{display:-webkit-box;display:-ms-flexbox;display:flex;height:40px;font-size:1.6rem;-webkit-box-align:center;-ms-flex-align:center;align-items:center}.marker-icon-btn span{-webkit-box-flex:1;-ms-flex:1;flex:1}.marker-icon-btn .location-btn-wrap{display:-webkit-box;display:-ms-flexbox;display:flex}.marker-icon-btn .location-btn-wrap button{padding:0 10px;background:#be9a5c;height:30px;line-height:30px;margin-right:10px;border:0;font-family:\"vinyl\";color:#fff;font-size:1.6rem;letter-spacing:.15rem;text-transform:uppercase}.pagination{padding:10px 0;border-top:1px solid #ddd;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-ms-flex-pack:justify;justify-content:space-between}#locationResults{position:relative;height:calc(100vh - 140px);overflow-y:scroll}.search-form{width:100%;-webkit-box-pack:start;-ms-flex-pack:start;justify-content:flex-start}input[type=text]{color:gray;border:2px solid #cab282;padding:0 16px;height:40px;line-height:36px;margin:10px 5px;width:calc(50% - 10px);font-size:16px;background:0 0}#zip::-webkit-input-placeholder{color:gray;font-size:16px;opacity:1}#zip::-moz-placeholder{color:gray;font-size:16px;opacity:1}#zip:-ms-input-placeholder{color:gray;font-size:16px;opacity:1}#zip:-moz-placeholder{color:gray;font-size:16px;opacity:1}.custom-select{position:relative;font-size:1.6rem;color:#969087;margin:10px 5px}.custom-select select{display:none}.select-selected{background-color:transparent;color:gray;border:2px solid #be9a5c;padding:0 16px;height:40px;line-height:36px;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-selected:after{position:absolute;content:\"\";top:18px;right:10px;width:0;height:0;border:6px solid transparent;border-color:#be9a5c transparent transparent transparent}.select-selected.select-arrow-active:after{border-color:transparent transparent #be9a5c transparent;top:12px}.select-items div{color:gray;padding:8px 16px;border:2px solid #e5e4e2;border-top:none;border-bottom:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.select-items{position:absolute;background-color:#fff;top:100%;left:0;right:0;z-index:99}.select-items:after{content:'';width:100%;height:2px;background:#e5e4e2;position:absolute;bottom:0;left:0}.select-hide{display:none}.select-items div:hover,.same-as-selected{background-color:rgba(0,0,0,.1)}.page-id-9410 footer{background:#000}.location{margin-bottom:20px}.location h5{line-height:1.2;height:auto}#zip{display:none}#zip.is-shown{display:block}.is-hidden{display:none}.loading-active{color:red}.location-complete{color:green}.slideButton{border-radius:3px;position:relative;background-color:#973b15;color:#fff;overflow:hidden;display:inline-block;height:40px;line-height:40px;padding:0 15px;border:0;text-transform:uppercase;margin:10px 0}.slideButton:before{margin:auto;content:attr(data-hover);position:absolute;left:0;right:0;text-align:center;opacity:0}.slideButton:after{content:\"\";position:absolute;top:100%;left:0;height:100%;width:100%;background:#c44c1b}.card-holder{position:relative;width:100%;height:40px}.card-front{z-index:8;background:#fff}.card-back{z-index:4;background:#fff}.card-holder:hover .card-front{-webkit-transform:rotateX(-.5turn);transform:rotateX(-.5turn)}.card-holder:hover .card-back{-webkit-transform:rotateX(0turn);transform:rotateX(0turn)}.card{position:absolute;width:100%;height:100%;-webkit-transition:-webkit-transform 1s ease;transition:-webkit-transform 1s ease;transition:transform 1s ease;transition:transform 1s ease,-webkit-transform 1s ease;-webkit-backface-visibility:hidden;backface-visibility:hidden}.container{-webkit-perspective:1000px;perspective:1000px}.cider_finder_button{cursor:pointer;font-family:\"vinyl\";letter-spacing:.15rem;font-size:1.6rem}@media screen and (min-width:768px){.hero.fh-400{height:350px;min-height:350px}.finder{height:100vh;min-height:600px}.search-col{-webkit-box-flex:0;-ms-flex:0 0 320px;flex:0 0 320px}.search-col .content{-webkit-transform:translateX(-400px);transform:translateX(-400px);-webkit-box-ordinal-group:2;-ms-flex-order:1;order:1;-webkit-transition:all 200ms cubic-bezier(.61,.92,.68,1.14) 0s;transition:all 200ms cubic-bezier(.61,.92,.68,1.14) 0s}.search-col.results-revealed .content{-webkit-transform:translateX(0);transform:translateX(0)}.map-col{-webkit-box-flex:1;-ms-flex:1 0 auto;flex:1 0 auto;-webkit-box-ordinal-group:3;-ms-flex-order:2;order:2}#map{height:100vh;min-height:600px}}@media screen and (min-width:1240px){.search-form{-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center}}"],"sourceRoot":""}]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/html-entities/index.js":
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__("./node_modules/html-entities/lib/xml-entities.js"),
  Html4Entities: __webpack_require__("./node_modules/html-entities/lib/html4-entities.js"),
  Html5Entities: __webpack_require__("./node_modules/html-entities/lib/html5-entities.js"),
  AllHtmlEntities: __webpack_require__("./node_modules/html-entities/lib/html5-entities.js")
};


/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (!str || !str.length) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLength = str.length;
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    if (!str || !str.length) {
        return '';
    }
    var strLenght = str.length;
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;


/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else if (typeof module === 'object' && module.exports) {
        module.exports = definition();
    } else {
        root.log = definition();
    }
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/punycode/punycode.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/module.js")(module), __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__("./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__("./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.1.4 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.SockJS = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = (this._rto * Transport.roundTrips) || 5000;
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = 'true';
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

/* global crypto:true */
var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.1.4';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000
var m = s * 60
var h = m * 60
var d = h * 24
var y = d * 365.25

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {}
  var type = typeof val
  if (type === 'string' && val.length > 0) {
    return parse(val)
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ?
			fmtLong(val) :
			fmtShort(val)
  }
  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val))
}

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str)
  if (str.length > 10000) {
    return
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str)
  if (!match) {
    return
  }
  var n = parseFloat(match[1])
  var type = (match[2] || 'ms').toLowerCase()
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y
    case 'days':
    case 'day':
    case 'd':
      return n * d
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n
    default:
      return undefined
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd'
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h'
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm'
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's'
  }
  return ms + 'ms'
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms'
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name
  }
  return Math.ceil(ms / n) + ' ' + name + 's'
}

},{}],55:[function(require,module,exports){
(function (process){
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = require('./debug');
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit')

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}

}).call(this,{ env: {} })

},{"./debug":56}],56:[function(require,module,exports){

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = require('ms');

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms = curr - (prevTime || curr);
    self.diff = ms;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}

},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  //
  // Little nifty parsing hack, leverage the fact that RegExp.exec increments
  // the lastIndex property so we can continue executing this loop until we've
  // parsed all results.
  //
  for (;
    part = parser.exec(query);
    result[decodeURIComponent(part[1])] = decodeURIComponent(part[2])
  );

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
'use strict';

var required = require('requires-port')
  , lolcation = require('./lolcation')
  , qs = require('querystringify')
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @api private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @api private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @api public
 */
function URL(address, location, parser) {
  if (!(this instanceof URL)) {
    return new URL(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[2] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];
    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL}
 * @api public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
      url.pathname = value.length && value.charAt(0) !== '/' ? '/' + value : value;

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
};

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String}
 * @api public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

URL.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
URL.extractProtocol = extractProtocol;
URL.location = lolcation;
URL.qs = qs;

module.exports = URL;

},{"./lolcation":62,"querystringify":59,"requires-port":60}],62:[function(require,module,exports){
(function (global){
'use strict';

var slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 }
  , URL;

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @api public
 */
module.exports = function lolcation(loc) {
  loc = loc || global.location || {};
  URL = URL || require('./');

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new URL(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new URL(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./":61}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__("./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getElement = (function (fn) {
	var memo = {};

	return function(selector) {
		if (typeof memo[selector] === "undefined") {
			var styleTarget = fn.call(this, selector);
			// Special case to return head of iframe instead of iframe itself
			if (styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[selector] = styleTarget;
		}
		return memo[selector]
	};
})(function (target) {
	return document.querySelector(target)
});

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__("./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton) options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
	if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertInto + " " + options.insertAt.before);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	options.attrs.type = "text/css";

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	options.attrs.type = "text/css";
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = options.transform(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/url/url.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__("./node_modules/punycode/punycode.js");
var util = __webpack_require__("./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__("./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:3001":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {

/* global __resourceQuery WorkerGlobalScope self */
/* eslint prefer-destructuring: off */

const url = __webpack_require__("./node_modules/url/url.js");
const stripAnsi = __webpack_require__("./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");
const log = __webpack_require__("./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');
const socket = __webpack_require__("./node_modules/webpack-dev-server/client/socket.js");
const overlay = __webpack_require__("./node_modules/webpack-dev-server/client/overlay.js");

function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) { return document.currentScript.getAttribute('src'); }
  // Fall back to getting all scripts in the document.
  const scriptElements = document.scripts || [];
  const currentScript = scriptElements[scriptElements.length - 1];
  if (currentScript) { return currentScript.getAttribute('src'); }
  // Fail as there was no script to use.
  throw new Error('[WDS] Failed to get current script source.');
}

let urlParts;
let hotReload = true;
if (typeof window !== 'undefined') {
  const qs = window.location.search.toLowerCase();
  hotReload = qs.indexOf('hotreload=false') === -1;
}
if (true) {
  // If this bundle is inlined, use the resource query to get the correct url.
  urlParts = url.parse(__resourceQuery.substr(1));
} else {
  // Else, get the url from the <script> this file was called with.
  let scriptHost = getCurrentScriptSource();
  // eslint-disable-next-line no-useless-escape
  scriptHost = scriptHost.replace(/\/[^\/]+$/, '');
  urlParts = url.parse((scriptHost || '/'), false, true);
}

if (!urlParts.port || urlParts.port === '0') {
  urlParts.port = self.location.port;
}

let hot = false;
let initial = true;
let currentHash = '';
let useWarningOverlay = false;
let useErrorOverlay = false;
let useProgress = false;

const INFO = 'info';
const WARNING = 'warning';
const ERROR = 'error';
const NONE = 'none';

// Set the default log level
log.setDefaultLevel(INFO);

// Send messages to the outside, so plugins can consume it.
function sendMsg(type, data) {
  if (
    typeof self !== 'undefined' &&
  (typeof WorkerGlobalScope === 'undefined' ||
  !(self instanceof WorkerGlobalScope))
  ) {
    self.postMessage({
      type: 'webpack' + type,
      data: data
    }, '*');
  }
}

const onSocketMsg = {
  hot: function msgHot() {
    hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  invalid: function msgInvalid() {
    log.info('[WDS] App updated. Recompiling...');
    // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.
    if (useWarningOverlay || useErrorOverlay) overlay.clear();
    sendMsg('Invalid');
  },
  hash: function msgHash(hash) {
    currentHash = hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');
    if (useWarningOverlay || useErrorOverlay) overlay.clear();
    sendMsg('StillOk');
  },
  'log-level': function logLevel(level) {
    const hotCtx = __webpack_require__("./node_modules/webpack/hot ^\\.\\/log$");
    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }
    switch (level) {
      case INFO:
      case ERROR:
        log.setLevel(level);
        break;
      case WARNING:
        // loglevel's warning name is different from webpack's
        log.setLevel('warn');
        break;
      case NONE:
        log.disableAll();
        break;
      default:
        log.error('[WDS] Unknown clientLogLevel \'' + level + '\'');
    }
  },
  overlay: function msgOverlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof (value) === 'boolean') {
        useWarningOverlay = false;
        useErrorOverlay = value;
      } else if (value) {
        useWarningOverlay = value.warnings;
        useErrorOverlay = value.errors;
      }
    }
  },
  progress: function msgProgress(progress) {
    if (typeof document !== 'undefined') {
      useProgress = progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (useProgress) log.info('[WDS] ' + data.percent + '% - ' + data.msg + '.');
  },
  ok: function msgOk() {
    sendMsg('Ok');
    if (useWarningOverlay || useErrorOverlay) overlay.clear();
    if (initial) return initial = false; // eslint-disable-line no-return-assign
    reloadApp();
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function msgWarnings(warnings) {
    log.warn('[WDS] Warnings while compiling.');
    const strippedWarnings = warnings.map(function map(warning) { return stripAnsi(warning); });
    sendMsg('Warnings', strippedWarnings);
    for (let i = 0; i < strippedWarnings.length; i++) { log.warn(strippedWarnings[i]); }
    if (useWarningOverlay) overlay.showMessage(warnings);

    if (initial) return initial = false; // eslint-disable-line no-return-assign
    reloadApp();
  },
  errors: function msgErrors(errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');
    const strippedErrors = errors.map(function map(error) { return stripAnsi(error); });
    sendMsg('Errors', strippedErrors);
    for (let i = 0; i < strippedErrors.length; i++) { log.error(strippedErrors[i]); }
    if (useErrorOverlay) overlay.showMessage(errors);
  },
  error: function msgError(error) {
    log.error(error);
  },
  close: function msgClose() {
    log.error('[WDS] Disconnected!');
    sendMsg('Close');
  }
};

let hostname = urlParts.hostname;
let protocol = urlParts.protocol;


// check ipv4 and ipv6 `all hostname`
if (hostname === '0.0.0.0' || hostname === '::') {
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384
  // eslint-disable-next-line no-bitwise
  if (self.location.hostname && !!~self.location.protocol.indexOf('http')) {
    hostname = self.location.hostname;
  }
}

// `hostname` can be empty when the script path is relative. In that case, specifying
// a protocol would result in an invalid URL.
// When https is used in the app, secure websockets are always necessary
// because the browser doesn't accept non-secure websockets.
if (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
  protocol = self.location.protocol;
}

const socketUrl = url.format({
  protocol: protocol,
  auth: urlParts.auth,
  hostname: hostname,
  port: urlParts.port,
  pathname: urlParts.path == null || urlParts.path === '/' ? '/sockjs-node' : urlParts.path
});

socket(socketUrl, onSocketMsg);

let isUnloading = false;
self.addEventListener('beforeunload', function beforeUnload() {
  isUnloading = true;
});

function reloadApp() {
  if (isUnloading || !hotReload) {
    return;
  }
  if (hot) {
    log.info('[WDS] App hot update...');
    // eslint-disable-next-line global-require
    const hotEmitter = __webpack_require__("./node_modules/webpack/hot/emitter.js");
    hotEmitter.emit('webpackHotUpdate', currentHash);
    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage('webpackHotUpdate' + currentHash, '*');
    }
  } else {
    let rootWindow = self;
    // use parent window for reload (in case we're in an iframe with no valid src)
    const intervalId = self.setInterval(function findRootWindow() {
      if (rootWindow.location.protocol !== 'about:') {
        // reload immediately if protocol is valid
        applyReload(rootWindow, intervalId);
      } else {
        rootWindow = rootWindow.parent;
        if (rootWindow.parent === rootWindow) {
          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
          applyReload(rootWindow, intervalId);
        }
      }
    });
  }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, "?http://localhost:3001"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

const ansiHTML = __webpack_require__("./node_modules/ansi-html/index.js");
const Entities = __webpack_require__("./node_modules/html-entities/index.js").AllHtmlEntities;

const entities = new Entities();

const colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  const iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  const div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

let overlayIframe = null;
let overlayDiv = null;
let lastOnOverlayDivReady = null;

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  }

  // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.
  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We're already creating it.
    return;
  }

  // Create iframe and, when it is ready, a div inside it.
  overlayIframe = createOverlayIframe(function cb() {
    overlayDiv = addOverlayDivTo(overlayIframe);
    // Now we can talk!
    lastOnOverlayDivReady(overlayDiv);
  });

  // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.
  document.body.appendChild(overlayIframe);
}

function showMessageOverlay(message) {
  ensureOverlayDivExists(function cb(div) {
    // Make it look similar to our terminal.
    div.innerHTML = '<span style="color: #' + colors.red +
                    '">Failed to compile.</span><br><br>' +
                    ansiHTML(entities.encode(message));
  });
}

function destroyErrorOverlay() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  }

  // Clean up and reset internal state.
  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
}

// Successful compilation.
exports.clear = function handleSuccess() {
  destroyErrorOverlay();
};

// Compilation with errors (e.g. syntax error or missing modules).
exports.showMessage = function handleMessage(messages) {
  showMessageOverlay(messages[0]);
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const SockJS = __webpack_require__("./node_modules/sockjs-client/dist/sockjs.js");

let retries = 0;
let sock = null;

function socket(url, handlers) {
  sock = new SockJS(url);

  sock.onopen = function onopen() {
    retries = 0;
  };

  sock.onclose = function onclose() {
    if (retries === 0) { handlers.close(); }

    // Try to reconnect.
    sock = null;

    // After 10 retries stop trying, to prevent logspam.
    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      const retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;

      setTimeout(function cb() {
        socket(url, handlers);
      }, retryInMs);
    }
  };

  sock.onmessage = function onmessage(e) {
    // This assumes that all data sent via the websocket is JSON.
    const msg = JSON.parse(e.data);
    if (handlers[msg.type]) { handlers[msg.type](msg.data); }
  };
}

module.exports = socket;


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__("./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/hot ^\\.\\/log$":
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/dev-server.js":
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/*globals window __webpack_hash__ */
if(true) {
	var lastHash;
	var upToDate = function upToDate() {
		return lastHash.indexOf(__webpack_require__.h()) >= 0;
	};
	var log = __webpack_require__("./node_modules/webpack/hot/log.js");
	var check = function check() {
		module.hot.check(true).then(function(updatedModules) {
			if(!updatedModules) {
				log("warning", "[HMR] Cannot find update. Need to do a full reload!");
				log("warning", "[HMR] (Probably because of restarting the webpack-dev-server)");
				window.location.reload();
				return;
			}

			if(!upToDate()) {
				check();
			}

			__webpack_require__("./node_modules/webpack/hot/log-apply-result.js")(updatedModules, updatedModules);

			if(upToDate()) {
				log("info", "[HMR] App is up to date.");
			}

		}).catch(function(err) {
			var status = module.hot.status();
			if(["abort", "fail"].indexOf(status) >= 0) {
				log("warning", "[HMR] Cannot apply update. Need to do a full reload!");
				log("warning", "[HMR] " + err.stack || err.message);
				window.location.reload();
			} else {
				log("warning", "[HMR] Update failed: " + err.stack || err.message);
			}
		});
	};
	var hotEmitter = __webpack_require__("./node_modules/webpack/hot/emitter.js");
	hotEmitter.on("webpackHotUpdate", function(currentHash) {
		lastHash = currentHash;
		if(!upToDate() && module.hot.status() === "idle") {
			log("info", "[HMR] Checking for updates on the server...");
			check();
		}
	});
	log("info", "[HMR] Waiting for update signal from WDS...");
} else {
	throw new Error("[HMR] Hot Module Replacement is disabled.");
}


/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__("./node_modules/webpack/node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log-apply-result.js":
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
module.exports = function(updatedModules, renewedModules) {
	var unacceptedModules = updatedModules.filter(function(moduleId) {
		return renewedModules && renewedModules.indexOf(moduleId) < 0;
	});
	var log = __webpack_require__("./node_modules/webpack/hot/log.js");

	if(unacceptedModules.length > 0) {
		log("warning", "[HMR] The following modules couldn't be hot updated: (They would need a full reload!)");
		unacceptedModules.forEach(function(moduleId) {
			log("warning", "[HMR]  - " + moduleId);
		});
	}

	if(!renewedModules || renewedModules.length === 0) {
		log("info", "[HMR] Nothing hot updated.");
	} else {
		log("info", "[HMR] Updated modules:");
		renewedModules.forEach(function(moduleId) {
			if(typeof moduleId === "string" && moduleId.indexOf("!") !== -1) {
				var parts = moduleId.split("!");
				log.groupCollapsed("info", "[HMR]  - " + parts.pop());
				log("info", "[HMR]  - " + moduleId);
				log.groupEnd("info");
			} else {
				log("info", "[HMR]  - " + moduleId);
			}
		});
		var numberIds = renewedModules.every(function(moduleId) {
			return typeof moduleId === "number";
		});
		if(numberIds)
			log("info", "[HMR] Consider using the NamedModulesPlugin for module names.");
	}
};


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog = (logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if(shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if(shouldLog(level)) {
		if(level === "info") {
			console.log(msg);
		} else if(level === "warning") {
			console.warn(msg);
		} else if(level === "error") {
			console.error(msg);
		}
	}
};

var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};


/***/ }),

/***/ "./node_modules/webpack/hot/only-dev-server.js":
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
/*globals __webpack_hash__ */
if(true) {
	var lastHash;
	var upToDate = function upToDate() {
		return lastHash.indexOf(__webpack_require__.h()) >= 0;
	};
	var log = __webpack_require__("./node_modules/webpack/hot/log.js");
	var check = function check() {
		module.hot.check().then(function(updatedModules) {
			if(!updatedModules) {
				log("warning", "[HMR] Cannot find update. Need to do a full reload!");
				log("warning", "[HMR] (Probably because of restarting the webpack-dev-server)");
				return;
			}

			return module.hot.apply({
				ignoreUnaccepted: true,
				ignoreDeclined: true,
				ignoreErrored: true,
				onUnaccepted: function(data) {
					log("warning", "Ignored an update to unaccepted module " + data.chain.join(" -> "));
				},
				onDeclined: function(data) {
					log("warning", "Ignored an update to declined module " + data.chain.join(" -> "));
				},
				onErrored: function(data) {
					log("error", data.error);
					log("warning", "Ignored an error while updating module " + data.moduleId + " (" + data.type + ")");
				}
			}).then(function(renewedModules) {
				if(!upToDate()) {
					check();
				}

				__webpack_require__("./node_modules/webpack/hot/log-apply-result.js")(updatedModules, renewedModules);

				if(upToDate()) {
					log("info", "[HMR] App is up to date.");
				}
			});
		}).catch(function(err) {
			var status = module.hot.status();
			if(["abort", "fail"].indexOf(status) >= 0) {
				log("warning", "[HMR] Cannot check for update. Need to do a full reload!");
				log("warning", "[HMR] " + err.stack || err.message);
			} else {
				log("warning", "[HMR] Update check failed: " + err.stack || err.message);
			}
		});
	};
	var hotEmitter = __webpack_require__("./node_modules/webpack/hot/emitter.js");
	hotEmitter.on("webpackHotUpdate", function(currentHash) {
		lastHash = currentHash;
		if(!upToDate()) {
			var status = module.hot.status();
			if(status === "idle") {
				log("info", "[HMR] Checking for updates on the server...");
				check();
			} else if(["abort", "fail"].indexOf(status) >= 0) {
				log("warning", "[HMR] Cannot apply update as a previous update " + status + "ed. Need to do a full reload!");
			}
		}
	});
	log("info", "[HMR] Waiting for update signal from WDS...");
} else {
	throw new Error("[HMR] Hot Module Replacement is disabled.");
}


/***/ }),

/***/ "./node_modules/webpack/node_modules/events/events.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function $getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return $getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = $getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  var args = [];
  for (var i = 0; i < arguments.length; i++) args.push(arguments[i]);
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    ReflectApply(this.listener, this.target, args);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      if (typeof listener !== 'function') {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./src/js/components/animations.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = animations;
function animations() {
  console.log('im ready!');
  var fir = document.querySelectorAll('.fade-in-right');
  for (var i = 0; i < fir.length; i++) {
    var waypoint = new Waypoint({
      element: fir[i],
      handler: function handler() {
        this.element.classList.add('fadeInRight');
      },
      offset: '100%'
    });
  }

  var fi = document.querySelectorAll('.fade-in');
  for (var i = 0; i < fi.length; i++) {
    var waypoint = new Waypoint({
      element: fi[i],
      handler: function handler() {
        this.element.classList.add('fadeIn');
      },
      offset: '100%'
    });
  }

  var fiu = document.querySelectorAll('.fade-in-up');
  for (var i = 0; i < fiu.length; i++) {
    var waypoint = new Waypoint({
      element: fiu[i],
      handler: function handler() {
        this.element.classList.add('fadeInUp');
      },
      offset: '100%'
    });
  }

  var fil = document.querySelectorAll('.fade-in-left');
  for (var i = 0; i < fil.length; i++) {
    var waypoint = new Waypoint({
      element: fil[i],
      handler: function handler() {
        this.element.classList.add('fadeInLeft');
      },
      offset: '75%'
    });
  }
}

/***/ }),

/***/ "./src/js/components/lazy.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lazy;
function lazy() {
  var placeholder = document.getElementsByClassName('placeholder');

  if (placeholder.length) {
    var small = placeholder[0].querySelector('.img-small');
    // 1: load small image and show it
    var img = new Image();
    img.src = small.src;
    img.onload = function () {
      small.classList.add('loaded');
    };

    // 2: load large image
    var imgLarge = new Image();
    imgLarge.src = placeholder[0].dataset.large;
    imgLarge.onload = function () {
      imgLarge.classList.add('loaded');
    };
    placeholder[0].appendChild(imgLarge);
  }
}

/***/ }),

/***/ "./src/js/components/smoothScroll.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = smoothScroll;
function smoothScroll() {
  jQuery("a").on('click', function (event) {

    // Make sure this.hash has a value before overriding default behavior
    if (this.hash !== "") {
      // Prevent default anchor click behavior
      event.preventDefault();

      // Store hash
      var hash = this.hash;

      // Using jQuery's animate() method to add smooth page scroll
      // The optional number (800) specifies the number of milliseconds it takes to scroll to the specified area
      jQuery('html, body').animate({
        scrollTop: jQuery(hash).offset().top
      }, 800, function () {

        // Add hash (#) to URL when done scrolling (default click behavior)
        window.location.hash = hash;
      });
    } // End if
  });
}

/***/ }),

/***/ "./src/js/main.js":
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _lazy = __webpack_require__("./src/js/components/lazy.js");

var _lazy2 = _interopRequireDefault(_lazy);

var _animations = __webpack_require__("./src/js/components/animations.js");

var _animations2 = _interopRequireDefault(_animations);

var _smoothScroll = __webpack_require__("./src/js/components/smoothScroll.js");

var _smoothScroll2 = _interopRequireDefault(_smoothScroll);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function loaded() {

  (0, _lazy2.default)();
  (0, _animations2.default)();
  (0, _smoothScroll2.default)();
} /* global IS_DEV */

document.addEventListener('DOMContentLoaded', loaded);

/***/ }),

/***/ "./src/styles/style.scss":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("./node_modules/css-loader/index.js?{\"sourceMap\":true}!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/style.scss");
if(typeof content === 'string') content = [[module.i, content, '']];
// Prepare cssTransformation
var transform;

var options = {"hmr":true}
options.transform = transform
// add the styles to the DOM
var update = __webpack_require__("./node_modules/style-loader/lib/addStyles.js")(content, options);
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(true) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("./node_modules/css-loader/index.js?{\"sourceMap\":true}!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/style.scss", function() {
			var newContent = __webpack_require__("./node_modules/css-loader/index.js?{\"sourceMap\":true}!./node_modules/postcss-loader/lib/index.js!./node_modules/sass-loader/lib/loader.js!./src/styles/style.scss");
			if(typeof newContent === 'string') newContent = [[module.i, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ 0:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__("./node_modules/webpack-dev-server/client/index.js?http://localhost:3001");
__webpack_require__("./node_modules/webpack/hot/dev-server.js");
__webpack_require__("./node_modules/webpack/hot/only-dev-server.js");
__webpack_require__("./src/js/main.js");
module.exports = __webpack_require__("./src/styles/style.scss");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZjE3NmE2ZjIyMzNmOTdmNWUxYWMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc3R5bGVzL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9odG1sNC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaHRtbDUtZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3htbC1lbnRpdGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9nbGV2ZWwvbGliL2xvZ2xldmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wdW55Y29kZS9wdW55Y29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zb2NranMtY2xpZW50L2Rpc3Qvc29ja2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50Iiwid2VicGFjazovLy8od2VicGFjayktZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS1kZXYtc2VydmVyL25vZGVfbW9kdWxlcy9zdHJpcC1hbnNpL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2hvdCBub25yZWN1cnNpdmUgXlxcLlxcL2xvZyQiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9ob3QvZGV2LXNlcnZlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2hvdC9lbWl0dGVyLmpzIiwid2VicGFjazovLy8od2VicGFjaykvaG90L2xvZy1hcHBseS1yZXN1bHQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9ob3QvbG9nLmpzIiwid2VicGFjazovLy8od2VicGFjaykvaG90L29ubHktZGV2LXNlcnZlci5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL25vZGVfbW9kdWxlcy9ldmVudHMvZXZlbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9jb21wb25lbnRzL2FuaW1hdGlvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudHMvbGF6eS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanMvY29tcG9uZW50cy9zbW9vdGhTY3JvbGwuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0eWxlcy9zdHlsZS5zY3NzPzJhMzMiXSwibmFtZXMiOlsiYW5pbWF0aW9ucyIsImNvbnNvbGUiLCJsb2ciLCJmaXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpIiwibGVuZ3RoIiwid2F5cG9pbnQiLCJXYXlwb2ludCIsImVsZW1lbnQiLCJoYW5kbGVyIiwiY2xhc3NMaXN0IiwiYWRkIiwib2Zmc2V0IiwiZmkiLCJmaXUiLCJmaWwiLCJsYXp5IiwicGxhY2Vob2xkZXIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic21hbGwiLCJxdWVyeVNlbGVjdG9yIiwiaW1nIiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJpbWdMYXJnZSIsImRhdGFzZXQiLCJsYXJnZSIsImFwcGVuZENoaWxkIiwic21vb3RoU2Nyb2xsIiwialF1ZXJ5Iiwib24iLCJldmVudCIsImhhc2giLCJwcmV2ZW50RGVmYXVsdCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJ0b3AiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsImxvYWRlZCIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQTJEO0FBQzNEO0FBQ0E7QUFDQSxXQUFHOztBQUVILG9EQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHdEQUFnRDtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQSxjQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0EsZUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjs7OztBQUlBO0FBQ0Esc0RBQThDO0FBQzlDO0FBQ0E7QUFDQSxvQ0FBNEI7QUFDNUIscUNBQTZCO0FBQzdCLHlDQUFpQzs7QUFFakMsK0NBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUFzQztBQUN0QztBQUNBO0FBQ0EscUNBQTZCO0FBQzdCLHFDQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBb0IsZ0JBQWdCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0EsYUFBSztBQUNMO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsYUFBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxhQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx5QkFBaUIsOEJBQThCO0FBQy9DO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjs7QUFFQSw0REFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQW1CLDJCQUEyQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBa0IsY0FBYztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxxQkFBYSw0QkFBNEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQU07QUFDTjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esc0JBQWMsNEJBQTRCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0Esc0JBQWMsNEJBQTRCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUFnQix1Q0FBdUM7QUFDdkQ7QUFDQTtBQUNBO0FB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QUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsdUlBQXVJO0FBQzFJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSxtRUFBbUU7QUFDdEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUsc0ZBQXNGO0FBQ3pGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSxzSEFBc0g7QUFDekg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSx3TkFBd047QUFDM047QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEdBQUc7QUFDSjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsZ0RBQWdELFdBQVc7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSxtQkFBbUI7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Q0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUsZ0ZBQWdGO0FBQ25GO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBLENBQUMscUlBQXFJOztBQUV0SSxDQUFDLEdBQUc7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUsd0dBQXdHO0FBQzNHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLENBQUMsRUFBRSxxRkFBcUY7QUFDeEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRTs7QUFFeEIsQ0FBQyxFQUFFLCtJQUErSTtBQUNsSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsRUFBRSxtRkFBbUY7QUFDdEY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSxxRUFBcUU7QUFDeEU7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNI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O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMEJBQTBCLHFEQUFxRCxtQkFBbUIsV0FBVztBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUsa0lBQWtJO0FBQ3JJO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0JBQW9CLEVBQUU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUU7O0FBRXhCLENBQUMsRUFBRSxvQ0FBb0M7QUFDdkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMsYUFBYSxRQUFRLEVBQUUsMEhBQTBIOztBQUVsSixDQUFDLEVBQUUsd0RBQXdEO0FBQzNEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxhQUFhLFFBQVEsRUFBRSwwSEFBMEg7O0FBRWxKLENBQUMsRUFBRSx5R0FBeUc7QUFDNUc7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUsaUNBQWlDO0FBQ3BDOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQ0FBZ0M7QUFDaEMsR0FBRztBQUNIOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQSxDQUFDLEVBQUUseUJBQXlCO0FBQzVCOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7O0FBRUE7O0FBRUE7O0FBRUEsQ0FBQyxFQUFFLGlDQUFpQztBQUNwQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxDQUFDLGFBQWEsUUFBUSxFQUFFOztBQUV4QixDQUFDLEVBQUUsa0dBQWtHO0FBQ3JHOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQzs7QUFFbkM7O0FBRUEsQ0FBQyxFQUFFLCtGQUErRjtBQUNsRzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUNBQXFDOztBQUVyQzs7QUFFQSxDQUFDLEVBQUUsMEVBQTBFO0FBQzdFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1DQUFtQzs7QUFFbkM7O0FBRUEsQ0FBQyxFQUFFLHVHQUF1RztBQUMxRztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsRUFBRSw2SEFBNkg7QUFDaEk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsQ0FBQyxxSUFBcUk7O0FBRXRJLENBQUMsR0FBRztBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxHQUFHO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFdBQVc7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBLENBQUMsRUFBRSxXQUFXO0FBQ2Q7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLHFJQUFxSTs7QUFFdEksQ0FBQyxFQUFFLGNBQWM7QUFDakI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsT0FBTztBQUNQO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FB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Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFlBQVk7QUFDWjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsWUFBWTtBQUNaO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxDQUFDLEdBQUc7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdURBQXVEO0FBQ3ZEOztBQUVBLDZCQUE2QixtQkFBbUI7O0FBRWhEOztBQUVBOztBQUVBO0FBQ0E7Ozs7Ozs7OztBQzVXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsV0FBVyxFQUFFO0FBQ3JELHdDQUF3QyxXQUFXLEVBQUU7O0FBRXJEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esc0NBQXNDO0FBQ3RDLEdBQUc7QUFD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O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtCQUFrQixtQkFBbUI7QUFDckM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLG1CQUFtQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGlCQUFpQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixRQUFRO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxVQUFVLE1BQU07QUFDaEI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDM3RCYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7QUNmQSx1REFBYTs7QUFFYjtBQUNBOztBQUVBLFlBQVksbUJBQU8sQ0FBQywyQkFBSztBQUN6QixrQkFBa0IsbUJBQU8sQ0FBQyxvRUFBWTtBQUN0QyxZQUFZLG1CQUFPLENBQUMseUNBQVU7QUFDOUIsZUFBZSxtQkFBTyxDQUFDLG9EQUFVO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHFEQUFXOztBQUVuQztBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsbURBQW1EO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiwwQ0FBMEM7QUFDaEU7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksSUFBc0Q7QUFDMUQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsbUJBQW1CLDZEQUFrRDtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QztBQUN4QztBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGlFQUFpRSwyQkFBMkIsRUFBRTtBQUM5RjtBQUNBLG1CQUFtQiw2QkFBNkIsT0FBTywrQkFBK0I7QUFDdEY7O0FBRUEsd0NBQXdDO0FBQ3hDO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSwyREFBMkQseUJBQXlCLEVBQUU7QUFDdEY7QUFDQSxtQkFBbUIsMkJBQTJCLE9BQU8sOEJBQThCO0FBQ25GO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyx1Q0FBcUI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7OztBQ2pQYTs7QUFFYjtBQUNBOztBQUVBLGlCQUFpQixtQkFBTyxDQUFDLG1DQUFXO0FBQ3BDLGlCQUFpQixtQkFBTyxDQUFDLHVDQUFlOztBQUV4Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FDL0hhOztBQUViLGVBQWUsbUJBQU8sQ0FBQyw2Q0FBMkI7O0FBRWxEO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3QkFBd0Isa0JBQWtCOztBQUUxQztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsOEJBQThCO0FBQzNEO0FBQ0E7O0FBRUE7Ozs7Ozs7OztBQ3pDYTtBQUNiO0FBQ0EsNkJBQTZCLFlBQVksSUFBSSxJQUFJLE1BQU0sSUFBSTtBQUMzRDs7Ozs7Ozs7O0FDSGE7QUFDYixnQkFBZ0IsbUJBQU8sQ0FBQyxvRUFBWTs7QUFFcEM7QUFDQTtBQUNBOzs7Ozs7OztBQ0xBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDOzs7Ozs7OztBQ3BCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDckJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RDs7Ozs7OztBQ2pCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRyxJQUFVO0FBQ2I7QUFDQTtBQUNBLDBCQUEwQix1QkFBZ0I7QUFDMUM7QUFDQSxXQUFXLG1CQUFPLENBQUMsbUNBQU87QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRyxtQkFBTyxDQUFDLGdEQUFvQjs7QUFFL0I7QUFDQTtBQUNBOztBQUVBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxrQkFBa0IsbUJBQU8sQ0FBQyx1Q0FBVztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxDQUFDO0FBQ0Q7QUFDQTs7Ozs7Ozs7QUNwREEsbUJBQW1CLG1CQUFPLENBQUMsc0RBQVE7QUFDbkM7Ozs7Ozs7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsV0FBVyxtQkFBTyxDQUFDLG1DQUFPOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7QUNyQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7Ozs7Ozs7O0FDM0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHLElBQVU7QUFDYjtBQUNBO0FBQ0EsMEJBQTBCLHVCQUFnQjtBQUMxQztBQUNBLFdBQVcsbUJBQU8sQ0FBQyxtQ0FBTztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUEsSUFBSSxtQkFBTyxDQUFDLGdEQUFvQjs7QUFFaEM7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0Esa0JBQWtCLG1CQUFPLENBQUMsdUNBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7Ozs7Ozs7OztBQ3RFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxpQkFBaUIsc0JBQXNCO0FBQ3ZDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLG1CQUFtQixTQUFTO0FBQzVCO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtB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QVQsR0FBa0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNELEMsQ0FYRDs7QUFhQXRDLFNBQVN1QyxnQkFBVCxDQUEwQixrQkFBMUIsRUFBOENELE1BQTlDLEU7Ozs7Ozs7QUNiQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxxS0FBNko7QUFDbkwsNENBQTRDLFFBQVM7QUFDckQ7QUFDQTs7QUFFQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBLGFBQWEsbUJBQU8sQ0FBQyw4Q0FBbUQ7QUFDeEU7QUFDQTtBQUNBLEdBQUcsSUFBVTtBQUNiO0FBQ0E7QUFDQSxvQkFBb0IscUtBQTZKO0FBQ2pMLG9CQUFvQixtQkFBTyxDQUFDLHFLQUE2SjtBQUN6TCxxREFBcUQsUUFBUztBQUM5RDtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsZ0NBQWdDLFVBQVUsRUFBRTtBQUM1QyxDIiwiZmlsZSI6ImpzL21haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHRmdW5jdGlvbiBob3REaXNwb3NlQ2h1bmsoY2h1bmtJZCkge1xuIFx0XHRkZWxldGUgaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0fVxuIFx0dmFyIHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrID0gdGhpc1tcIndlYnBhY2tIb3RVcGRhdGVcIl07XG4gXHR0aGlzW1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IFxyXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcclxuIFx0XHRpZihwYXJlbnRIb3RVcGRhdGVDYWxsYmFjaykgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2soY2h1bmtJZCwgbW9yZU1vZHVsZXMpO1xyXG4gXHR9IDtcclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkVXBkYXRlQ2h1bmsoY2h1bmtJZCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0dmFyIGhlYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF07XHJcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XHJcbiBcdFx0c2NyaXB0LnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiO1xyXG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xyXG4gXHRcdHNjcmlwdC5zcmMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgY2h1bmtJZCArIFwiLlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzXCI7XHJcbiBcdFx0O1xyXG4gXHRcdGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90RG93bmxvYWRNYW5pZmVzdChyZXF1ZXN0VGltZW91dCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcclxuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiBcdFx0XHRpZih0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpXHJcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcclxuIFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiBcdFx0XHRcdHZhciByZXF1ZXN0UGF0aCA9IF9fd2VicGFja19yZXF1aXJlX18ucCArIFwiXCIgKyBob3RDdXJyZW50SGFzaCArIFwiLmhvdC11cGRhdGUuanNvblwiO1xyXG4gXHRcdFx0XHRyZXF1ZXN0Lm9wZW4oXCJHRVRcIiwgcmVxdWVzdFBhdGgsIHRydWUpO1xyXG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcclxuIFx0XHRcdFx0cmVxdWVzdC5zZW5kKG51bGwpO1xyXG4gXHRcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdFx0cmV0dXJuIHJlamVjdChlcnIpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuIFx0XHRcdFx0aWYocmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSByZXR1cm47XHJcbiBcdFx0XHRcdGlmKHJlcXVlc3Quc3RhdHVzID09PSAwKSB7XHJcbiBcdFx0XHRcdFx0Ly8gdGltZW91dFxyXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpKTtcclxuIFx0XHRcdFx0fSBlbHNlIGlmKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcclxuIFx0XHRcdFx0XHQvLyBubyB1cGRhdGUgYXZhaWxhYmxlXHJcbiBcdFx0XHRcdFx0cmVzb2x2ZSgpO1xyXG4gXHRcdFx0XHR9IGVsc2UgaWYocmVxdWVzdC5zdGF0dXMgIT09IDIwMCAmJiByZXF1ZXN0LnN0YXR1cyAhPT0gMzA0KSB7XHJcbiBcdFx0XHRcdFx0Ly8gb3RoZXIgZmFpbHVyZVxyXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcclxuIFx0XHRcdFx0fSBlbHNlIHtcclxuIFx0XHRcdFx0XHQvLyBzdWNjZXNzXHJcbiBcdFx0XHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0XHRcdHZhciB1cGRhdGUgPSBKU09OLnBhcnNlKHJlcXVlc3QucmVzcG9uc2VUZXh0KTtcclxuIFx0XHRcdFx0XHR9IGNhdGNoKGUpIHtcclxuIFx0XHRcdFx0XHRcdHJlamVjdChlKTtcclxuIFx0XHRcdFx0XHRcdHJldHVybjtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0cmVzb2x2ZSh1cGRhdGUpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9O1xyXG4gXHRcdH0pO1xyXG4gXHR9XHJcblxuIFx0XHJcbiBcdFxyXG4gXHR2YXIgaG90QXBwbHlPblVwZGF0ZSA9IHRydWU7XHJcbiBcdHZhciBob3RDdXJyZW50SGFzaCA9IFwiZjE3NmE2ZjIyMzNmOTdmNWUxYWNcIjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcclxuIFx0dmFyIGhvdEN1cnJlbnRNb2R1bGVEYXRhID0ge307XHJcbiBcdHZhciBob3RDdXJyZW50Q2hpbGRNb2R1bGU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCA9IFtdOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHR2YXIgbWUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRpZighbWUpIHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fO1xyXG4gXHRcdHZhciBmbiA9IGZ1bmN0aW9uKHJlcXVlc3QpIHtcclxuIFx0XHRcdGlmKG1lLmhvdC5hY3RpdmUpIHtcclxuIFx0XHRcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xyXG4gXHRcdFx0XHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5pbmRleE9mKG1vZHVsZUlkKSA8IDApXHJcbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW3JlcXVlc3RdLnBhcmVudHMucHVzaChtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHJlcXVlc3Q7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYobWUuY2hpbGRyZW4uaW5kZXhPZihyZXF1ZXN0KSA8IDApXHJcbiBcdFx0XHRcdFx0bWUuY2hpbGRyZW4ucHVzaChyZXF1ZXN0KTtcclxuIFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlcXVlc3QgKyBcIikgZnJvbSBkaXNwb3NlZCBtb2R1bGUgXCIgKyBtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW107XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcclxuIFx0XHR9O1xyXG4gXHRcdHZhciBPYmplY3RGYWN0b3J5ID0gZnVuY3Rpb24gT2JqZWN0RmFjdG9yeShuYW1lKSB7XHJcbiBcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXHJcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX19bbmFtZV07XHJcbiBcdFx0XHRcdH0sXHJcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcclxuIFx0XHRcdFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdID0gdmFsdWU7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH07XHJcbiBcdFx0fTtcclxuIFx0XHRmb3IodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKF9fd2VicGFja19yZXF1aXJlX18sIG5hbWUpICYmIG5hbWUgIT09IFwiZVwiKSB7XHJcbiBcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgbmFtZSwgT2JqZWN0RmFjdG9yeShuYW1lKSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcdGZuLmUgPSBmdW5jdGlvbihjaHVua0lkKSB7XHJcbiBcdFx0XHRpZihob3RTdGF0dXMgPT09IFwicmVhZHlcIilcclxuIFx0XHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcclxuIFx0XHRcdGhvdENodW5rc0xvYWRpbmcrKztcclxuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLmUoY2h1bmtJZCkudGhlbihmaW5pc2hDaHVua0xvYWRpbmcsIGZ1bmN0aW9uKGVycikge1xyXG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcclxuIFx0XHRcdFx0dGhyb3cgZXJyO1xyXG4gXHRcdFx0fSk7XHJcbiBcdFxyXG4gXHRcdFx0ZnVuY3Rpb24gZmluaXNoQ2h1bmtMb2FkaW5nKCkge1xyXG4gXHRcdFx0XHRob3RDaHVua3NMb2FkaW5nLS07XHJcbiBcdFx0XHRcdGlmKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIpIHtcclxuIFx0XHRcdFx0XHRpZighaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0aWYoaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcclxuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9O1xyXG4gXHRcdHJldHVybiBmbjtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHR2YXIgaG90ID0ge1xyXG4gXHRcdFx0Ly8gcHJpdmF0ZSBzdHVmZlxyXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcclxuIFx0XHRcdF9kZWNsaW5lZERlcGVuZGVuY2llczoge30sXHJcbiBcdFx0XHRfc2VsZkFjY2VwdGVkOiBmYWxzZSxcclxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxyXG4gXHRcdFx0X2Rpc3Bvc2VIYW5kbGVyczogW10sXHJcbiBcdFx0XHRfbWFpbjogaG90Q3VycmVudENoaWxkTW9kdWxlICE9PSBtb2R1bGVJZCxcclxuIFx0XHJcbiBcdFx0XHQvLyBNb2R1bGUgQVBJXHJcbiBcdFx0XHRhY3RpdmU6IHRydWUsXHJcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0aWYodHlwZW9mIGRlcCA9PT0gXCJ1bmRlZmluZWRcIilcclxuIFx0XHRcdFx0XHRob3QuX3NlbGZBY2NlcHRlZCA9IHRydWU7XHJcbiBcdFx0XHRcdGVsc2UgaWYodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKVxyXG4gXHRcdFx0XHRcdGhvdC5fc2VsZkFjY2VwdGVkID0gZGVwO1xyXG4gXHRcdFx0XHRlbHNlIGlmKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXHJcbiBcdFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlcC5sZW5ndGg7IGkrKylcclxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XHJcbiBcdFx0XHRcdGVsc2VcclxuIFx0XHRcdFx0XHRob3QuX2FjY2VwdGVkRGVwZW5kZW5jaWVzW2RlcF0gPSBjYWxsYmFjayB8fCBmdW5jdGlvbigpIHt9O1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGRlY2xpbmU6IGZ1bmN0aW9uKGRlcCkge1xyXG4gXHRcdFx0XHRpZih0eXBlb2YgZGVwID09PSBcInVuZGVmaW5lZFwiKVxyXG4gXHRcdFx0XHRcdGhvdC5fc2VsZkRlY2xpbmVkID0gdHJ1ZTtcclxuIFx0XHRcdFx0ZWxzZSBpZih0eXBlb2YgZGVwID09PSBcIm9iamVjdFwiKVxyXG4gXHRcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXHJcbiBcdFx0XHRcdFx0XHRob3QuX2RlY2xpbmVkRGVwZW5kZW5jaWVzW2RlcFtpXV0gPSB0cnVlO1xyXG4gXHRcdFx0XHRlbHNlXHJcbiBcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRkaXNwb3NlOiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRhZGREaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcclxuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcdFx0cmVtb3ZlRGlzcG9zZUhhbmRsZXI6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcclxuIFx0XHRcdFx0aWYoaWR4ID49IDApIGhvdC5fZGlzcG9zZUhhbmRsZXJzLnNwbGljZShpZHgsIDEpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHJcbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxyXG4gXHRcdFx0Y2hlY2s6IGhvdENoZWNrLFxyXG4gXHRcdFx0YXBwbHk6IGhvdEFwcGx5LFxyXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XHJcbiBcdFx0XHRcdGlmKCFsKSByZXR1cm4gaG90U3RhdHVzO1xyXG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xyXG4gXHRcdFx0fSxcclxuIFx0XHRcdGFkZFN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcclxuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcclxuIFx0XHRcdH0sXHJcbiBcdFx0XHRyZW1vdmVTdGF0dXNIYW5kbGVyOiBmdW5jdGlvbihsKSB7XHJcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xyXG4gXHRcdFx0XHRpZihpZHggPj0gMCkgaG90U3RhdHVzSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XHJcbiBcdFx0XHR9LFxyXG4gXHRcclxuIFx0XHRcdC8vaW5oZXJpdCBmcm9tIHByZXZpb3VzIGRpc3Bvc2UgY2FsbFxyXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXHJcbiBcdFx0fTtcclxuIFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSB1bmRlZmluZWQ7XHJcbiBcdFx0cmV0dXJuIGhvdDtcclxuIFx0fVxyXG4gXHRcclxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XHJcbiBcdHZhciBob3RTdGF0dXMgPSBcImlkbGVcIjtcclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcclxuIFx0XHRob3RTdGF0dXMgPSBuZXdTdGF0dXM7XHJcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxyXG4gXHRcdFx0aG90U3RhdHVzSGFuZGxlcnNbaV0uY2FsbChudWxsLCBuZXdTdGF0dXMpO1xyXG4gXHR9XHJcbiBcdFxyXG4gXHQvLyB3aGlsZSBkb3dubG9hZGluZ1xyXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzID0gMDtcclxuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xyXG4gXHR2YXIgaG90V2FpdGluZ0ZpbGVzTWFwID0ge307XHJcbiBcdHZhciBob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xyXG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcclxuIFx0dmFyIGhvdERlZmVycmVkO1xyXG4gXHRcclxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXHJcbiBcdHZhciBob3RVcGRhdGUsIGhvdFVwZGF0ZU5ld0hhc2g7XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiB0b01vZHVsZUlkKGlkKSB7XHJcbiBcdFx0dmFyIGlzTnVtYmVyID0gKCtpZCkgKyBcIlwiID09PSBpZDtcclxuIFx0XHRyZXR1cm4gaXNOdW1iZXIgPyAraWQgOiBpZDtcclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90Q2hlY2soYXBwbHkpIHtcclxuIFx0XHRpZihob3RTdGF0dXMgIT09IFwiaWRsZVwiKSB0aHJvdyBuZXcgRXJyb3IoXCJjaGVjaygpIGlzIG9ubHkgYWxsb3dlZCBpbiBpZGxlIHN0YXR1c1wiKTtcclxuIFx0XHRob3RBcHBseU9uVXBkYXRlID0gYXBwbHk7XHJcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XHJcbiBcdFx0cmV0dXJuIGhvdERvd25sb2FkTWFuaWZlc3QoaG90UmVxdWVzdFRpbWVvdXQpLnRoZW4oZnVuY3Rpb24odXBkYXRlKSB7XHJcbiBcdFx0XHRpZighdXBkYXRlKSB7XHJcbiBcdFx0XHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XHJcbiBcdFx0XHRcdHJldHVybiBudWxsO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXAgPSB7fTtcclxuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xyXG4gXHRcdFx0aG90QXZhaWxhYmxlRmlsZXNNYXAgPSB1cGRhdGUuYztcclxuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1cGRhdGUuaDtcclxuIFx0XHJcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJwcmVwYXJlXCIpO1xyXG4gXHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XHJcbiBcdFx0XHRcdFx0cmVzb2x2ZTogcmVzb2x2ZSxcclxuIFx0XHRcdFx0XHRyZWplY3Q6IHJlamVjdFxyXG4gXHRcdFx0XHR9O1xyXG4gXHRcdFx0fSk7XHJcbiBcdFx0XHRob3RVcGRhdGUgPSB7fTtcclxuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcclxuIFx0XHRcdHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lLWJsb2Nrc1xyXG4gXHRcdFx0XHQvKmdsb2JhbHMgY2h1bmtJZCAqL1xyXG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcclxuIFx0XHRcdH1cclxuIFx0XHRcdGlmKGhvdFN0YXR1cyA9PT0gXCJwcmVwYXJlXCIgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJiBob3RXYWl0aW5nRmlsZXMgPT09IDApIHtcclxuIFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4gXHRcdFx0fVxyXG4gXHRcdFx0cmV0dXJuIHByb21pc2U7XHJcbiBcdFx0fSk7XHJcbiBcdH1cclxuIFx0XHJcbiBcdGZ1bmN0aW9uIGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuIFx0XHRpZighaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gfHwgIWhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdKVxyXG4gXHRcdFx0cmV0dXJuO1xyXG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XHJcbiBcdFx0Zm9yKHZhciBtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vcmVNb2R1bGVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0aG90VXBkYXRlW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFx0aWYoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xyXG4gXHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xyXG4gXHRcdH1cclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCkge1xyXG4gXHRcdGlmKCFob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSkge1xyXG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcclxuIFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0aG90UmVxdWVzdGVkRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xyXG4gXHRcdFx0aG90V2FpdGluZ0ZpbGVzKys7XHJcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xyXG4gXHRcdH1cclxuIFx0fVxyXG4gXHRcclxuIFx0ZnVuY3Rpb24gaG90VXBkYXRlRG93bmxvYWRlZCgpIHtcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcclxuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcclxuIFx0XHRob3REZWZlcnJlZCA9IG51bGw7XHJcbiBcdFx0aWYoIWRlZmVycmVkKSByZXR1cm47XHJcbiBcdFx0aWYoaG90QXBwbHlPblVwZGF0ZSkge1xyXG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cclxuIFx0XHRcdC8vIGF2b2lkIHRyaWdnZXJpbmcgdW5jYXVnaHQgZXhjZXB0aW9uIHdhcm5pbmcgaW4gQ2hyb21lLlxyXG4gXHRcdFx0Ly8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ2NTY2NlxyXG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbigpIHtcclxuIFx0XHRcdFx0cmV0dXJuIGhvdEFwcGx5KGhvdEFwcGx5T25VcGRhdGUpO1xyXG4gXHRcdFx0fSkudGhlbihcclxuIFx0XHRcdFx0ZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiBcdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZShyZXN1bHQpO1xyXG4gXHRcdFx0XHR9LFxyXG4gXHRcdFx0XHRmdW5jdGlvbihlcnIpIHtcclxuIFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QoZXJyKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0KTtcclxuIFx0XHR9IGVsc2Uge1xyXG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xyXG4gXHRcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcclxuIFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgaWQpKSB7XHJcbiBcdFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzLnB1c2godG9Nb2R1bGVJZChpZCkpO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKG91dGRhdGVkTW9kdWxlcyk7XHJcbiBcdFx0fVxyXG4gXHR9XHJcbiBcdFxyXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XHJcbiBcdFx0aWYoaG90U3RhdHVzICE9PSBcInJlYWR5XCIpIHRocm93IG5ldyBFcnJvcihcImFwcGx5KCkgaXMgb25seSBhbGxvd2VkIGluIHJlYWR5IHN0YXR1c1wiKTtcclxuIFx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcclxuIFx0XHJcbiBcdFx0dmFyIGNiO1xyXG4gXHRcdHZhciBpO1xyXG4gXHRcdHZhciBqO1xyXG4gXHRcdHZhciBtb2R1bGU7XHJcbiBcdFx0dmFyIG1vZHVsZUlkO1xyXG4gXHRcclxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XHJcbiBcdFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW3VwZGF0ZU1vZHVsZUlkXTtcclxuIFx0XHRcdHZhciBvdXRkYXRlZERlcGVuZGVuY2llcyA9IHt9O1xyXG4gXHRcclxuIFx0XHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpLm1hcChmdW5jdGlvbihpZCkge1xyXG4gXHRcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRcdGNoYWluOiBbaWRdLFxyXG4gXHRcdFx0XHRcdGlkOiBpZFxyXG4gXHRcdFx0XHR9O1xyXG4gXHRcdFx0fSk7XHJcbiBcdFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiBcdFx0XHRcdHZhciBxdWV1ZUl0ZW0gPSBxdWV1ZS5wb3AoKTtcclxuIFx0XHRcdFx0dmFyIG1vZHVsZUlkID0gcXVldWVJdGVtLmlkO1xyXG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XHJcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRpZighbW9kdWxlIHx8IG1vZHVsZS5ob3QuX3NlbGZBY2NlcHRlZClcclxuIFx0XHRcdFx0XHRjb250aW51ZTtcclxuIFx0XHRcdFx0aWYobW9kdWxlLmhvdC5fc2VsZkRlY2xpbmVkKSB7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxyXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxyXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXHJcbiBcdFx0XHRcdFx0fTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihtb2R1bGUuaG90Ll9tYWluKSB7XHJcbiBcdFx0XHRcdFx0cmV0dXJuIHtcclxuIFx0XHRcdFx0XHRcdHR5cGU6IFwidW5hY2NlcHRlZFwiLFxyXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxyXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IG1vZHVsZUlkXHJcbiBcdFx0XHRcdFx0fTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgbW9kdWxlLnBhcmVudHMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcclxuIFx0XHRcdFx0XHR2YXIgcGFyZW50ID0gaW5zdGFsbGVkTW9kdWxlc1twYXJlbnRJZF07XHJcbiBcdFx0XHRcdFx0aWYoIXBhcmVudCkgY29udGludWU7XHJcbiBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fZGVjbGluZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHRcdFx0XHR0eXBlOiBcImRlY2xpbmVkXCIsXHJcbiBcdFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbi5jb25jYXQoW3BhcmVudElkXSksXHJcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRcdFx0cGFyZW50SWQ6IHBhcmVudElkXHJcbiBcdFx0XHRcdFx0XHR9O1xyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRpZihvdXRkYXRlZE1vZHVsZXMuaW5kZXhPZihwYXJlbnRJZCkgPj0gMCkgY29udGludWU7XHJcbiBcdFx0XHRcdFx0aWYocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XHJcbiBcdFx0XHRcdFx0XHRpZighb3V0ZGF0ZWREZXBlbmRlbmNpZXNbcGFyZW50SWRdKVxyXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcclxuIFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXSwgW21vZHVsZUlkXSk7XHJcbiBcdFx0XHRcdFx0XHRjb250aW51ZTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0ZGVsZXRlIG91dGRhdGVkRGVwZW5kZW5jaWVzW3BhcmVudElkXTtcclxuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaChwYXJlbnRJZCk7XHJcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XHJcbiBcdFx0XHRcdFx0XHRjaGFpbjogY2hhaW4uY29uY2F0KFtwYXJlbnRJZF0pLFxyXG4gXHRcdFx0XHRcdFx0aWQ6IHBhcmVudElkXHJcbiBcdFx0XHRcdFx0fSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHJcbiBcdFx0XHRyZXR1cm4ge1xyXG4gXHRcdFx0XHR0eXBlOiBcImFjY2VwdGVkXCIsXHJcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcclxuIFx0XHRcdFx0b3V0ZGF0ZWRNb2R1bGVzOiBvdXRkYXRlZE1vZHVsZXMsXHJcbiBcdFx0XHRcdG91dGRhdGVkRGVwZW5kZW5jaWVzOiBvdXRkYXRlZERlcGVuZGVuY2llc1xyXG4gXHRcdFx0fTtcclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcclxuIFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBiLmxlbmd0aDsgaSsrKSB7XHJcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcclxuIFx0XHRcdFx0aWYoYS5pbmRleE9mKGl0ZW0pIDwgMClcclxuIFx0XHRcdFx0XHRhLnB1c2goaXRlbSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBhdCBiZWdpbiBhbGwgdXBkYXRlcyBtb2R1bGVzIGFyZSBvdXRkYXRlZFxyXG4gXHRcdC8vIHRoZSBcIm91dGRhdGVkXCIgc3RhdHVzIGNhbiBwcm9wYWdhdGUgdG8gcGFyZW50cyBpZiB0aGV5IGRvbid0IGFjY2VwdCB0aGUgY2hpbGRyZW5cclxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcclxuIFx0XHR2YXIgb3V0ZGF0ZWRNb2R1bGVzID0gW107XHJcbiBcdFx0dmFyIGFwcGxpZWRVcGRhdGUgPSB7fTtcclxuIFx0XHJcbiBcdFx0dmFyIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSA9IGZ1bmN0aW9uIHdhcm5VbmV4cGVjdGVkUmVxdWlyZSgpIHtcclxuIFx0XHRcdGNvbnNvbGUud2FybihcIltITVJdIHVuZXhwZWN0ZWQgcmVxdWlyZShcIiArIHJlc3VsdC5tb2R1bGVJZCArIFwiKSB0byBkaXNwb3NlZCBtb2R1bGVcIik7XHJcbiBcdFx0fTtcclxuIFx0XHJcbiBcdFx0Zm9yKHZhciBpZCBpbiBob3RVcGRhdGUpIHtcclxuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xyXG4gXHRcdFx0XHRtb2R1bGVJZCA9IHRvTW9kdWxlSWQoaWQpO1xyXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xyXG4gXHRcdFx0XHRpZihob3RVcGRhdGVbaWRdKSB7XHJcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdFx0cmVzdWx0ID0ge1xyXG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxyXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWQ6IGlkXHJcbiBcdFx0XHRcdFx0fTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR2YXIgYWJvcnRFcnJvciA9IGZhbHNlO1xyXG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xyXG4gXHRcdFx0XHR2YXIgZG9EaXNwb3NlID0gZmFsc2U7XHJcbiBcdFx0XHRcdHZhciBjaGFpbkluZm8gPSBcIlwiO1xyXG4gXHRcdFx0XHRpZihyZXN1bHQuY2hhaW4pIHtcclxuIFx0XHRcdFx0XHRjaGFpbkluZm8gPSBcIlxcblVwZGF0ZSBwcm9wYWdhdGlvbjogXCIgKyByZXN1bHQuY2hhaW4uam9pbihcIiAtPiBcIik7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0c3dpdGNoKHJlc3VsdC50eXBlKSB7XHJcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25EZWNsaW5lZClcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XHJcbiBcdFx0XHRcdFx0XHRpZighb3B0aW9ucy5pZ25vcmVEZWNsaW5lZClcclxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgY2hhaW5JbmZvKTtcclxuIFx0XHRcdFx0XHRcdGJyZWFrO1xyXG4gXHRcdFx0XHRcdGNhc2UgXCJkZWNsaW5lZFwiOlxyXG4gXHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkRlY2xpbmVkKVxyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcclxuIFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxyXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFwiQWJvcnRlZCBiZWNhdXNlIG9mIGRlY2xpbmVkIGRlcGVuZGVuY3k6IFwiICsgcmVzdWx0Lm1vZHVsZUlkICsgXCIgaW4gXCIgKyByZXN1bHQucGFyZW50SWQgKyBjaGFpbkluZm8pO1xyXG4gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbiBcdFx0XHRcdFx0Y2FzZSBcInVuYWNjZXB0ZWRcIjpcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25VbmFjY2VwdGVkKVxyXG4gXHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uVW5hY2NlcHRlZChyZXN1bHQpO1xyXG4gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcclxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcIkFib3J0ZWQgYmVjYXVzZSBcIiArIG1vZHVsZUlkICsgXCIgaXMgbm90IGFjY2VwdGVkXCIgKyBjaGFpbkluZm8pO1xyXG4gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XHJcbiBcdFx0XHRcdFx0XHRpZihvcHRpb25zLm9uQWNjZXB0ZWQpXHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25BY2NlcHRlZChyZXN1bHQpO1xyXG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XHJcbiBcdFx0XHRcdFx0XHRicmVhaztcclxuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZWRcIjpcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25EaXNwb3NlZClcclxuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkRpc3Bvc2VkKHJlc3VsdCk7XHJcbiBcdFx0XHRcdFx0XHRkb0Rpc3Bvc2UgPSB0cnVlO1xyXG4gXHRcdFx0XHRcdFx0YnJlYWs7XHJcbiBcdFx0XHRcdFx0ZGVmYXVsdDpcclxuIFx0XHRcdFx0XHRcdHRocm93IG5ldyBFcnJvcihcIlVuZXhjZXB0aW9uIHR5cGUgXCIgKyByZXN1bHQudHlwZSk7XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdFx0aWYoYWJvcnRFcnJvcikge1xyXG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xyXG4gXHRcdFx0XHRcdHJldHVybiBQcm9taXNlLnJlamVjdChhYm9ydEVycm9yKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRpZihkb0FwcGx5KSB7XHJcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSBob3RVcGRhdGVbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XHJcbiBcdFx0XHRcdFx0Zm9yKG1vZHVsZUlkIGluIHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4gXHRcdFx0XHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdC5vdXRkYXRlZERlcGVuZGVuY2llcywgbW9kdWxlSWQpKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGlmKCFvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pXHJcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XHJcbiBcdFx0XHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSwgcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSk7XHJcbiBcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHRcdGlmKGRvRGlzcG9zZSkge1xyXG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgW3Jlc3VsdC5tb2R1bGVJZF0pO1xyXG4gXHRcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdID0gd2FyblVuZXhwZWN0ZWRSZXF1aXJlO1xyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBTdG9yZSBzZWxmIGFjY2VwdGVkIG91dGRhdGVkIG1vZHVsZXMgdG8gcmVxdWlyZSB0aGVtIGxhdGVyIGJ5IHRoZSBtb2R1bGUgc3lzdGVtXHJcbiBcdFx0dmFyIG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcyA9IFtdO1xyXG4gXHRcdGZvcihpID0gMDsgaSA8IG91dGRhdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0bW9kdWxlSWQgPSBvdXRkYXRlZE1vZHVsZXNbaV07XHJcbiBcdFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZClcclxuIFx0XHRcdFx0b3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzLnB1c2goe1xyXG4gXHRcdFx0XHRcdG1vZHVsZTogbW9kdWxlSWQsXHJcbiBcdFx0XHRcdFx0ZXJyb3JIYW5kbGVyOiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5ob3QuX3NlbGZBY2NlcHRlZFxyXG4gXHRcdFx0XHR9KTtcclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIE5vdyBpbiBcImRpc3Bvc2VcIiBwaGFzZVxyXG4gXHRcdGhvdFNldFN0YXR1cyhcImRpc3Bvc2VcIik7XHJcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xyXG4gXHRcdFx0aWYoaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0gPT09IGZhbHNlKSB7XHJcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcclxuIFx0XHRcdH1cclxuIFx0XHR9KTtcclxuIFx0XHJcbiBcdFx0dmFyIGlkeDtcclxuIFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMuc2xpY2UoKTtcclxuIFx0XHR3aGlsZShxdWV1ZS5sZW5ndGggPiAwKSB7XHJcbiBcdFx0XHRtb2R1bGVJZCA9IHF1ZXVlLnBvcCgpO1xyXG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRpZighbW9kdWxlKSBjb250aW51ZTtcclxuIFx0XHJcbiBcdFx0XHR2YXIgZGF0YSA9IHt9O1xyXG4gXHRcclxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xyXG4gXHRcdFx0dmFyIGRpc3Bvc2VIYW5kbGVycyA9IG1vZHVsZS5ob3QuX2Rpc3Bvc2VIYW5kbGVycztcclxuIFx0XHRcdGZvcihqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHRjYiA9IGRpc3Bvc2VIYW5kbGVyc1tqXTtcclxuIFx0XHRcdFx0Y2IoZGF0YSk7XHJcbiBcdFx0XHR9XHJcbiBcdFx0XHRob3RDdXJyZW50TW9kdWxlRGF0YVttb2R1bGVJZF0gPSBkYXRhO1xyXG4gXHRcclxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXHJcbiBcdFx0XHRtb2R1bGUuaG90LmFjdGl2ZSA9IGZhbHNlO1xyXG4gXHRcclxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxyXG4gXHRcdFx0ZGVsZXRlIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xyXG4gXHRcclxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcclxuIFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbiBcdFxyXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cclxuIFx0XHRcdGZvcihqID0gMDsgaiA8IG1vZHVsZS5jaGlsZHJlbi5sZW5ndGg7IGorKykge1xyXG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XHJcbiBcdFx0XHRcdGlmKCFjaGlsZCkgY29udGludWU7XHJcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XHJcbiBcdFx0XHRcdGlmKGlkeCA+PSAwKSB7XHJcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gcmVtb3ZlIG91dGRhdGVkIGRlcGVuZGVuY3kgZnJvbSBtb2R1bGUgY2hpbGRyZW5cclxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcclxuIFx0XHR2YXIgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXM7XHJcbiBcdFx0Zm9yKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XHJcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3V0ZGF0ZWREZXBlbmRlbmNpZXMsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcclxuIFx0XHRcdFx0aWYobW9kdWxlKSB7XHJcbiBcdFx0XHRcdFx0bW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSBvdXRkYXRlZERlcGVuZGVuY2llc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdFx0Zm9yKGogPSAwOyBqIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBqKyspIHtcclxuIFx0XHRcdFx0XHRcdGRlcGVuZGVuY3kgPSBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tqXTtcclxuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xyXG4gXHRcdFx0XHRcdFx0aWYoaWR4ID49IDApIG1vZHVsZS5jaGlsZHJlbi5zcGxpY2UoaWR4LCAxKTtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH1cclxuIFx0XHRcdH1cclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdC8vIE5vdCBpbiBcImFwcGx5XCIgcGhhc2VcclxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcclxuIFx0XHJcbiBcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xyXG4gXHRcclxuIFx0XHQvLyBpbnNlcnQgbmV3IGNvZGVcclxuIFx0XHRmb3IobW9kdWxlSWQgaW4gYXBwbGllZFVwZGF0ZSkge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xyXG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdO1xyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gY2FsbCBhY2NlcHQgaGFuZGxlcnNcclxuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xyXG4gXHRcdGZvcihtb2R1bGVJZCBpbiBvdXRkYXRlZERlcGVuZGVuY2llcykge1xyXG4gXHRcdFx0aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZCkpIHtcclxuIFx0XHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XHJcbiBcdFx0XHRcdGlmKG1vZHVsZSkge1xyXG4gXHRcdFx0XHRcdG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzID0gb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xyXG4gXHRcdFx0XHRcdHZhciBjYWxsYmFja3MgPSBbXTtcclxuIFx0XHRcdFx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xyXG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldO1xyXG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcclxuIFx0XHRcdFx0XHRcdGlmKGNiKSB7XHJcbiBcdFx0XHRcdFx0XHRcdGlmKGNhbGxiYWNrcy5pbmRleE9mKGNiKSA+PSAwKSBjb250aW51ZTtcclxuIFx0XHRcdFx0XHRcdFx0Y2FsbGJhY2tzLnB1c2goY2IpO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0XHRmb3IoaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gXHRcdFx0XHRcdFx0dHJ5IHtcclxuIFx0XHRcdFx0XHRcdFx0Y2IobW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMpO1xyXG4gXHRcdFx0XHRcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdFx0XHRvcHRpb25zLm9uRXJyb3JlZCh7XHJcbiBcdFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcImFjY2VwdC1lcnJvcmVkXCIsXHJcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXHJcbiBcdFx0XHRcdFx0XHRcdFx0XHRkZXBlbmRlbmN5SWQ6IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2ldLFxyXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xyXG4gXHRcdFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuIFx0XHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdH1cclxuIFx0XHRcdFx0fVxyXG4gXHRcdFx0fVxyXG4gXHRcdH1cclxuIFx0XHJcbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcclxuIFx0XHRmb3IoaSA9IDA7IGkgPCBvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcclxuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xyXG4gXHRcdFx0bW9kdWxlSWQgPSBpdGVtLm1vZHVsZTtcclxuIFx0XHRcdGhvdEN1cnJlbnRQYXJlbnRzID0gW21vZHVsZUlkXTtcclxuIFx0XHRcdHRyeSB7XHJcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xyXG4gXHRcdFx0fSBjYXRjaChlcnIpIHtcclxuIFx0XHRcdFx0aWYodHlwZW9mIGl0ZW0uZXJyb3JIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuIFx0XHRcdFx0XHR0cnkge1xyXG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcclxuIFx0XHRcdFx0XHR9IGNhdGNoKGVycjIpIHtcclxuIFx0XHRcdFx0XHRcdGlmKG9wdGlvbnMub25FcnJvcmVkKSB7XHJcbiBcdFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcclxuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxyXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyMixcclxuIFx0XHRcdFx0XHRcdFx0XHRvcmdpbmFsRXJyb3I6IGVyciwgLy8gVE9ETyByZW1vdmUgaW4gd2VicGFjayA0XHJcbiBcdFx0XHRcdFx0XHRcdFx0b3JpZ2luYWxFcnJvcjogZXJyXHJcbiBcdFx0XHRcdFx0XHRcdH0pO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdFx0aWYoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xyXG4gXHRcdFx0XHRcdFx0XHRpZighZXJyb3IpXHJcbiBcdFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnIyO1xyXG4gXHRcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdFx0aWYoIWVycm9yKVxyXG4gXHRcdFx0XHRcdFx0XHRlcnJvciA9IGVycjtcclxuIFx0XHRcdFx0XHR9XHJcbiBcdFx0XHRcdH0gZWxzZSB7XHJcbiBcdFx0XHRcdFx0aWYob3B0aW9ucy5vbkVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdG9wdGlvbnMub25FcnJvcmVkKHtcclxuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXHJcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcclxuIFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGVyclxyXG4gXHRcdFx0XHRcdFx0fSk7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHRcdGlmKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcclxuIFx0XHRcdFx0XHRcdGlmKCFlcnJvcilcclxuIFx0XHRcdFx0XHRcdFx0ZXJyb3IgPSBlcnI7XHJcbiBcdFx0XHRcdFx0fVxyXG4gXHRcdFx0XHR9XHJcbiBcdFx0XHR9XHJcbiBcdFx0fVxyXG4gXHRcclxuIFx0XHQvLyBoYW5kbGUgZXJyb3JzIGluIGFjY2VwdCBoYW5kbGVycyBhbmQgc2VsZiBhY2NlcHRlZCBtb2R1bGUgbG9hZFxyXG4gXHRcdGlmKGVycm9yKSB7XHJcbiBcdFx0XHRob3RTZXRTdGF0dXMoXCJmYWlsXCIpO1xyXG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuIFx0XHR9XHJcbiBcdFxyXG4gXHRcdGhvdFNldFN0YXR1cyhcImlkbGVcIik7XHJcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUpIHtcclxuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcclxuIFx0XHR9KTtcclxuIFx0fVxyXG5cbiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9LFxuIFx0XHRcdGhvdDogaG90Q3JlYXRlTW9kdWxlKG1vZHVsZUlkKSxcbiBcdFx0XHRwYXJlbnRzOiAoaG90Q3VycmVudFBhcmVudHNUZW1wID0gaG90Q3VycmVudFBhcmVudHMsIGhvdEN1cnJlbnRQYXJlbnRzID0gW10sIGhvdEN1cnJlbnRQYXJlbnRzVGVtcCksXG4gXHRcdFx0Y2hpbGRyZW46IFtdXG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIGhvdENyZWF0ZVJlcXVpcmUobW9kdWxlSWQpKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJodHRwOi8vbG9jYWxob3N0OjMwMDEvXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIGhvdENyZWF0ZVJlcXVpcmUoMCkoX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgZjE3NmE2ZjIyMzNmOTdmNWUxYWMiLCIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBhbnNpSFRNTFxuXG4vLyBSZWZlcmVuY2UgdG8gaHR0cHM6Ly9naXRodWIuY29tL3NpbmRyZXNvcmh1cy9hbnNpLXJlZ2V4XG52YXIgX3JlZ0FOU0kgPSAvKD86KD86XFx1MDAxYlxcWyl8XFx1MDA5YikoPzooPzpbMC05XXsxLDN9KT8oPzooPzo7WzAtOV17MCwzfSkqKT9bQS1NfGYtbV0pfFxcdTAwMWJbQS1NXS9cblxudmFyIF9kZWZDb2xvcnMgPSB7XG4gIHJlc2V0OiBbJ2ZmZicsICcwMDAnXSwgLy8gW0ZPUkVHUk9VRF9DT0xPUiwgQkFDS0dST1VORF9DT0xPUl1cbiAgYmxhY2s6ICcwMDAnLFxuICByZWQ6ICdmZjAwMDAnLFxuICBncmVlbjogJzIwOTgwNScsXG4gIHllbGxvdzogJ2U4YmYwMycsXG4gIGJsdWU6ICcwMDAwZmYnLFxuICBtYWdlbnRhOiAnZmYwMGZmJyxcbiAgY3lhbjogJzAwZmZlZScsXG4gIGxpZ2h0Z3JleTogJ2YwZjBmMCcsXG4gIGRhcmtncmV5OiAnODg4J1xufVxudmFyIF9zdHlsZXMgPSB7XG4gIDMwOiAnYmxhY2snLFxuICAzMTogJ3JlZCcsXG4gIDMyOiAnZ3JlZW4nLFxuICAzMzogJ3llbGxvdycsXG4gIDM0OiAnYmx1ZScsXG4gIDM1OiAnbWFnZW50YScsXG4gIDM2OiAnY3lhbicsXG4gIDM3OiAnbGlnaHRncmV5J1xufVxudmFyIF9vcGVuVGFncyA9IHtcbiAgJzEnOiAnZm9udC13ZWlnaHQ6Ym9sZCcsIC8vIGJvbGRcbiAgJzInOiAnb3BhY2l0eTowLjUnLCAvLyBkaW1cbiAgJzMnOiAnPGk+JywgLy8gaXRhbGljXG4gICc0JzogJzx1PicsIC8vIHVuZGVyc2NvcmVcbiAgJzgnOiAnZGlzcGxheTpub25lJywgLy8gaGlkZGVuXG4gICc5JzogJzxkZWw+JyAvLyBkZWxldGVcbn1cbnZhciBfY2xvc2VUYWdzID0ge1xuICAnMjMnOiAnPC9pPicsIC8vIHJlc2V0IGl0YWxpY1xuICAnMjQnOiAnPC91PicsIC8vIHJlc2V0IHVuZGVyc2NvcmVcbiAgJzI5JzogJzwvZGVsPicgLy8gcmVzZXQgZGVsZXRlXG59XG5cbjtbMCwgMjEsIDIyLCAyNywgMjgsIDM5LCA0OV0uZm9yRWFjaChmdW5jdGlvbiAobikge1xuICBfY2xvc2VUYWdzW25dID0gJzwvc3Bhbj4nXG59KVxuXG4vKipcbiAqIENvbnZlcnRzIHRleHQgd2l0aCBBTlNJIGNvbG9yIGNvZGVzIHRvIEhUTUwgbWFya3VwLlxuICogQHBhcmFtIHtTdHJpbmd9IHRleHRcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBhbnNpSFRNTCAodGV4dCkge1xuICAvLyBSZXR1cm5zIHRoZSB0ZXh0IGlmIHRoZSBzdHJpbmcgaGFzIG5vIEFOU0kgZXNjYXBlIGNvZGUuXG4gIGlmICghX3JlZ0FOU0kudGVzdCh0ZXh0KSkge1xuICAgIHJldHVybiB0ZXh0XG4gIH1cblxuICAvLyBDYWNoZSBvcGVuZWQgc2VxdWVuY2UuXG4gIHZhciBhbnNpQ29kZXMgPSBbXVxuICAvLyBSZXBsYWNlIHdpdGggbWFya3VwLlxuICB2YXIgcmV0ID0gdGV4dC5yZXBsYWNlKC9cXDAzM1xcWyhcXGQrKSptL2csIGZ1bmN0aW9uIChtYXRjaCwgc2VxKSB7XG4gICAgdmFyIG90ID0gX29wZW5UYWdzW3NlcV1cbiAgICBpZiAob3QpIHtcbiAgICAgIC8vIElmIGN1cnJlbnQgc2VxdWVuY2UgaGFzIGJlZW4gb3BlbmVkLCBjbG9zZSBpdC5cbiAgICAgIGlmICghIX5hbnNpQ29kZXMuaW5kZXhPZihzZXEpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXh0cmEtYm9vbGVhbi1jYXN0XG4gICAgICAgIGFuc2lDb2Rlcy5wb3AoKVxuICAgICAgICByZXR1cm4gJzwvc3Bhbj4nXG4gICAgICB9XG4gICAgICAvLyBPcGVuIHRhZy5cbiAgICAgIGFuc2lDb2Rlcy5wdXNoKHNlcSlcbiAgICAgIHJldHVybiBvdFswXSA9PT0gJzwnID8gb3QgOiAnPHNwYW4gc3R5bGU9XCInICsgb3QgKyAnO1wiPidcbiAgICB9XG5cbiAgICB2YXIgY3QgPSBfY2xvc2VUYWdzW3NlcV1cbiAgICBpZiAoY3QpIHtcbiAgICAgIC8vIFBvcCBzZXF1ZW5jZVxuICAgICAgYW5zaUNvZGVzLnBvcCgpXG4gICAgICByZXR1cm4gY3RcbiAgICB9XG4gICAgcmV0dXJuICcnXG4gIH0pXG5cbiAgLy8gTWFrZSBzdXJlIHRhZ3MgYXJlIGNsb3NlZC5cbiAgdmFyIGwgPSBhbnNpQ29kZXMubGVuZ3RoXG4gIDsobCA+IDApICYmIChyZXQgKz0gQXJyYXkobCArIDEpLmpvaW4oJzwvc3Bhbj4nKSlcblxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogQ3VzdG9taXplIGNvbG9ycy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb2xvcnMgcmVmZXJlbmNlIHRvIF9kZWZDb2xvcnNcbiAqL1xuYW5zaUhUTUwuc2V0Q29sb3JzID0gZnVuY3Rpb24gKGNvbG9ycykge1xuICBpZiAodHlwZW9mIGNvbG9ycyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2Bjb2xvcnNgIHBhcmFtZXRlciBtdXN0IGJlIGFuIE9iamVjdC4nKVxuICB9XG5cbiAgdmFyIF9maW5hbENvbG9ycyA9IHt9XG4gIGZvciAodmFyIGtleSBpbiBfZGVmQ29sb3JzKSB7XG4gICAgdmFyIGhleCA9IGNvbG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpID8gY29sb3JzW2tleV0gOiBudWxsXG4gICAgaWYgKCFoZXgpIHtcbiAgICAgIF9maW5hbENvbG9yc1trZXldID0gX2RlZkNvbG9yc1trZXldXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoJ3Jlc2V0JyA9PT0ga2V5KSB7XG4gICAgICBpZiAodHlwZW9mIGhleCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaGV4ID0gW2hleF1cbiAgICAgIH1cbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShoZXgpIHx8IGhleC5sZW5ndGggPT09IDAgfHwgaGV4LnNvbWUoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBoICE9PSAnc3RyaW5nJ1xuICAgICAgfSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgdmFsdWUgb2YgYCcgKyBrZXkgKyAnYCBwcm9wZXJ0eSBtdXN0IGJlIGFuIEFycmF5IGFuZCBlYWNoIGl0ZW0gY291bGQgb25seSBiZSBhIGhleCBzdHJpbmcsIGUuZy46IEZGMDAwMCcpXG4gICAgICB9XG4gICAgICB2YXIgZGVmSGV4Q29sb3IgPSBfZGVmQ29sb3JzW2tleV1cbiAgICAgIGlmICghaGV4WzBdKSB7XG4gICAgICAgIGhleFswXSA9IGRlZkhleENvbG9yWzBdXG4gICAgICB9XG4gICAgICBpZiAoaGV4Lmxlbmd0aCA9PT0gMSB8fCAhaGV4WzFdKSB7XG4gICAgICAgIGhleCA9IFtoZXhbMF1dXG4gICAgICAgIGhleC5wdXNoKGRlZkhleENvbG9yWzFdKVxuICAgICAgfVxuXG4gICAgICBoZXggPSBoZXguc2xpY2UoMCwgMilcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZXggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSB2YWx1ZSBvZiBgJyArIGtleSArICdgIHByb3BlcnR5IG11c3QgYmUgYSBoZXggc3RyaW5nLCBlLmcuOiBGRjAwMDAnKVxuICAgIH1cbiAgICBfZmluYWxDb2xvcnNba2V5XSA9IGhleFxuICB9XG4gIF9zZXRUYWdzKF9maW5hbENvbG9ycylcbn1cblxuLyoqXG4gKiBSZXNldCBjb2xvcnMuXG4gKi9cbmFuc2lIVE1MLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICBfc2V0VGFncyhfZGVmQ29sb3JzKVxufVxuXG4vKipcbiAqIEV4cG9zZSB0YWdzLCBpbmNsdWRpbmcgb3BlbiBhbmQgY2xvc2UuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5hbnNpSFRNTC50YWdzID0ge31cblxuaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ29wZW4nLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfb3BlblRhZ3MgfVxuICB9KVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYW5zaUhUTUwudGFncywgJ2Nsb3NlJywge1xuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX2Nsb3NlVGFncyB9XG4gIH0pXG59IGVsc2Uge1xuICBhbnNpSFRNTC50YWdzLm9wZW4gPSBfb3BlblRhZ3NcbiAgYW5zaUhUTUwudGFncy5jbG9zZSA9IF9jbG9zZVRhZ3Ncbn1cblxuZnVuY3Rpb24gX3NldFRhZ3MgKGNvbG9ycykge1xuICAvLyByZXNldCBhbGxcbiAgX29wZW5UYWdzWycwJ10gPSAnZm9udC13ZWlnaHQ6bm9ybWFsO29wYWNpdHk6MTtjb2xvcjojJyArIGNvbG9ycy5yZXNldFswXSArICc7YmFja2dyb3VuZDojJyArIGNvbG9ycy5yZXNldFsxXVxuICAvLyBpbnZlcnNlXG4gIF9vcGVuVGFnc1snNyddID0gJ2NvbG9yOiMnICsgY29sb3JzLnJlc2V0WzFdICsgJztiYWNrZ3JvdW5kOiMnICsgY29sb3JzLnJlc2V0WzBdXG4gIC8vIGRhcmsgZ3JleVxuICBfb3BlblRhZ3NbJzkwJ10gPSAnY29sb3I6IycgKyBjb2xvcnMuZGFya2dyZXlcblxuICBmb3IgKHZhciBjb2RlIGluIF9zdHlsZXMpIHtcbiAgICB2YXIgY29sb3IgPSBfc3R5bGVzW2NvZGVdXG4gICAgdmFyIG9yaUNvbG9yID0gY29sb3JzW2NvbG9yXSB8fCAnMDAwJ1xuICAgIF9vcGVuVGFnc1tjb2RlXSA9ICdjb2xvcjojJyArIG9yaUNvbG9yXG4gICAgY29kZSA9IHBhcnNlSW50KGNvZGUpXG4gICAgX29wZW5UYWdzWyhjb2RlICsgMTApLnRvU3RyaW5nKCldID0gJ2JhY2tncm91bmQ6IycgKyBvcmlDb2xvclxuICB9XG59XG5cbmFuc2lIVE1MLnJlc2V0KClcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Fuc2ktaHRtbC9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvYW5zaS1odG1sL2luZGV4LmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikodHJ1ZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIud2hpdGV7Y29sb3I6I2ZmZjtmaWxsOiNmZmZ9aHRtbHstd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6MTAwJTstbXMtdGV4dC1zaXplLWFkanVzdDoxMDAlfWJvZHl7bWFyZ2luOjB9YXJ0aWNsZSxhc2lkZSxkZXRhaWxzLGZpZ2NhcHRpb24sZmlndXJlLGZvb3RlcixoZWFkZXIsbWFpbixtZW51LG5hdixzZWN0aW9uLHN1bW1hcnl7ZGlzcGxheTpibG9ja31hdWRpbyxjYW52YXMscHJvZ3Jlc3MsdmlkZW97ZGlzcGxheTppbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246YmFzZWxpbmV9YXVkaW86bm90KFtjb250cm9sc10pe2Rpc3BsYXk6bm9uZTtoZWlnaHQ6MH1baGlkZGVuXSx0ZW1wbGF0ZXtkaXNwbGF5Om5vbmV9YXtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50fWFiYnJbdGl0bGVde2JvcmRlci1ib3R0b206MXB4IGRvdHRlZH1iLHN0cm9uZ3tmb250LXdlaWdodDo3MDB9ZGZue2ZvbnQtc3R5bGU6aXRhbGljfWgxe2ZvbnQtc2l6ZToyZW07bWFyZ2luOi42N2VtIDB9bWFya3tiYWNrZ3JvdW5kOiNmZjA7Y29sb3I6IzAwMH1zbWFsbHtmb250LXNpemU6ODAlfXN1YixzdXB7Zm9udC1zaXplOjc1JTtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfXN1cHt0b3A6LS41ZW19c3Vie2JvdHRvbTotLjI1ZW19c3ZnOm5vdCg6cm9vdCl7b3ZlcmZsb3c6aGlkZGVufWZpZ3VyZXttYXJnaW46MWVtIDQwcHh9aHJ7LXdlYmtpdC1ib3gtc2l6aW5nOmNvbnRlbnQtYm94O2JveC1zaXppbmc6Y29udGVudC1ib3g7aGVpZ2h0OjB9cHJle292ZXJmbG93OmF1dG99Y29kZSxrYmQscHJlLHNhbXB7Zm9udC1mYW1pbHk6bW9ub3NwYWNlLG1vbm9zcGFjZTtmb250LXNpemU6MWVtfWJ1dHRvbixpbnB1dCxvcHRncm91cCxzZWxlY3QsdGV4dGFyZWF7Y29sb3I6aW5oZXJpdDtmb250OmluaGVyaXQ7bWFyZ2luOjB9YnV0dG9ue292ZXJmbG93OnZpc2libGV9YnV0dG9uLHNlbGVjdHt0ZXh0LXRyYW5zZm9ybTpub25lfWJ1dHRvbixodG1sIGlucHV0W3R5cGU9YnV0dG9uXSxpbnB1dFt0eXBlPXJlc2V0XSxpbnB1dFt0eXBlPXN1Ym1pdF17LXdlYmtpdC1hcHBlYXJhbmNlOmJ1dHRvbjtjdXJzb3I6cG9pbnRlcn1idXR0b25bZGlzYWJsZWRdLGh0bWwgaW5wdXRbZGlzYWJsZWRde2N1cnNvcjpkZWZhdWx0fWJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixpbnB1dDo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MDtwYWRkaW5nOjB9aW5wdXR7bGluZS1oZWlnaHQ6bm9ybWFsfWlucHV0W3R5cGU9Y2hlY2tib3hdLGlucHV0W3R5cGU9cmFkaW9dey13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjB9aW5wdXRbdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLGlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbntoZWlnaHQ6YXV0b31pbnB1dFt0eXBlPXNlYXJjaF06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24saW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uey13ZWJraXQtYXBwZWFyYW5jZTpub25lfWZpZWxkc2V0e2JvcmRlcjoxcHggc29saWQgc2lsdmVyO21hcmdpbjowIDJweDtwYWRkaW5nOi4zNWVtIC42MjVlbSAuNzVlbX1sZWdlbmR7Ym9yZGVyOjA7cGFkZGluZzowfXRleHRhcmVhe292ZXJmbG93OmF1dG99b3B0Z3JvdXB7Zm9udC13ZWlnaHQ6NzAwfXRhYmxle2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXItc3BhY2luZzowfXRkLHRoe3BhZGRpbmc6MH1odG1se2ZvbnQtZmFtaWx5OnNhbnMtc2VyaWY7LXdlYmtpdC1ib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym94LXNpemluZzpib3JkZXItYm94O2ZvbnQtc2l6ZTo2Mi41JTtsaW5lLWhlaWdodDoxLjQ7Y29sb3I6IzdkNzc2ZDtoZWlnaHQ6MTAwJTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC13ZWlnaHQ6MTAwfSosOmFmdGVyLDpiZWZvcmV7LXdlYmtpdC1ib3gtc2l6aW5nOmluaGVyaXQ7Ym94LXNpemluZzppbmhlcml0fWJvZHl7YmFja2dyb3VuZDojZmZmO2hlaWdodDoxMDAlO292ZXJmbG93LXg6aGlkZGVufWRsLG9sLHVse2xpc3Qtc3R5bGUtdHlwZTpub25lO21hcmdpbjowO3BhZGRpbmc6MH1we21hcmdpbjowfXArcHttYXJnaW4tdG9wOjEwcHh9bGksbGk+c3Bhbixwe2ZvbnQtc2l6ZToxNnB4O2ZvbnQtc2l6ZToxLjZyZW07Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2NvbG9yOiM5NjkwODc7Zm9udC13ZWlnaHQ6MTAwO2xpbmUtaGVpZ2h0OjEuOH1zdHJvbmd7Zm9udC13ZWlnaHQ6NzAwfWVte2ZvbnQtc3R5bGU6aXRhbGljfWgze2ZvbnQtd2VpZ2h0OjQwMDtmb250LXNpemU6MjJweDtmb250LXNpemU6Mi4ycmVtfWgxe2NvbG9yOiM1ZTU5NTI7Zm9udC1zaXplOjMuOHJlbTtsZXR0ZXItc3BhY2luZzouMDVyZW07bWFyZ2luOjEwcHggMH1oMSxoMntmb250LWZhbWlseTp2aW55bCxzZXJpZjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9aDJ7Zm9udC1zaXplOjMuMnJlbTtsZXR0ZXItc3BhY2luZzouMXJlbTttYXJnaW46MDttYXJnaW4tYm90dG9tOjEwcHh9aDN7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtd2VpZ2h0OjEwMDt0ZXh0LXRyYW5zZm9ybTpub25lO2ZvbnQtc2l6ZToyLjZyZW19aDR7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXdlaWdodDo3MDA7bGV0dGVyLXNwYWNpbmc6LjJyZW07Zm9udC1zaXplOjEuNnJlbX1oNCxoNXt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7bWFyZ2luOjB9aDV7Zm9udC1zaXplOjEuNXJlbTtmb250LXdlaWdodDo1MDA7aGVpZ2h0OjIwcHg7bGluZS1oZWlnaHQ6MjBweDttYXJnaW4tYm90dG9tOjIwcHg7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7bGV0dGVyLXNwYWNpbmc6LjA1cmVtfS5zbS1tYXJnaW57bWFyZ2luOjEwcHggMCFpbXBvcnRhbnR9Lm1lZC1tYXJnaW57bWFyZ2luOjIwcHggMCFpbXBvcnRhbnR9LmxnLW1hcmdpbnttYXJnaW46MzBweCAwIWltcG9ydGFudH0ucGFnZS13cmFwcGVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOmNvbHVtbjstd2Via2l0LWJveC1vcmllbnQ6dmVydGljYWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47aGVpZ2h0OjEwMCV9Zm9vdGVyLGhlYWRlcnstbXMtZmxleDpub25lOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4Om5vbmV9LmNvbnRlbnQtYXJlYXstbXMtZmxleDoxIDAgYXV0bzstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxIDAgYXV0bzt3aWR0aDoxMDAlfS5jb250ZW50LWFyZWE6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcXEEwXFxcIjtkaXNwbGF5OmJsb2NrO2hlaWdodDowO3Zpc2liaWxpdHk6aGlkZGVufS5jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9Ym9keS5sb2FkaW5ney13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZjthbmltYXRpb24tbmFtZTpmOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIsLjMsLjI1LC45KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMiwuMywuMjUsLjkpfSNtYWluLmZseVVwLGJvZHkuaXMtbG9hZGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZTthbmltYXRpb24tbmFtZTplfSNtYWluLmZseVVwLC5hbmltLGJvZHkuaXMtbG9hZGVkey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIsLjMsLjI1LC45KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMiwuMywuMjUsLjkpfS5hbmltLmluZmluaXRley13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlfS5hbmltLmhpbmdley13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOjFzO2FuaW1hdGlvbi1kdXJhdGlvbjoxc31ALXdlYmtpdC1rZXlmcmFtZXMgYXswJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGF7MCV7b3BhY2l0eTowfXRve29wYWNpdHk6MX19LmZhZGVJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmE7YW5pbWF0aW9uLW5hbWU6YX0uZmFkZUluRG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmI7YW5pbWF0aW9uLW5hbWU6Yjstd2Via2l0LWFuaW1hdGlvbi1kZWxheTouNXM7YW5pbWF0aW9uLWRlbGF5Oi41c31ALXdlYmtpdC1rZXlmcmFtZXMgYnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX19QGtleWZyYW1lcyBiezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMnB4LDApfXRve29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX1ALXdlYmtpdC1rZXlmcmFtZXMgY3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX19QGtleWZyYW1lcyBjezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTJweCwwLDApfXRve29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX0uZmFkZUluTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmM7YW5pbWF0aW9uLW5hbWU6Y31ALXdlYmtpdC1rZXlmcmFtZXMgZHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgZHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fS5mYWRlSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmQ7YW5pbWF0aW9uLW5hbWU6ZH1ALXdlYmtpdC1rZXlmcmFtZXMgZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fS5mYWRlSW5VcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmU7YW5pbWF0aW9uLW5hbWU6ZX1ALXdlYmtpdC1rZXlmcmFtZXMgZnswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGZ7MCV7b3BhY2l0eToxfXRve29wYWNpdHk6MH19LmZhZGVPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmO2FuaW1hdGlvbi1uYW1lOmZ9QC13ZWJraXQta2V5ZnJhbWVzIGd7MCV7b3BhY2l0eToxfXRve29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTJweCwwKTtkaXNwbGF5Om5vbmV9fUBrZXlmcmFtZXMgZ3swJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO2Rpc3BsYXk6bm9uZX19LmZhZGVPdXREb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZzthbmltYXRpb24tbmFtZTpnfUAtd2Via2l0LWtleWZyYW1lcyBoezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX19QGtleWZyYW1lcyBoezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX19LmZhZGVPdXRMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6aDthbmltYXRpb24tbmFtZTpofUAtd2Via2l0LWtleWZyYW1lcyBpezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9fUBrZXlmcmFtZXMgaXswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApfX0uZmFkZU91dFJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6aTthbmltYXRpb24tbmFtZTppfUAtd2Via2l0LWtleWZyYW1lcyBqezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX19QGtleWZyYW1lcyBqezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX19LmZhZGVPdXRVcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmo7YW5pbWF0aW9uLW5hbWU6an1ALXdlYmtpdC1rZXlmcmFtZXMga3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjk4NzUpO3RyYW5zZm9ybTpzY2FsZSguOTg3NSk7LXdlYmtpdC1maWx0ZXI6Ymx1cig0cHgpO2ZpbHRlcjpibHVyKDRweCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC1maWx0ZXI6bm9uZTtmaWx0ZXI6bm9uZX19QGtleWZyYW1lcyBrezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTg3NSk7dHJhbnNmb3JtOnNjYWxlKC45ODc1KTstd2Via2l0LWZpbHRlcjpibHVyKDRweCk7ZmlsdGVyOmJsdXIoNHB4KX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZTstd2Via2l0LWZpbHRlcjpub25lO2ZpbHRlcjpub25lfX0uZmFkZUluU2NhbGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTprO2FuaW1hdGlvbi1uYW1lOmt9QC13ZWJraXQta2V5ZnJhbWVzIGx7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKTstd2Via2l0LWZpbHRlcjpub25lO2ZpbHRlcjpub25lfXRve29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTg3NSk7dHJhbnNmb3JtOnNjYWxlKC45ODc1KTstd2Via2l0LWZpbHRlcjpibHVyKDRweCk7ZmlsdGVyOmJsdXIoNHB4KX19QGtleWZyYW1lcyBsezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7LXdlYmtpdC1maWx0ZXI6bm9uZTtmaWx0ZXI6bm9uZX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjk4NzUpO3RyYW5zZm9ybTpzY2FsZSguOTg3NSk7LXdlYmtpdC1maWx0ZXI6Ymx1cig0cHgpO2ZpbHRlcjpibHVyKDRweCl9fS5mYWRlT3V0U2NhbGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpsO2FuaW1hdGlvbi1uYW1lOmx9LnByZWxvYWRlcntwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjk1KTt6LWluZGV4OjE5OTk7dGV4dC1hbGlnbjpjZW50ZXJ9LnByZWxvYWRlciAuc3Bpbm5lcnt3aWR0aDozMDBweDtoZWlnaHQ6MzAwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7bWFyZ2luOmF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LnByZWxvYWRlciAuc3Bpbm5lciAuc3Bpbm5lci1sb2dve3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnByZWxvYWRlciAuc3Bpbm5lciAuc3Bpbm5lci1sb2dvIGltZ3t3aWR0aDoxMDAlfS5hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjoyczthbmltYXRpb24tZHVyYXRpb246MnM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RofS5hbmltYXRlZC5pbmZpbml0ZXstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6aW5maW5pdGU7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZX0uYW5pbWF0ZWQuYm91bmNlSW4sLmFuaW1hdGVkLmJvdW5jZU91dCwuYW5pbWF0ZWQuZmxpcE91dFgsLmFuaW1hdGVkLmZsaXBPdXRZey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi43NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi43NXN9QC13ZWJraXQta2V5ZnJhbWVzIG17MCUsMjAlLDUzJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX00MCUsNDMley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zMHB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zMHB4LDApfTcwJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTVweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTVweCwwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtNHB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC00cHgsMCl9fUBrZXlmcmFtZXMgbXswJSwyMCUsNTMlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTQwJSw0MyV7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTMwcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTMwcHgsMCl9NzAley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xNXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xNXB4LDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC00cHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTRweCwwKX19QC13ZWJraXQta2V5ZnJhbWVzIG57MCUsMjAlLDUzJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX00MCUsNDMley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC01cHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTVweCwwKX03MCV7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTNweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtM3B4LDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTFweCwwKX19QGtleWZyYW1lcyBuezAlLDIwJSw1MyUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9NDAlLDQzJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtNXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC01cHgsMCl9NzAley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTNweCwwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xcHgsMCl9fS5ib3VuY2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTptO2FuaW1hdGlvbi1uYW1lOm07LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OjNzO2FuaW1hdGlvbi1kZWxheTozc31ALXdlYmtpdC1rZXlmcmFtZXMgb3syMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpfTUwJSw1NSV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4xLDEuMSwxLjEpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguMywuMywuMyk7dHJhbnNmb3JtOnNjYWxlM2QoLjMsLjMsLjMpfX1Aa2V5ZnJhbWVzIG97MjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpO3RyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KX01MCUsNTUle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSl9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjMsLjMsLjMpO3RyYW5zZm9ybTpzY2FsZTNkKC4zLC4zLC4zKX19LmJvdW5jZU91dHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOm87YW5pbWF0aW9uLW5hbWU6b31hcnRpY2xle3BhZGRpbmctdG9wOjEyMHB4fS5ob21lIGFydGljbGV7cGFkZGluZy10b3A6MH1zZWN0aW9ue3BhZGRpbmc6NHJlbSAwfXNlY3Rpb24uaGVhZGVyLXB1c2h7cGFkZGluZy10b3A6MTYwcHh9Lm91dGVyLWNvbnRhaW5lcnt3aWR0aDo4MCU7bWFyZ2luOjAgYXV0bzttYXgtd2lkdGg6MTIwMHB4O3BhZGRpbmc6NHJlbSAwfS5pbm5lci1jb250YWluZXItYntkaXNwbGF5OmJsb2NrfS5pbm5lci1jb250YWluZXItZntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0uaW5uZXItY29udGFpbmVyLWY+LmNvbnRlbnR7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfS5zbWFsbHttYXgtd2lkdGg6NjAwcHh9Lm1lZCwuc21hbGx7bWFyZ2luOjAgYXV0b30ubWVke21heC13aWR0aDo4MDBweH0ubGd7bWF4LXdpZHRoOjEwMDBweDttYXJnaW46MCBhdXRvfS5jZW50ZXJlZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5jZW50ZXJlZCwuc3BhY2Vkey1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zcGFjZWR7LW1zLWZsZXgtcGFjazpqdXN0aWZ5Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0ubnB0e3BhZGRpbmctdG9wOjAhaW1wb3J0YW50fS5ucHtwYWRkaW5nOjAhaW1wb3J0YW50fS5ucGJ7cGFkZGluZy1ib3R0b206MCFpbXBvcnRhbnR9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7YXJ0aWNsZXtwYWRkaW5nLXRvcDo2MHB4fXNlY3Rpb24uaGVhZGVyLXB1c2h7cGFkZGluZy10b3A6MTAwcHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NzY3cHgpe3NlY3Rpb257cGFkZGluZzo2cmVtIDB9Lm91dGVyLWNvbnRhaW5lcnt3aWR0aDo5MCV9fS5zY3JlZW4tcmVhZGVyLXRleHR7Y2xpcDpyZWN0KDFweCwxcHgsMXB4LDFweCk7cG9zaXRpb246YWJzb2x1dGUhaW1wb3J0YW50O2hlaWdodDoxcHg7d2lkdGg6MXB4O292ZXJmbG93OmhpZGRlbn0uc2NyZWVuLXJlYWRlci10ZXh0OmZvY3Vze2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjNweDstd2Via2l0LWJveC1zaGFkb3c6MCAwIDJweCAycHggcmdiYSgwLDAsMCwuNik7Ym94LXNoYWRvdzowIDAgMnB4IDJweCByZ2JhKDAsMCwwLC42KTtjbGlwOmF1dG8haW1wb3J0YW50O2NvbG9yOmdyZWVuO2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjguNzVweDtmb250LXNpemU6Ljg3NXJlbTtmb250LXdlaWdodDo3MDA7aGVpZ2h0OmF1dG87bGVmdDo1cHg7bGluZS1oZWlnaHQ6bm9ybWFsO3BhZGRpbmc6MTVweCAyM3B4IDE0cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dG9wOjVweDt3aWR0aDphdXRvO3otaW5kZXg6MTAwMDAwfSNjb250ZW50W3RhYmluZGV4PVxcXCItMVxcXCJdOmZvY3Vze291dGxpbmU6MH0udG9wLWJhcntiYWNrZ3JvdW5kOmdyYXk7aGVpZ2h0OjQ2cHg7ei1pbmRleDoxMH0udG9wLWJhciAudG9wLWJhci1vdXRlcnt3aWR0aDoxMDAlO2hlaWdodDo0NnB4O2JhY2tncm91bmQ6Izk3OTI4YTtwYWRkaW5nOjAgMzBweDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS50b3AtYmFyIC50b3AtYmFyLW91dGVyLC50b3AtYmFyIC50b3AtbWVudXtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS50b3AtYmFyIC50b3AtbWVudXtoZWlnaHQ6MTAwJX0udG9wLWJhciAudG9wLW1lbnUgYXtwYWRkaW5nOjIwcHg7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtO2xldHRlci1zcGFjaW5nOi4xNXJlbTtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OjcwMH0udG9wLWJhciAudG9wLW1lbnUgYTpsYXN0LW9mLXR5cGV7cGFkZGluZy1yaWdodDowfSNtYXN0aGVhZHtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMjBweDstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7ei1pbmRleDoxMDt0b3A6NDZweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7d2lsbC1jaGFuZ2U6aGVpZ2h0LGJhY2tncm91bmQtY29sb3I7LXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OmhlaWdodCxiYWNrZ3JvdW5kLWNvbG9yO3RyYW5zaXRpb24tcHJvcGVydHk6aGVpZ2h0LGJhY2tncm91bmQtY29sb3I7LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOi4yNXM7dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfSNtYXN0aGVhZDpiZWZvcmV7Y29udGVudDpcXFwiZGVza3RvcFxcXCI7ZGlzcGxheTpub25lfSNtYXN0aGVhZDphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtoZWlnaHQ6MXB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMTUpO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMXB4fSNtYXN0aGVhZCAuaGVhZGVyLW91dGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cGFkZGluZzowIDMwcHh9I21hc3RoZWFkIC5uYXZSb290e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH0jbWFzdGhlYWQgLm5hdlJvb3RfbG9nb3t3aWR0aDo4MHB4O2hlaWdodDo5MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luOjE1cHggMH0jbWFzdGhlYWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1ub3QtZml4ZWR7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9sb2dvIC5sb2dvLWlzLWZpeGVke2Rpc3BsYXk6bm9uZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51e2hlaWdodDoxMDAlO21hcmdpbi1sZWZ0OjMwcHg7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IHVse2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IGxpe2hlaWdodDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6MCAzMHB4fSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IGF7bGluZS1oZWlnaHQ6MTIwcHg7aGVpZ2h0OjEyMHB4O2ZvbnQtc2l6ZToxLjhyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7d2lsbC1jaGFuZ2U6Y29sb3IsbGluZS1oZWlnaHQsaGVpZ2h0Oy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTpjb2xvcixsaW5lLWhlaWdodCxoZWlnaHQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTpjb2xvcixsaW5lLWhlaWdodCxoZWlnaHQ7LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOi4yNXM7dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MTAwJX0jbWFzdGhlYWQgLm5hdlJvb3RfZmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9ue2JvcmRlci1yYWRpdXM6M3B4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6Izk3M2IxNTtjb2xvcjojZmZmO292ZXJmbG93OmhpZGRlbjtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O3BhZGRpbmc6MCAxNXB4O2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToxLjZyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtfSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YmVmb3Jle21hcmdpbjphdXRvO2NvbnRlbnQ6YXR0cihkYXRhLWhvdmVyKTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtvcGFjaXR5OjA7Y29sb3I6I2ZmZn0jbWFzdGhlYWQgLm5hdlJvb3RfZmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDowO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7YmFja2dyb3VuZDojYzQ0YzFifSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9I21hc3RoZWFkIC5uYXZSb290X2ZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlcjphZnRlcnstd2Via2l0LWFuaW1hdGlvbjpyIC40czthbmltYXRpb246ciAuNHN9I21hc3RoZWFkIC5uYXZSb290X2ZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlciBzcGFue29wYWNpdHk6MH0jbWFzdGhlYWQgLm5hdlJvb3RfbW9iaWxle2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQgI2hhcmRfY2lkZXIsI21hc3RoZWFkICNsaW5lLCNtYXN0aGVhZCAjcm9ja3tmaWxsOiMwMDB9I21hc3RoZWFkICNib2xke2ZpbGw6I2VhYTgyMX0uY2lkZXJfd3JhcHBlcl9pbm5lcnt3aWR0aDoxMDB2dztwYWRkaW5nOjIwcHggNjBweDtoZWlnaHQ6MTYwcHh9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGl7aGVpZ2h0OjEyMHB4fS5jaWRlcl93cmFwcGVyX2lubmVyIGxpIGF7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47cG9zaXRpb246cmVsYXRpdmV9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGkgLmVtYmxlbXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTIwcHg7cmlnaHQ6MjVweDtmb250LXNpemU6MS4xcmVtO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHh9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGkgLmVtYmxlbSBzdmd7ZmlsbDojMTkzNTNifS5jaWRlcl93cmFwcGVyX2lubmVyIC5jaWRlcl90aHVtYm5haWx7aGVpZ2h0OjcwJX0uY2lkZXJfd3JhcHBlcl9pbm5lciAuY2lkZXJfdGh1bWJuYWlsIGltZ3ttYXgtaGVpZ2h0OjEwMCU7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfS5jaWRlcl93cmFwcGVyX2lubmVyIGxpOmhvdmVyIGltZ3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjIpO3RyYW5zZm9ybTpzY2FsZSgxLjIpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXR9LnN1Yi1uYXYtcm9vdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTIwcHg7bGVmdDowO3JpZ2h0OjA7ZGlzcGxheTpibG9jaztvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTt3aWxsLWNoYW5nZTpvcGFjaXR5Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZS1pbi1vdXR9LnN1Yi1uYXYtcm9vdCBhe2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC13ZWlnaHQ6NTAwO2NvbG9yOiM3ZDc3NmQ7Zm9udC1zaXplOjEuNHJlbTtkaXNwbGF5OmJsb2NrO2xldHRlci1zcGFjaW5nOi4xNXJlbX0uc3ViLW5hdi1yb290ICNhYm91dE1lbnUgYSwuc3ViLW5hdi1yb290ICN2aXNpdE1lbnUgYXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjpjb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxjb2xvciAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMsY29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfS5zdWItbmF2LXJvb3QgI2Fib3V0TWVudSBhOmhvdmVyLC5zdWItbmF2LXJvb3QgI3Zpc2l0TWVudSBhOmhvdmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO2NvbG9yOiM1ZTU5NTJ9LmRyb3Bkb3duLWJne3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZDojZmZmO292ZXJmbG93OmhpZGRlbjt3aWR0aDozODBweDtoZWlnaHQ6NTAwcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMDt0cmFuc2Zvcm0tb3JpZ2luOjAgMDstd2Via2l0LWJveC1zaGFkb3c6MCA1cHggMTVweCByZ2JhKDAsMCwwLC4xKTtib3gtc2hhZG93OjAgNXB4IDE1cHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfS5ob21lICNtYXN0aGVhZCwuaG9tZSAjbWFzdGhlYWQ6YWZ0ZXJ7YmFja2dyb3VuZDowIDB9LmhvbWUgI21hc3RoZWFkIC5uYXZSb290X21lbnUgYXtjb2xvcjojZmZmfS5ob21lICNtYXN0aGVhZCAjYm9sZCwuaG9tZSAjbWFzdGhlYWQgI2hhcmRfY2lkZXIsLmhvbWUgI21hc3RoZWFkICNsaW5le2ZpbGw6I2ZmZn0uaG9tZSAjbWFzdGhlYWQgI3JvY2t7ZmlsbDojZWVhODIxfSNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlLC5ob21lICNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxle2JhY2tncm91bmQ6I2ZmZn0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZTphZnRlciwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZTphZnRlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjE1KX0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjaGFyZF9jaWRlciwjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjbGluZSwjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjcm9jaywuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjaGFyZF9jaWRlciwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjbGluZSwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjcm9ja3tmaWxsOiMwMDB9I21hc3RoZWFkLmlzLWRyb3Bkb3duLXZpc2libGUgI2JvbGQsLmhvbWUgI21hc3RoZWFkLmlzLWRyb3Bkb3duLXZpc2libGUgI2JvbGR7ZmlsbDojZWVhODIxfSNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlIC5uYXZSb290X21lbnUgYSwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAubmF2Um9vdF9tZW51IGF7Y29sb3I6IzdkNzc2ZH0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAuc3ViLW5hdi1yb290LC5ob21lICNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlIC5zdWItbmF2LXJvb3R7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmF1dG99LnN1Yi1uYXYtd3JhcHBlcntvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpbGwtY2hhbmdlOnRyYW5zZm9ybSx3aWR0aCxoZWlnaHQ7LXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OndpZHRoLGhlaWdodCwtd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5OndpZHRoLGhlaWdodCwtd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybSx3aWR0aCxoZWlnaHQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sd2lkdGgsaGVpZ2h0LC13ZWJraXQtdHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzO3RyYW5zaXRpb24tZHVyYXRpb246LjI1c30uZHJvcGRvd24tY29udGVudHtvcGFjaXR5OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpbGwtY2hhbmdlOm9wYWNpdHk7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjE1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOm9wYWNpdHkgLjE1cyBlYXNlLWluLW91dH0uZHJvcGRvd24tY29udGVudC5nby1sZWZ0ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUwcHgpO29wYWNpdHk6MH0uZHJvcGRvd24tY29udGVudC5nby1yaWdodHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDE1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxNTBweCk7b3BhY2l0eTowfS5kcm9wZG93bi1jb250ZW50LmlzLWFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApO29wYWNpdHk6MTt6LWluZGV4OjUwMH0uc3ViLW1lbnV7bWFyZ2luOjEwcHggMH0uc3ViLW1lbnUgbGl7cGFkZGluZzoxMHB4IDMwcHh9I21hc3RoZWFkLmlzLWZpeGVke3Bvc2l0aW9uOmZpeGVkO3RvcDowO2JhY2tncm91bmQtY29sb3I6I2ZmZiFpbXBvcnRhbnQ7aGVpZ2h0OjcwcHg7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cyxoZWlnaHQgLjI1czt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cyxoZWlnaHQgLjI1czstd2Via2l0LWJveC1zaGFkb3c6MCAwIDVweCAwIHJnYmEoMCwwLDAsLjE1KTtib3gtc2hhZG93OjAgMCA1cHggMCByZ2JhKDAsMCwwLC4xNSl9I21hc3RoZWFkLmlzLWZpeGVkIC5uYXZSb290X2xvZ297aGVpZ2h0OjQwcHh9I21hc3RoZWFkLmlzLWZpeGVkIC5uYXZSb290X2xvZ28gLmxvZ28taXMtbm90LWZpeGVke2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1maXhlZHtkaXNwbGF5OmJsb2NrfSNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9tZW51IGF7aGVpZ2h0OjcwcHg7bGluZS1oZWlnaHQ6NzBweDtjb2xvcjojN2Q3NzZkfSNtYXN0aGVhZC5pcy1maXhlZCAuc3ViLW5hdi1yb290e3RvcDo3MHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6OTAwcHgpey50b3AtYmFye2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQsI21hc3RoZWFkLmlzLWZpeGVke3RvcDowO2hlaWdodDo2MHB4O3Bvc2l0aW9uOmZpeGVkO2JhY2tncm91bmQ6I2ZmZn0jbWFzdGhlYWQuaXMtZml4ZWQ6YmVmb3JlLCNtYXN0aGVhZDpiZWZvcmV7Y29udGVudDpcXFwibW9iaWxlXFxcIn0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfZmluZGVyLCNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9tZW51LCNtYXN0aGVhZC5pcy1maXhlZCAuc3ViLW5hdi1yb290LCNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIsI21hc3RoZWFkIC5uYXZSb290X21lbnUsI21hc3RoZWFkIC5zdWItbmF2LXJvb3R7ZGlzcGxheTpub25lfSNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9sb2dvLCNtYXN0aGVhZCAubmF2Um9vdF9sb2dve3dpZHRoOjEwMHB4O2hlaWdodDo0MHB4O21hcmdpbjoxMHB4IDA7ei1pbmRleDo1MH0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1ub3QtZml4ZWQsI21hc3RoZWFkIC5uYXZSb290X2xvZ28gLmxvZ28taXMtbm90LWZpeGVke2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1maXhlZCwjbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbW9iaWxlLCNtYXN0aGVhZCAubmF2Um9vdF9sb2dvIC5sb2dvLWlzLWZpeGVkLCNtYXN0aGVhZCAubmF2Um9vdF9tb2JpbGV7ZGlzcGxheTpibG9ja30jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV9vdXRlcl93cmFwLCNtYXN0aGVhZCAubW9iaWxlX291dGVyX3dyYXB7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZDojOTc5MjhhO3otaW5kZXg6MjA7cGFkZGluZzozMHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXgtaGVpZ2h0OjA7b3ZlcmZsb3c6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycyBlYXNlLWluLW91dH0jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV9vdXRlcl93cmFwLm1tZW51LWlzLXZpc2libGUsI21hc3RoZWFkIC5tb2JpbGVfb3V0ZXJfd3JhcC5tbWVudS1pcy12aXNpYmxle21heC1oZWlnaHQ6MTAwJTtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2l0aW9uOm1heC1oZWlnaHQgLjJzLG9wYWNpdHkgLjJzO3RyYW5zaXRpb246bWF4LWhlaWdodCAuMnMsb3BhY2l0eSAuMnN9I21hc3RoZWFkLmlzLWZpeGVkIHVsLm1vYmlsZS1tZW51LCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudXttYXJnaW4tYm90dG9tOjQwcHh9I21hc3RoZWFkLmlzLWZpeGVkIHVsLm1vYmlsZS1tZW51IGxpLCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudSBsaXtoZWlnaHQ6NTBweDtsaW5lLWhlaWdodDo1MHB4O3RleHQtYWxpZ246Y2VudGVyfSNtYXN0aGVhZC5pcy1maXhlZCB1bC5tb2JpbGUtbWVudSBsaSBhLCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudSBsaSBhe2NvbG9yOiNmZmY7Zm9udC1zaXplOjEuN3JlbX0jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV90cmlnZ2VyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXJ7cG9zaXRpb246Zml4ZWQ7dG9wOjE1cHg7cmlnaHQ6MzBweDt3aWR0aDozMHB4O2hlaWdodDozMHB4O2Rpc3BsYXk6YmxvY2s7ei1pbmRleDo0MDA7Y3Vyc29yOnBvaW50ZXJ9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlciBzcGFuLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDozMHB4O2hlaWdodDozcHg7YmFja2dyb3VuZC1jb2xvcjojOTc5MjhhO3RvcDo1MCU7bWFyZ2luLXRvcDotMXB4O2JvcmRlci1yYWRpdXM6MXB4O2Rpc3BsYXk6YmxvY2s7d2lsbC1jaGFuZ2U6YmFja2dyb3VuZC1jb2xvcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3M7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zc30jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV90cmlnZ2VyIHNwYW46YmVmb3JlLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmV7dG9wOi04cHh9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlciBzcGFuOmFmdGVyLCNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmUsI21hc3RoZWFkIC5tb2JpbGVfdHJpZ2dlciBzcGFuOmFmdGVyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiM5NzkyOGE7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXItcmFkaXVzOjFweDtsZWZ0OjA7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYmFja2dyb3VuZC1jb2xvcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyxiYWNrZ3JvdW5kLWNvbG9yIC4zczt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MsYmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzfSNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIgc3BhbjphZnRlciwjbWFzdGhlYWQgLm1vYmlsZV90cmlnZ2VyIHNwYW46YWZ0ZXJ7Ym90dG9tOi04cHh9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW4sI21hc3RoZWFkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW57YmFja2dyb3VuZDowIDB9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW46YmVmb3JlLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmJlZm9yZXt0b3A6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDEzNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxMzVkZWcpfSNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmFmdGVyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmFmdGVye2JvdHRvbTowO2JhY2tncm91bmQtY29sb3I6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMjI1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDIyNWRlZyl9fSNsb2FkZXJ7YmFja2dyb3VuZDojZDRhNzRkO3Bvc2l0aW9uOmZpeGVkO3RvcDowO2hlaWdodDo0cHg7bGVmdDowO3dpZHRoOjA7ei1pbmRleDoyMDA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMiwuMywuMjUsLjkpIDBtczt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMiwuMywuMjUsLjkpIDBtc30ud29vZHtiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9icl9wcmVmb290ZXJfYmFja2dyb3VuZC5qcGcpO2JvcmRlci10b3A6MTBweCBzb2xpZCAjZTVlNGUyfS53b29kIGltZ3t3aWR0aDo1MCU7cGFkZGluZzo0MHB4IDA7bWFyZ2luOjAgYXV0b30ucHJlZm9vdGVyLW1lbnV7ZGlzcGxheTpub25lfS5mb290ZXItb3V0ZXJ7cGFkZGluZzozMHB4O3dpZHRoOjEwMCU7bWF4LXdpZHRoOjE0MDBweDttYXJnaW46MCBhdXRvfS5mb290ZXItYm90dG9tIC5mb290ZXItb3V0ZXJ7cGFkZGluZzoxNXB4IDMwcHh9LmZvb3Rlci10b3B7YmFja2dyb3VuZDojOTc5MjhhfS5mb290ZXItYm90dG9te2JhY2tncm91bmQ6IzhiODU3ZDtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyfS5mb290ZXItYm90dG9tIGEuZm9vdGVyLWxpbmssLmZvb3Rlci1ib3R0b20gcHttYXJnaW46MDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2ZvbnQtc2l6ZToxLjJyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2xldHRlci1zcGFjaW5nOi4wNXJlbTtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC42KX0uZm9vdGVyLWJvdHRvbSBhLmZvb3Rlci1saW5re3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2ZvbnQtd2VpZ2h0OjQwMDt3aWxsLWNoYW5nZTpjb2xvcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjJzO3RyYW5zaXRpb246Y29sb3IgLjJzfS5mb290ZXItYm90dG9tIGEuZm9vdGVyLWxpbms6aG92ZXJ7Y29sb3I6I2U1ZTRlMn0uZm9vdGVyLXJvb3R7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5mb290ZXItcm9vdD5kaXZ7bWFyZ2luLXJpZ2h0OjRlbX0uZm9vdGVyLXJvb3Q+ZGl2Omxhc3Qtb2YtdHlwZXttYXJnaW4tcmlnaHQ6MH0uZm9vdGVyUm9vdF9sb2dvIGF7ZGlzcGxheTpibG9jazt3aWR0aDoxMjBweH0uZm9vdGVyUm9vdF9sb2dvICNib2xkLC5mb290ZXJSb290X2xvZ28gI2hhcmRfY2lkZXIsLmZvb3RlclJvb3RfbG9nbyAjbGluZSwuZm9vdGVyUm9vdF9sb2dvICNyb2Nre2ZpbGw6cmdiYSgyMjgsMjI3LDIyNiwuNil9LmZvb3RlclJvb3RfbmV3c2xldHRlcnttYXgtd2lkdGg6MzAwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uOy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGg0e2NvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjYpO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luOjB9LmZvb3RlclJvb3RfbmV3c2xldHRlciBwe21hcmdpbjowO2ZvbnQtc2l6ZToxLjNyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC40KX0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGZvcm17bWFyZ2luLXRvcDoyMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDIyOCwyMjcsMjI2LC42KTtwb3NpdGlvbjpyZWxhdGl2ZX0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGlucHV0W3R5cGU9dGV4dF17YmFja2dyb3VuZDowIDA7Ym9yZGVyOjA7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7cGFkZGluZzoxMHB4IDVweDtib3JkZXItcmFkaXVzOjA7d2lkdGg6MTAwJTtsaW5lLWhlaWdodDoyMHB4fS5mb290ZXJSb290X25ld3NsZXR0ZXIgLnN1Ym1pdF9idXR0b257cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMjI4LDIyNywyMjYsLjYpfS5mb290ZXJSb290X25ld3NsZXR0ZXIgLnN1Ym1pdF9idXR0b246YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ljb25zL3Jhdy9hcnJvd2FsdC5zdmcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTt0b3A6NTAlO2xlZnQ6NTAlO21hcmdpbi10b3A6LTVweDttYXJnaW4tbGVmdDotMTBweDt6LWluZGV4OjU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LmZvb3RlclJvb3RfbmV3c2xldHRlciAuc3VibWl0X2J1dHRvbiBpbnB1dFt0eXBlPXN1Ym1pdF17Ym9yZGVyOjA7YmFja2dyb3VuZDowIDA7bWFyZ2luOjA7aGVpZ2h0OjEwMCU7d2lkdGg6NDBweDtmb250LXNpemU6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTJ9LmZvb3RlclJvb3RfbmV3c2xldHRlciAuc3VibWl0X2J1dHRvbjpob3ZlcjpiZWZvcmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCl9LmZvb3RlclJvb3RfbWVudSBsaSBhe2ZvbnQtc2l6ZToxLjNyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC42KTtmb250LXdlaWdodDo2MDA7bGV0dGVyLXNwYWNpbmc6LjFyZW07ZGlzcGxheTppbmxpbmUtYmxvY2s7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246Y29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMsY29sb3IgLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLGNvbG9yIC4yNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjI1c30uZm9vdGVyUm9vdF9tZW51IGxpIGE6aG92ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCk7Y29sb3I6I2U1ZTRlMn0uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXJ7bWFyZ2luLXRvcDoyMHB4fS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbntib3JkZXItcmFkaXVzOjNweDtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiM5NzNiMTU7Y29sb3I6I2ZmZjtvdmVyZmxvdzpoaWRkZW47ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nOjAgMTVweDtmbG9hdDpyaWdodDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO2xldHRlci1zcGFjaW5nOi4xcmVtfS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpiZWZvcmV7bWFyZ2luOmF1dG87Y29udGVudDphdHRyKGRhdGEtaG92ZXIpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6MDtjb2xvcjojZmZmfS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JhY2tncm91bmQ6I2M0NGMxYn0uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9LmZvb3RlclJvb3RfcHJpbWFyeSAuZm9vdGVyX2NpZGVyRmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyOmFmdGVyey13ZWJraXQtYW5pbWF0aW9uOnIgLjRzO2FuaW1hdGlvbjpyIC40c30uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXIgc3BhbntvcGFjaXR5OjB9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7Zm9vdGVye2hlaWdodDozMDBweDtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOjYwcHh9LnByZWZvb3Rlci1tZW51e2hlaWdodDo2MHB4O3dpZHRoOjEwMCU7ZGlzcGxheTpibG9jazt6LWluZGV4OjM7cG9zaXRpb246cmVsYXRpdmV9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7aGVpZ2h0OjEwMCV9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5IGxpey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTtoZWlnaHQ6NjBweDtsaW5lLWhlaWdodDo2MHB4O3RleHQtYWxpZ246Y2VudGVyfS5wcmVmb290ZXItbWVudSAuZm9vdGVyLXN0aWNreSBsaSBhe2NvbG9yOiNmZmZ9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5IGxpOmZpcnN0LWNoaWxke2JhY2tncm91bmQ6I2FkNDQxOH0ucHJlZm9vdGVyLW1lbnUgLmZvb3Rlci1zdGlja3kgbGk6bnRoLWNoaWxkKDIpe2JhY2tncm91bmQ6Izk3M2IxNX0ucHJlZm9vdGVyLW1lbnUgLmZvb3Rlci1zdGlja3kgbGk6bnRoLWNoaWxkKDMpe2JhY2tncm91bmQ6IzgxMzIxMn0ucHJlZm9vdGVyLW1lbnUucGZtLWlzLWZpeGVke3Bvc2l0aW9uOmZpeGVkO2JvdHRvbTowfS5wcmVmb290ZXItbWVudS5wZm0taXMtZmxvd3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTYwcHh9LmZvb3Rlci1yb290e2Rpc3BsYXk6YmxvY2t9LmZvb3RlclJvb3RfbG9nb3tmbG9hdDpyaWdodH0uZm9vdGVyUm9vdF9tZW51e2Rpc3BsYXk6bm9uZX0uZm9vdGVyUm9vdF9wcmltYXJ5e21hcmdpbi10b3A6NDBweH0uZm9vdGVyX2NpZGVyRmluZGVye2Rpc3BsYXk6bm9uZX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo1ODBweCl7LmZvb3RlclJvb3RfbG9nb3tkaXNwbGF5Om5vbmV9LmZvb3Rlci1yb290IC5mb290ZXJSb290X25ld3NsZXR0ZXJ7bWF4LXdpZHRoOjQwMHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LmZvb3Rlci1yb290IC5mb290ZXJSb290X3ByaW1hcnl7bWFyZ2luLXRvcDo0MHB4fS5mb290ZXItcm9vdCAuZm9vdGVyUm9vdF9wcmltYXJ5IHVsLnNvY2lhbHt0ZXh0LWFsaWduOmNlbnRlcjtkaXNwbGF5OmJsb2NrfX0uaGVyb3tiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I2E5YTZhMX0uaGVybyBpbWd7d2lkdGg6MTAwJX0uaGVybyAuaGVyby13cmFwcGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246NTAlOy13ZWJraXQtYW5pbWF0aW9uOnAgLjZzIGVhc2UtaW4tb3V0O2FuaW1hdGlvbjpwIC42cyBlYXNlLWluLW91dH0uaGVyby1taWxscy1yaXZlci1jaWRlcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvbWlsbHMtcml2ZXItaGVyby5qcGcpfS5oZXJvLW5lbGx5c2ZvcmQtY2lkZXJ5e2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L25lbGx5c2ZvcmQtaGVyby5qcGcpfS5oZXJvLWNhcnRlci1tb3VudGFpbntiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jYXJ0ZXItbW91bnRhaW4taGVyby5qcGcpfS5oZXJvLWNoaWxlcy1wZWFjaHtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jaGlsZXMtcGVhY2gtaGVyby5qcGcpfS5oZXJvLW5lbGx5c2ZvcmQtYmFycmVsLWJhcm57YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmFycmVsLWJhcm4tY29tcGxldGUuanBnKX0uaGVyby1jb3Jle2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L21ha2UtaXQtaGFwcGVuLTN4MS5qcGcpfS5oZXJvLWFib3V0e2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2Fib3V0LWhlcm8uanBnKX0uaGVyby1jaWRlcjEwMXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jaWRlcjEwMS1oZXJvLmpwZyl9Lmhlcm8tZmluZGVye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2ZpbmRlci1oZXJvLmpwZyl9QC13ZWJraXQta2V5ZnJhbWVzIHB7MCV7b3BhY2l0eTowfTUwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHB7MCV7b3BhY2l0eTowfTUwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX0uaG9tZSAuaGVyb3twb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9LmhvbWUgLmhlcm8td3JhcHBlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjUpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt6LWluZGV4OjI7b3ZlcmZsb3c6aGlkZGVufS5ob21lIC5oZXJvLWNvbnRlbnQgaW1ne3dpZHRoOjUwJTttYXgtd2lkdGg6NDgwcHh9LmhvbWUgI3ZpZHBhdXNle3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMHB4O3JpZ2h0OjEwcHg7ZGlzcGxheTpub25lfXZpZGVvI2Jndmlke3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7ei1pbmRleDoxO3dpZHRoOmF1dG87aGVpZ2h0OjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMXM7dHJhbnNpdGlvbjpvcGFjaXR5IDFzfXZpZGVvI2JnVmlkRnVsbHtwb3NpdGlvbjpmaXhlZDt0b3A6NTAlO2xlZnQ6NTAlO21pbi13aWR0aDoxMDAlO21pbi1oZWlnaHQ6MTAwJTt3aWR0aDphdXRvO2hlaWdodDphdXRvO3otaW5kZXg6LTEwMDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9wb3N0ZXIuanBnKSBuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyfS5zdG9wZmFkZXtvcGFjaXR5Oi41fS5oZXJvLWNvbnRlbnR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2JvdHRvbTowO3JpZ2h0OjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5oZXJvLWNvbnRlbnQgaDF7Zm9udC1zaXplOjkwcHg7dGV4dC1zaGFkb3c6MXB4IDFweCAyMHB4IHJnYmEoMCwwLDAsLjYpO2NvbG9yOiNmZmZ9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo4MDBweCl7dmlkZW8jYmd2aWR7ZGlzcGxheTpub25lfS5ob21lIC5oZXJve2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L3Bvc3Rlci1zbS5qcGcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTttYXJnaW4tdG9wOjYwcHh9Lmhlcm8tY29udGVudCBoMXtmb250LXNpemU6NjBweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo2MDBweCl7Lmhlcm8tY29udGVudCBoMXtmb250LXNpemU6MzhweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDoxNjAwcHgpey5oZXJvIGltZ3t3aWR0aDoxMDAlfX0uYWdlLWdhdGUtbG9nbyBpbWd7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0bzttYXJnaW46MCBhdXRvO21heC13aWR0aDozMjBweH1oMi5hZ2UtZ2F0ZS1zdWJoZWFkaW5ne2NvbG9yOiM5NzkyOGE7bWFyZ2luLWJvdHRvbTowfXAuYWdlLWdhdGUtcmVtZW1iZXItd3JhcHBlcntkaXNwbGF5Om5vbmV9YnV0dG9uLmFnZS1nYXRlLXN1Ym1pdC1ubyxidXR0b24uYWdlLWdhdGUtc3VibWl0LXllc3tib3JkZXI6MDtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjVweCAyMHB4O21hcmdpbjoyMHB4IDEwcHggMDtmb250LWZhbWlseTp2aW55bCxzZXJpZjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC1zaXplOjEuNnJlbTtjb2xvcjojZmZmO291dGxpbmU6MDtiYWNrZ3JvdW5kOiM5NzNiMTV9dWwuYnJlYWRjcnVtYnN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH11bC5icmVhZGNydW1icyBsaSx1bC5icmVhZGNydW1icyBsaSBhe2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5icmVhZGNydW1icy13cmFwcGVyIC5vdXRlci1jb250YWluZXJ7aGVpZ2h0OjEwMCV9LmJyZWFkY3J1bWJzLXdyYXBwZXIgdWwuYnJlYWRjcnVtYnN7aGVpZ2h0OjEwMCU7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmF2X292ZXJsYXl7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZDojMmU4YjU3O3otaW5kZXg6MTAwMDB9LmF2X292ZXJsYXkjaGVsbG97ZGlzcGxheTpibG9ja30uYXZfb3ZlcmxheSNnb29kYnlle2Rpc3BsYXk6bm9uZX0uaG9tZS1pbnRyb3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpO3BhZGRpbmctYm90dG9tOjZyZW19LmhvbWUtaW50cm8gaDF7Y29sb3I6IzdlNzk3MDtsZXR0ZXItc3BhY2luZzouMXJlbTtmb250LXNpemU6NDhweH0uaG9tZS1pbnRybyAuZmxleC1ncmlke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTIwcHg7bWFyZ2luLXJpZ2h0Oi0yMHB4O2xpc3Qtc3R5bGU6bm9uZX0uaG9tZS1pbnRybyAuZmxleC1ncmlkPip7cGFkZGluZzoyMHB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsuaG9tZS1pbnRybyAuZmxleC1ncmlkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuaG9tZS1pbnRybyAuZmxleC1ncmlkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LmhvbWUtaW50cm8gLmZsZXgtZ3JpZD4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb257cG9zaXRpb246cmVsYXRpdmV9LmhvbWUtaW50cm8gLmZsZXgtZ3JpZCAuaWxsdXN0cmF0aW9uIGltZ3t3aWR0aDo4MCU7bWFyZ2luOjAgYXV0b30uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhe2ZvbnQtc2l6ZToycmVtO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTYwcHg7bWFyZ2luOjAgYXV0bztmb250LWZhbWlseTp2aW55bCxzZXJpZjtjdXJzb3I6cG9pbnRlcjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LmhvbWUtaW50cm8gLmZsZXgtZ3JpZCAuaWxsdXN0cmF0aW9uIC5saW5rLW92ZXJsYXkgYSAudGV4dHtwb3NpdGlvbjpyZWxhdGl2ZTtjb2xvcjojZmZmO3otaW5kZXg6MjtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246Y2VudGVyfS5ob21lLWludHJvIC5mbGV4LWdyaWQgLmlsbHVzdHJhdGlvbiAubGluay1vdmVybGF5IGEgLmJhbm5lcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhIC5iYW5uZXIgc3Zne2ZpbGw6Izk3M2IxNTstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAuMjVzO3RyYW5zaXRpb246ZmlsbCAuMjVzfS5ob21lLWludHJvIC5mbGV4LWdyaWQgLmlsbHVzdHJhdGlvbiAubGluay1vdmVybGF5IGE6aG92ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhOmhvdmVyIC5iYW5uZXIgc3Zne2ZpbGw6IzgxMzIxMn0uaG9tZS1saW5ldXB7YmFja2dyb3VuZC1jb2xvcjojNWU1OTUyO2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dydW5nZS1iZy5zdmcpO3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtc2l6ZTpjb3Zlcn0uaG9tZS1saW5ldXA6YWZ0ZXIsLmhvbWUtbGluZXVwOmJlZm9yZXt3aWR0aDoxMDAlO2hlaWdodDoxMHB4O2JhY2tncm91bmQ6Izk3OTI4YTtjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3Qvd29vZC1iZy0wMS5zdmcpfS5ob21lLWxpbmV1cCAuaW5uZXItY29udGFpbmVyLWJ7cG9zaXRpb246cmVsYXRpdmV9LmhvbWUtbGluZXVwIC5pbm5lci1jb250YWluZXItYiBoM3tjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZTo0OHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46MDttYXJnaW4tYm90dG9tOjVweH0uaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTRlbTtyaWdodDowO21heC13aWR0aDozMDBweH0ubWlkZGxle2Rpc3BsYXk6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZWYyZTY7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMi5zdmcpfS5taWRkbGUgLnRocmVlLWJsb2Nrc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yNXB4O21hcmdpbi1yaWdodDotMjVweDtsaXN0LXN0eWxlOm5vbmV9Lm1pZGRsZSAudGhyZWUtYmxvY2tzPip7cGFkZGluZzoyNXB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsubWlkZGxlIC50aHJlZS1ibG9ja3M+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6Nzg2cHgpey5taWRkbGUgLnRocmVlLWJsb2Nrcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5taWRkbGUgLnRocmVlLWJsb2Nrcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX0ubWlkZGxlIC50aHJlZS1ibG9ja3MgLmJsb2NrLWlubmVye2JhY2tncm91bmQ6I2ZmZjtoZWlnaHQ6MjAwcHg7Ym9yZGVyOjFweCBzb2xpZCAjZmZmOy1vLWJvcmRlci1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9yZGVySG9yaXpvbnRhbF93aGl0ZS5zdmcpIDI3IHJvdW5kIHJlcGVhdDtib3JkZXItaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvcmRlckhvcml6b250YWxfd2hpdGUuc3ZnKSAyNyBmaWxsIHJvdW5kIHJlcGVhdDtwb3NpdGlvbjpyZWxhdGl2ZX0ubWlkZGxlIC50aHJlZS1ibG9ja3MgLmJsb2NrLWlubmVyOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0b3A6MDtsZWZ0OjA7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO3otaW5kZXg6MjtkaXNwbGF5OmJsb2NrOy1vLWJvcmRlci1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9yZGVyVmVydGljYWxfd2hpdGUuc3ZnKSAyNyByb3VuZCByZXBlYXQ7Ym9yZGVyLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib3JkZXJWZXJ0aWNhbF93aGl0ZS5zdmcpIDI3IGZpbGwgcm91bmQgcmVwZWF0fS5mb3VuZGVyc3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9vdmVybGF5aW1hZ2UtdXBkYXRlZC5qcGcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtwYWRkaW5nOjRyZW0gMDtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLXBvc2l0aW9uOmJvdHRvbX0uZm91bmRlcnM6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dydW5nZS1iZzMuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlfS5mb3VuZGVyczphZnRlcnt3aWR0aDoxMDAlO2hlaWdodDoyMHB4O2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTEwcHg7ei1pbmRleDoxO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncmF5LXN0cm9rZS5zdmcpfS5mb3VuZGVycyAuY29udGVudC5lbWJsZW17LW1zLWZsZXg6MCAwIDMwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMzAlOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMzBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTMwZGVnKX0uZm91bmRlcnMgLmNvbnRlbnQudGV4dHstbXMtZmxleDowIDAgNjAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA2MCU7bWFyZ2luLWxlZnQ6NDBweDttYXgtd2lkdGg6NjAwcHh9LmZvdW5kZXJzIC5jb250ZW50LnRleHQgaDN7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDoxLjg7Zm9udC1zaXplOjIuMnJlbTt0ZXh0LWFsaWduOmNlbnRlcn0uaW5zdGFncmFtLXdyYXBwZXJ7YmFja2dyb3VuZDpncmF5O3Bvc2l0aW9uOnJlbGF0aXZlfS5pbnN0YWdyYW0td3JhcHBlciAuaW5zdGEtb3ZlcmxheXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOnJnYmEoMjEyLDE2Nyw3NywuMSl9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXJ7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi0yNXB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi0xMjVweDtoZWlnaHQ6NTBweDt3aWR0aDoyNTBweDt6LWluZGV4OjJ9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXIgLmluc3RhLWJhbm5lci1pbm5lcntiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iYW5uZXIuc3ZnKTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7cG9zaXRpb246cmVsYXRpdmV9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXIgLmluc3RhLWJhbm5lci1pbm5lciBoNHtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjUwcHg7aGVpZ2h0OjUwcHg7Zm9udC1zaXplOjEuN3JlbTttYXJnaW46MH0jaW5zdGFmZWVkey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bGlzdC1zdHlsZTpub25lfSNpbnN0YWZlZWQ+KntwYWRkaW5nOjA7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9QG1lZGlhIChtaW4td2lkdGg6NTQwcHgpeyNpbnN0YWZlZWQ+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19QG1lZGlhIChtaW4td2lkdGg6Nzg2cHgpeyNpbnN0YWZlZWQ+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsjaW5zdGFmZWVkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fSNpbnN0YWZlZWQgYXtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyfS5pbnN0YS1pbWFnZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0ub3JjaGFyZHtib3JkZXItdG9wOjEwcHggc29saWQgI2U1ZTRlMjtib3JkZXItYm90dG9tOjEwcHggc29saWQgI2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZX0ub3JjaGFyZCAucHJlZm9vdGVyLWNvbnRlbnR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5vcmNoYXJkIC5wcmVmb290ZXItY29udGVudCBpbWd7d2lkdGg6NTAlO21hcmdpbi10b3A6LTUlfS5vcmNoYXJkIGltZ3t3aWR0aDoxMDAlfS5wcmVmb290ZXJ7YmFja2dyb3VuZDojZTVlNGUyO3BhZGRpbmc6MDtwb3NpdGlvbjpyZWxhdGl2ZX0ucHJlZm9vdGVyIC5jb250ZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjkwMHB4KXsuaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXt3aWR0aDo1MCV9LmZvdW5kZXJzIC5jb250ZW50LmVtYmxlbXstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX0uZm91bmRlcnMgLmNvbnRlbnQuZW1ibGVtIGltZ3ttYXJnaW46MCBhdXRvO21heC13aWR0aDoyMDBweH0uZm91bmRlcnMgLmNvbnRlbnQudGV4dHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW46MCBhdXRvO3RleHQtYWxpZ246Y2VudGVyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjYwMHB4KXsuaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXtkaXNwbGF5Om5vbmV9LmhvbWUtbGluZXVwIC50ZXh0e3RleHQtYWxpZ246Y2VudGVyfX0uc2luZ2xlLWxvY2F0aW9uLWludHJve3Bvc2l0aW9uOnJlbGF0aXZlfS5zaW5nbGUtbG9jYXRpb24taW50cm86YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uZmxleC1jb250YWluZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXB9LmxvY2F0aW9uX2NhbGxvdXR7LW1zLWZsZXg6MCAwIDQwMHB4Oy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA0MDBweDtiYWNrZ3JvdW5kOiNmMWYxZWY7bWFyZ2luLWxlZnQ6NDBweDtwYWRkaW5nOjMwcHg7Ym9yZGVyOjFweCBzb2xpZCAjZTVlNGUyfS5sb2NhdGlvbl9jYWxsb3V0IGg0e2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luOjEwcHggMH0ubG9jYXRpb25fY2FsbG91dCBwe21hcmdpbjowfS5sb2NhdGlvbl9jYWxsb3V0IGxpe2ZvbnQtc2l6ZToxLjZyZW07Zm9udC13ZWlnaHQ6MzAwfS5jYWxsb3V0X2l0ZW17bWFyZ2luLWJvdHRvbTo0MHB4fS5jYWxsb3V0X2l0ZW06bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206MH0uY2FsbG91dF9pdGVtIGxpLC5jYWxsb3V0X2l0ZW0gcHtsaW5lLWhlaWdodDoxLjZ9LmxvY2F0aW9uX2dlbmVyYWx7LW1zLWZsZXgtcG9zaXRpdmU6NDstd2Via2l0LWJveC1mbGV4OjQ7ZmxleC1ncm93OjQ7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MCU7ZmxleC1iYXNpczowJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5sb2NhdGlvbl9nZW5lcmFsIHB7bWFyZ2luOjB9LmxvY2F0aW9uX2ZlYXR1cmVzey1tcy1mbGV4LXBvc2l0aXZlOjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXgtZ3JvdzoxOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTowJTtmbGV4LWJhc2lzOjAlfS5sb2NhdGlvbl9pbWFnZXN7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiM3MDgwOTA7bWFyZ2luLXRvcDoycmVtO3Bvc2l0aW9uOnJlbGF0aXZlfS5pbWFnZV9ob2xkZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LmltYWdlc19yZWVsX2luaXQgLnNsaWNrLWxpc3R7cGFkZGluZzowfS5pbWFnZXNfcmVlbF9pbml0IHVsLnNsaWNrLWRvdHN7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjIwcHg7bGVmdDo1MCU7Y3Vyc29yOnBvaW50ZXJ9LmltYWdlc19yZWVsX2luaXQgdWwuc2xpY2stZG90cyBsaTpiZWZvcmV7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LC44KX0uaW1hZ2VzX3JlZWxfaW5pdCB1bC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZTpiZWZvcmV7YmFja2dyb3VuZDojZmZmfS5mZWF0dXJlcy1saXN0ey13ZWJraXQtY29sdW1uLWNvdW50OjI7Y29sdW1uLWNvdW50OjI7bWFyZ2luLXRvcDozMHB4O21hcmdpbi1ib3R0b206MTVweH0uZmVhdHVyZXMtbGlzdCBsaXtmb250LXNpemU6MS40cmVtO2ZvbnQtd2VpZ2h0OjUwMDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nLWxlZnQ6NTBweDtsZXR0ZXItc3BhY2luZzouMXJlbTtmb250LXNpemU6MS4zcmVtO21hcmdpbi1ib3R0b206MTBweDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2NvbG9yOiNhOWE2YTF9LmZlYXR1cmVzLWxpc3QgbGkgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7d2lkdGg6NDBweH0uZmVhdHVyZXMtbGlzdCBsaSBzcGFuIHN2Z3tmaWxsOiNhOWE2YTF9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rIGF7Y29sb3I6I2E5YTZhMTt3aWxsLWNoYW5nZTpjb2xvcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjI1czt0cmFuc2l0aW9uOmNvbG9yIC4yNXM7Y3Vyc29yOnBvaW50ZXJ9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rIHN2Z3tmaWxsOiNhOWE2YTE7d2lsbC1jaGFuZ2U6ZmlsbDstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAuMjVzO3RyYW5zaXRpb246ZmlsbCAuMjVzfS5mZWF0dXJlcy1saXN0IGxpLmZlYXR1cmUtbGluazpob3ZlciBhe2NvbG9yOiNkNGE3NGR9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rOmhvdmVyIHN2Z3tmaWxsOiNkNGE3NGR9LmZvb2QtbWVudS1saW5rLXdyYXBwZXJ7bWFyZ2luOjIwcHggMH0uZm9vZC1tZW51LWxpbmstd3JhcHBlciBhe3RleHQtdHJhbnNmb3JtOm5vbmU7Zm9udC13ZWlnaHQ6NjAwO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7Y29sb3I6I2M2OWM1NDtsZXR0ZXItc3BhY2luZzowO2ZvbnQtc2l6ZToxLjZyZW19LnNwZWNpYWxfaG91cnNfbGlzdCBsaXtwYWRkaW5nOjEwcHggMDtmb250LXNpemU6MS42cmVtO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIGdyYXl9LnNwZWNpYWxfaG91cnNfbGlzdCBsaTpsYXN0LW9mLXR5cGV7Ym9yZGVyLWJvdHRvbTpub25lfS5zcGVjaWFsX2hvdXJzX2xpc3QgbGkgc3BhbntkaXNwbGF5OmJsb2NrfS5zcGVjaWFsX2hvdXJzX2xpc3QgLmRheXtkaXNwbGF5OmJsb2NrO2ZvbnQtd2VpZ2h0OjYwMDtwYWRkaW5nLWJvdHRvbTozcHh9LmVtYWlsX2xpbmssLm1hcF9saW5rLC5waG9uZV9saW5re2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjEuM3JlbTtsZXR0ZXItc3BhY2luZzouMXJlbTtjb2xvcjpncmF5O2hlaWdodDoxNnB4O2xpbmUtaGVpZ2h0OjE2cHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjIwcHg7bWFyZ2luOjEwcHggMH0uZW1haWxfbGluazpiZWZvcmUsLm1hcF9saW5rOmJlZm9yZSwucGhvbmVfbGluazpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxNnB4O2hlaWdodDoxNnB4O2JhY2tncm91bmQ6Z3JheTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7ZGlzcGxheTpibG9ja30ucGhvbmVfbGlua3ttYXJnaW4tYm90dG9tOjEwcHh9I2FqYXgtcG9zdHMsI3NpbXBsZV9wb3N0c3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbjoyMHB4IC0yNXB4O2xpc3Qtc3R5bGU6bm9uZTstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSNhamF4LXBvc3RzPiosI3NpbXBsZV9wb3N0cz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7I2FqYXgtcG9zdHM+Kiwjc2ltcGxlX3Bvc3RzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsjYWpheC1wb3N0cz4qLCNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsjYWpheC1wb3N0cz4qLCNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19LmxvY2F0aW9uLWV2ZW50c3twYWRkaW5nOjZyZW0gMH0ubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjVweDttYXJnaW4tcmlnaHQ6LTI1cHg7bGlzdC1zdHlsZTpub25lfS5sb2NhdGlvbi1ldmVudHMgI3NpbXBsZV9wb3N0cz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmxvY2F0aW9uLWV2ZW50cyAjc2ltcGxlX3Bvc3RzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LnRvZGF5c19ob3Vyc193cmFwe2hlaWdodDo1MHB4O2JhY2tncm91bmQ6I2JlOWE1Yztwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTUwcHg7d2lkdGg6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Y29sb3I6I2ZmZn0udG9kYXlzX2hvdXJzX3dyYXAgYXtsZXR0ZXItc3BhY2luZzouMXJlbTtjb2xvcjojZTVlNGUyO21hcmdpbi1sZWZ0OjEwcHg7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MjhweDtkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nOjAgMTBweDtib3JkZXI6MXB4IHNvbGlkO2ZvbnQtd2VpZ2h0OjUwMH0uaG91cnNfbGlzdHttYXJnaW4tYm90dG9tOjIwcHh9LmhvdXJzX2xpc3RfaXRlbSAuZGF5e3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtd2VpZ2h0OjYwMH0jYnRuLXNwZXZlbnQsLmhvdXJzX3dyYXBwZXIgYXtjb2xvcjojZmZmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQ6I2M2OWM1NDtwYWRkaW5nOjAgMTBweDtoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O21hcmdpbi10b3A6MjBweDtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtd2VpZ2h0OjcwMDtsZXR0ZXItc3BhY2luZzouMTVyZW07Ym9yZGVyLXJhZGl1czozcHh9LmxvY2F0aW9uLWV2ZW50c3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpfS5sb2NhdGlvbi1ldmVudHMgLmV2ZW50LWlubmVyLXdyYXB7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lO3doaXRlLXNwYWNlOm5vcm1hbDtoZWlnaHQ6MTAwJTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYm94LXNoYWRvdzstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LWJveC1zaGFkb3cgLjM1cywtd2Via2l0LXRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246LXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOmJveC1zaGFkb3cgLjM1cyx0cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOmJveC1zaGFkb3cgLjM1cyx0cmFuc2Zvcm0gLjM1cywtd2Via2l0LWJveC1zaGFkb3cgLjM1cywtd2Via2l0LXRyYW5zZm9ybSAuMzVzfS5sb2NhdGlvbi1ldmVudHMgLmV2ZW50LWlubmVyLXdyYXA6aG92ZXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAxMnB4IHJnYmEoMCwwLDAsLjEpO2JveC1zaGFkb3c6MCAwIDEycHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0ubG9jYXRpb24tZXZlbnRzIC5ldmVudF9pbWFnZV93cmFwcGVye21hcmdpbi1ib3R0b206MTBweDtiYWNrZ3JvdW5kOmdyYXl9LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVye3RleHQtYWxpZ246bGVmdDtwYWRkaW5nOjEwcHh9LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVyIHB7bWFyZ2luOjA7Zm9udC1zaXplOjEuNXJlbTtsZXR0ZXItc3BhY2luZzouMDVyZW19LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVyIGg0e2ZvbnQtc2l6ZToxLjZyZW07bWFyZ2luLWJvdHRvbTo1cHg7Y29sb3I6IzE5MzUzYn0ubG9jYXRpb24tZXZlbnRzIC5ldmVudF9kYXksLmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfdGltZXtkaXNwbGF5OmJsb2NrfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTEwMHB4KXsubG9jYXRpb25fY2FsbG91dHstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO3dpZHRoOjEwMCU7bWFyZ2luOjAgYXV0bztkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0ubG9jYXRpb25fY2FsbG91dCAuYWRkcmVzc193cmFwcGVye21hcmdpbi1yaWdodDo0MHB4fS5sb2NhdGlvbl9jYWxsb3V0IC5zb2NpYWxfd3JhcHBlcjphZnRlciwubG9jYXRpb25fY2FsbG91dCAuc29jaWFsX3dyYXBwZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTp0YWJsZTt0YWJsZS1sYXlvdXQ6Zml4ZWQ7Y2xlYXI6Ym90aH0ubG9jYXRpb25fY2FsbG91dCAuaG91cnNfd3JhcHBlcnstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTt3aWR0aDoxMDAlfS5sb2NhdGlvbl9nZW5lcmFsey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7bWFyZ2luLXRvcDo0MHB4fS5mZWF0dXJlcy1saXN0ey13ZWJraXQtY29sdW1uLWNvdW50OjM7Y29sdW1uLWNvdW50OjN9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ODUwcHgpey50b2RheXNfaG91cnNfd3JhcCBoNHtmb250LXNpemU6MS42cmVtO2ZvbnQtd2VpZ2h0OjUwMDtsZXR0ZXItc3BhY2luZzouMTVyZW07dGV4dC1hbGlnbjpjZW50ZXJ9LnRvZGF5c19ob3Vyc193cmFwIGg0IHNwYW57ZGlzcGxheTpibG9ja30uZmVhdHVyZXMtbGlzdHstd2Via2l0LWNvbHVtbi1jb3VudDoyO2NvbHVtbi1jb3VudDoyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc4NnB4KXsjc2ltcGxlX3Bvc3Rzey1tcy1mbGV4LXBhY2s6c3RhcnQ7LXdlYmtpdC1ib3gtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo2NTBweCl7LmZlYXR1cmVzLWxpc3R7LXdlYmtpdC1jb2x1bW4tY291bnQ6MTtjb2x1bW4tY291bnQ6MX19LnNpbmdsZS1jaWRlci1pbnRyb3tiYWNrZ3JvdW5kLWNvbG9yOiNlNWU0ZTI7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTtwb3NpdGlvbjpyZWxhdGl2ZX0uc2luZ2xlLWNpZGVyLWludHJvOmFmdGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwcHg7YmFja2dyb3VuZDojOTc5MjhhO2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC93b29kLWJnLTAxLnN2Zyl9LmNvbnRlbnQtY2lkZXItaW1hZ2V7LW1zLWZsZXg6MCAwIDMyMHB4Oy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAzMjBweDtoZWlnaHQ6MzAwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmF0MS5wbmcpO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcG9zaXRpb246NTAlO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDttYXJnaW4tcmlnaHQ6NDBweH0uYmctd2lsZC1jaGVycnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2hlcnJ5LnBuZyl9LmJnLWJsb29kLW9yYW5nZXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy1ibG9vZC1vcmFuZ2UucG5nKX0uYmctY2Fyb2xpbmEtYXBwbGV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2EtYXBwbGUucG5nKX0uYmctY2Fyb2xpbmEtZHJhZnR7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2EtZHJhZnQucG5nKX0uYmctY2l0cnVze2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvbGRSb2NrLXByb2R1Y3RzLWNpdHJ1cy5wbmcpfS5iZy1pcGF7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtaXBhLnBuZyl9LmJnLW9yY2hhcmQtZnJvc3R7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtb3JjaGFyZC1mcm9zdC5wbmcpfS5iZy1wZWFjaHtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy1wZWFjaC5wbmcpfS5iZy1wZWFye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvbGRSb2NrLXByb2R1Y3RzLXBlYXIucG5nKX0uYmctcHJlbWl1bS1kcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtcHJlbWl1bS1kcnkucG5nKX0uYmctdmlyZ2luaWEtYXBwbGV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmEtYXBwbGUucG5nKX0uYmctdmlyZ2luaWEtZHJhZnR7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmEtZHJhZnQucG5nKX0uYmctdmludGFnZS1kcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmludGFnZS1kcnkucG5nKX0uYmctdmFyaWV0eS1jcmF0ZXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy12YXJpZXR5LWNyYXRlLnBuZyl9LmNvbnRlbnQtY2lkZXItaW5mb3stbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmZsaXAtY29udGFpbmVyey13ZWJraXQtcGVyc3BlY3RpdmU6MTAwMHB4O3BlcnNwZWN0aXZlOjEwMDBweDttYXJnaW4tbGVmdDozNSV9LmZsaXAtY29udGFpbmVyLmhvdmVyIC5mbGlwcGVyLC5mbGlwLWNvbnRhaW5lcjpob3ZlciAuZmxpcHBlcnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKX0uYmFjaywuZmxpcC1jb250YWluZXIsLmZyb250e3dpZHRoOjMyMHB4O2hlaWdodDo0MDBweH0uZmxpcHBlcnstd2Via2l0LXRyYW5zaXRpb246LjZzO3RyYW5zaXRpb246LjZzOy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDtwb3NpdGlvbjpyZWxhdGl2ZX0uYmFjaywuZnJvbnR7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9LmJhY2sgaW1nLC5mcm9udCBpbWd7bWFyZ2luOjAgYXV0bzt3aWR0aDphdXRvO21heC1oZWlnaHQ6MTAwJX0uZnJvbnR7ei1pbmRleDoyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyk7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fS5iYWNrey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpfS5pbmZvLXNwZWNpZmlje21hcmdpbi10b3A6NDBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uaW5mby1zcGVjaWZpYyAuYXZhaWwtaWNvbntkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTgwcHg7cmlnaHQ6LTMwcHh9LmluZm8tc3BlY2lmaWMgLmF2YWlsLWljb24gc3Zne2ZpbGw6I2E5YTZhMX0uY2lkZXItaW5mby1saXN0e2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNjYmM5YzU7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbTo0MHB4O3RleHQtYWxpZ246bGVmdH0uY2lkZXItaW5mby1saXN0IGxpe2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNjYmM5YzU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH0uY2lkZXItaW5mby1saXN0IGxpOmxhc3Qtb2YtdHlwZXtib3JkZXItYm90dG9tOm5vbmV9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItaWNvbnt3aWR0aDo2MHB4O2JvcmRlci1yaWdodDoxcHggc29saWQgI2NiYzljNX0uY2lkZXItaW5mby1saXN0IGxpIC5jaWRlci1pY29uIHN2Z3toZWlnaHQ6NjBweDtmaWxsOiNjYmM5YzV9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItY29udGVudHstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjE7cGFkZGluZzoxMHB4fS5jaWRlci1pbmZvLWxpc3QgbGkgLmNpZGVyLWNvbnRlbnQgc3BhbntsaW5lLWhlaWdodDoxLjJ9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItY29udGVudCAuaW5mby1pdGVtLWhlYWR7ZGlzcGxheTpibG9jaztmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEuNHJlbTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmNpZGVyLWluZm8tbGlzdDphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMTNweDtsZWZ0Oi0xcHg7cmlnaHQ6LTFweDtoZWlnaHQ6MTRweDtiYWNrZ3JvdW5kLWNvbG9yOiNjYmM5YzU7YmFja2dyb3VuZDpyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCNjYmM5YzUsI2NiYzljNSA4cHgsI2JmYmNiOCAwLCNiZmJjYjggMTZweCl9Lm11c3RhY2hlPnB7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOjEuNHJlbTttYXJnaW46MCBhdXRvO21hcmdpbi1yaWdodDoyMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtsZXR0ZXItc3BhY2luZzouMTVyZW07Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmZpbmQtdGhpcy13cmFwcGVye21hcmdpbi10b3A6NDBweH0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b257Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1jb2xvcjojOTc5MjhhO2NvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cGFkZGluZzowIDE1cHg7Zm9udC1zaXplOjEuNHJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtsZXR0ZXItc3BhY2luZzouMXJlbX0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YmVmb3Jle21hcmdpbjphdXRvO2NvbnRlbnQ6YXR0cihkYXRhLWhvdmVyKTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtvcGFjaXR5OjA7Y29sb3I6I2ZmZn0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTtsZWZ0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiNhZmFiYTV9LmZpbmQtdGhpcy13cmFwcGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyOmJlZm9yZXtvcGFjaXR5OjE7LXdlYmtpdC1hbmltYXRpb246cSAuNHM7YW5pbWF0aW9uOnEgLjRzfS5maW5kLXRoaXMtd3JhcHBlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlcjphZnRlcnstd2Via2l0LWFuaW1hdGlvbjpyIC40czthbmltYXRpb246ciAuNHN9LmZpbmQtdGhpcy13cmFwcGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyIHNwYW57b3BhY2l0eTowfS5vdGhlci1jaWRlcnN7cGFkZGluZzowO2JhY2tncm91bmQ6I2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZX0ub3RoZXItY2lkZXJzOmFmdGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwcHg7YmFja2dyb3VuZDojOTc5MjhhO2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC93b29kLWJnLTAxLnN2Zyl9Lm90aGVyLWNpZGVycyBoNHt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjIwcHh9Lm90aGVyLWNpZGVycyAuY2lkZXJfd3JhcHBlcl9pbm5lcnt3aWR0aDoxMDAlO3BhZGRpbmc6MjBweCAzMHB4fS5vdGhlci1jaWRlcnMgLmNpZGVyX3dyYXBwZXJfaW5uZXIgYXtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojN2Q3NzZkfS5taWRkbGUtc3RhY2t7cG9zaXRpb246cmVsYXRpdmV9Lm1pZGRsZS1zdGFjazphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmczLWRhcmsuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlO3otaW5kZXg6LTE7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0fS5jaWRlci1yZWNpcGVze2JhY2tncm91bmQtY29sb3I6I2E5YTZhMTtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9yZWNpcGVzLmpwZyk7YmFja2dyb3VuZC1zaXplOmNvdmVyOy1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTttYXJnaW4tbGVmdDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5jaWRlci1yZWNpcGVzOmJlZm9yZXtiYWNrZ3JvdW5kOnJnYmEoMTI2LDExOSwxMDksLjg1KTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7Y29udGVudDpcXFwiXFxcIjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YmFja2dyb3VuZCAuMzVzIGVhc2UtaW4tb3V0fS5jaWRlci1yZWNpcGVzIGF7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwcHg7bGVmdDoxMHB4O2JvdHRvbToxMHB4O3JpZ2h0OjEwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6MTBweDtib3JkZXI6MXB4IHNvbGlkICNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ei1pbmRleDoyO2NvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4zNXMsYm9yZGVyIC4zNXM7dHJhbnNpdGlvbjpjb2xvciAuMzVzLGJvcmRlciAuMzVzfS5jaWRlci1yZWNpcGVzIGgze21hcmdpbjowfS5jaWRlci1yZWNpcGVzOmhvdmVyOmJlZm9yZXtiYWNrZ3JvdW5kOnJnYmEoMTI2LDExOSwxMDksLjQpfS5jaWRlci1yZWNpcGVzOmhvdmVyIGF7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2NvbG9yOiNmZmZ9LmF7LW1zLWZsZXg6MCAwIDQwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgNDAlO2JhY2tncm91bmQtY29sb3I6I2U1ZTRlMjtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmctbGlnaHQuc3ZnKTtiYWNrZ3JvdW5kLXNpemU6Y292ZXJ9LmEsLmJ7bWFyZ2luLWJvdHRvbToxMHB4fS5iey1tcy1mbGV4LXBvc2l0aXZlOjA7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXgtZ3JvdzowOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDt3aWR0aDpjYWxjKDYwJSAtIDEwcHgpO2JhY2tncm91bmQ6Z3JheTttYXJnaW4tbGVmdDoxMHB4fS5jaWRlci12aWRlb3stbXMtZmxleDowIDAgNzAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA3MCV9LmNpZGVyLXBhZ2UtaGVhZGVyIC5vdXRlci1jb250YWluZXJ7ZGlzcGxheTpub25lfS5jaWRlci1saXN0aW5ne2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JnLW5vaXNlLnBuZyk7cGFkZGluZzo2cmVtIDB9LmNpZGVyLWxpc3RpbmcgLm91dGVyLWNvbnRhaW5lcntib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfS5jaWRlci1saXN0aW5nOmxhc3Qtb2YtdHlwZSAub3V0ZXItY29udGFpbmVye2JvcmRlci1ib3R0b206bm9uZX0uY2lkZXItbGlzdGluZyBoMnt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjQwcHh9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWFyY2hpdmUtbGlzdHt3aWR0aDoxMDAlO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTIwcHg7bWFyZ2luLXJpZ2h0Oi0yMHB4O2xpc3Qtc3R5bGU6bm9uZX0uY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7cGFkZGluZzoyMHB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsuY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWFyY2hpdmUtbGlzdD4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjI1JTtmbGV4LWJhc2lzOjI1JTttYXgtd2lkdGg6MjUlfX0uY2lkZXItbGlzdGluZyAuY2lkZXItaW1hZ2UtaG9sZGVye3dpZHRoOjEwMCU7aGVpZ2h0OjI3MHB4O21hcmdpbjowIGF1dG99LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWltYWdlLWhvbGRlciBpbWd7bWF4LWhlaWdodDoxMDAlO3dpZHRoOmF1dG99LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbmsgaDN7Zm9udC1zaXplOjEuNnJlbTt0ZXh0LWFsaWduOmNlbnRlcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjM1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIC4zNXMgZWFzZS1pbi1vdXQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOiM5NzkyOGF9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbmsgaW1ne21hcmdpbjowIGF1dG87bWFyZ2luLWJvdHRvbTo0MHB4Oy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0fS5jaWRlci1saXN0aW5nIC5jaWRlci1saW5rOmhvdmVyIGgze2NvbG9yOiMyZThiNTd9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbms6aG92ZXIgaW1ney13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMDUpIHRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpIHRyYW5zbGF0ZVkoMTBweCl9LmNpZGVyX2xpc3RfaW1hZ2Vze3dpZHRoOjEwMCU7cG9zaXRpb246cmVsYXRpdmV9LmNpZGVyX2xpc3RfaW1hZ2VzIGltZ3t3aWR0aDoxMDAlfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTA0MHB4KXsuc2luZ2xlLWNpZGVyLWludHJvIC5jb250ZW50LWNpZGVyLWltYWdle21hcmdpbjowIGF1dG87bWFyZ2luLWJvdHRvbToyMHB4fS5zaW5nbGUtY2lkZXItaW50cm8gLmNvbnRlbnQtY2lkZXItaW5mb3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5hey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7d2lkdGg6Y2FsYyg1MCUgLSA1cHgpOy1tcy1mbGV4OjAgMCBjYWxjKDUwJSAtIDVweCk7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIGNhbGMoNTAlIC0gNXB4KTttYXJnaW4tYm90dG9tOjEwcHg7bWFyZ2luLXJpZ2h0OjVweH0uYnstbXMtZmxleC1vcmRlcjo0Oy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NTtvcmRlcjo0Oy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlfS5iLC5jaWRlci12aWRlb3t3aWR0aDoxMDAlO21hcmdpbjowfS5jaWRlci12aWRlb3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO21hcmdpbi1ib3R0b206MTBweH0uY2lkZXItcmVjaXBlc3stbXMtZmxleC1vcmRlcjozOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NDtvcmRlcjozOy1tcy1mbGV4OjAgMCBjYWxjKDUwJSAtIDVweCk7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIGNhbGMoNTAlIC0gNXB4KTt3aWR0aDpjYWxjKDUwJSAtIDVweCk7bWFyZ2luLWJvdHRvbToxMHB4O21hcmdpbi1sZWZ0OjVweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo3MDBweCl7LmF7bWFyZ2luLXJpZ2h0OjB9LmEsLmNpZGVyLXJlY2lwZXN7d2lkdGg6MTAwJTstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uY2lkZXItcmVjaXBlc3ttYXJnaW4tbGVmdDowO21pbi1oZWlnaHQ6MTIwcHh9Lm90aGVyLWNpZGVyc3tkaXNwbGF5Om5vbmV9fS5ldmVudF9pbWFnZV93cmFwcGVye3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmO3Bvc2l0aW9uOnJlbGF0aXZlfS5ldmVudF9pbWFnZV93cmFwcGVyPip7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7b3ZlcmZsb3c6aGlkZGVufS5ldmVudF9pbWFnZV93cmFwcGVyPiogaW1ne3dpZHRoOjEwMCV9LmFyY2hpdmUtcGFnZS1oZWFkZXJ7cGFkZGluZy10b3A6MTIwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfS5ldmVudC1saXN0aW5nc3twb3NpdGlvbjpyZWxhdGl2ZX0uZXZlbnQtbGlzdGluZ3MgLm92ZXJsYXktd3JhcHBlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmczLWRhcmsuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uZXZlbnQtbGlzdGluZ3MgLm91dGVyLWNvbnRhaW5lcnt6LWluZGV4OjI7cG9zaXRpb246cmVsYXRpdmV9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yMHB4O21hcmdpbi1yaWdodDotMjBweDtsaXN0LXN0eWxlOm5vbmV9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qe3BhZGRpbmc6MjBweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAuaW5uZXItY29udGFpbmVyLWY+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IC5ldmVudC1pbm5lci13cmFwe2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTt3aGl0ZS1zcGFjZTpub3JtYWw7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt3aWxsLWNoYW5nZTpib3gtc2hhZG93LHRyYW5zZm9ybTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOi13ZWJraXQtYm94LXNoYWRvdyAuMzVzLC13ZWJraXQtdHJhbnNmb3JtIC4zNXM7dHJhbnNpdGlvbjpib3gtc2hhZG93IC4zNXMsdHJhbnNmb3JtIC4zNXM7dHJhbnNpdGlvbjpib3gtc2hhZG93IC4zNXMsdHJhbnNmb3JtIC4zNXMsLXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1c30ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLnR5cGUtZXZlbnQgLmV2ZW50LWlubmVyLXdyYXA6aG92ZXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAxMnB4IHJnYmEoMCwwLDAsLjEpO2JveC1zaGFkb3c6MCAwIDEycHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLnR5cGUtZXZlbnQgLmV2ZW50X2luZm9fd3JhcHBlcntwYWRkaW5nOjEwcHh9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IGg0LmV2ZW50LXRpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206NXB4O2NvbG9yOiM3ZDc3NmR9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IHB7bWFyZ2luOjA7dGV4dC10cmFuc2Zvcm06bm9uZTtmb250LXNpemU6MS41cmVtO2xldHRlci1zcGFjaW5nOi4wNXJlbX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLmNoaWxlcy1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjOTczYjE1fS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAubmVsbHlzZm9yZC1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjZDRhNzRkfS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAubWlsbHMtZXZlbnRzIC5ldmVudF9pbmZvX3dyYXBwZXJ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgIzk3M2IxNX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLmNhcnRlci1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjMTkzNTNifS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAub2Zmc2l0ZS1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjYzY5YzU0fS5zaW5nbGUtZXZlbnQgaDF7bWFyZ2luLXRvcDotOHB4O2xpbmUtaGVpZ2h0OjEuMjttYXJnaW4tYm90dG9tOjEwcHg7Zm9udC1zaXplOjQycHh9LnNpbmdsZS1ldmVudCBoNXtmb250LXNpemU6MjBweH0uc2luZ2xlLWV2ZW50IC5pY29uLXNlcGFyYXRvcnt3aWR0aDo4cHg7aGVpZ2h0OjhweDtkaXNwbGF5OmlubGluZS1ibG9jaztiYWNrZ3JvdW5kOiNkNGE3NGQ7bWFyZ2luOjAgMTBweDttYXJnaW4tYm90dG9tOjNweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbWFnZV93cmFwcGVye21hcmdpbi1ib3R0b206MTBweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhe2JhY2tncm91bmQ6I2Y4ZjhmODtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7bWFyZ2luLWxlZnQ6NDBweDtwYWRkaW5nOjIwcHggM2VtO2hlaWdodDoxMDAlfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGl7cGFkZGluZzoxMHB4IDB9LnNpbmdsZS1ldmVudCAubGlzdC1oZWFke2Rpc3BsYXk6YmxvY2s7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmfS5zaW5nbGUtZXZlbnQgLmJyZWFkY3J1bWJzLXdyYXBwZXJ7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDttYXJnaW4tYm90dG9tOjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMDQwcHgpey5zaW5nbGUtZXZlbnQgLmV2ZW50X2JsdXJiLC5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm97LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCV9LnNpbmdsZS1ldmVudCAuZXZlbnRfaW5mb3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1ib3R0b206MjBweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhe21hcmdpbjowO3BhZGRpbmc6MjBweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhIGxpey1tcy1mbGV4OjAgMCA1MCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDUwJTtwYWRkaW5nOjEwcHh9LnNpbmdsZS1ldmVudCAuZXZlbnRfaW5mbyAuZXZlbnQtbWV0YSBsaTpudGgtb2YtdHlwZSgyKXstbXMtZmxleC1vcmRlcjozOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NDtvcmRlcjozfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGk6bnRoLW9mLXR5cGUoMyl7LW1zLWZsZXgtb3JkZXI6NDstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjU7b3JkZXI6NH19I2NoYW5nZW1lIHNwYW57Zm9udC1zaXplOjEuOHJlbTtkaXNwbGF5OmJsb2NrfS5ldmVudC1saXN0aW5ncy1oZWFkey1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnBsaW5re2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDoyNHB4O2xpbmUtaGVpZ2h0OjI0cHg7cGFkZGluZy1yaWdodDoxMHB4O3BhZGRpbmctbGVmdDoyNXB4O3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2ZvbnQtc2l6ZToxLjFyZW07Zm9udC13ZWlnaHQ6NzAwO3dpbGwtY2hhbmdlOmNvbG9yOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbi1vdXR9LnBsaW5rIHNwYW57d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MnB4fS5wbGluayBzcGFuIHN2Z3t3aWxsLWNoYW5nZTpmaWxsOy13ZWJraXQtdHJhbnNpdGlvbjpmaWxsIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmZpbGwgLjJzIGVhc2UtaW4tb3V0O2ZpbGw6IzdkNzc2ZH0ucGxpbms6aG92ZXJ7Y29sb3I6Izk3M2IxNX0ucGxpbms6aG92ZXIgc3BhbiBzdmd7ZmlsbDojOTczYjE1fS5ldmVudC1saXN0aW5ncyAub3V0ZXItY29udGFpbmVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy1tcy1mbGV4LWFsaWduOnN0YXJ0Oy13ZWJraXQtYm94LWFsaWduOnN0YXJ0O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9LmV2ZW50LWxpc3RpbmdzIC5ldmVudC1saXN0ey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0ey1tcy1mbGV4OjAgMCAyNSU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDI1JTttYXJnaW4tbGVmdDo0MHB4O21pbi13aWR0aDoyNTBweDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpO2JvcmRlcjoxcHggc29saWQgI2U1ZTRlMn0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5maWx0ZXItbGlzdC1pbm5lcntwYWRkaW5nOjIwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuZmlsdGVyLWxpc3QtaW5uZXIgaDR7bWFyZ2luLWJvdHRvbToxMHB4fS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmJ0bi12YWx7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO21hcmdpbjowIGF1dG87aGVpZ2h0OjMwcHg7Ym9yZGVyOjFweCBzb2xpZCAjYTlhNmExO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7bWFyZ2luLWJvdHRvbTo1cHg7b3V0bGluZTowO2ZvbnQtc2l6ZToxLjJyZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYmFja2dyb3VuZDstd2Via2l0LXRyYW5zaXRpb246YWxsIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgLjI1cyBlYXNlLWluLW91dH0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5idG4tdmFsOmxhc3Qtb2YtdHlwZXttYXJnaW4tYm90dG9tOjB9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuYnRuLXZhbDpob3Zlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KX0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5idG4tdmFsLmlzLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNhOWE2YTE7Y29sb3I6I2ZmZn0uZXZlbnQtY2FyZHt3aWR0aDoxMDAlO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwO21hcmdpbi1ib3R0b206NHJlbX0uZXZlbnQtY2FyZC1sZWZ0e3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjAgMCA0MCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDQwJTttaW4td2lkdGg6MzAwcHh9LmV2ZW50LWNhcmQtbGVmdCAuZXZlbnRfaW1hZ2V7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LmV2ZW50LWNhcmQtcmlnaHQgaDR7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmV2ZW50LWNhcmQtcmlnaHQgaDN7bWFyZ2luOjB9LmV2ZW50LWNhcmQtcmlnaHQgcHttYXJnaW46MDtsaW5lLWhlaWdodDoxLjN9LmV2ZW50LWNhcmQtcmlnaHQgYXttYXJnaW46MjBweCAwO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbG9yOiM5NzNiMTU7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0uZXZlbnQtY2FyZC1yaWdodHstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmV2ZW50LWNhcmQtcmlnaHQgLmV2ZW50LWNhcmQtaW5uZXJ7cGFkZGluZy1sZWZ0OjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LmFyY2hpdmUtcGFnZS1oZWFkZXJ7cGFkZGluZy10b3A6NjBweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMDQwcHgpey5ldmVudC1saXN0aW5ncyAuZXZlbnQtbGlzdHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3R7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7bWFyZ2luLWxlZnQ6MDttYXJnaW4tYm90dG9tOjQwcHh9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuZmlsdGVyLWxpc3QtaW5uZXJ7dGV4dC1hbGlnbjpsZWZ0fS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmJ0bi12YWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6YXV0b319QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo4MDBweCl7LnNpbmdsZS1ldmVudCBoNXtmb250LXNpemU6MS40cmVtfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGl7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7cGFkZGluZzoxMHB4fX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjY1MHB4KXsuZXZlbnQtbGlzdGluZ3MtaGVhZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5ldmVudC1saXN0aW5ncy1oZWFkIGgxI2NoYW5nZW1le3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncy1oZWFkIC5ldmVudHMtbGlzdC1idXR0b25zey1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmZpbHRlci1saXN0LWlubmVye3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmZpbHRlci1saXN0LWlubmVyIC5idG4tdmFse3dpZHRoOjEwMCV9LmV2ZW50LWNhcmQtbGVmdHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uZXZlbnQtY2FyZC1yaWdodCAuZXZlbnQtY2FyZC1pbm5lcntwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXRvcDoyMHB4fX0ubG9jYXRpb25zLWxpc3Rpbmdze3Bvc2l0aW9uOnJlbGF0aXZlfS5sb2NhdGlvbnMtbGlzdGluZ3M6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0ubG9jYXRpb25zLWxpc3Rpbmd7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjVweDttYXJnaW4tcmlnaHQ6LTI1cHg7bGlzdC1zdHlsZTpub25lfS5sb2NhdGlvbnMtbGlzdGluZz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmxvY2F0aW9ucy1saXN0aW5nPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsubG9jYXRpb25zLWxpc3Rpbmc+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsubG9jYXRpb25zLWxpc3Rpbmc+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19LmxvY2F0aW9ucy1saXN0aW5nIC5sb2NhdGlvbi1pbWFnZS13cmFwe2JhY2tncm91bmQtY29sb3I6I2YwZmZmMDtwb3NpdGlvbjpyZWxhdGl2ZX0ubG9jYXRpb25zLWxpc3RpbmcgLmxvY2F0aW9uLWltYWdlLXdyYXAgLnNlYXNvbmFsLXRhcHJvb20tYmFubmVye2JhY2tncm91bmQ6I2Q0YTc0ZDtwYWRkaW5nOjEwcHg7Y29sb3I6I2ZmZjtmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0ubG9jYXRpb25zLWxpc3RpbmcgLmxvY2F0aW9uLWltYWdlLXdyYXAgLmxvY2F0aW9uLXRodW1ibmFpbHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtvdmVyZmxvdzpoaWRkZW59LmxvY2F0aW9ucy1saXN0aW5nIC5sb2NhdGlvbi1pbWFnZS13cmFwIC5sb2NhdGlvbi10aHVtYm5haWwgaW1ne3dpbGwtY2hhbmdlOnRyYW5zZm9ybTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC43NXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuNzVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC43NXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjc1cywtd2Via2l0LXRyYW5zZm9ybSAuNzVzfS5sb2NhdGlvbnMtbGlzdGluZyAubG9jYXRpb24taW1hZ2Utd3JhcCAubG9jYXRpb24tdGh1bWJuYWlsOmhvdmVyIGltZ3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjAzKTt0cmFuc2Zvcm06c2NhbGUoMS4wMyl9LmxvY2F0aW9ucy1saXN0aW5nIGgze21hcmdpbjoyMHB4IDA7Y29sb3I6IzE5MzUzYn0ubG9jYXRpb25zLWxpc3RpbmcgcHt0ZXh0LXRyYW5zZm9ybTpub25lO2xldHRlci1zcGFjaW5nOi4wNXJlbTt3aGl0ZS1zcGFjZTpub3JtYWx9LmxvY2F0aW9uLWRldGFpbHMgLmljb24tbGlua3tjb2xvcjojN2Q3NzZkO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZn0ubG9jYXRpb24tZGV0YWlscyAuaWNvbi1saW5rIHNwYW4gc3Zne2ZpbGw6IzdkNzc2ZH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXJ7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwYWRkaW5nOjEwcHggMjBweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3B7d2lkdGg6MTAwJTtoZWlnaHQ6NjBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnRvcCAucXVvdGUtaWNvbntoZWlnaHQ6NDBweDt3aWR0aDo0MHB4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotMjBweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMjBweH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnRvcCAucXVvdGUtaWNvbiBzdmd7ZmlsbDojOTc5MjhhfS5jaWRlci1yZXZpZXctd3JhcHBlciAucXVvdGUtaW5uZXItd3JhcHBlciAudG9wOmJlZm9yZXtsZWZ0OjB9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YWZ0ZXIsLmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YmVmb3Jle3dpZHRoOmNhbGMoNTAlIC0gMjBweCk7aGVpZ2h0OjFweDtiYWNrZ3JvdW5kOiM5NzkyOGE7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0uNXB4O2JvcmRlci1yYWRpdXM6MnB4O2NvbnRlbnQ6XFxcIlxcXCJ9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YWZ0ZXJ7cmlnaHQ6MH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnF1b3RlLWNvbnRlbnR7dGV4dC1hbGlnbjpjZW50ZXJ9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC5xdW90ZS1jb250ZW50IHB7Zm9udC1zaXplOjEuN3JlbTttYXJnaW46MH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLmJvdHRvbXt3aWR0aDoxMDAlO2hlaWdodDo2MHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5jaWRlci1yZXZpZXctd3JhcHBlciAucXVvdGUtaW5uZXItd3JhcHBlciAuYm90dG9tOmJlZm9yZXt3aWR0aDoxMDAlO2hlaWdodDoxcHg7YmFja2dyb3VuZDojYTlhNmExO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotLjVweDtsZWZ0OjA7Ym9yZGVyLXJhZGl1czoycHg7Y29udGVudDpcXFwiXFxcIn0ubm8taGVyby1oZWFkZXJ7YmFja2dyb3VuZDojZjdmN2Y3O3RleHQtYWxpZ246Y2VudGVyfS5ibG9nLWxpc3QtaXRlbXtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtwYWRkaW5nOjQwcHggMDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjZWRlYmVhfS5ibG9nLWxpc3QtaXRlbS1pbmZvey1tcy1mbGV4OjEgMCA2Ni42NjYlOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjEgMCA2Ni42NjYlfS5ibG9nLWxpc3QtaXRlbS1pbmZvIC5ibGktY2F0LC5ibG9nLWxpc3QtaXRlbS1pbmZvIGF7Y29sb3I6I2M2OWM1NDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW07Zm9udC13ZWlnaHQ6NjAwfS5ibG9nLWxpc3QtaXRlbS1pbmZvIGF7bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi10b3A6MjBweH0uYmxvZy1saXN0LWl0ZW0taW5mbyBoM3ttYXJnaW46NXB4IDB9LmJsb2ctbGlzdC1pdGVtLWluZm8gLmJsaS1tZXRhe2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luLWJvdHRvbToxMHB4fS5ibG9nLWxpc3QtaXRlbS1pbmZvIC5ibGktZXhjZXJwdHtwYWRkaW5nLXJpZ2h0OjYwcHh9LmJsb2ctbGlzdC1pdGVtLWltYWdley1tcy1mbGV4OjEgMCAzMy4zMzMlOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjEgMCAzMy4zMzMlfS5saW5rLWJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztjb2xvcjojZmZmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kLWNvbG9yOiNhOWE2YTE7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7cGFkZGluZzo1cHggMTVweDtib3JkZXItcmFkaXVzOjJweDtmb250LXNpemU6MS4zcmVtO2xldHRlci1zcGFjaW5nOi4xNXJlbTstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzIGVhc2UtaW4tb3V0fS5saW5rLWJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiM5ZDk5OTQ7Y29sb3I6I2ZmZn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc2N3B4KXsuYmxvZy1saXN0LWl0ZW0taW5mb3stbXMtZmxleDoxIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxIDAgMTAwJTstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfS5ibG9nLWxpc3QtaXRlbS1pbWFnZXstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1ib3R0b206MjBweH19LmJyZWFkY3J1bWJzLXdyYXBwZXJ7YmFja2dyb3VuZDojZjFmMWVmO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHh9ZmlndXJle21hcmdpbjowfWZpZ2NhcHRpb24ud3AtY2FwdGlvbi10ZXh0e2ZvbnQtc2l6ZToxLjVyZW07cGFkZGluZzo1cHggMDtmb250LXN0eWxlOml0YWxpY31pbWcuYWxpZ25yaWdodHtmbG9hdDpyaWdodDttYXJnaW46MCAwIDFlbSAxZW19aW1nLmFsaWdubGVmdHtmbG9hdDpsZWZ0O21hcmdpbjowIDFlbSAxZW0gMH1pbWcuYWxpZ25jZW50ZXJ7ZGlzcGxheTpibG9jazttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS5hbGlnbnJpZ2h0e2Zsb2F0OnJpZ2h0O21hcmdpbi1sZWZ0OjQwcHh9LmFsaWdubGVmdHtmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDo0MHB4fS5hbGlnbmNlbnRlcntkaXNwbGF5OmJsb2NrO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG99LmVudHJ5LXRpdGxle21hcmdpbjowfS5lbnRyeS1tZXRhe2ZvbnQtc2l6ZToxLjRyZW07Zm9udC1zdHlsZTppdGFsaWN9LnRoZS1wb3N0LWNvbnRlbnR7bWFyZ2luLXRvcDozMHB4fS50aGUtcG9zdC1mb290ZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tdG9wOjMwcHh9LnRhZ3MtaWNvbnt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfS50YWdzLWljb24gc3Zne2ZpbGw6Z3JheX0udGFnLWxpc3Q+bGl7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnRhZy1saXN0PmxpIGF7Zm9udC1zaXplOjEuNHJlbTtmb250LXdlaWdodDozMDA7bGV0dGVyLXNwYWNpbmc6MDt0ZXh0LXRyYW5zZm9ybTpub25lO2NvbG9yOmdyYXl9LnRhZy1saXN0PmxpOmFmdGVye2NvbnRlbnQ6XFxcIixcXFwiO3BhZGRpbmctcmlnaHQ6NXB4fS50YWctbGlzdD5saTpsYXN0LW9mLXR5cGU6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIn0ucmVjaXBlLWltYWdlLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NDAlO21heC13aWR0aDo0MDBweDttYXJnaW4tbGVmdDo0MHB4fS5yZWNpcGUtaW1hZ2Utd3JhcHBlcj4qe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO292ZXJmbG93OmhpZGRlbn0ucmVjaXBlLWltYWdlLXdyYXBwZXI+KiBpbWd7d2lkdGg6MTAwJX0ucmVjaXBlLW1ldGF7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfS5yZWNpcGUtbWV0YSAuYnJlYWRjcnVtYnttYXJnaW4tYm90dG9tOjEwcHh9LnJlY2lwZS1tZXRhIC5yZWNpcGUtZGV0YWlsc3ttYXJnaW4tdG9wOjIwcHh9LnJlY2lwZS1tZXRhIC5yZWNpcGUtZGV0YWlscyBwe21hcmdpbjowfS5yZWNpcGUtbWV0YSAucmVjaXBlLWRldGFpbHMgcC5yZWNpcGUtZGVzY3JpcHRpb257bWFyZ2luOjEwcHggMH0udGhlLXJlY2lwZS1pbmdyZWRpZW50cyBoNHttYXJnaW4tYm90dG9tOjEwcHh9LnJlY2lwZS1pbmdyZWRpZW50cy1saXN0e2xpc3Qtc3R5bGUtdHlwZTpkaXNjO3BhZGRpbmctbGVmdDoyMHB4fS50aGUtcmVjaXBlLWRpcmVjdGlvbnN7bWFyZ2luLXRvcDoyMHB4fS50aGUtcmVjaXBlLWRpcmVjdGlvbnMgaDR7bWFyZ2luLWJvdHRvbToxMHB4fS50aGUtcmVjaXBlLXNvdXJjZXttYXJnaW4tdG9wOjEwcHh9LnBvc3Qtd3JhcHBlci1SZWNpcGVze2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTI1cHg7bWFyZ2luLXJpZ2h0Oi0yNXB4O2xpc3Qtc3R5bGU6bm9uZX0ucG9zdC13cmFwcGVyLVJlY2lwZXM+KntwYWRkaW5nOjI1cHg7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MTAwJTtmbGV4LWJhc2lzOjEwMCU7bWF4LXdpZHRoOjEwMCV9QG1lZGlhIChtaW4td2lkdGg6NTQwcHgpey5wb3N0LXdyYXBwZXItUmVjaXBlcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LnBvc3Qtd3JhcHBlci1SZWNpcGVzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LnBvc3Qtd3JhcHBlci1SZWNpcGVzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fS5wb3N0LXdyYXBwZXItUmVjaXBlcyAuYmxvZy1saXN0LWl0ZW17Ym9yZGVyLWJvdHRvbTpub25lO3BhZGRpbmc6MH0ucG9zdC13cmFwcGVyLVJlY2lwZXMgLmJsb2ctbGlzdC1pdGVtIGF7bWFyZ2luOjIwcHggMDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojN2Q3NzZkO2ZvbnQtc2l6ZToxLjZyZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LnBvc3Qtd3JhcHBlci1SZWNpcGVzIC5ibG9nLWxpc3QtaXRlbSBhOmhvdmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTAwMHB4KXsucmVjaXBlLW1ldGF7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7LW1zLWZsZXgtb3JkZXI6Mjstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7b3JkZXI6Mn0ucmVjaXBlLWltYWdlLXdyYXBwZXJ7d2lkdGg6MTAwJTstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1sZWZ0OjA7bWFyZ2luLWJvdHRvbToxMHB4fX0ucXVlc3Rpb257cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbToyMHB4fS5xdWVzdGlvbjpob3ZlcntjdXJzb3I6cG9pbnRlcn0ucXVlc3Rpb24gaDR7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO3BhZGRpbmctbGVmdDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cG9zaXRpb246cmVsYXRpdmV9LnF1ZXN0aW9uIC5mYXEtaWNvbnt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo4cHg7bGVmdDo0cHg7ZmlsbDojN2Q3NzZkOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1c30uYW5zd2Vye21heC1oZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC10cmFuc2l0aW9uOm1heC1oZWlnaHQgLjI1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOm1heC1oZWlnaHQgLjI1cyBlYXNlLWluLW91dH0uYW5zd2VyIHB7d2lkdGg6MTAwJTttYXJnaW46MDtwYWRkaW5nOjAgMCAyMHB4IDQwcHh9LnF1ZXN0aW9uLmlzLWV4cGFuZGVkIC5mYXEtaWNvbnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO2ZpbGw6Izk3M2IxNX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMDBweCl7LnF1ZXN0aW9uIGg0e2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtwYWRkaW5nLWxlZnQ6NDBweDtsaW5lLWhlaWdodDoxLjR9fS5hYm91dC1pbnRyb3twb3NpdGlvbjpyZWxhdGl2ZX0uYWJvdXQtaW50cm86YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uYWJvdXQtaW1hZ2UtZ3JpZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5hYm91dC1pbWFnZS1ncmlkIC5jb250ZW50e21hcmdpbjowIDEwcHh9LmFib3V0LXF1b3RlLXRleHR7dGV4dC1hbGlnbjpjZW50ZXJ9LmFib3V0LXF1b3RlLXRleHQgaDN7ZGlzcGxheTppbmxpbmUtYmxvY2s7bGluZS1oZWlnaHQ6NTBweDtib3JkZXItdG9wOjJweCBzb2xpZCAjOTczYjE1O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICM5NzNiMTU7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZToyLjRyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2NvbG9yOiM5NzNiMTU7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmFib3V0LWdyaWQgLm91dGVyLWNvbnRhaW5lci1mdWxse3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtc2l6ZTpjb3Zlcn0uYWJvdXQtZ3JpZCAuY29udGFpbmVyLW92ZXJsYXl7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMik7LW1zLWZsZXgtcGFjazpzdGFydDstd2Via2l0LWJveC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5hYm91dC1ncmlkIC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHt3aWR0aDo1MDBweDttYXJnaW4tbGVmdDoxNSV9LmFib3V0LWdyaWQgLmNvbnRhaW5lci1vdmVybGF5IGgye2NvbG9yOiNmZmY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZTo2NHB4fS5hYm91dC1ib3R0b20tdGV4dHtwb3NpdGlvbjpyZWxhdGl2ZX0uYWJvdXQtYm90dG9tLXRleHQ6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uc3RvcC1ieSAub3V0ZXItY29udGFpbmVyLWZ1bGx7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uc3RvcC1ieSAuY29udGFpbmVyLW92ZXJsYXl7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjI1KTstbXMtZmxleC1wYWNrOmVuZDstd2Via2l0LWJveC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5LC5zdG9wLWJ5IC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zdG9wLWJ5IC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHt3aWR0aDo0MDBweDttYXJnaW4tcmlnaHQ6MTUlO2JhY2tncm91bmQ6I2YxZjFlZjtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjIwcHg7dGV4dC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc3RvcC1ieSAuY29udGFpbmVyLW92ZXJsYXkgLmNvbnRlbnQgcHttYXJnaW4tdG9wOjEwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5ey1tcy1mbGV4LXBhY2s6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5IC5jb250ZW50e21hcmdpbjowfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjcwMHB4KXsuYWJvdXQtaW1hZ2UtZ3JpZCAuY29udGVudHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW4tYm90dG9tOjIwcHh9LmFib3V0LWltYWdlLWdyaWQgLmNvbnRlbnQ6bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206MH0uYWJvdXQtaW1hZ2UtZ3JpZCAuY29udGVudCBpbWd7d2lkdGg6MTAwJX0uYWJvdXQtcXVvdGUtdGV4dCBoM3tsaW5lLWhlaWdodDozMHB4fS5hYm91dC1ncmlkIC5jb250YWluZXItb3ZlcmxheSBoMntmb250LXNpemU6MzZweDt0ZXh0LWFsaWduOmNlbnRlcn0uYWJvdXQtZ3JpZCAuY29udGFpbmVyLW92ZXJsYXkgLmNvbnRlbnR7bWFyZ2luOjAgYXV0bzt3aWR0aDo3MCV9LnN0b3AtYnkgLm91dGVyLWNvbnRhaW5lci1mdWxse21pbi1oZWlnaHQ6MzAwcHh9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5IC5jb250ZW50e21hcmdpbjowIGF1dG87d2lkdGg6OTAlfX0uY2lkZXIxMDEtaW50cm97YmFja2dyb3VuZDojZjJmMmYyfS5wcm9jZXNzLXNsaWRlcnt3aWR0aDo4MCU7bWF4LXdpZHRoOjU1MHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3Rze3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MCA0MHB4fS5wcm9jZXNzLXNsaWRlciAuc2xpY2stZG90czphZnRlcntjb250ZW50OlxcXCJcXFwiO3dpZHRoOjEwMCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0xcHg7aGVpZ2h0OjJweDtiYWNrZ3JvdW5kOiM3ZDc3NmQ7bGVmdDowO2JvcmRlci1yYWRpdXM6MnB4O3otaW5kZXg6LTF9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpOmJlZm9yZXtkaXNwbGF5Om5vbmV9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpe3dpZHRoOjI0cHg7aGVpZ2h0OjI0cHg7Ym9yZGVyLXJhZGl1czoxMDAlO2JvcmRlcjoycHggc29saWQgIzdkNzc2ZDtiYWNrZ3JvdW5kOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2N1cnNvcjpwb2ludGVyfS5wcm9jZXNzLXNsaWRlciAuc2xpY2stZG90cyBsaSBhe2xldHRlci1zcGFjaW5nOjA7Zm9udC1zaXplOjEuMXJlbTtsaW5lLWhlaWdodDoyM3B4O2hlaWdodDoyMnB4O2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZXtiYWNrZ3JvdW5kOiM3ZDc3NmR9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZSBhe2NvbG9yOiNmZmZ9LnByb2Nlc3Mtc2xpZGV7cGFkZGluZzoyMHB4fS5wcm9jZXNzLXNsaWRlIC5wcm9jZXNzLWRlc2NyaXB0aW9uLXdyYXBwZXJ7bWFyZ2luLXRvcDoxMHB4fS5jaWRlci1mYWN0c3tiYWNrZ3JvdW5kOiM1ZTU5NTI7cGFkZGluZzo2cmVtIDB9LmNpZGVyLWZhY3RzIGgze2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXJ9LmZhY3Qtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yNXB4O21hcmdpbi1yaWdodDotMjVweDtsaXN0LXN0eWxlOm5vbmV9LmZhY3Qtd3JhcHBlcj4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmZhY3Qtd3JhcHBlcj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LmZhY3Qtd3JhcHBlcj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5mYWN0LXdyYXBwZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LmZhY3Qtd3JhcHBlciBoNHtoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6I2ZmZn0uZmFjdC13cmFwcGVyIGg0IC5pY29ue2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luLXJpZ2h0OjVweH0uZmFjdC13cmFwcGVyIGg0IC5pY29uIHN2Z3tmaWxsOiNmZmZ9LmZhY3Qtd3JhcHBlciBwe3BhZGRpbmctbGVmdDoyNXB4O21hcmdpbjowO2NvbG9yOiNmMmYyZjJ9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1ue2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7cGFkZGluZzoxMHB4Oy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3d9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ldmVudF9pbWFnZV93cmFwcGVye3dpZHRoOjYwJX0uaW5uZXItY29udGFpbmVyLWYgLmNvbW1pdC1jb2x1bW4gLnF1b3RlLXRleHR7bWFyZ2luLWxlZnQ6MjBweDstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ibHVyYi10ZXh0e21hcmdpbi1yaWdodDoyMHB4Oy1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uY2FsbG91dC13cmFwcGVye2JhY2tncm91bmQ6I2YxZjFlZjtwYWRkaW5nOjIwcHg7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5jYWxsb3V0LXdyYXBwZXI6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTBweDtsZWZ0OjEwcHg7cmlnaHQ6MTBweDtib3R0b206MTBweDtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9LmNhbGxvdXQtd3JhcHBlciBwe21hcmdpbjowO3RleHQtYWxpZ246Y2VudGVyfS52YWx1ZXN7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKX0udmFsdWVzIC52YWx1ZXtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZTVlNGUyO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjoxMHB4IDB9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmd7d2lkdGg6MjAwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2JvdHRvbTowO2JvcmRlci1yaWdodDoxcHggc29saWQgI2U1ZTRlMjtwYWRkaW5nOjEwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS52YWx1ZXMgLnZhbHVlIC5oZWFkaW5nIHNwYW57cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmcgc3BhbiBzdmd7ZmlsbDpyZ2JhKDE1MSw1OSwyMSwuMil9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmcgaDR7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoyfS52YWx1ZXMgLnZhbHVlIC5jb250ZW50e3BhZGRpbmc6MjBweCAyMHB4IDIwcHggMjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uey1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5pbm5lci1jb250YWluZXItZiAuY29tbWl0LWNvbHVtbiAuZXZlbnRfaW1hZ2Vfd3JhcHBlcnt3aWR0aDoxMDAlOy1tcy1mbGV4LW9yZGVyOjE7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDoyO29yZGVyOjF9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5xdW90ZS10ZXh0e21hcmdpbi1sZWZ0OjA7bWFyZ2luLXRvcDoyMHB4Oy1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjJ9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ibHVyYi10ZXh0e21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MjBweDstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjcwMHB4KXsudmFsdWVzIC52YWx1ZXtwYWRkaW5nLXRvcDo4MHB4fS52YWx1ZXMgLnZhbHVlIC5oZWFkaW5ne3dpZHRoOjEwMCU7Ym9yZGVyLXJpZ2h0Om5vbmU7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2U1ZTRlMjtoZWlnaHQ6ODBweH0udmFsdWVzIC52YWx1ZSAuY29udGVudHt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nLWxlZnQ6MjBweH19LnN0b3J5LWludHJve2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JnLW5vaXNlLnBuZyl9Lmhpc3RvcnktYmFubmVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMTVweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotNjVweDt3aWR0aDoxMzBweDtoZWlnaHQ6MzBweH0uaGlzdG9yeS1iYW5uZXIgaW1ne3dpZHRoOjEwMCV9Lm91ci1oaXN0b3J5e3Bvc2l0aW9uOnJlbGF0aXZlfS5vdXItaGlzdG9yeTpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxcHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6NTAlfS5oaXN0b3J5LXdyYXB7bWF4LXdpZHRoOjEwMDBweDttYXJnaW46MCBhdXRvfS5oaXN0b3J5LWl0ZW17ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjhyZW0gMDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuOy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtvcGFjaXR5OjA7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1MHB4KTstd2Via2l0LXRyYW5zaXRpb246YWxsIDFzIGVhc2Utb3V0O3RyYW5zaXRpb246YWxsIDFzIGVhc2Utb3V0fS5oaXN0b3J5LWl0ZW0gLmhpc3RvcnktaGVhZHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2xlZnQ6MDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlzdG9yeS1pdGVtIC5oaXN0b3J5LWhlYWQgLmhpc3RvcnktaGVhZC1jb250ZW50e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQ6I2YxZjFlZjtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7aGVpZ2h0OjI2cHg7bGluZS1oZWlnaHQ6MjZweDt3aWR0aDoxMDBweDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjb2xvcjojYTlhNmExfS5oaXN0b3J5LWl0ZW0gLnNpZGUtb25ley1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTttYXJnaW4tcmlnaHQ6MjBweDstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxfS5oaXN0b3J5LWl0ZW0gLnNpZGUtb25lIC5ldmVudF9pbWFnZV93cmFwcGVye2JhY2tncm91bmQ6I2ZmZn0uaGlzdG9yeS1pdGVtIC5zaWRlLXR3b3stbXMtZmxleDowIDAgNDUlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA0NSU7LW1zLWZsZXgtb3JkZXI6Mjstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7b3JkZXI6MjttYXJnaW4tcmlnaHQ6MDttYXJnaW4tbGVmdDo0MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZDojZmZmfS5oaXN0b3J5LWl0ZW06bnRoLWNoaWxkKG9kZCkgLnNpZGUtb25ley1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7bWFyZ2luLWxlZnQ6MjBweDttYXJnaW4tcmlnaHQ6MH0uaGlzdG9yeS1pdGVtOm50aC1jaGlsZChvZGQpIC5zaWRlLXR3b3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1yaWdodDo0MHB4O21hcmdpbi1sZWZ0OjB9Lmhpc3RvcnktaXRlbS5mYWRlLWlue29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6OTYwcHgpey5oaXN0b3J5LXdyYXB7bWF4LXdpZHRoOjYwMHB4fS5oaXN0b3J5LWl0ZW17bWFyZ2luOjRyZW0gMH0uaGlzdG9yeS1pdGVtIC5zaWRlLW9uZSwuaGlzdG9yeS1pdGVtIC5zaWRlLXR3b3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW46MDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlzdG9yeS1pdGVtOm50aC1jaGlsZChvZGQpIC5zaWRlLW9uZXstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbjowfS5oaXN0b3J5LWl0ZW06bnRoLWNoaWxkKG9kZCkgLnNpZGUtdHdvey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7bWFyZ2luOjB9fS5jb250YWN0LWJsdXJiey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uY29udGFjdC1pbmZve21hcmdpbi1sZWZ0OjUwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo3MDBweCl7LmNvbnRhY3QtYmx1cmIsLmNvbnRhY3QtaW5mb3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uY29udGFjdC1pbmZve21hcmdpbi1sZWZ0OjB9fS5jb250YWN0LWZvcm17YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTtwYWRkaW5nOjZyZW0gMH0ucG9wdXAtaXRlbS13cmFwe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1yaWdodDoxMHB4fS5wb3B1cC1pdGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtLXdyYXB7d2lkdGg6NzBweDtoZWlnaHQ6NzBweH0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIGEucG9wdXAtaXRlbS1lbWJsZW17Y3Vyc29yOnBvaW50ZXJ9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW17d2lkdGg6NzBweDtoZWlnaHQ6NzBweDtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbSBzdmd7ZmlsbDojZDRhNzRkfS5wb3B1cC1pdGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtIC5jb3VudHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojZmZmO3BhZGRpbmctdG9wOjE0cHh9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0gLmNvdW50IHNwYW57ZGlzcGxheTpibG9jazt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDoxO2ZvbnQtc2l6ZToxMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbSAuY291bnQgc3Bhbi5udW1iZXJ7Zm9udC1zaXplOjE4cHh9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtdHJpYW5nbGV7ZGlzcGxheTpub25lO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjEwcHggc29saWQgI2ZmZjtib3R0b206LTEwcHg7bGVmdDoyNXB4O3otaW5kZXg6MztvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0cmFuc2l0aW9uOm9wYWNpdHkgLjI1c30ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWNvbnRlbnR7ZGlzcGxheTpub25lO3dpZHRoOjIwMHB4O2JhY2tncm91bmQ6I2ZmZjtwYWRkaW5nOjIwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDEwcHgpO21hcmdpbi1sZWZ0OjM1cHg7LXdlYmtpdC1ib3gtc2hhZG93OjFweCAycHggMnB4IDAgcmdiYSgwLDAsMCwuMSk7Ym94LXNoYWRvdzoxcHggMnB4IDJweCAwIHJnYmEoMCwwLDAsLjEpO3otaW5kZXg6MjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0ZXh0LWFsaWduOmNlbnRlcn0ucG9wdXAtaXRlbS13cmFwOmhvdmVyIC5wb3B1cC1pdGVtLWNvbnRlbnQsLnBvcHVwLWl0ZW0td3JhcDpob3ZlciAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtdHJpYW5nbGV7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3BhY2l0eToxfS5hd2FyZHMtd3JhcHttYXJnaW4tdG9wOjIwcHh9LmF3YXJkcy1oZWFkZXJ7cGFkZGluZy1ib3R0b206MTBweDtwYWRkaW5nLXRvcDoxMHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246ZW5kOy13ZWJraXQtYm94LWFsaWduOmVuZDthbGlnbi1pdGVtczpmbGV4LWVuZDttYXJnaW4tYm90dG9tOjEwcHh9LmF3YXJkcy1oZWFkZXIgaDJ7bWFyZ2luOjA7Zm9udC1zaXplOjJyZW19dWwuYXdhcmRzLWl0ZW1zLWxpc3R7d2lkdGg6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9dWwuYXdhcmRzLWl0ZW1zLWxpc3QgbGkuYXdhcmRzLWl0ZW17YmFja2dyb3VuZDojZmZmO3dpZHRoOjUwJTtwYWRkaW5nOjEwcHg7cGFkZGluZy1sZWZ0OjMwcHg7Ym9yZGVyLXRvcDoxcHggc29saWQgI2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MS40cmVtfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOmZpcnN0LWNoaWxkLHVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOm50aC1jaGlsZCgyKXtib3JkZXItdG9wOm5vbmV9dWwuYXdhcmRzLWl0ZW1zLWxpc3QgbGkuYXdhcmRzLWl0ZW0gc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7dG9wOjUwJTttYXJnaW4tdG9wOi0xMXB4O2xlZnQ6NXB4fXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtIHNwYW4uYXdhcmQtaWNvbi1nb2xke2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dvbGQtbWVkYWwucG5nKX11bC5hd2FyZHMtaXRlbXMtbGlzdCBsaS5hd2FyZHMtaXRlbSBzcGFuLmF3YXJkLWljb24tc2lsdmVye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L3NpbHZlci1tZWRhbC5wbmcpfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtIHNwYW4uYXdhcmQtaWNvbi1icm9uemV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYnJvbnplLW1lZGFsLnBuZyl9dWwuYXdhcmRzLWl0ZW1zLWxpc3Q6YWZ0ZXJ7aGVpZ2h0OjEwMCU7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxcHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6NTAlfS5hd2FyZHMtaXRlbXMtdHJpZ2dlcnt3aWR0aDoxMDAlOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO2JhY2tncm91bmQ6I2NiYzljNTtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjVweCAwO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MjttYXJnaW4tdG9wOjEwcHh9LmF3YXJkcy1pdGVtcy10cmlnZ2VyOmJlZm9yZXtjb250ZW50OlxcXCJTaG93IE1vcmVcXFwifS5hd2FyZHMtaXRlbXMtdHJpZ2dlci5zaG93LWxlc3M6YmVmb3Jle2NvbnRlbnQ6XFxcIlNob3cgTGVzc1xcXCJ9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMTQwcHgpe3VsLmF3YXJkcy1pdGVtcy1saXN0OmFmdGVye2Rpc3BsYXk6bm9uZX11bC5hd2FyZHMtaXRlbXMtbGlzdCBsaS5hd2FyZHMtaXRlbXt3aWR0aDoxMDAlfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOm50aC1jaGlsZCgyKXtib3JkZXItdG9wOjFweCBzb2xpZCAjZTVlNGUyfX0uZmluZGVyLWludHJvIC5pbm5lci1jb250YWluZXItYnttYXJnaW4tYm90dG9tOjEwcHh9LmZpbmRlci1pbnRybyAuaWZyYW1lLXdyYXBwZXIgaWZyYW1le3Bvc2l0aW9uOnN0YXRpYzt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlfS5zY19jbGVhcmZpeDphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6dGFibGU7dGFibGUtbGF5b3V0OmZpeGVkO2NsZWFyOmJvdGh9I3NjX2NhbGVuZGFyIHRhYmxle3dpZHRoOjEwMCU7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2Zsb2F0OmxlZnR9I3NjX2NhbGVuZGFyIHRoe2JhY2tncm91bmQ6I2ZkZmRmZDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LXRyYW5zZm9ybTpjYXBpdGFsaXplO3BhZGRpbmc6M3B4IDRweCFpbXBvcnRhbnQ7Zm9udC1zaXplOjEuMnJlbX0jc2NfY2FsZW5kYXIgdGQsI3NjX2NhbGVuZGFyIHRoe3dpZHRoOjEzLjI1JTtib3JkZXI6MXB4IHNvbGlkICNkZGR9I3NjX2NhbGVuZGFyIHRke2ZvbnQtc2l6ZToxMXB4O3BhZGRpbmc6MCFpbXBvcnRhbnR9I3NjX2NhbGVuZGFyIHRkLmNhbGVuZGFyLWRheXtiYWNrZ3JvdW5kOiNmYmZiZmI7aGVpZ2h0OjQwcHh9I3NjX2NhbGVuZGFyIHRkLmNhbGVuZGFyLWRheS1ucHtiYWNrZ3JvdW5kOiNmMGYwZjB9I3NjX2NhbGVuZGFyIHRkIGRpdi5zY19kYXlfZGl2e3BhZGRpbmc6OHB4fSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZHtwYWRkaW5nOjhweDtiYWNrZ3JvdW5kOiNmMGYwZjA7Ym9yZGVyOjFweCBzb2xpZCAjZGRkO2JvcmRlci1ib3R0b206MH0jc2NfZXZlbnRfbmF2X3dyYXAsI3NjX2V2ZW50X3NlbGVjdCwjc2NfZXZlbnRzX2NhbGVuZGFyX2hlYWQgaDJ7d2lkdGg6MzMlO2Zsb2F0OmxlZnQ7bWFyZ2luOjA7Y2xlYXI6bm9uZX0jc2NfZXZlbnRfbmF2X3dyYXB7dGV4dC1hbGlnbjpyaWdodH0jc2NfZXZlbnRfbmF2X3dyYXAgZm9ybXtkaXNwbGF5OmlubGluZTt0ZXh0LWFsaWduOnJpZ2h0fSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZCBoMnt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDoyNnB4O2ZvbnQtc2l6ZToxLjhyZW19I3NjX2V2ZW50c19jYWxlbmRhcl9oZWFkIHNlbGVjdHtmb250LXNpemU6LjdyZW19I3NjX2V2ZW50c19jYWxlbmRhcl9oZWFkIGlucHV0e2ZvbnQtc2l6ZToxcmVtO3BhZGRpbmc6MnB4IDEwcHh9I3NjX2V2ZW50c19jYWxlbmRhciBpbnB1dCwjc2NfZXZlbnRzX2NhbGVuZGFyIHNlbGVjdHttYXJnaW46MCA1cHggMCAwfS5zY19zbWFsbCAjc2NfZXZlbnRfbmF2X3dyYXB7bWFyZ2luOjhweCAwIDB9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfd3JhcCwuc2Nfc21hbGwgI3NjX2V2ZW50X3NlbGVjdHtmbG9hdDpub25lO3dpZHRoOjEwMCV9LnNjX3NtYWxsICNzY19jYWxlbmRhciB0ZCBkaXZ7cGFkZGluZzoxcHh9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfbmV4dCwuc2Nfc21hbGwgI3NjX2V2ZW50X25hdl9wcmV2e2Rpc3BsYXk6YmxvY2s7d2lkdGg6NTAlO2Zsb2F0OmxlZnR9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfcHJldnt0ZXh0LWFsaWduOmxlZnR9I3NjX2NhbGVuZGFyIHRkIGRpdi5kYXktbnVtYmVye2Zsb2F0OnJpZ2h0O21hcmdpbjotNnB4IC00cHggMCAwfS5zY19zbWFsbCAjc2NfY2FsZW5kYXIgdGQgZGl2LmRheS1udW1iZXJ7ZmxvYXQ6bm9uZTt0ZXh0LWFsaWduOnJpZ2h0O3BhZGRpbmc6MDttYXJnaW46LTNweCAxcHggMCAwfS5zY19ldmVudF9kZXRhaWxze21hcmdpbjowIDAgMTVweH0uc2NfZXZlbnRzX2xpc3QgLnNjX2V2ZW50e2NsZWFyOmJvdGh9LnNjX2V2ZW50c19saXN0IC5zY19ldmVudF9jYXRlZ29yaWVzLC5zY19ldmVudHNfbGlzdCAuc2NfZXZlbnRfZGF0ZSwuc2NfZXZlbnRzX2xpc3QgLnNjX2V2ZW50X2xpbmssLnNjX2V2ZW50c19saXN0IC5zY19ldmVudF90aW1lLC5zY19ldmVudHNfbGlzdCAuc2NfZXZlbnRfdGl0bGV7ZmxvYXQ6bGVmdDtjbGVhcjpsZWZ0fS5zY19ldmVudHNfY2FsZW5kYXIgYXt3aGl0ZS1zcGFjZTpub3JtYWw7cGFkZGluZy10b3A6MnB4O2ZvbnQtc2l6ZToxLjJyZW07dGV4dC10cmFuc2Zvcm06bm9uZTtjb2xvcjojOTczYjE1fSNjb250ZW50IC5pbm5lci1jb250YWluZXJ7b3ZlcmZsb3c6aGlkZGVufUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo2ODBweCl7LnNjLXRhYmxle292ZXJmbG93OmhpZGRlbn0uc2MtdGFibGUgdGh7ZGlzcGxheTpub25lfSNjb250ZW50IC5zYy10YWJsZSB0ciB0ZHtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246bGVmdDtwYWRkaW5nLWxlZnQ6NTAlO3dpZHRoOmF1dG99LnNjLXRhYmxlIHRkOmZpcnN0LWNoaWxke3BhZGRpbmctdG9wOi41ZW19LnNjLXRhYmxlIHRkOmxhc3QtY2hpbGR7cGFkZGluZy1ib3R0b206LjVlbX0uc2MtdGFibGUgdGQ6Zmlyc3QtY2hpbGR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4xKX0jc2NfY2FsZW5kYXIgdGQuY2FsZW5kYXItZGF5e2hlaWdodDphdXRvO292ZXJmbG93OmhpZGRlbn0jc2NfY2FsZW5kYXIgLnNjLXRhYmxlIHRkLmNhbGVuZGFyLWRheS1ucHtkaXNwbGF5Om5vbmV9I3NjX2NhbGVuZGFyIHRkIGRpdi5kYXktbnVtYmVye2Zsb2F0OmxlZnQ7bWFyZ2luOjAgNXB4IDVweCAwfSNzYy1jYWxlbmRhciAuc2MtdGFibGUgLnNjX2RheV9kaXZ7b3ZlcmZsb3c6aGlkZGVufSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZCBoMnt3aWR0aDoxMDAlO21hcmdpbjowIDAgMTBweH0jc2NfZXZlbnRfbmF2X3dyYXB7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjAgYXV0bztmbG9hdDpub25lfSNzY19ldmVudF9uYXZfd3JhcCBmb3Jte2Rpc3BsYXk6aW5saW5lO3RleHQtYWxpZ246Y2VudGVyfX0uYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjBweDttYXJnaW4tcmlnaHQ6LTIwcHg7bGlzdC1zdHlsZTpub25lfS5hbGwtbWVkaWEgLmlubmVyLWNvbnRhaW5lcj4qe3BhZGRpbmc6MjBweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmFsbC1tZWRpYSAuaW5uZXItY29udGFpbmVyPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MTAwJTtmbGV4LWJhc2lzOjEwMCU7bWF4LXdpZHRoOjEwMCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsuYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19YS5idXR0b257cGFkZGluZzowIDQwcHg7YmFja2dyb3VuZDowIDA7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IzE5MzUzYjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6NzAwO2xldHRlci1zcGFjaW5nOi4ycmVtO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtc2l6ZToxLjRyZW07LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0fS5pY29uLWJ1dHRvbixhLmJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4fS5pY29uLWJ1dHRvbntiYWNrZ3JvdW5kOmdyYXk7cGFkZGluZzowIDMwcHg7cGFkZGluZy1yaWdodDo1NXB4O3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiNmZmZ9Lmljb24tYnV0dG9uIC5idXR0b24tdGV4dHtkaXNwbGF5OmlubGluZS1ibG9ja30uaWNvbi1idXR0b24gLmJ1dHRvbi1pY29ue3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZDojMDBmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotMTBweDtyaWdodDoyNXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0fS5pY29uLWJ1dHRvbjpob3Zlcntjb2xvcjojZmZmfS5pY29uLWJ1dHRvbjpob3ZlciAuYnV0dG9uLWljb257LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgzcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDNweCk7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQsLXdlYmtpdC10cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dH0uc2xpZGVCdXR0b257Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1jb2xvcjojOTczYjE1O2NvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cGFkZGluZzowIDE1cHh9LnNsaWRlQnV0dG9uOmJlZm9yZXttYXJnaW46YXV0bztjb250ZW50OmF0dHIoZGF0YS1ob3Zlcik7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7dGV4dC1hbGlnbjpjZW50ZXI7b3BhY2l0eTowfS5zbGlkZUJ1dHRvbjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JhY2tncm91bmQ6I2M0NGMxYn0uc2xpZGVCdXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9LnNsaWRlQnV0dG9uOmhvdmVyOmFmdGVyey13ZWJraXQtYW5pbWF0aW9uOnIgLjRzO2FuaW1hdGlvbjpyIC40c30uc2xpZGVCdXR0b246aG92ZXIgc3BhbntvcGFjaXR5OjB9QC13ZWJraXQta2V5ZnJhbWVzIHF7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1MCUpO29wYWNpdHk6MX01MSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1MCUpO29wYWNpdHk6MH01MiV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTtvcGFjaXR5OjB9NTMley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwJSk7b3BhY2l0eToxfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgcXswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTUwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7b3BhY2l0eToxfTUxJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7b3BhY2l0eTowfTUyJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMCUpO29wYWNpdHk6MH01MyV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTtvcGFjaXR5OjF9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC13ZWJraXQta2V5ZnJhbWVzIHJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwJSl9fUBrZXlmcmFtZXMgcnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAlKX19LnNoYXJlLWJ1dHRvbnN7ZGlzcGxheTpub25lfWF7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtZGVjb3JhdGlvbjpub25lO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LXNpemU6aW5oZXJpdDtjb2xvcjojN2Q3NzZkO2N1cnNvcjpwb2ludGVyfWE6YWN0aXZlLGE6Zm9jdXMsYTpob3ZlcntvdXRsaW5lOjB9YS5saW5re2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7bWFyZ2luLXRvcDoyMHB4fWEubGluayxhLm1hcGxpbmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmV9YS5tYXBsaW5re2hlaWdodDoyNHB4O3BhZGRpbmctcmlnaHQ6MjVweDtwYWRkaW5nLWxlZnQ6MTBweDtsaW5lLWhlaWdodDoyNHB4O2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7Zm9udC13ZWlnaHQ6NjAwO2xldHRlci1zcGFjaW5nOi4xcmVtO2ZvbnQtc2l6ZToxLjNyZW07bWFyZ2luOjVweCAwO2NvbG9yOiNmZmY7YmFja2dyb3VuZDojOTc5MjhhO2JvcmRlci1yYWRpdXM6M3B4fWEubWFwbGluayBzcGFue3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O3JpZ2h0OjA7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfWEubWFwbGluayBzcGFuIHN2Z3tmaWxsOiNmZmZ9YS5tYXBsaW5rOmhvdmVyIHNwYW57LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246Ljc1czthbmltYXRpb24tZHVyYXRpb246Ljc1czstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpuO2FuaW1hdGlvbi1uYW1lOm47LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tfWEuZW1haWxsaW5re3RleHQtdHJhbnNmb3JtOm5vbmU7Y29sb3I6aW5oZXJpdH0uYnJlYWRjcnVtYntmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uYnJlYWRjcnVtYiBhe2NvbG9yOiM3ZDc3NmR9LmJyZWFkY3J1bWIgLmN1cnJlbnR7Y29sb3I6Izk3OTI4YX1hLmFycm93LWJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6MzBweDtsaW5lLWhlaWdodDozMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtdHJhbnNmb3JtOm5vbmU7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxLjZyZW07Y29sb3I6Izk3M2IxNTttYXJnaW46MjBweCAwfWEuYXJyb3ctYnV0dG9uIHNwYW57d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0Oi0zNXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfWEuYXJyb3ctYnV0dG9uIHNwYW4gc3Zne2ZpbGw6Izk3M2IxNX1hLmFycm93LWJ1dHRvbjpob3ZlciBzcGFuey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoM3B4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgzcHgpfS5idXR0b24tYmd7YmFja2dyb3VuZDojMTkzNTNiO3BhZGRpbmc6NXB4IDQ1cHggNXB4IDE1cHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7Ym9yZGVyLXJhZGl1czozcHg7bWFyZ2luLXRvcDoxMHB4fS5idXR0b24tYmcgYS5hcnJvdy1idXR0b257Y29sb3I6I2ZmZjttYXJnaW46MH0uYnV0dG9uLWJnIGEuYXJyb3ctYnV0dG9uIHNwYW4gc3Zne2ZpbGw6I2ZmZn0uaG9tZS1saW5ldXAgYS5hcnJvdy1idXR0b257Y29sb3I6I2U1ZTRlMjttYXJnaW46NXB4IDA7Zm9udC1zaXplOjJyZW07bGV0dGVyLXNwYWNpbmc6LjA1cmVtfS5ob21lLWxpbmV1cCBhLmFycm93LWJ1dHRvbiBzcGFuIHN2Z3tmaWxsOiNlNWU0ZTJ9Lmljb24tbGlua3tkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjM1cHg7Zm9udC1zaXplOjEuNnJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojOTczYjE1O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46NXB4IDB9Lmljb24tbGluayBzcGFue3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9Lmljb24tbGluayBzcGFuIHN2Z3tmaWxsOiM5NzNiMTV9LmlubGluZS1saW5rLHA+YXt0ZXh0LXRyYW5zZm9ybTpub25lO2NvbG9yOiNkNGE3NGQ7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4yczt0cmFuc2l0aW9uOmNvbG9yIC4ycztmb250LXdlaWdodDo2MDB9LmlubGluZS1saW5rOmhvdmVyLHA+YTpob3Zlcntjb2xvcjojYTlhNmExfS5lbWFpbC1saW5rLC5waG9uZS1saW5re2ZvbnQtc2l6ZToxLjZyZW07Y29sb3I6IzdkNzc2ZDtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjM1cHg7dGV4dC10cmFuc2Zvcm06bm9uZX0uZW1haWwtbGluayBzcGFuLC5waG9uZS1saW5rIHNwYW57d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uZW1haWwtbGluayBzcGFuIHN2ZywucGhvbmUtbGluayBzcGFuIHN2Z3tmaWxsOiM3ZDc3NmR9aW5wdXRbdHlwZT1jb2xvcl0saW5wdXRbdHlwZT1kYXRlXSxpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXSxpbnB1dFt0eXBlPWRhdGV0aW1lXSxpbnB1dFt0eXBlPWVtYWlsXSxpbnB1dFt0eXBlPW1vbnRoXSxpbnB1dFt0eXBlPW51bWJlcl0saW5wdXRbdHlwZT1wYXNzd29yZF0saW5wdXRbdHlwZT1yYW5nZV0saW5wdXRbdHlwZT1zZWFyY2hdLGlucHV0W3R5cGU9dGVsXSxpbnB1dFt0eXBlPXRleHRdLGlucHV0W3R5cGU9dGltZV0saW5wdXRbdHlwZT11cmxdLGlucHV0W3R5cGU9d2Vla10sdGV4dGFyZWF7Y29sb3I6Izk3OTI4YTtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZzozcHh9aW5wdXRbdHlwZT1jb2xvcl06Zm9jdXMsaW5wdXRbdHlwZT1kYXRlXTpmb2N1cyxpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXTpmb2N1cyxpbnB1dFt0eXBlPWRhdGV0aW1lXTpmb2N1cyxpbnB1dFt0eXBlPWVtYWlsXTpmb2N1cyxpbnB1dFt0eXBlPW1vbnRoXTpmb2N1cyxpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMsaW5wdXRbdHlwZT1wYXNzd29yZF06Zm9jdXMsaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXMsaW5wdXRbdHlwZT1zZWFyY2hdOmZvY3VzLGlucHV0W3R5cGU9dGVsXTpmb2N1cyxpbnB1dFt0eXBlPXRleHRdOmZvY3VzLGlucHV0W3R5cGU9dGltZV06Zm9jdXMsaW5wdXRbdHlwZT11cmxdOmZvY3VzLGlucHV0W3R5cGU9d2Vla106Zm9jdXMsdGV4dGFyZWE6Zm9jdXN7Y29sb3I6Izk3M2IxNTtib3JkZXI6MXB4IHNvbGlkICM5NzNiMTU7b3V0bGluZTowfXNlbGVjdHtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9dGV4dGFyZWF7d2lkdGg6MTAwJX06Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX06Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX06LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM5NzkyOGE7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtc2l6ZToxLjNyZW19Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX0jZ2Zvcm1fMSAuZ2ZpZWxkX2xhYmVse2Rpc3BsYXk6bm9uZX0jZ2Zvcm1fMSBpbnB1dFt0eXBlPXN1Ym1pdF17Ym9yZGVyOjA7Zm9udC1zaXplOjEuNHJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojZmZmO2JhY2tncm91bmQ6Izk3M2IxNTtwYWRkaW5nOjEwcHggMjBweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Ym9yZGVyLXJhZGl1czozcHh9Lm5ld3NsZXR0ZXJfZm9ybSBmb3JtIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzLC5uZXdzbGV0dGVyX2Zvcm0gZm9ybSBpbnB1dFt0eXBlPXRleHRdOmZvY3Vze2NvbG9yOiNlNWU0ZTI7b3V0bGluZTowO2JvcmRlcjowfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjYpO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0ubmV3c2xldHRlcl9mb3JtIGZvcm0gOi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6Nzg2cHgpey5zcGxpdC1saXN0IHVsey13ZWJraXQtY29sdW1uLWNvdW50OjI7Y29sdW1uLWNvdW50OjJ9fSNnZm9ybV8yIDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6I2ZmZjtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0jZ2Zvcm1fMiA6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIGlucHV0W3R5cGU9c3VibWl0XXtib3JkZXI6MDtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2NvbG9yOiNmZmY7YmFja2dyb3VuZDojOTczYjE1O3BhZGRpbmc6MTBweCAyMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtib3JkZXItcmFkaXVzOjNweH0jZ2Zvcm1fMiAuZ2Zvcm1fd3JhcHBlciAudG9wX2xhYmVsIC5nZmllbGRfbGFiZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0jZ2Zvcm1fMiAuZ2ZpZWxkX3JhZGlvIGxhYmVse2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW19I2dmb3JtXzIgLmdmaWVsZF9sYWJlbHtjb2xvcjojOTc5MjhhO2ZvbnQtc2l6ZToxLjRyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtsZXR0ZXItc3BhY2luZzouMTVyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OjYwMH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc2OHB4KXsjZ2Zvcm1fMiAuc2Utbm8tbGFiZWwgLmdmaWVsZF9sYWJlbHtkaXNwbGF5Om5vbmV9I2dmb3JtXzIgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9I2dmb3JtXzIgOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9I2dmb3JtXzIgOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojN2Q3NzZkfSNnZm9ybV8yIDotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9fS5vdmVyZmxvdy1oaWRkZW57b3ZlcmZsb3c6aGlkZGVufS5ob3Vycy1tb2RhbHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMjAyLDIwMCwxOTYsLjkpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt6LWluZGV4OjMwMDA7b3ZlcmZsb3cteTphdXRvO2N1cnNvcjpwb2ludGVyO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuM3MgMCx2aXNpYmlsaXR5IDAgLjNzO3RyYW5zaXRpb246b3BhY2l0eSAuM3MgMCx2aXNpYmlsaXR5IDAgLjNzfS5ob3Vycy1tb2RhbC1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6OTAlO21heC13aWR0aDo2MDBweDtiYWNrZ3JvdW5kOnJnYmEoMjI4LDIyNywyMjYsLjYpO2N1cnNvcjphdXRvO2JvcmRlci1yYWRpdXM6LjI1ZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTotd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5Oi13ZWJraXQtdHJhbnNmb3JtO3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtO3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtLC13ZWJraXQtdHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjouM3M7dHJhbnNpdGlvbi1kdXJhdGlvbjouM3N9I2hvdXJzLWZvb2QsI2hvdXJzLXNwZWNpYWwsI3NwZWNpYWwtZXZlbnR7ZGlzcGxheTpub25lO3BhZGRpbmc6MzBweDtiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsLjkpOy13ZWJraXQtYm94LXNoYWRvdzowIDAgNXB4IDAgcmdiYSgwLDAsMCwuMTUpO2JveC1zaGFkb3c6MCAwIDVweCAwIHJnYmEoMCwwLDAsLjE1KTttYXgtaGVpZ2h0Ojcwdmg7b3ZlcmZsb3c6c2Nyb2xsfS5ob3Vycy1tb2RhbC5pcy12aXNpYmxle3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjNzIDAsdmlzaWJpbGl0eSAwIC4zczt0cmFuc2l0aW9uOm9wYWNpdHkgLjNzIDAsdmlzaWJpbGl0eSAwIC4zc30uaG91cnMtbW9kYWwuaXMtdmlzaWJsZSAuaG91cnMtbW9kYWwtY29udGFpbmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9I2hvdXJzLWZvb2QuaXMtc2VsZWN0ZWQsI2hvdXJzLXNwZWNpYWwuaXMtc2VsZWN0ZWQsI3NwZWNpYWwtZXZlbnQuaXMtc2VsZWN0ZWQsLmNsb3NlLWhyc3tkaXNwbGF5OmJsb2NrfS5jbG9zZS1ocnN7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtyaWdodDowO3RvcDotNDBweDtiYWNrZ3JvdW5kOnVybChodHRwczovL3MzLXVzLXdlc3QtMi5hbWF6b25hd3MuY29tL3MuY2Rwbi5pby8xNDg4NjYvY2QtaWNvbi1jbG9zZS5zdmcpIG5vLXJlcGVhdCA1MCU7dGV4dC1pbmRlbnQ6MTAwJTt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVufS5zcGhyc19pbm5lcl93cmFwIGgze2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToycmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDo2MDBweCl7LmNkLXVzZXItbW9kYWwtY29udGFpbmVye21hcmdpbjo0ZW0gYXV0b30uc3BocnNfaW5uZXJfd3JhcCBoM3tmb250LXNpemU6Mi42cmVtfX1pbWd7aGVpZ2h0OmF1dG87bWF4LXdpZHRoOjEwMCU7Ym9yZGVyOjA7b3V0bGluZTowO2Rpc3BsYXk6YmxvY2t9LmFzcGVjdHt3aWR0aDoxMDAlO3otaW5kZXg6LTEwO3Bvc2l0aW9uOnJlbGF0aXZlO29wYWNpdHk6MH1zdmd7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfS5zcHJpdGVTaGVldHttYXgtaGVpZ2h0OjB9LnNwaW5uZXItbG9nb3t3aWR0aDoxNTBweDtoZWlnaHQ6MTUwcHh9LnNvY2lhbHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zb2NpYWwgbGl7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjhweDtoZWlnaHQ6MjhweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjgpO2JvcmRlci1yYWRpdXM6MTAwJTttYXJnaW46MCAxMHB4O2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxiYWNrZ3JvdW5kLWNvbG9yIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxiYWNrZ3JvdW5kLWNvbG9yIC4yNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjI1c30uc29jaWFsIGxpOmZpcnN0LW9mLXR5cGV7bWFyZ2luLWxlZnQ6MH0uc29jaWFsIGxpOmxhc3Qtb2YtdHlwZXttYXJnaW4tcmlnaHQ6MH0uc29jaWFsIGxpIGF7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDttYXJnaW46NHB4O2Rpc3BsYXk6YmxvY2t9LnNvY2lhbCBsaTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0udG9wLWJhciAuc29jaWFsIHN2Z3tmaWxsOiM3ZDc3NmR9Zm9vdGVyIC5zb2NpYWwgc3Zne2ZpbGw6Izk3OTI4YX0uY2FsbG91dF9pdGVtIC5zb2NpYWwgbGl7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEyNiwxMTksMTA5LC44KX0uY2FsbG91dF9pdGVtIC5zb2NpYWwgbGk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojN2Q3NzZkfS5jYWxsb3V0X2l0ZW0gLnNvY2lhbCBzdmd7ZmlsbDojZjFmMWVmfS5lbWJlZC1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1ib3R0b206NTYuMjUlO2hlaWdodDowO292ZXJmbG93OmhpZGRlbjttYXgtd2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30uZW1iZWQtY29udGFpbmVyIGlmcmFtZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0jaW5zdGFmZWVke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXh9LnNsaWNrLXNsaWRlcnstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lOy1tcy10b3VjaC1hY3Rpb246cGFuLXk7dG91Y2gtYWN0aW9uOnBhbi15Oy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH0uc2xpY2stbGlzdCwuc2xpY2stc2xpZGVye3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2t9LnNsaWNrLWxpc3R7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbjowO3BhZGRpbmc6MTBweCAwfS5zbGljay1saXN0OmZvY3Vze291dGxpbmU6MH0uc2xpY2stbGlzdC5kcmFnZ2luZ3tjdXJzb3I6cG9pbnRlcjtjdXJzb3I6aGFuZH0uc2xpY2stc2xpZGVyIC5zbGljay1saXN0LC5zbGljay1zbGlkZXIgLnNsaWNrLXRyYWNrey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9LnNsaWNrLXRyYWNre3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDowO2xlZnQ6MDtkaXNwbGF5OmJsb2NrfS5zbGljay10cmFjazphZnRlciwuc2xpY2stdHJhY2s6YmVmb3Jle2Rpc3BsYXk6dGFibGU7Y29udGVudDpcXFwiXFxcIn0uc2xpY2stdHJhY2s6YWZ0ZXJ7Y2xlYXI6Ym90aH0uc2xpY2stbG9hZGluZyAuc2xpY2stdHJhY2t7dmlzaWJpbGl0eTpoaWRkZW59LnNsaWNrLXNsaWRle2Rpc3BsYXk6bm9uZTtmbG9hdDpsZWZ0O291dGxpbmU6MDtoZWlnaHQ6MTAwJTttaW4taGVpZ2h0OjFweH1bZGlyPXJ0bF0gLnNsaWNrLXNsaWRle2Zsb2F0OnJpZ2h0fS5zbGljay1zbGlkZSBpbWd7ZGlzcGxheTpibG9ja30uc2xpY2stc2xpZGUuc2xpY2stbG9hZGluZyBpbWd7ZGlzcGxheTpub25lfS5zbGljay1zbGlkZS5kcmFnZ2luZyBpbWd7cG9pbnRlci1ldmVudHM6bm9uZX0uc2xpY2staW5pdGlhbGl6ZWQgLnNsaWNrLXNsaWRle2Rpc3BsYXk6YmxvY2t9LnNsaWNrLWxvYWRpbmcgLnNsaWNrLXNsaWRle3Zpc2liaWxpdHk6aGlkZGVufS5zbGljay12ZXJ0aWNhbCAuc2xpY2stc2xpZGV7ZGlzcGxheTpibG9jaztoZWlnaHQ6YXV0bztib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50fS5zbGljay1hcnJvdy5zbGljay1oaWRkZW57ZGlzcGxheTpub25lfS5zbGljay1kb3Rze2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowIGF1dG87bWFyZ2luLXRvcDoyMHB4fS5zbGljay1kb3RzIGxpe2Zsb2F0OmxlZnQ7bWFyZ2luOjAgNXB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5zbGljay1kb3RzIGxpIGJ1dHRvbntkaXNwbGF5Om5vbmV9LnNsaWNrLWRvdHMgbGk6YmVmb3Jle3dpZHRoOjdweDtoZWlnaHQ6N3B4O2JhY2tncm91bmQ6I2E5YTlhOTtkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyLXJhZGl1czoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmJhY2tncm91bmQgLjJzIGVhc2UtaW4tb3V0fS5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZTpiZWZvcmV7YmFja2dyb3VuZDpncmF5Oy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmJhY2tncm91bmQgLjJzIGVhc2UtaW4tb3V0fS5zbGljay1uZXh0LC5zbGljay1wcmV2e2ZvbnQtc2l6ZTowO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7bWFyZ2luLXRvcDotMTVweDtwYWRkaW5nOjA7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjA7b3V0bGluZTowO2JhY2tncm91bmQ6MCAwfS5zbGljay1uZXh0OmJlZm9yZSwuc2xpY2stcHJldjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDozMHB4O2hlaWdodDozMHB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ljb25zL3Jhdy9jYXJhdGFsdC5zdmcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtkaXNwbGF5OmJsb2NrfS5zbGljay1wcmV2e2xlZnQ6LTMwcHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5zbGljay1uZXh0e3JpZ2h0Oi0zMHB4fS5mbGV4e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwfS5zZWFyY2gtZm9ybSwuZmluZGVye21heC13aWR0aDoxNjAwcHg7bWFyZ2luOjAgYXV0b30uaGVyby5maC00MDB7aGVpZ2h0OjMwMHB4O21pbi1oZWlnaHQ6MzAwcHh9LmZpbmRlcnttaW4taGVpZ2h0OmNhbGMoMTAwdmggLSAzMDBweCl9LmhlYWRlclNwYWNlcntoZWlnaHQ6MTIwcHg7d2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfS5zZWFyY2gtY29sey13ZWJraXQtYm94LWZsZXg6MDstbXMtZmxleDowIDAgY2FsYygxMDAlIC0gODBweCk7ZmxleDowIDAgY2FsYygxMDAlIC0gODBweCk7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozOy1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6MjttYXJnaW46NDBweH0ubWFwLWNvbHstd2Via2l0LWJveC1mbGV4OjA7LW1zLWZsZXg6MCAwIDEwMCU7ZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjI7LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxfSNtYXB7aGVpZ2h0OjQwMHB4fS5zZWFyY2h7YmFja2dyb3VuZDojZjdmN2Y3O3BhZGRpbmc6NDBweH0uc2VhcmNoLWNvbCBoM3ttYXJnaW4tdG9wOjB9LnNlYXJjaC1jb2wgaDV7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZToxNnB4O2NvbG9yOiNjNjljNTR9LnNlYXJjaC1jb2wgcHttYXJnaW46MH0uc2VhcmNoLWNvbCBhe2NvbG9yOiM5NjkwODc7Zm9udC13ZWlnaHQ6NjAwfS5sb2NhdGlvbi1xd3JhcHt3aWR0aDoxMDAlO2hlaWdodDo0MHB4fS5tYXJrZXItaWNvbi1idG57ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NDBweDtmb250LXNpemU6MS42cmVtOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5tYXJrZXItaWNvbi1idG4gc3Bhbnstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXg6MTtmbGV4OjF9Lm1hcmtlci1pY29uLWJ0biAubG9jYXRpb24tYnRuLXdyYXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0ubWFya2VyLWljb24tYnRuIC5sb2NhdGlvbi1idG4td3JhcCBidXR0b257cGFkZGluZzowIDEwcHg7YmFja2dyb3VuZDojYmU5YTVjO2hlaWdodDozMHB4O2xpbmUtaGVpZ2h0OjMwcHg7bWFyZ2luLXJpZ2h0OjEwcHg7Ym9yZGVyOjA7Zm9udC1mYW1pbHk6XFxcInZpbnlsXFxcIjtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxLjZyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucGFnaW5hdGlvbntwYWRkaW5nOjEwcHggMDtib3JkZXItdG9wOjFweCBzb2xpZCAjZGRkO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0jbG9jYXRpb25SZXN1bHRze3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDpjYWxjKDEwMHZoIC0gMTQwcHgpO292ZXJmbG93LXk6c2Nyb2xsfS5zZWFyY2gtZm9ybXt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXBhY2s6c3RhcnQ7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH1pbnB1dFt0eXBlPXRleHRde2NvbG9yOmdyYXk7Ym9yZGVyOjJweCBzb2xpZCAjY2FiMjgyO3BhZGRpbmc6MCAxNnB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjM2cHg7bWFyZ2luOjEwcHggNXB4O3dpZHRoOmNhbGMoNTAlIC0gMTBweCk7Zm9udC1zaXplOjE2cHg7YmFja2dyb3VuZDowIDB9I3ppcDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpncmF5O2ZvbnQtc2l6ZToxNnB4O29wYWNpdHk6MX0jemlwOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOmdyYXk7Zm9udC1zaXplOjE2cHg7b3BhY2l0eToxfSN6aXA6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOmdyYXk7Zm9udC1zaXplOjE2cHg7b3BhY2l0eToxfSN6aXA6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpncmF5O2ZvbnQtc2l6ZToxNnB4O29wYWNpdHk6MX0uY3VzdG9tLXNlbGVjdHtwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MS42cmVtO2NvbG9yOiM5NjkwODc7bWFyZ2luOjEwcHggNXB4fS5jdXN0b20tc2VsZWN0IHNlbGVjdHtkaXNwbGF5Om5vbmV9LnNlbGVjdC1zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOmdyYXk7Ym9yZGVyOjJweCBzb2xpZCAjYmU5YTVjO3BhZGRpbmc6MCAxNnB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjM2cHg7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5zZWxlY3Qtc2VsZWN0ZWQ6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjt0b3A6MThweDtyaWdodDoxMHB4O3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItY29sb3I6I2JlOWE1YyB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH0uc2VsZWN0LXNlbGVjdGVkLnNlbGVjdC1hcnJvdy1hY3RpdmU6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNiZTlhNWMgdHJhbnNwYXJlbnQ7dG9wOjEycHh9LnNlbGVjdC1pdGVtcyBkaXZ7Y29sb3I6Z3JheTtwYWRkaW5nOjhweCAxNnB4O2JvcmRlcjoycHggc29saWQgI2U1ZTRlMjtib3JkZXItdG9wOm5vbmU7Ym9yZGVyLWJvdHRvbTpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uc2VsZWN0LWl0ZW1ze3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjt0b3A6MTAwJTtsZWZ0OjA7cmlnaHQ6MDt6LWluZGV4Ojk5fS5zZWxlY3QtaXRlbXM6YWZ0ZXJ7Y29udGVudDonJzt3aWR0aDoxMDAlO2hlaWdodDoycHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MH0uc2VsZWN0LWhpZGV7ZGlzcGxheTpub25lfS5zZWxlY3QtaXRlbXMgZGl2OmhvdmVyLC5zYW1lLWFzLXNlbGVjdGVke2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMSl9LnBhZ2UtaWQtOTQxMCBmb290ZXJ7YmFja2dyb3VuZDojMDAwfS5sb2NhdGlvbnttYXJnaW4tYm90dG9tOjIwcHh9LmxvY2F0aW9uIGg1e2xpbmUtaGVpZ2h0OjEuMjtoZWlnaHQ6YXV0b30jemlwe2Rpc3BsYXk6bm9uZX0jemlwLmlzLXNob3due2Rpc3BsYXk6YmxvY2t9LmlzLWhpZGRlbntkaXNwbGF5Om5vbmV9LmxvYWRpbmctYWN0aXZle2NvbG9yOnJlZH0ubG9jYXRpb24tY29tcGxldGV7Y29sb3I6Z3JlZW59LnNsaWRlQnV0dG9ue2JvcmRlci1yYWRpdXM6M3B4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6Izk3M2IxNTtjb2xvcjojZmZmO292ZXJmbG93OmhpZGRlbjtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O3BhZGRpbmc6MCAxNXB4O2JvcmRlcjowO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46MTBweCAwfS5zbGlkZUJ1dHRvbjpiZWZvcmV7bWFyZ2luOmF1dG87Y29udGVudDphdHRyKGRhdGEtaG92ZXIpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6MH0uc2xpZGVCdXR0b246YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTtsZWZ0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiNjNDRjMWJ9LmNhcmQtaG9sZGVye3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjQwcHh9LmNhcmQtZnJvbnR7ei1pbmRleDo4O2JhY2tncm91bmQ6I2ZmZn0uY2FyZC1iYWNre3otaW5kZXg6NDtiYWNrZ3JvdW5kOiNmZmZ9LmNhcmQtaG9sZGVyOmhvdmVyIC5jYXJkLWZyb250ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVgoLS41dHVybik7dHJhbnNmb3JtOnJvdGF0ZVgoLS41dHVybil9LmNhcmQtaG9sZGVyOmhvdmVyIC5jYXJkLWJhY2t7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWCgwdHVybik7dHJhbnNmb3JtOnJvdGF0ZVgoMHR1cm4pfS5jYXJke3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDFzIGVhc2U7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAxcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIDFzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAxcyBlYXNlOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LmNvbnRhaW5lcnstd2Via2l0LXBlcnNwZWN0aXZlOjEwMDBweDtwZXJzcGVjdGl2ZToxMDAwcHh9LmNpZGVyX2ZpbmRlcl9idXR0b257Y3Vyc29yOnBvaW50ZXI7Zm9udC1mYW1pbHk6XFxcInZpbnlsXFxcIjtsZXR0ZXItc3BhY2luZzouMTVyZW07Zm9udC1zaXplOjEuNnJlbX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOjc2OHB4KXsuaGVyby5maC00MDB7aGVpZ2h0OjM1MHB4O21pbi1oZWlnaHQ6MzUwcHh9LmZpbmRlcntoZWlnaHQ6MTAwdmg7bWluLWhlaWdodDo2MDBweH0uc2VhcmNoLWNvbHstd2Via2l0LWJveC1mbGV4OjA7LW1zLWZsZXg6MCAwIDMyMHB4O2ZsZXg6MCAwIDMyMHB4fS5zZWFyY2gtY29sIC5jb250ZW50ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTQwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNDAwcHgpOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjstbXMtZmxleC1vcmRlcjoxO29yZGVyOjE7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAyMDBtcyBjdWJpYy1iZXppZXIoLjYxLC45MiwuNjgsMS4xNCkgMHM7dHJhbnNpdGlvbjphbGwgMjAwbXMgY3ViaWMtYmV6aWVyKC42MSwuOTIsLjY4LDEuMTQpIDBzfS5zZWFyY2gtY29sLnJlc3VsdHMtcmV2ZWFsZWQgLmNvbnRlbnR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0ubWFwLWNvbHstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXg6MSAwIGF1dG87ZmxleDoxIDAgYXV0bzstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyfSNtYXB7aGVpZ2h0OjEwMHZoO21pbi1oZWlnaHQ6NjAwcHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTI0MHB4KXsuc2VhcmNoLWZvcm17LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn19XCIsIFwiXCIsIHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIi9Vc2Vycy9tbmk3YS9EZXNrdG9wL1NpdGVzL2JvbGRyb2NrLmNvbS9zcmMvc3R5bGVzL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsT0FBTyxXQUFXLFNBQVMsQ0FBQyxLQUFLLDhCQUE4Qix5QkFBeUIsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxvRkFBb0YsYUFBYSxDQUFDLDRCQUE0QixxQkFBcUIsdUJBQXVCLENBQUMsc0JBQXNCLGFBQWEsUUFBUSxDQUFDLGtCQUFrQixZQUFZLENBQUMsRUFBRSw0QkFBNEIsQ0FBQyxZQUFZLHdCQUF3QixDQUFDLFNBQVMsZUFBZSxDQUFDLElBQUksaUJBQWlCLENBQUMsR0FBRyxjQUFjLGNBQWMsQ0FBQyxLQUFLLGdCQUFnQixVQUFVLENBQUMsTUFBTSxhQUFhLENBQUMsUUFBUSxjQUFjLGNBQWMsa0JBQWtCLHVCQUF1QixDQUFDLElBQUksU0FBUyxDQUFDLElBQUksYUFBYSxDQUFDLGVBQWUsZUFBZSxDQUFDLE9BQU8sZUFBZSxDQUFDLEdBQUcsK0JBQStCLHVCQUF1QixRQUFRLENBQUMsSUFBSSxhQUFhLENBQUMsa0JBQWtCLGdDQUFnQyxh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TSxrQkFBa0IsV0FBVyxZQUFZLDZDQUE2QyxxQ0FBcUMsNkJBQTZCLHVEQUF1RCxtQ0FBbUMsMEJBQTBCLENBQUMsV0FBVywyQkFBMkIsa0JBQWtCLENBQUMscUJBQXFCLGVBQWUsb0JBQW9CLHNCQUFzQixnQkFBZ0IsQ0FBQyxvQ0FBb0MsYUFBYSxhQUFhLGdCQUFnQixDQUFDLFFBQVEsYUFBYSxnQkFBZ0IsQ0FBQyxZQUFZLG1CQUFtQixtQkFBbUIsY0FBYyxDQUFDLHFCQUFxQixxQ0FBcUMsNkJBQTZCLDRCQUE0QixpQkFBaUIsUUFBUSwrREFBK0Qsc0RBQXNELENBQUMsc0NBQXNDLGdDQUFnQyx1QkFBdUIsQ0FBQyxTQUFTLG1CQUFtQixrQkFBa0IsY0FBYyw0QkFBNEIsaUJBQWlCLE9BQU8sQ0FBQyxLQUFLLGFBQWEsZ0JBQWdCLENBQUMsQ0FBQyxxQ0FBcUMsYUFBYSx3QkFBd0IscUJBQXFCLHNCQUFzQixDQUFDLENBQUNcIixcImZpbGVcIjpcInN0eWxlLnNjc3NcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLndoaXRle2NvbG9yOiNmZmY7ZmlsbDojZmZmfWh0bWx7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OjEwMCU7LW1zLXRleHQtc2l6ZS1hZGp1c3Q6MTAwJX1ib2R5e21hcmdpbjowfWFydGljbGUsYXNpZGUsZGV0YWlscyxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsaGVhZGVyLG1haW4sbWVudSxuYXYsc2VjdGlvbixzdW1tYXJ5e2Rpc3BsYXk6YmxvY2t9YXVkaW8sY2FudmFzLHByb2dyZXNzLHZpZGVve2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOmJhc2VsaW5lfWF1ZGlvOm5vdChbY29udHJvbHNdKXtkaXNwbGF5Om5vbmU7aGVpZ2h0OjB9W2hpZGRlbl0sdGVtcGxhdGV7ZGlzcGxheTpub25lfWF7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1hYmJyW3RpdGxlXXtib3JkZXItYm90dG9tOjFweCBkb3R0ZWR9YixzdHJvbmd7Zm9udC13ZWlnaHQ6NzAwfWRmbntmb250LXN0eWxlOml0YWxpY31oMXtmb250LXNpemU6MmVtO21hcmdpbjouNjdlbSAwfW1hcmt7YmFja2dyb3VuZDojZmYwO2NvbG9yOiMwMDB9c21hbGx7Zm9udC1zaXplOjgwJX1zdWIsc3Vwe2ZvbnQtc2l6ZTo3NSU7bGluZS1oZWlnaHQ6MDtwb3NpdGlvbjpyZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZX1zdXB7dG9wOi0uNWVtfXN1Yntib3R0b206LS4yNWVtfXN2Zzpub3QoOnJvb3Qpe292ZXJmbG93OmhpZGRlbn1maWd1cmV7bWFyZ2luOjFlbSA0MHB4fWhyey13ZWJraXQtYm94LXNpemluZzpjb250ZW50LWJveDtib3gtc2l6aW5nOmNvbnRlbnQtYm94O2hlaWdodDowfXByZXtvdmVyZmxvdzphdXRvfWNvZGUsa2JkLHByZSxzYW1we2ZvbnQtZmFtaWx5Om1vbm9zcGFjZSxtb25vc3BhY2U7Zm9udC1zaXplOjFlbX1idXR0b24saW5wdXQsb3B0Z3JvdXAsc2VsZWN0LHRleHRhcmVhe2NvbG9yOmluaGVyaXQ7Zm9udDppbmhlcml0O21hcmdpbjowfWJ1dHRvbntvdmVyZmxvdzp2aXNpYmxlfWJ1dHRvbixzZWxlY3R7dGV4dC10cmFuc2Zvcm06bm9uZX1idXR0b24saHRtbCBpbnB1dFt0eXBlPWJ1dHRvbl0saW5wdXRbdHlwZT1yZXNldF0saW5wdXRbdHlwZT1zdWJtaXRdey13ZWJraXQtYXBwZWFyYW5jZTpidXR0b247Y3Vyc29yOnBvaW50ZXJ9YnV0dG9uW2Rpc2FibGVkXSxodG1sIGlucHV0W2Rpc2FibGVkXXtjdXJzb3I6ZGVmYXVsdH1idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyOjA7cGFkZGluZzowfWlucHV0e2xpbmUtaGVpZ2h0Om5vcm1hbH1pbnB1dFt0eXBlPWNoZWNrYm94XSxpbnB1dFt0eXBlPXJhZGlvXXstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowfWlucHV0W3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixpbnB1dFt0eXBlPW51bWJlcl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b257aGVpZ2h0OmF1dG99aW5wdXRbdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLGlucHV0W3R5cGU9c2VhcmNoXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbnstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX1maWVsZHNldHtib3JkZXI6MXB4IHNvbGlkIHNpbHZlcjttYXJnaW46MCAycHg7cGFkZGluZzouMzVlbSAuNjI1ZW0gLjc1ZW19bGVnZW5ke2JvcmRlcjowO3BhZGRpbmc6MH10ZXh0YXJlYXtvdmVyZmxvdzphdXRvfW9wdGdyb3Vwe2ZvbnQtd2VpZ2h0OjcwMH10YWJsZXtib3JkZXItY29sbGFwc2U6Y29sbGFwc2U7Ym9yZGVyLXNwYWNpbmc6MH10ZCx0aHtwYWRkaW5nOjB9aHRtbHtmb250LWZhbWlseTpzYW5zLXNlcmlmOy13ZWJraXQtYm94LXNpemluZzpib3JkZXItYm94O2JveC1zaXppbmc6Ym9yZGVyLWJveDtmb250LXNpemU6NjIuNSU7bGluZS1oZWlnaHQ6MS40O2NvbG9yOiM3ZDc3NmQ7aGVpZ2h0OjEwMCU7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtd2VpZ2h0OjEwMH0qLDphZnRlciw6YmVmb3Jley13ZWJraXQtYm94LXNpemluZzppbmhlcml0O2JveC1zaXppbmc6aW5oZXJpdH1ib2R5e2JhY2tncm91bmQ6I2ZmZjtoZWlnaHQ6MTAwJTtvdmVyZmxvdy14OmhpZGRlbn1kbCxvbCx1bHtsaXN0LXN0eWxlLXR5cGU6bm9uZTttYXJnaW46MDtwYWRkaW5nOjB9cHttYXJnaW46MH1wK3B7bWFyZ2luLXRvcDoxMHB4fWxpLGxpPnNwYW4scHtmb250LXNpemU6MTZweDtmb250LXNpemU6MS42cmVtO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtjb2xvcjojOTY5MDg3O2ZvbnQtd2VpZ2h0OjEwMDtsaW5lLWhlaWdodDoxLjh9c3Ryb25ne2ZvbnQtd2VpZ2h0OjcwMH1lbXtmb250LXN0eWxlOml0YWxpY31oM3tmb250LXdlaWdodDo0MDA7Zm9udC1zaXplOjIycHg7Zm9udC1zaXplOjIuMnJlbX1oMXtjb2xvcjojNWU1OTUyO2ZvbnQtc2l6ZTozLjhyZW07bGV0dGVyLXNwYWNpbmc6LjA1cmVtO21hcmdpbjoxMHB4IDB9aDEsaDJ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfWgye2ZvbnQtc2l6ZTozLjJyZW07bGV0dGVyLXNwYWNpbmc6LjFyZW07bWFyZ2luOjA7bWFyZ2luLWJvdHRvbToxMHB4fWgze2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXdlaWdodDoxMDA7dGV4dC10cmFuc2Zvcm06bm9uZTtmb250LXNpemU6Mi42cmVtfWg0e2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7Zm9udC13ZWlnaHQ6NzAwO2xldHRlci1zcGFjaW5nOi4ycmVtO2ZvbnQtc2l6ZToxLjZyZW19aDQsaDV7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO21hcmdpbjowfWg1e2ZvbnQtc2l6ZToxLjVyZW07Zm9udC13ZWlnaHQ6NTAwO2hlaWdodDoyMHB4O2xpbmUtaGVpZ2h0OjIwcHg7bWFyZ2luLWJvdHRvbToyMHB4O2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2xldHRlci1zcGFjaW5nOi4wNXJlbX0uc20tbWFyZ2lue21hcmdpbjoxMHB4IDAhaW1wb3J0YW50fS5tZWQtbWFyZ2lue21hcmdpbjoyMHB4IDAhaW1wb3J0YW50fS5sZy1tYXJnaW57bWFyZ2luOjMwcHggMCFpbXBvcnRhbnR9LnBhZ2Utd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2hlaWdodDoxMDAlfWZvb3RlcixoZWFkZXJ7LW1zLWZsZXg6bm9uZTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDpub25lfS5jb250ZW50LWFyZWF7LW1zLWZsZXg6MSAwIGF1dG87LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MSAwIGF1dG87d2lkdGg6MTAwJX0uY29udGVudC1hcmVhOmFmdGVye2NvbnRlbnQ6XFxcIlxcXFwwMGEwXFxcIjtkaXNwbGF5OmJsb2NrO2hlaWdodDowO3Zpc2liaWxpdHk6aGlkZGVufS5jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9Ym9keS5sb2FkaW5ney13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZjthbmltYXRpb24tbmFtZTpmOy13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIsLjMsLjI1LC45KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMiwuMywuMjUsLjkpfSNtYWluLmZseVVwLGJvZHkuaXMtbG9hZGVkey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZTthbmltYXRpb24tbmFtZTplfSNtYWluLmZseVVwLC5hbmltLGJvZHkuaXMtbG9hZGVkey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi41NXM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RoOy13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIsLjMsLjI1LC45KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMiwuMywuMjUsLjkpfS5hbmltLmluZmluaXRley13ZWJraXQtYW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZTthbmltYXRpb24taXRlcmF0aW9uLWNvdW50OmluZmluaXRlfS5hbmltLmhpbmdley13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOjFzO2FuaW1hdGlvbi1kdXJhdGlvbjoxc31ALXdlYmtpdC1rZXlmcmFtZXMgYXswJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIGF7MCV7b3BhY2l0eTowfXRve29wYWNpdHk6MX19LmZhZGVJbnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmE7YW5pbWF0aW9uLW5hbWU6YX0uZmFkZUluRG93bnstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmI7YW5pbWF0aW9uLW5hbWU6Yjstd2Via2l0LWFuaW1hdGlvbi1kZWxheTouNXM7YW5pbWF0aW9uLWRlbGF5Oi41c31ALXdlYmtpdC1rZXlmcmFtZXMgYnswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX19QGtleWZyYW1lcyBiezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xMnB4LDApfXRve29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX1ALXdlYmtpdC1rZXlmcmFtZXMgY3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZX19QGtleWZyYW1lcyBjezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgtMTJweCwwLDApfXRve29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpub25lO3RyYW5zZm9ybTpub25lfX0uZmFkZUluTGVmdHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmM7YW5pbWF0aW9uLW5hbWU6Y31ALXdlYmtpdC1rZXlmcmFtZXMgZHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgZHswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fS5mYWRlSW5SaWdodHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmQ7YW5pbWF0aW9uLW5hbWU6ZH1ALXdlYmtpdC1rZXlmcmFtZXMgZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fUBrZXlmcmFtZXMgZXswJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmV9fS5mYWRlSW5VcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmU7YW5pbWF0aW9uLW5hbWU6ZX1ALXdlYmtpdC1rZXlmcmFtZXMgZnswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGZ7MCV7b3BhY2l0eToxfXRve29wYWNpdHk6MH19LmZhZGVPdXR7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpmO2FuaW1hdGlvbi1uYW1lOmZ9QC13ZWJraXQta2V5ZnJhbWVzIGd7MCV7b3BhY2l0eToxfXRve29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLDEycHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTJweCwwKTtkaXNwbGF5Om5vbmV9fUBrZXlmcmFtZXMgZ3swJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwxMnB4LDApO2Rpc3BsYXk6bm9uZX19LmZhZGVPdXREb3duey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6ZzthbmltYXRpb24tbmFtZTpnfUAtd2Via2l0LWtleWZyYW1lcyBoezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX19QGtleWZyYW1lcyBoezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoLTEycHgsMCwwKX19LmZhZGVPdXRMZWZ0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6aDthbmltYXRpb24tbmFtZTpofUAtd2Via2l0LWtleWZyYW1lcyBpezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgxMnB4LDAsMCl9fUBrZXlmcmFtZXMgaXswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDEycHgsMCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMTJweCwwLDApfX0uZmFkZU91dFJpZ2h0ey13ZWJraXQtYW5pbWF0aW9uLW5hbWU6aTthbmltYXRpb24tbmFtZTppfUAtd2Via2l0LWtleWZyYW1lcyBqezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX19QGtleWZyYW1lcyBqezAle29wYWNpdHk6MX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTJweCwwKX19LmZhZGVPdXRVcHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOmo7YW5pbWF0aW9uLW5hbWU6an1ALXdlYmtpdC1rZXlmcmFtZXMga3swJXtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjk4NzUpO3RyYW5zZm9ybTpzY2FsZSguOTg3NSk7LXdlYmtpdC1maWx0ZXI6Ymx1cig0cHgpO2ZpbHRlcjpibHVyKDRweCl9dG97b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOm5vbmU7dHJhbnNmb3JtOm5vbmU7LXdlYmtpdC1maWx0ZXI6bm9uZTtmaWx0ZXI6bm9uZX19QGtleWZyYW1lcyBrezAle29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTg3NSk7dHJhbnNmb3JtOnNjYWxlKC45ODc1KTstd2Via2l0LWZpbHRlcjpibHVyKDRweCk7ZmlsdGVyOmJsdXIoNHB4KX10b3tvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2Zvcm06bm9uZTt0cmFuc2Zvcm06bm9uZTstd2Via2l0LWZpbHRlcjpub25lO2ZpbHRlcjpub25lfX0uZmFkZUluU2NhbGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTprO2FuaW1hdGlvbi1uYW1lOmt9QC13ZWJraXQta2V5ZnJhbWVzIGx7MCV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpO3RyYW5zZm9ybTpzY2FsZSgxKTstd2Via2l0LWZpbHRlcjpub25lO2ZpbHRlcjpub25lfXRve29wYWNpdHk6MDstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSguOTg3NSk7dHJhbnNmb3JtOnNjYWxlKC45ODc1KTstd2Via2l0LWZpbHRlcjpibHVyKDRweCk7ZmlsdGVyOmJsdXIoNHB4KX19QGtleWZyYW1lcyBsezAle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7LXdlYmtpdC1maWx0ZXI6bm9uZTtmaWx0ZXI6bm9uZX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoLjk4NzUpO3RyYW5zZm9ybTpzY2FsZSguOTg3NSk7LXdlYmtpdC1maWx0ZXI6Ymx1cig0cHgpO2ZpbHRlcjpibHVyKDRweCl9fS5mYWRlT3V0U2NhbGV7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpsO2FuaW1hdGlvbi1uYW1lOmx9LnByZWxvYWRlcntwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjk1KTt6LWluZGV4OjE5OTk7dGV4dC1hbGlnbjpjZW50ZXJ9LnByZWxvYWRlciAuc3Bpbm5lcnt3aWR0aDozMDBweDtoZWlnaHQ6MzAwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7bWFyZ2luOmF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LnByZWxvYWRlciAuc3Bpbm5lciAuc3Bpbm5lci1sb2dve3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LnByZWxvYWRlciAuc3Bpbm5lciAuc3Bpbm5lci1sb2dvIGltZ3t3aWR0aDoxMDAlfS5hbmltYXRlZHstd2Via2l0LWFuaW1hdGlvbi1kdXJhdGlvbjoyczthbmltYXRpb24tZHVyYXRpb246MnM7LXdlYmtpdC1hbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7YW5pbWF0aW9uLWZpbGwtbW9kZTpib3RofS5hbmltYXRlZC5pbmZpbml0ZXstd2Via2l0LWFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6aW5maW5pdGU7YW5pbWF0aW9uLWl0ZXJhdGlvbi1jb3VudDppbmZpbml0ZX0uYW5pbWF0ZWQuYm91bmNlSW4sLmFuaW1hdGVkLmJvdW5jZU91dCwuYW5pbWF0ZWQuZmxpcE91dFgsLmFuaW1hdGVkLmZsaXBPdXRZey13ZWJraXQtYW5pbWF0aW9uLWR1cmF0aW9uOi43NXM7YW5pbWF0aW9uLWR1cmF0aW9uOi43NXN9QC13ZWJraXQta2V5ZnJhbWVzIG17MCUsMjAlLDUzJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX00MCUsNDMley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zMHB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zMHB4LDApfTcwJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTVweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMTVweCwwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtNHB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC00cHgsMCl9fUBrZXlmcmFtZXMgbXswJSwyMCUsNTMlLDgwJSx0b3std2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVaKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVaKDApfTQwJSw0MyV7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTMwcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTMwcHgsMCl9NzAley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xNXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xNXB4LDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC00cHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTRweCwwKX19QC13ZWJraXQta2V5ZnJhbWVzIG57MCUsMjAlLDUzJSw4MCUsdG97LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC4yMTUsLjYxLC4zNTUsMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWigwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWigwKX00MCUsNDMley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC01cHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTVweCwwKX03MCV7LXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7YW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTNweCwwKTt0cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtM3B4LDApfTkwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTFweCwwKX19QGtleWZyYW1lcyBuezAlLDIwJSw1MyUsODAlLHRvey13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjIxNSwuNjEsLjM1NSwxKTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguMjE1LC42MSwuMzU1LDEpOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9NDAlLDQzJXstd2Via2l0LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTthbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOmN1YmljLWJlemllciguNzU1LC4wNSwuODU1LC4wNik7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtNXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC01cHgsMCl9NzAley13ZWJraXQtYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjpjdWJpYy1iZXppZXIoLjc1NSwuMDUsLjg1NSwuMDYpO2FuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246Y3ViaWMtYmV6aWVyKC43NTUsLjA1LC44NTUsLjA2KTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0zcHgsMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZTNkKDAsLTNweCwwKX05MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlM2QoMCwtMXB4LDApO3RyYW5zZm9ybTp0cmFuc2xhdGUzZCgwLC0xcHgsMCl9fS5ib3VuY2V7LXdlYmtpdC1hbmltYXRpb24tbmFtZTptO2FuaW1hdGlvbi1uYW1lOm07LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tOy13ZWJraXQtYW5pbWF0aW9uLWRlbGF5OjNzO2FuaW1hdGlvbi1kZWxheTozc31ALXdlYmtpdC1rZXlmcmFtZXMgb3syMCV7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguOSwuOSwuOSk7dHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpfTUwJSw1NSV7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoMS4xLDEuMSwxLjEpO3RyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKX10b3tvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUzZCguMywuMywuMyk7dHJhbnNmb3JtOnNjYWxlM2QoLjMsLjMsLjMpfX1Aa2V5ZnJhbWVzIG97MjAley13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjksLjksLjkpO3RyYW5zZm9ybTpzY2FsZTNkKC45LC45LC45KX01MCUsNTUle29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZTNkKDEuMSwxLjEsMS4xKTt0cmFuc2Zvcm06c2NhbGUzZCgxLjEsMS4xLDEuMSl9dG97b3BhY2l0eTowOy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlM2QoLjMsLjMsLjMpO3RyYW5zZm9ybTpzY2FsZTNkKC4zLC4zLC4zKX19LmJvdW5jZU91dHstd2Via2l0LWFuaW1hdGlvbi1uYW1lOm87YW5pbWF0aW9uLW5hbWU6b31hcnRpY2xle3BhZGRpbmctdG9wOjEyMHB4fS5ob21lIGFydGljbGV7cGFkZGluZy10b3A6MH1zZWN0aW9ue3BhZGRpbmc6NHJlbSAwfXNlY3Rpb24uaGVhZGVyLXB1c2h7cGFkZGluZy10b3A6MTYwcHh9Lm91dGVyLWNvbnRhaW5lcnt3aWR0aDo4MCU7bWFyZ2luOjAgYXV0bzttYXgtd2lkdGg6MTIwMHB4O3BhZGRpbmc6NHJlbSAwfS5pbm5lci1jb250YWluZXItYntkaXNwbGF5OmJsb2NrfS5pbm5lci1jb250YWluZXItZntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0uaW5uZXItY29udGFpbmVyLWY+LmNvbnRlbnR7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfS5zbWFsbHttYXgtd2lkdGg6NjAwcHh9Lm1lZCwuc21hbGx7bWFyZ2luOjAgYXV0b30ubWVke21heC13aWR0aDo4MDBweH0ubGd7bWF4LXdpZHRoOjEwMDBweDttYXJnaW46MCBhdXRvfS5jZW50ZXJlZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5jZW50ZXJlZCwuc3BhY2Vkey1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zcGFjZWR7LW1zLWZsZXgtcGFjazpqdXN0aWZ5Oy13ZWJraXQtYm94LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0ubnB0e3BhZGRpbmctdG9wOjAhaW1wb3J0YW50fS5ucHtwYWRkaW5nOjAhaW1wb3J0YW50fS5ucGJ7cGFkZGluZy1ib3R0b206MCFpbXBvcnRhbnR9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7YXJ0aWNsZXtwYWRkaW5nLXRvcDo2MHB4fXNlY3Rpb24uaGVhZGVyLXB1c2h7cGFkZGluZy10b3A6MTAwcHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NzY3cHgpe3NlY3Rpb257cGFkZGluZzo2cmVtIDB9Lm91dGVyLWNvbnRhaW5lcnt3aWR0aDo5MCV9fS5zY3JlZW4tcmVhZGVyLXRleHR7Y2xpcDpyZWN0KDFweCwxcHgsMXB4LDFweCk7cG9zaXRpb246YWJzb2x1dGUhaW1wb3J0YW50O2hlaWdodDoxcHg7d2lkdGg6MXB4O292ZXJmbG93OmhpZGRlbn0uc2NyZWVuLXJlYWRlci10ZXh0OmZvY3Vze2JhY2tncm91bmQtY29sb3I6I2ZmZjtib3JkZXItcmFkaXVzOjNweDstd2Via2l0LWJveC1zaGFkb3c6MCAwIDJweCAycHggcmdiYSgwLDAsMCwuNik7Ym94LXNoYWRvdzowIDAgMnB4IDJweCByZ2JhKDAsMCwwLC42KTtjbGlwOmF1dG8haW1wb3J0YW50O2NvbG9yOmdyZWVuO2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjguNzVweDtmb250LXNpemU6Ljg3NXJlbTtmb250LXdlaWdodDo3MDA7aGVpZ2h0OmF1dG87bGVmdDo1cHg7bGluZS1oZWlnaHQ6bm9ybWFsO3BhZGRpbmc6MTVweCAyM3B4IDE0cHg7dGV4dC1kZWNvcmF0aW9uOm5vbmU7dG9wOjVweDt3aWR0aDphdXRvO3otaW5kZXg6MTAwMDAwfSNjb250ZW50W3RhYmluZGV4PVxcXCItMVxcXCJdOmZvY3Vze291dGxpbmU6MH0udG9wLWJhcntiYWNrZ3JvdW5kOmdyYXk7aGVpZ2h0OjQ2cHg7ei1pbmRleDoxMH0udG9wLWJhciAudG9wLWJhci1vdXRlcnt3aWR0aDoxMDAlO2hlaWdodDo0NnB4O2JhY2tncm91bmQ6Izk3OTI4YTtwYWRkaW5nOjAgMzBweDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS50b3AtYmFyIC50b3AtYmFyLW91dGVyLC50b3AtYmFyIC50b3AtbWVudXtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS50b3AtYmFyIC50b3AtbWVudXtoZWlnaHQ6MTAwJX0udG9wLWJhciAudG9wLW1lbnUgYXtwYWRkaW5nOjIwcHg7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtO2xldHRlci1zcGFjaW5nOi4xNXJlbTtjb2xvcjojZmZmO2ZvbnQtd2VpZ2h0OjcwMH0udG9wLWJhciAudG9wLW1lbnUgYTpsYXN0LW9mLXR5cGV7cGFkZGluZy1yaWdodDowfSNtYXN0aGVhZHtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMjBweDstd2Via2l0LWJveC1zaGFkb3c6bm9uZTtib3gtc2hhZG93Om5vbmU7ei1pbmRleDoxMDt0b3A6NDZweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7d2lsbC1jaGFuZ2U6aGVpZ2h0LGJhY2tncm91bmQtY29sb3I7LXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OmhlaWdodCxiYWNrZ3JvdW5kLWNvbG9yO3RyYW5zaXRpb24tcHJvcGVydHk6aGVpZ2h0LGJhY2tncm91bmQtY29sb3I7LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOi4yNXM7dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfSNtYXN0aGVhZDpiZWZvcmV7Y29udGVudDpcXFwiZGVza3RvcFxcXCI7ZGlzcGxheTpub25lfSNtYXN0aGVhZDphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtoZWlnaHQ6MXB4O2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMTUpO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMXB4fSNtYXN0aGVhZCAuaGVhZGVyLW91dGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7cGFkZGluZzowIDMwcHh9I21hc3RoZWFkIC5uYXZSb290e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH0jbWFzdGhlYWQgLm5hdlJvb3RfbG9nb3t3aWR0aDo4MHB4O2hlaWdodDo5MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7bWFyZ2luOjE1cHggMH0jbWFzdGhlYWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1ub3QtZml4ZWR7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9sb2dvIC5sb2dvLWlzLWZpeGVke2Rpc3BsYXk6bm9uZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51e2hlaWdodDoxMDAlO21hcmdpbi1sZWZ0OjMwcHg7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IHVse2hlaWdodDoxMDAlfSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IGxpe2hlaWdodDoxMDAlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3BhZGRpbmc6MCAzMHB4fSNtYXN0aGVhZCAubmF2Um9vdF9tZW51IGF7bGluZS1oZWlnaHQ6MTIwcHg7aGVpZ2h0OjEyMHB4O2ZvbnQtc2l6ZToxLjhyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7d2lsbC1jaGFuZ2U6Y29sb3IsbGluZS1oZWlnaHQsaGVpZ2h0Oy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTpjb2xvcixsaW5lLWhlaWdodCxoZWlnaHQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTpjb2xvcixsaW5lLWhlaWdodCxoZWlnaHQ7LXdlYmtpdC10cmFuc2l0aW9uLWR1cmF0aW9uOi4yNXM7dHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzfSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6MTAwJX0jbWFzdGhlYWQgLm5hdlJvb3RfZmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9ue2JvcmRlci1yYWRpdXM6M3B4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6Izk3M2IxNTtjb2xvcjojZmZmO292ZXJmbG93OmhpZGRlbjtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O3BhZGRpbmc6MCAxNXB4O2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToxLjZyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtfSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YmVmb3Jle21hcmdpbjphdXRvO2NvbnRlbnQ6YXR0cihkYXRhLWhvdmVyKTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtvcGFjaXR5OjA7Y29sb3I6I2ZmZn0jbWFzdGhlYWQgLm5hdlJvb3RfZmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7bGVmdDowO2hlaWdodDoxMDAlO3dpZHRoOjEwMCU7YmFja2dyb3VuZDojYzQ0YzFifSNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9I21hc3RoZWFkIC5uYXZSb290X2ZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlcjphZnRlcnstd2Via2l0LWFuaW1hdGlvbjpyIC40czthbmltYXRpb246ciAuNHN9I21hc3RoZWFkIC5uYXZSb290X2ZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlciBzcGFue29wYWNpdHk6MH0jbWFzdGhlYWQgLm5hdlJvb3RfbW9iaWxle2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQgI2hhcmRfY2lkZXIsI21hc3RoZWFkICNsaW5lLCNtYXN0aGVhZCAjcm9ja3tmaWxsOiMwMDB9I21hc3RoZWFkICNib2xke2ZpbGw6I2VhYTgyMX0uY2lkZXJfd3JhcHBlcl9pbm5lcnt3aWR0aDoxMDB2dztwYWRkaW5nOjIwcHggNjBweDtoZWlnaHQ6MTYwcHh9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGl7aGVpZ2h0OjEyMHB4fS5jaWRlcl93cmFwcGVyX2lubmVyIGxpIGF7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47cG9zaXRpb246cmVsYXRpdmV9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGkgLmVtYmxlbXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTIwcHg7cmlnaHQ6MjVweDtmb250LXNpemU6MS4xcmVtO3dpZHRoOjUwcHg7aGVpZ2h0OjUwcHh9LmNpZGVyX3dyYXBwZXJfaW5uZXIgbGkgLmVtYmxlbSBzdmd7ZmlsbDojMTkzNTNifS5jaWRlcl93cmFwcGVyX2lubmVyIC5jaWRlcl90aHVtYm5haWx7aGVpZ2h0OjcwJX0uY2lkZXJfd3JhcHBlcl9pbm5lciAuY2lkZXJfdGh1bWJuYWlsIGltZ3ttYXgtaGVpZ2h0OjEwMCU7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7LXdlYmtpdC10cmFuc2Zvcm06c2NhbGUoMSk7dHJhbnNmb3JtOnNjYWxlKDEpfS5jaWRlcl93cmFwcGVyX2lubmVyIGxpOmhvdmVyIGltZ3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjIpO3RyYW5zZm9ybTpzY2FsZSgxLjIpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjJzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4ycyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMnMgZWFzZS1pbi1vdXR9LnN1Yi1uYXYtcm9vdHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTIwcHg7bGVmdDowO3JpZ2h0OjA7ZGlzcGxheTpibG9jaztvcGFjaXR5OjA7cG9pbnRlci1ldmVudHM6bm9uZTt3aWxsLWNoYW5nZTpvcGFjaXR5Oy13ZWJraXQtdHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4yNXMgZWFzZS1pbi1vdXR9LnN1Yi1uYXYtcm9vdCBhe2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7dGV4dC1hbGlnbjpjZW50ZXI7Zm9udC13ZWlnaHQ6NTAwO2NvbG9yOiM3ZDc3NmQ7Zm9udC1zaXplOjEuNHJlbTtkaXNwbGF5OmJsb2NrO2xldHRlci1zcGFjaW5nOi4xNXJlbX0uc3ViLW5hdi1yb290ICNhYm91dE1lbnUgYSwuc3ViLW5hdi1yb290ICN2aXNpdE1lbnUgYXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjpjb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxjb2xvciAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMsY29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfS5zdWItbmF2LXJvb3QgI2Fib3V0TWVudSBhOmhvdmVyLC5zdWItbmF2LXJvb3QgI3Zpc2l0TWVudSBhOmhvdmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO2NvbG9yOiM1ZTU5NTJ9LmRyb3Bkb3duLWJne3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07YmFja2dyb3VuZDojZmZmO292ZXJmbG93OmhpZGRlbjt3aWR0aDozODBweDtoZWlnaHQ6NTAwcHg7LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOjAgMDt0cmFuc2Zvcm0tb3JpZ2luOjAgMDstd2Via2l0LWJveC1zaGFkb3c6MCA1cHggMTVweCByZ2JhKDAsMCwwLC4xKTtib3gtc2hhZG93OjAgNXB4IDE1cHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfS5ob21lICNtYXN0aGVhZCwuaG9tZSAjbWFzdGhlYWQ6YWZ0ZXJ7YmFja2dyb3VuZDowIDB9LmhvbWUgI21hc3RoZWFkIC5uYXZSb290X21lbnUgYXtjb2xvcjojZmZmfS5ob21lICNtYXN0aGVhZCAjYm9sZCwuaG9tZSAjbWFzdGhlYWQgI2hhcmRfY2lkZXIsLmhvbWUgI21hc3RoZWFkICNsaW5le2ZpbGw6I2ZmZn0uaG9tZSAjbWFzdGhlYWQgI3JvY2t7ZmlsbDojZWVhODIxfSNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlLC5ob21lICNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxle2JhY2tncm91bmQ6I2ZmZn0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZTphZnRlciwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZTphZnRlcntiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjE1KX0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjaGFyZF9jaWRlciwjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjbGluZSwjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjcm9jaywuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjaGFyZF9jaWRlciwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjbGluZSwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAjcm9ja3tmaWxsOiMwMDB9I21hc3RoZWFkLmlzLWRyb3Bkb3duLXZpc2libGUgI2JvbGQsLmhvbWUgI21hc3RoZWFkLmlzLWRyb3Bkb3duLXZpc2libGUgI2JvbGR7ZmlsbDojZWVhODIxfSNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlIC5uYXZSb290X21lbnUgYSwuaG9tZSAjbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAubmF2Um9vdF9tZW51IGF7Y29sb3I6IzdkNzc2ZH0jbWFzdGhlYWQuaXMtZHJvcGRvd24tdmlzaWJsZSAuc3ViLW5hdi1yb290LC5ob21lICNtYXN0aGVhZC5pcy1kcm9wZG93bi12aXNpYmxlIC5zdWItbmF2LXJvb3R7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmF1dG99LnN1Yi1uYXYtd3JhcHBlcntvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpbGwtY2hhbmdlOnRyYW5zZm9ybSx3aWR0aCxoZWlnaHQ7LXdlYmtpdC10cmFuc2l0aW9uLXByb3BlcnR5OndpZHRoLGhlaWdodCwtd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5OndpZHRoLGhlaWdodCwtd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5OnRyYW5zZm9ybSx3aWR0aCxoZWlnaHQ7dHJhbnNpdGlvbi1wcm9wZXJ0eTp0cmFuc2Zvcm0sd2lkdGgsaGVpZ2h0LC13ZWJraXQtdHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjouMjVzO3RyYW5zaXRpb24tZHVyYXRpb246LjI1c30uZHJvcGRvd24tY29udGVudHtvcGFjaXR5OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpbGwtY2hhbmdlOm9wYWNpdHk7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjE1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOm9wYWNpdHkgLjE1cyBlYXNlLWluLW91dH0uZHJvcGRvd24tY29udGVudC5nby1sZWZ0ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTE1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMTUwcHgpO29wYWNpdHk6MH0uZHJvcGRvd24tY29udGVudC5nby1yaWdodHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDE1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgxNTBweCk7b3BhY2l0eTowfS5kcm9wZG93bi1jb250ZW50LmlzLWFjdGl2ZXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApO29wYWNpdHk6MTt6LWluZGV4OjUwMH0uc3ViLW1lbnV7bWFyZ2luOjEwcHggMH0uc3ViLW1lbnUgbGl7cGFkZGluZzoxMHB4IDMwcHh9I21hc3RoZWFkLmlzLWZpeGVke3Bvc2l0aW9uOmZpeGVkO3RvcDowO2JhY2tncm91bmQtY29sb3I6I2ZmZiFpbXBvcnRhbnQ7aGVpZ2h0OjcwcHg7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cyxoZWlnaHQgLjI1czt0cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cyxoZWlnaHQgLjI1czstd2Via2l0LWJveC1zaGFkb3c6MCAwIDVweCAwIHJnYmEoMCwwLDAsLjE1KTtib3gtc2hhZG93OjAgMCA1cHggMCByZ2JhKDAsMCwwLC4xNSl9I21hc3RoZWFkLmlzLWZpeGVkIC5uYXZSb290X2xvZ297aGVpZ2h0OjQwcHh9I21hc3RoZWFkLmlzLWZpeGVkIC5uYXZSb290X2xvZ28gLmxvZ28taXMtbm90LWZpeGVke2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1maXhlZHtkaXNwbGF5OmJsb2NrfSNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9tZW51IGF7aGVpZ2h0OjcwcHg7bGluZS1oZWlnaHQ6NzBweDtjb2xvcjojN2Q3NzZkfSNtYXN0aGVhZC5pcy1maXhlZCAuc3ViLW5hdi1yb290e3RvcDo3MHB4fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6OTAwcHgpey50b3AtYmFye2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQsI21hc3RoZWFkLmlzLWZpeGVke3RvcDowO2hlaWdodDo2MHB4O3Bvc2l0aW9uOmZpeGVkO2JhY2tncm91bmQ6I2ZmZn0jbWFzdGhlYWQuaXMtZml4ZWQ6YmVmb3JlLCNtYXN0aGVhZDpiZWZvcmV7Y29udGVudDpcXFwibW9iaWxlXFxcIn0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfZmluZGVyLCNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9tZW51LCNtYXN0aGVhZC5pcy1maXhlZCAuc3ViLW5hdi1yb290LCNtYXN0aGVhZCAubmF2Um9vdF9maW5kZXIsI21hc3RoZWFkIC5uYXZSb290X21lbnUsI21hc3RoZWFkIC5zdWItbmF2LXJvb3R7ZGlzcGxheTpub25lfSNtYXN0aGVhZC5pcy1maXhlZCAubmF2Um9vdF9sb2dvLCNtYXN0aGVhZCAubmF2Um9vdF9sb2dve3dpZHRoOjEwMHB4O2hlaWdodDo0MHB4O21hcmdpbjoxMHB4IDA7ei1pbmRleDo1MH0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1ub3QtZml4ZWQsI21hc3RoZWFkIC5uYXZSb290X2xvZ28gLmxvZ28taXMtbm90LWZpeGVke2Rpc3BsYXk6bm9uZX0jbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbG9nbyAubG9nby1pcy1maXhlZCwjbWFzdGhlYWQuaXMtZml4ZWQgLm5hdlJvb3RfbW9iaWxlLCNtYXN0aGVhZCAubmF2Um9vdF9sb2dvIC5sb2dvLWlzLWZpeGVkLCNtYXN0aGVhZCAubmF2Um9vdF9tb2JpbGV7ZGlzcGxheTpibG9ja30jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV9vdXRlcl93cmFwLCNtYXN0aGVhZCAubW9iaWxlX291dGVyX3dyYXB7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZDojOTc5MjhhO3otaW5kZXg6MjA7cGFkZGluZzozMHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXgtaGVpZ2h0OjA7b3ZlcmZsb3c6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycyBlYXNlLWluLW91dH0jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV9vdXRlcl93cmFwLm1tZW51LWlzLXZpc2libGUsI21hc3RoZWFkIC5tb2JpbGVfb3V0ZXJfd3JhcC5tbWVudS1pcy12aXNpYmxle21heC1oZWlnaHQ6MTAwJTtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2l0aW9uOm1heC1oZWlnaHQgLjJzLG9wYWNpdHkgLjJzO3RyYW5zaXRpb246bWF4LWhlaWdodCAuMnMsb3BhY2l0eSAuMnN9I21hc3RoZWFkLmlzLWZpeGVkIHVsLm1vYmlsZS1tZW51LCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudXttYXJnaW4tYm90dG9tOjQwcHh9I21hc3RoZWFkLmlzLWZpeGVkIHVsLm1vYmlsZS1tZW51IGxpLCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudSBsaXtoZWlnaHQ6NTBweDtsaW5lLWhlaWdodDo1MHB4O3RleHQtYWxpZ246Y2VudGVyfSNtYXN0aGVhZC5pcy1maXhlZCB1bC5tb2JpbGUtbWVudSBsaSBhLCNtYXN0aGVhZCB1bC5tb2JpbGUtbWVudSBsaSBhe2NvbG9yOiNmZmY7Zm9udC1zaXplOjEuN3JlbX0jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV90cmlnZ2VyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXJ7cG9zaXRpb246Zml4ZWQ7dG9wOjE1cHg7cmlnaHQ6MzBweDt3aWR0aDozMHB4O2hlaWdodDozMHB4O2Rpc3BsYXk6YmxvY2s7ei1pbmRleDo0MDA7Y3Vyc29yOnBvaW50ZXJ9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlciBzcGFuLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDozMHB4O2hlaWdodDozcHg7YmFja2dyb3VuZC1jb2xvcjojOTc5MjhhO3RvcDo1MCU7bWFyZ2luLXRvcDotMXB4O2JvcmRlci1yYWRpdXM6MXB4O2Rpc3BsYXk6YmxvY2s7d2lsbC1jaGFuZ2U6YmFja2dyb3VuZC1jb2xvcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3M7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIC4zc30jbWFzdGhlYWQuaXMtZml4ZWQgLm1vYmlsZV90cmlnZ2VyIHNwYW46YmVmb3JlLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmV7dG9wOi04cHh9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlciBzcGFuOmFmdGVyLCNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmUsI21hc3RoZWFkIC5tb2JpbGVfdHJpZ2dlciBzcGFuOmFmdGVyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIgc3BhbjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTtiYWNrZ3JvdW5kLWNvbG9yOiM5NzkyOGE7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXItcmFkaXVzOjFweDtsZWZ0OjA7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMCk7dHJhbnNmb3JtOnJvdGF0ZSgwKTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYmFja2dyb3VuZC1jb2xvcjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zcyxiYWNrZ3JvdW5kLWNvbG9yIC4zczt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuM3MsYmFja2dyb3VuZC1jb2xvciAuM3MsLXdlYmtpdC10cmFuc2Zvcm0gLjNzfSNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIgc3BhbjphZnRlciwjbWFzdGhlYWQgLm1vYmlsZV90cmlnZ2VyIHNwYW46YWZ0ZXJ7Ym90dG9tOi04cHh9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW4sI21hc3RoZWFkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW57YmFja2dyb3VuZDowIDB9I21hc3RoZWFkLmlzLWZpeGVkIC5tb2JpbGVfdHJpZ2dlci5tbWVudS1pcy1vcGVuIHNwYW46YmVmb3JlLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmJlZm9yZXt0b3A6MDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDEzNWRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxMzVkZWcpfSNtYXN0aGVhZC5pcy1maXhlZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmFmdGVyLCNtYXN0aGVhZCAubW9iaWxlX3RyaWdnZXIubW1lbnUtaXMtb3BlbiBzcGFuOmFmdGVye2JvdHRvbTowO2JhY2tncm91bmQtY29sb3I6I2ZmZjstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMjI1ZGVnKTt0cmFuc2Zvcm06cm90YXRlKDIyNWRlZyl9fSNsb2FkZXJ7YmFja2dyb3VuZDojZDRhNzRkO3Bvc2l0aW9uOmZpeGVkO3RvcDowO2hlaWdodDo0cHg7bGVmdDowO3dpZHRoOjA7ei1pbmRleDoyMDA7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMiwuMywuMjUsLjkpIDBtczt0cmFuc2l0aW9uOmFsbCAuMjVzIGN1YmljLWJlemllciguMiwuMywuMjUsLjkpIDBtc30ud29vZHtiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9icl9wcmVmb290ZXJfYmFja2dyb3VuZC5qcGcpO2JvcmRlci10b3A6MTBweCBzb2xpZCAjZTVlNGUyfS53b29kIGltZ3t3aWR0aDo1MCU7cGFkZGluZzo0MHB4IDA7bWFyZ2luOjAgYXV0b30ucHJlZm9vdGVyLW1lbnV7ZGlzcGxheTpub25lfS5mb290ZXItb3V0ZXJ7cGFkZGluZzozMHB4O3dpZHRoOjEwMCU7bWF4LXdpZHRoOjE0MDBweDttYXJnaW46MCBhdXRvfS5mb290ZXItYm90dG9tIC5mb290ZXItb3V0ZXJ7cGFkZGluZzoxNXB4IDMwcHh9LmZvb3Rlci10b3B7YmFja2dyb3VuZDojOTc5MjhhfS5mb290ZXItYm90dG9te2JhY2tncm91bmQ6IzhiODU3ZDtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyfS5mb290ZXItYm90dG9tIGEuZm9vdGVyLWxpbmssLmZvb3Rlci1ib3R0b20gcHttYXJnaW46MDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2ZvbnQtc2l6ZToxLjJyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2xldHRlci1zcGFjaW5nOi4wNXJlbTtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC42KX0uZm9vdGVyLWJvdHRvbSBhLmZvb3Rlci1saW5re3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lO2ZvbnQtd2VpZ2h0OjQwMDt3aWxsLWNoYW5nZTpjb2xvcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjJzO3RyYW5zaXRpb246Y29sb3IgLjJzfS5mb290ZXItYm90dG9tIGEuZm9vdGVyLWxpbms6aG92ZXJ7Y29sb3I6I2U1ZTRlMn0uZm9vdGVyLXJvb3R7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5mb290ZXItcm9vdD5kaXZ7bWFyZ2luLXJpZ2h0OjRlbX0uZm9vdGVyLXJvb3Q+ZGl2Omxhc3Qtb2YtdHlwZXttYXJnaW4tcmlnaHQ6MH0uZm9vdGVyUm9vdF9sb2dvIGF7ZGlzcGxheTpibG9jazt3aWR0aDoxMjBweH0uZm9vdGVyUm9vdF9sb2dvICNib2xkLC5mb290ZXJSb290X2xvZ28gI2hhcmRfY2lkZXIsLmZvb3RlclJvb3RfbG9nbyAjbGluZSwuZm9vdGVyUm9vdF9sb2dvICNyb2Nre2ZpbGw6cmdiYSgyMjgsMjI3LDIyNiwuNil9LmZvb3RlclJvb3RfbmV3c2xldHRlcnttYXgtd2lkdGg6MzAwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246Y29sdW1uOy13ZWJraXQtYm94LW9yaWVudDp2ZXJ0aWNhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGg0e2NvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjYpO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luOjB9LmZvb3RlclJvb3RfbmV3c2xldHRlciBwe21hcmdpbjowO2ZvbnQtc2l6ZToxLjNyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC40KX0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGZvcm17bWFyZ2luLXRvcDoyMHB4O3dpZHRoOjEwMCU7Ym9yZGVyOjJweCBzb2xpZCByZ2JhKDIyOCwyMjcsMjI2LC42KTtwb3NpdGlvbjpyZWxhdGl2ZX0uZm9vdGVyUm9vdF9uZXdzbGV0dGVyIGlucHV0W3R5cGU9dGV4dF17YmFja2dyb3VuZDowIDA7Ym9yZGVyOjA7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7cGFkZGluZzoxMHB4IDVweDtib3JkZXItcmFkaXVzOjA7d2lkdGg6MTAwJTtsaW5lLWhlaWdodDoyMHB4fS5mb290ZXJSb290X25ld3NsZXR0ZXIgLnN1Ym1pdF9idXR0b257cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMjI4LDIyNywyMjYsLjYpfS5mb290ZXJSb290X25ld3NsZXR0ZXIgLnN1Ym1pdF9idXR0b246YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoxMHB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ljb25zL3Jhdy9hcnJvd2FsdC5zdmcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTt0b3A6NTAlO2xlZnQ6NTAlO21hcmdpbi10b3A6LTVweDttYXJnaW4tbGVmdDotMTBweDt6LWluZGV4OjU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LmZvb3RlclJvb3RfbmV3c2xldHRlciAuc3VibWl0X2J1dHRvbiBpbnB1dFt0eXBlPXN1Ym1pdF17Ym9yZGVyOjA7YmFja2dyb3VuZDowIDA7bWFyZ2luOjA7aGVpZ2h0OjEwMCU7d2lkdGg6NDBweDtmb250LXNpemU6MDtsaW5lLWhlaWdodDowO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MTJ9LmZvb3RlclJvb3RfbmV3c2xldHRlciAuc3VibWl0X2J1dHRvbjpob3ZlcjpiZWZvcmV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCl9LmZvb3RlclJvb3RfbWVudSBsaSBhe2ZvbnQtc2l6ZToxLjNyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtjb2xvcjpyZ2JhKDIyOCwyMjcsMjI2LC42KTtmb250LXdlaWdodDo2MDA7bGV0dGVyLXNwYWNpbmc6LjFyZW07ZGlzcGxheTppbmxpbmUtYmxvY2s7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246Y29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMsY29sb3IgLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLGNvbG9yIC4yNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjI1c30uZm9vdGVyUm9vdF9tZW51IGxpIGE6aG92ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCk7Y29sb3I6I2U1ZTRlMn0uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXJ7bWFyZ2luLXRvcDoyMHB4fS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbntib3JkZXItcmFkaXVzOjNweDtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiM5NzNiMTU7Y29sb3I6I2ZmZjtvdmVyZmxvdzpoaWRkZW47ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nOjAgMTVweDtmbG9hdDpyaWdodDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO2xldHRlci1zcGFjaW5nOi4xcmVtfS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpiZWZvcmV7bWFyZ2luOmF1dG87Y29udGVudDphdHRyKGRhdGEtaG92ZXIpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6MDtjb2xvcjojZmZmfS5mb290ZXJSb290X3ByaW1hcnkgLmZvb3Rlcl9jaWRlckZpbmRlciAuY2lkZXJfZmluZGVyX2J1dHRvbjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JhY2tncm91bmQ6I2M0NGMxYn0uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9LmZvb3RlclJvb3RfcHJpbWFyeSAuZm9vdGVyX2NpZGVyRmluZGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyOmFmdGVyey13ZWJraXQtYW5pbWF0aW9uOnIgLjRzO2FuaW1hdGlvbjpyIC40c30uZm9vdGVyUm9vdF9wcmltYXJ5IC5mb290ZXJfY2lkZXJGaW5kZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246aG92ZXIgc3BhbntvcGFjaXR5OjB9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7Zm9vdGVye2hlaWdodDozMDBweDtwb3NpdGlvbjpyZWxhdGl2ZTttYXJnaW4tdG9wOjYwcHh9LnByZWZvb3Rlci1tZW51e2hlaWdodDo2MHB4O3dpZHRoOjEwMCU7ZGlzcGxheTpibG9jazt6LWluZGV4OjM7cG9zaXRpb246cmVsYXRpdmV9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5e2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7aGVpZ2h0OjEwMCV9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5IGxpey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTtoZWlnaHQ6NjBweDtsaW5lLWhlaWdodDo2MHB4O3RleHQtYWxpZ246Y2VudGVyfS5wcmVmb290ZXItbWVudSAuZm9vdGVyLXN0aWNreSBsaSBhe2NvbG9yOiNmZmZ9LnByZWZvb3Rlci1tZW51IC5mb290ZXItc3RpY2t5IGxpOmZpcnN0LWNoaWxke2JhY2tncm91bmQ6I2FkNDQxOH0ucHJlZm9vdGVyLW1lbnUgLmZvb3Rlci1zdGlja3kgbGk6bnRoLWNoaWxkKDIpe2JhY2tncm91bmQ6Izk3M2IxNX0ucHJlZm9vdGVyLW1lbnUgLmZvb3Rlci1zdGlja3kgbGk6bnRoLWNoaWxkKDMpe2JhY2tncm91bmQ6IzgxMzIxMn0ucHJlZm9vdGVyLW1lbnUucGZtLWlzLWZpeGVke3Bvc2l0aW9uOmZpeGVkO2JvdHRvbTowfS5wcmVmb290ZXItbWVudS5wZm0taXMtZmxvd3twb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTYwcHh9LmZvb3Rlci1yb290e2Rpc3BsYXk6YmxvY2t9LmZvb3RlclJvb3RfbG9nb3tmbG9hdDpyaWdodH0uZm9vdGVyUm9vdF9tZW51e2Rpc3BsYXk6bm9uZX0uZm9vdGVyUm9vdF9wcmltYXJ5e21hcmdpbi10b3A6NDBweH0uZm9vdGVyX2NpZGVyRmluZGVye2Rpc3BsYXk6bm9uZX19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo1ODBweCl7LmZvb3RlclJvb3RfbG9nb3tkaXNwbGF5Om5vbmV9LmZvb3Rlci1yb290IC5mb290ZXJSb290X25ld3NsZXR0ZXJ7bWF4LXdpZHRoOjQwMHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LmZvb3Rlci1yb290IC5mb290ZXJSb290X3ByaW1hcnl7bWFyZ2luLXRvcDo0MHB4fS5mb290ZXItcm9vdCAuZm9vdGVyUm9vdF9wcmltYXJ5IHVsLnNvY2lhbHt0ZXh0LWFsaWduOmNlbnRlcjtkaXNwbGF5OmJsb2NrfX0uaGVyb3tiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6I2E5YTZhMX0uaGVybyBpbWd7d2lkdGg6MTAwJX0uaGVybyAuaGVyby13cmFwcGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246NTAlOy13ZWJraXQtYW5pbWF0aW9uOnAgLjZzIGVhc2UtaW4tb3V0O2FuaW1hdGlvbjpwIC42cyBlYXNlLWluLW91dH0uaGVyby1taWxscy1yaXZlci1jaWRlcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvbWlsbHMtcml2ZXItaGVyby5qcGcpfS5oZXJvLW5lbGx5c2ZvcmQtY2lkZXJ5e2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L25lbGx5c2ZvcmQtaGVyby5qcGcpfS5oZXJvLWNhcnRlci1tb3VudGFpbntiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jYXJ0ZXItbW91bnRhaW4taGVyby5qcGcpfS5oZXJvLWNoaWxlcy1wZWFjaHtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jaGlsZXMtcGVhY2gtaGVyby5qcGcpfS5oZXJvLW5lbGx5c2ZvcmQtYmFycmVsLWJhcm57YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmFycmVsLWJhcm4tY29tcGxldGUuanBnKX0uaGVyby1jb3Jle2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L21ha2UtaXQtaGFwcGVuLTN4MS5qcGcpfS5oZXJvLWFib3V0e2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2Fib3V0LWhlcm8uanBnKX0uaGVyby1jaWRlcjEwMXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9jaWRlcjEwMS1oZXJvLmpwZyl9Lmhlcm8tZmluZGVye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2ZpbmRlci1oZXJvLmpwZyl9QC13ZWJraXQta2V5ZnJhbWVzIHB7MCV7b3BhY2l0eTowfTUwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX1Aa2V5ZnJhbWVzIHB7MCV7b3BhY2l0eTowfTUwJXtvcGFjaXR5OjB9dG97b3BhY2l0eToxfX0uaG9tZSAuaGVyb3twb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLWNvbG9yOiMwMDB9LmhvbWUgLmhlcm8td3JhcHBlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjUpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt6LWluZGV4OjI7b3ZlcmZsb3c6aGlkZGVufS5ob21lIC5oZXJvLWNvbnRlbnQgaW1ne3dpZHRoOjUwJTttYXgtd2lkdGg6NDgwcHh9LmhvbWUgI3ZpZHBhdXNle3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbToxMHB4O3JpZ2h0OjEwcHg7ZGlzcGxheTpub25lfXZpZGVvI2Jndmlke3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7ei1pbmRleDoxO3dpZHRoOmF1dG87aGVpZ2h0OjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgMXM7dHJhbnNpdGlvbjpvcGFjaXR5IDFzfXZpZGVvI2JnVmlkRnVsbHtwb3NpdGlvbjpmaXhlZDt0b3A6NTAlO2xlZnQ6NTAlO21pbi13aWR0aDoxMDAlO21pbi1oZWlnaHQ6MTAwJTt3aWR0aDphdXRvO2hlaWdodDphdXRvO3otaW5kZXg6LTEwMDstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKC01MCUpIHRyYW5zbGF0ZVkoLTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSkgdHJhbnNsYXRlWSgtNTAlKTtiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9wb3N0ZXIuanBnKSBuby1yZXBlYXQ7YmFja2dyb3VuZC1zaXplOmNvdmVyfS5zdG9wZmFkZXtvcGFjaXR5Oi41fS5oZXJvLWNvbnRlbnR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2JvdHRvbTowO3JpZ2h0OjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5oZXJvLWNvbnRlbnQgaDF7Zm9udC1zaXplOjkwcHg7dGV4dC1zaGFkb3c6MXB4IDFweCAyMHB4IHJnYmEoMCwwLDAsLjYpO2NvbG9yOiNmZmZ9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo4MDBweCl7dmlkZW8jYmd2aWR7ZGlzcGxheTpub25lfS5ob21lIC5oZXJve2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L3Bvc3Rlci1zbS5qcGcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTttYXJnaW4tdG9wOjYwcHh9Lmhlcm8tY29udGVudCBoMXtmb250LXNpemU6NjBweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo2MDBweCl7Lmhlcm8tY29udGVudCBoMXtmb250LXNpemU6MzhweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDoxNjAwcHgpey5oZXJvIGltZ3t3aWR0aDoxMDAlfX0uYWdlLWdhdGUtbG9nbyBpbWd7d2lkdGg6MTAwJTtoZWlnaHQ6YXV0bzttYXJnaW46MCBhdXRvO21heC13aWR0aDozMjBweH1oMi5hZ2UtZ2F0ZS1zdWJoZWFkaW5ne2NvbG9yOiM5NzkyOGE7bWFyZ2luLWJvdHRvbTowfXAuYWdlLWdhdGUtcmVtZW1iZXItd3JhcHBlcntkaXNwbGF5Om5vbmV9YnV0dG9uLmFnZS1nYXRlLXN1Ym1pdC1ubyxidXR0b24uYWdlLWdhdGUtc3VibWl0LXllc3tib3JkZXI6MDtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjVweCAyMHB4O21hcmdpbjoyMHB4IDEwcHggMDtmb250LWZhbWlseTp2aW55bCxzZXJpZjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC1zaXplOjEuNnJlbTtjb2xvcjojZmZmO291dGxpbmU6MDtiYWNrZ3JvdW5kOiM5NzNiMTV9dWwuYnJlYWRjcnVtYnN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH11bC5icmVhZGNydW1icyBsaSx1bC5icmVhZGNydW1icyBsaSBhe2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlfS5icmVhZGNydW1icy13cmFwcGVyIC5vdXRlci1jb250YWluZXJ7aGVpZ2h0OjEwMCV9LmJyZWFkY3J1bWJzLXdyYXBwZXIgdWwuYnJlYWRjcnVtYnN7aGVpZ2h0OjEwMCU7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXJ9LmF2X292ZXJsYXl7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7YmFja2dyb3VuZDojMmU4YjU3O3otaW5kZXg6MTAwMDB9LmF2X292ZXJsYXkjaGVsbG97ZGlzcGxheTpibG9ja30uYXZfb3ZlcmxheSNnb29kYnlle2Rpc3BsYXk6bm9uZX0uaG9tZS1pbnRyb3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpO3BhZGRpbmctYm90dG9tOjZyZW19LmhvbWUtaW50cm8gaDF7Y29sb3I6IzdlNzk3MDtsZXR0ZXItc3BhY2luZzouMXJlbTtmb250LXNpemU6NDhweH0uaG9tZS1pbnRybyAuZmxleC1ncmlke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTIwcHg7bWFyZ2luLXJpZ2h0Oi0yMHB4O2xpc3Qtc3R5bGU6bm9uZX0uaG9tZS1pbnRybyAuZmxleC1ncmlkPip7cGFkZGluZzoyMHB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsuaG9tZS1pbnRybyAuZmxleC1ncmlkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuaG9tZS1pbnRybyAuZmxleC1ncmlkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LmhvbWUtaW50cm8gLmZsZXgtZ3JpZD4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb257cG9zaXRpb246cmVsYXRpdmV9LmhvbWUtaW50cm8gLmZsZXgtZ3JpZCAuaWxsdXN0cmF0aW9uIGltZ3t3aWR0aDo4MCU7bWFyZ2luOjAgYXV0b30uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhe2ZvbnQtc2l6ZToycmVtO3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTYwcHg7bWFyZ2luOjAgYXV0bztmb250LWZhbWlseTp2aW55bCxzZXJpZjtjdXJzb3I6cG9pbnRlcjt3aWxsLWNoYW5nZTp0cmFuc2Zvcm07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LmhvbWUtaW50cm8gLmZsZXgtZ3JpZCAuaWxsdXN0cmF0aW9uIC5saW5rLW92ZXJsYXkgYSAudGV4dHtwb3NpdGlvbjpyZWxhdGl2ZTtjb2xvcjojZmZmO3otaW5kZXg6MjtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246Y2VudGVyfS5ob21lLWludHJvIC5mbGV4LWdyaWQgLmlsbHVzdHJhdGlvbiAubGluay1vdmVybGF5IGEgLmJhbm5lcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhIC5iYW5uZXIgc3Zne2ZpbGw6Izk3M2IxNTstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAuMjVzO3RyYW5zaXRpb246ZmlsbCAuMjVzfS5ob21lLWludHJvIC5mbGV4LWdyaWQgLmlsbHVzdHJhdGlvbiAubGluay1vdmVybGF5IGE6aG92ZXJ7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0uaG9tZS1pbnRybyAuZmxleC1ncmlkIC5pbGx1c3RyYXRpb24gLmxpbmstb3ZlcmxheSBhOmhvdmVyIC5iYW5uZXIgc3Zne2ZpbGw6IzgxMzIxMn0uaG9tZS1saW5ldXB7YmFja2dyb3VuZC1jb2xvcjojNWU1OTUyO2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dydW5nZS1iZy5zdmcpO3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtc2l6ZTpjb3Zlcn0uaG9tZS1saW5ldXA6YWZ0ZXIsLmhvbWUtbGluZXVwOmJlZm9yZXt3aWR0aDoxMDAlO2hlaWdodDoxMHB4O2JhY2tncm91bmQ6Izk3OTI4YTtjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6YmxvY2s7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3Qvd29vZC1iZy0wMS5zdmcpfS5ob21lLWxpbmV1cCAuaW5uZXItY29udGFpbmVyLWJ7cG9zaXRpb246cmVsYXRpdmV9LmhvbWUtbGluZXVwIC5pbm5lci1jb250YWluZXItYiBoM3tjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZTo0OHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46MDttYXJnaW4tYm90dG9tOjVweH0uaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTRlbTtyaWdodDowO21heC13aWR0aDozMDBweH0ubWlkZGxle2Rpc3BsYXk6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiNmZWYyZTY7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMi5zdmcpfS5taWRkbGUgLnRocmVlLWJsb2Nrc3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yNXB4O21hcmdpbi1yaWdodDotMjVweDtsaXN0LXN0eWxlOm5vbmV9Lm1pZGRsZSAudGhyZWUtYmxvY2tzPip7cGFkZGluZzoyNXB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsubWlkZGxlIC50aHJlZS1ibG9ja3M+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6Nzg2cHgpey5taWRkbGUgLnRocmVlLWJsb2Nrcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5taWRkbGUgLnRocmVlLWJsb2Nrcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjMzLjMzMzMzJTtmbGV4LWJhc2lzOjMzLjMzMzMzJTttYXgtd2lkdGg6MzMuMzMzMzMlfX0ubWlkZGxlIC50aHJlZS1ibG9ja3MgLmJsb2NrLWlubmVye2JhY2tncm91bmQ6I2ZmZjtoZWlnaHQ6MjAwcHg7Ym9yZGVyOjFweCBzb2xpZCAjZmZmOy1vLWJvcmRlci1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9yZGVySG9yaXpvbnRhbF93aGl0ZS5zdmcpIDI3IHJvdW5kIHJlcGVhdDtib3JkZXItaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvcmRlckhvcml6b250YWxfd2hpdGUuc3ZnKSAyNyBmaWxsIHJvdW5kIHJlcGVhdDtwb3NpdGlvbjpyZWxhdGl2ZX0ubWlkZGxlIC50aHJlZS1ibG9ja3MgLmJsb2NrLWlubmVyOmFmdGVye2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0b3A6MDtsZWZ0OjA7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO3otaW5kZXg6MjtkaXNwbGF5OmJsb2NrOy1vLWJvcmRlci1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9yZGVyVmVydGljYWxfd2hpdGUuc3ZnKSAyNyByb3VuZCByZXBlYXQ7Ym9yZGVyLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib3JkZXJWZXJ0aWNhbF93aGl0ZS5zdmcpIDI3IGZpbGwgcm91bmQgcmVwZWF0fS5mb3VuZGVyc3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9vdmVybGF5aW1hZ2UtdXBkYXRlZC5qcGcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtwYWRkaW5nOjRyZW0gMDtwb3NpdGlvbjpyZWxhdGl2ZTtiYWNrZ3JvdW5kLXBvc2l0aW9uOmJvdHRvbX0uZm91bmRlcnM6YmVmb3Jle3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6MDtyaWdodDowO2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dydW5nZS1iZzMuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlfS5mb3VuZGVyczphZnRlcnt3aWR0aDoxMDAlO2hlaWdodDoyMHB4O2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTEwcHg7ei1pbmRleDoxO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncmF5LXN0cm9rZS5zdmcpfS5mb3VuZGVycyAuY29udGVudC5lbWJsZW17LW1zLWZsZXg6MCAwIDMwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMzAlOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgtMzBkZWcpO3RyYW5zZm9ybTpyb3RhdGUoLTMwZGVnKX0uZm91bmRlcnMgLmNvbnRlbnQudGV4dHstbXMtZmxleDowIDAgNjAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA2MCU7bWFyZ2luLWxlZnQ6NDBweDttYXgtd2lkdGg6NjAwcHh9LmZvdW5kZXJzIC5jb250ZW50LnRleHQgaDN7Y29sb3I6I2ZmZjtsaW5lLWhlaWdodDoxLjg7Zm9udC1zaXplOjIuMnJlbTt0ZXh0LWFsaWduOmNlbnRlcn0uaW5zdGFncmFtLXdyYXBwZXJ7YmFja2dyb3VuZDpncmF5O3Bvc2l0aW9uOnJlbGF0aXZlfS5pbnN0YWdyYW0td3JhcHBlciAuaW5zdGEtb3ZlcmxheXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7cmlnaHQ6MDtiYWNrZ3JvdW5kOnJnYmEoMjEyLDE2Nyw3NywuMSl9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXJ7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOi0yNXB4O2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi0xMjVweDtoZWlnaHQ6NTBweDt3aWR0aDoyNTBweDt6LWluZGV4OjJ9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXIgLmluc3RhLWJhbm5lci1pbm5lcntiYWNrZ3JvdW5kOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iYW5uZXIuc3ZnKTtiYWNrZ3JvdW5kLXNpemU6Y29udGFpbjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7cG9zaXRpb246cmVsYXRpdmV9Lmluc3RhZ3JhbS13cmFwcGVyIC5pbnN0YS1iYW5uZXIgLmluc3RhLWJhbm5lci1pbm5lciBoNHtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjUwcHg7aGVpZ2h0OjUwcHg7Zm9udC1zaXplOjEuN3JlbTttYXJnaW46MH0jaW5zdGFmZWVkey1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7bGlzdC1zdHlsZTpub25lfSNpbnN0YWZlZWQ+KntwYWRkaW5nOjA7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9QG1lZGlhIChtaW4td2lkdGg6NTQwcHgpeyNpbnN0YWZlZWQ+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19QG1lZGlhIChtaW4td2lkdGg6Nzg2cHgpeyNpbnN0YWZlZWQ+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsjaW5zdGFmZWVkPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fSNpbnN0YWZlZWQgYXtvdmVyZmxvdzpoaWRkZW47cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcG9zaXRpb246Y2VudGVyfS5pbnN0YS1pbWFnZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MH0ub3JjaGFyZHtib3JkZXItdG9wOjEwcHggc29saWQgI2U1ZTRlMjtib3JkZXItYm90dG9tOjEwcHggc29saWQgI2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZX0ub3JjaGFyZCAucHJlZm9vdGVyLWNvbnRlbnR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5vcmNoYXJkIC5wcmVmb290ZXItY29udGVudCBpbWd7d2lkdGg6NTAlO21hcmdpbi10b3A6LTUlfS5vcmNoYXJkIGltZ3t3aWR0aDoxMDAlfS5wcmVmb290ZXJ7YmFja2dyb3VuZDojZTVlNGUyO3BhZGRpbmc6MDtwb3NpdGlvbjpyZWxhdGl2ZX0ucHJlZm9vdGVyIC5jb250ZW50e3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjkwMHB4KXsuaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXt3aWR0aDo1MCV9LmZvdW5kZXJzIC5jb250ZW50LmVtYmxlbXstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKX0uZm91bmRlcnMgLmNvbnRlbnQuZW1ibGVtIGltZ3ttYXJnaW46MCBhdXRvO21heC13aWR0aDoyMDBweH0uZm91bmRlcnMgLmNvbnRlbnQudGV4dHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW46MCBhdXRvO3RleHQtYWxpZ246Y2VudGVyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjYwMHB4KXsuaG9tZS1saW5ldXAgLmxpbmV1cC1pbWFnZXtkaXNwbGF5Om5vbmV9LmhvbWUtbGluZXVwIC50ZXh0e3RleHQtYWxpZ246Y2VudGVyfX0uc2luZ2xlLWxvY2F0aW9uLWludHJve3Bvc2l0aW9uOnJlbGF0aXZlfS5zaW5nbGUtbG9jYXRpb24taW50cm86YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uZmxleC1jb250YWluZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC13cmFwOndyYXA7ZmxleC13cmFwOndyYXB9LmxvY2F0aW9uX2NhbGxvdXR7LW1zLWZsZXg6MCAwIDQwMHB4Oy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA0MDBweDtiYWNrZ3JvdW5kOiNmMWYxZWY7bWFyZ2luLWxlZnQ6NDBweDtwYWRkaW5nOjMwcHg7Ym9yZGVyOjFweCBzb2xpZCAjZTVlNGUyfS5sb2NhdGlvbl9jYWxsb3V0IGg0e2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luOjEwcHggMH0ubG9jYXRpb25fY2FsbG91dCBwe21hcmdpbjowfS5sb2NhdGlvbl9jYWxsb3V0IGxpe2ZvbnQtc2l6ZToxLjZyZW07Zm9udC13ZWlnaHQ6MzAwfS5jYWxsb3V0X2l0ZW17bWFyZ2luLWJvdHRvbTo0MHB4fS5jYWxsb3V0X2l0ZW06bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206MH0uY2FsbG91dF9pdGVtIGxpLC5jYWxsb3V0X2l0ZW0gcHtsaW5lLWhlaWdodDoxLjZ9LmxvY2F0aW9uX2dlbmVyYWx7LW1zLWZsZXgtcG9zaXRpdmU6NDstd2Via2l0LWJveC1mbGV4OjQ7ZmxleC1ncm93OjQ7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MCU7ZmxleC1iYXNpczowJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5sb2NhdGlvbl9nZW5lcmFsIHB7bWFyZ2luOjB9LmxvY2F0aW9uX2ZlYXR1cmVzey1tcy1mbGV4LXBvc2l0aXZlOjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXgtZ3JvdzoxOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTowJTtmbGV4LWJhc2lzOjAlfS5sb2NhdGlvbl9pbWFnZXN7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiM3MDgwOTA7bWFyZ2luLXRvcDoycmVtO3Bvc2l0aW9uOnJlbGF0aXZlfS5pbWFnZV9ob2xkZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LmltYWdlc19yZWVsX2luaXQgLnNsaWNrLWxpc3R7cGFkZGluZzowfS5pbWFnZXNfcmVlbF9pbml0IHVsLnNsaWNrLWRvdHN7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246YWJzb2x1dGU7Ym90dG9tOjIwcHg7bGVmdDo1MCU7Y3Vyc29yOnBvaW50ZXJ9LmltYWdlc19yZWVsX2luaXQgdWwuc2xpY2stZG90cyBsaTpiZWZvcmV7YmFja2dyb3VuZDpyZ2JhKDI1NSwyNTUsMjU1LC44KX0uaW1hZ2VzX3JlZWxfaW5pdCB1bC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZTpiZWZvcmV7YmFja2dyb3VuZDojZmZmfS5mZWF0dXJlcy1saXN0ey13ZWJraXQtY29sdW1uLWNvdW50OjI7Y29sdW1uLWNvdW50OjI7bWFyZ2luLXRvcDozMHB4O21hcmdpbi1ib3R0b206MTVweH0uZmVhdHVyZXMtbGlzdCBsaXtmb250LXNpemU6MS40cmVtO2ZvbnQtd2VpZ2h0OjUwMDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7cG9zaXRpb246cmVsYXRpdmU7aGVpZ2h0OjQwcHg7bGluZS1oZWlnaHQ6NDBweDtwYWRkaW5nLWxlZnQ6NTBweDtsZXR0ZXItc3BhY2luZzouMXJlbTtmb250LXNpemU6MS4zcmVtO21hcmdpbi1ib3R0b206MTBweDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2NvbG9yOiNhOWE2YTF9LmZlYXR1cmVzLWxpc3QgbGkgc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7Ym90dG9tOjA7d2lkdGg6NDBweH0uZmVhdHVyZXMtbGlzdCBsaSBzcGFuIHN2Z3tmaWxsOiNhOWE2YTF9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rIGF7Y29sb3I6I2E5YTZhMTt3aWxsLWNoYW5nZTpjb2xvcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjI1czt0cmFuc2l0aW9uOmNvbG9yIC4yNXM7Y3Vyc29yOnBvaW50ZXJ9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rIHN2Z3tmaWxsOiNhOWE2YTE7d2lsbC1jaGFuZ2U6ZmlsbDstd2Via2l0LXRyYW5zaXRpb246ZmlsbCAuMjVzO3RyYW5zaXRpb246ZmlsbCAuMjVzfS5mZWF0dXJlcy1saXN0IGxpLmZlYXR1cmUtbGluazpob3ZlciBhe2NvbG9yOiNkNGE3NGR9LmZlYXR1cmVzLWxpc3QgbGkuZmVhdHVyZS1saW5rOmhvdmVyIHN2Z3tmaWxsOiNkNGE3NGR9LmZvb2QtbWVudS1saW5rLXdyYXBwZXJ7bWFyZ2luOjIwcHggMH0uZm9vZC1tZW51LWxpbmstd3JhcHBlciBhe3RleHQtdHJhbnNmb3JtOm5vbmU7Zm9udC13ZWlnaHQ6NjAwO3RleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7Y29sb3I6I2M2OWM1NDtsZXR0ZXItc3BhY2luZzowO2ZvbnQtc2l6ZToxLjZyZW19LnNwZWNpYWxfaG91cnNfbGlzdCBsaXtwYWRkaW5nOjEwcHggMDtmb250LXNpemU6MS42cmVtO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIGdyYXl9LnNwZWNpYWxfaG91cnNfbGlzdCBsaTpsYXN0LW9mLXR5cGV7Ym9yZGVyLWJvdHRvbTpub25lfS5zcGVjaWFsX2hvdXJzX2xpc3QgbGkgc3BhbntkaXNwbGF5OmJsb2NrfS5zcGVjaWFsX2hvdXJzX2xpc3QgLmRheXtkaXNwbGF5OmJsb2NrO2ZvbnQtd2VpZ2h0OjYwMDtwYWRkaW5nLWJvdHRvbTozcHh9LmVtYWlsX2xpbmssLm1hcF9saW5rLC5waG9uZV9saW5re2Rpc3BsYXk6YmxvY2s7Zm9udC1zaXplOjEuM3JlbTtsZXR0ZXItc3BhY2luZzouMXJlbTtjb2xvcjpncmF5O2hlaWdodDoxNnB4O2xpbmUtaGVpZ2h0OjE2cHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjIwcHg7bWFyZ2luOjEwcHggMH0uZW1haWxfbGluazpiZWZvcmUsLm1hcF9saW5rOmJlZm9yZSwucGhvbmVfbGluazpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxNnB4O2hlaWdodDoxNnB4O2JhY2tncm91bmQ6Z3JheTtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7ZGlzcGxheTpibG9ja30ucGhvbmVfbGlua3ttYXJnaW4tYm90dG9tOjEwcHh9I2FqYXgtcG9zdHMsI3NpbXBsZV9wb3N0c3tkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbjoyMHB4IC0yNXB4O2xpc3Qtc3R5bGU6bm9uZTstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfSNhamF4LXBvc3RzPiosI3NpbXBsZV9wb3N0cz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7I2FqYXgtcG9zdHM+Kiwjc2ltcGxlX3Bvc3RzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsjYWpheC1wb3N0cz4qLCNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsjYWpheC1wb3N0cz4qLCNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToyNSU7ZmxleC1iYXNpczoyNSU7bWF4LXdpZHRoOjI1JX19LmxvY2F0aW9uLWV2ZW50c3twYWRkaW5nOjZyZW0gMH0ubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHN7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjVweDttYXJnaW4tcmlnaHQ6LTI1cHg7bGlzdC1zdHlsZTpub25lfS5sb2NhdGlvbi1ldmVudHMgI3NpbXBsZV9wb3N0cz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmxvY2F0aW9uLWV2ZW50cyAjc2ltcGxlX3Bvc3RzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsubG9jYXRpb24tZXZlbnRzICNzaW1wbGVfcG9zdHM+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LnRvZGF5c19ob3Vyc193cmFwe2hlaWdodDo1MHB4O2JhY2tncm91bmQ6I2JlOWE1Yztwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206LTUwcHg7d2lkdGg6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7Y29sb3I6I2ZmZn0udG9kYXlzX2hvdXJzX3dyYXAgYXtsZXR0ZXItc3BhY2luZzouMXJlbTtjb2xvcjojZTVlNGUyO21hcmdpbi1sZWZ0OjEwcHg7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MjhweDtkaXNwbGF5OmlubGluZS1ibG9jaztwYWRkaW5nOjAgMTBweDtib3JkZXI6MXB4IHNvbGlkO2ZvbnQtd2VpZ2h0OjUwMH0uaG91cnNfbGlzdHttYXJnaW4tYm90dG9tOjIwcHh9LmhvdXJzX2xpc3RfaXRlbSAuZGF5e3dpZHRoOjE0MHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2ZvbnQtd2VpZ2h0OjYwMH0jYnRuLXNwZXZlbnQsLmhvdXJzX3dyYXBwZXIgYXtjb2xvcjojZmZmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQ6I2M2OWM1NDtwYWRkaW5nOjAgMTBweDtoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O21hcmdpbi10b3A6MjBweDtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtd2VpZ2h0OjcwMDtsZXR0ZXItc3BhY2luZzouMTVyZW07Ym9yZGVyLXJhZGl1czozcHh9LmxvY2F0aW9uLWV2ZW50c3tiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpfS5sb2NhdGlvbi1ldmVudHMgLmV2ZW50LWlubmVyLXdyYXB7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kOiNmZmY7LXdlYmtpdC1ib3gtc2hhZG93Om5vbmU7Ym94LXNoYWRvdzpub25lO3doaXRlLXNwYWNlOm5vcm1hbDtoZWlnaHQ6MTAwJTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYm94LXNoYWRvdzstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LWJveC1zaGFkb3cgLjM1cywtd2Via2l0LXRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246LXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOmJveC1zaGFkb3cgLjM1cyx0cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOmJveC1zaGFkb3cgLjM1cyx0cmFuc2Zvcm0gLjM1cywtd2Via2l0LWJveC1zaGFkb3cgLjM1cywtd2Via2l0LXRyYW5zZm9ybSAuMzVzfS5sb2NhdGlvbi1ldmVudHMgLmV2ZW50LWlubmVyLXdyYXA6aG92ZXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAxMnB4IHJnYmEoMCwwLDAsLjEpO2JveC1zaGFkb3c6MCAwIDEycHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0ubG9jYXRpb24tZXZlbnRzIC5ldmVudF9pbWFnZV93cmFwcGVye21hcmdpbi1ib3R0b206MTBweDtiYWNrZ3JvdW5kOmdyYXl9LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVye3RleHQtYWxpZ246bGVmdDtwYWRkaW5nOjEwcHh9LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVyIHB7bWFyZ2luOjA7Zm9udC1zaXplOjEuNXJlbTtsZXR0ZXItc3BhY2luZzouMDVyZW19LmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfaW5mb193cmFwcGVyIGg0e2ZvbnQtc2l6ZToxLjZyZW07bWFyZ2luLWJvdHRvbTo1cHg7Y29sb3I6IzE5MzUzYn0ubG9jYXRpb24tZXZlbnRzIC5ldmVudF9kYXksLmxvY2F0aW9uLWV2ZW50cyAuZXZlbnRfdGltZXtkaXNwbGF5OmJsb2NrfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTEwMHB4KXsubG9jYXRpb25fY2FsbG91dHstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO3dpZHRoOjEwMCU7bWFyZ2luOjAgYXV0bztkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0ubG9jYXRpb25fY2FsbG91dCAuYWRkcmVzc193cmFwcGVye21hcmdpbi1yaWdodDo0MHB4fS5sb2NhdGlvbl9jYWxsb3V0IC5zb2NpYWxfd3JhcHBlcjphZnRlciwubG9jYXRpb25fY2FsbG91dCAuc29jaWFsX3dyYXBwZXI6YmVmb3Jle2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTp0YWJsZTt0YWJsZS1sYXlvdXQ6Zml4ZWQ7Y2xlYXI6Ym90aH0ubG9jYXRpb25fY2FsbG91dCAuaG91cnNfd3JhcHBlcnstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTt3aWR0aDoxMDAlfS5sb2NhdGlvbl9nZW5lcmFsey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7bWFyZ2luLXRvcDo0MHB4fS5mZWF0dXJlcy1saXN0ey13ZWJraXQtY29sdW1uLWNvdW50OjM7Y29sdW1uLWNvdW50OjN9fUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6ODUwcHgpey50b2RheXNfaG91cnNfd3JhcCBoNHtmb250LXNpemU6MS42cmVtO2ZvbnQtd2VpZ2h0OjUwMDtsZXR0ZXItc3BhY2luZzouMTVyZW07dGV4dC1hbGlnbjpjZW50ZXJ9LnRvZGF5c19ob3Vyc193cmFwIGg0IHNwYW57ZGlzcGxheTpibG9ja30uZmVhdHVyZXMtbGlzdHstd2Via2l0LWNvbHVtbi1jb3VudDoyO2NvbHVtbi1jb3VudDoyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc4NnB4KXsjc2ltcGxlX3Bvc3Rzey1tcy1mbGV4LXBhY2s6c3RhcnQ7LXdlYmtpdC1ib3gtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo2NTBweCl7LmZlYXR1cmVzLWxpc3R7LXdlYmtpdC1jb2x1bW4tY291bnQ6MTtjb2x1bW4tY291bnQ6MX19LnNpbmdsZS1jaWRlci1pbnRyb3tiYWNrZ3JvdW5kLWNvbG9yOiNlNWU0ZTI7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTtwb3NpdGlvbjpyZWxhdGl2ZX0uc2luZ2xlLWNpZGVyLWludHJvOmFmdGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwcHg7YmFja2dyb3VuZDojOTc5MjhhO2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC93b29kLWJnLTAxLnN2Zyl9LmNvbnRlbnQtY2lkZXItaW1hZ2V7LW1zLWZsZXg6MCAwIDMyMHB4Oy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAzMjBweDtoZWlnaHQ6MzAwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmF0MS5wbmcpO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcG9zaXRpb246NTAlO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdDttYXJnaW4tcmlnaHQ6NDBweH0uYmctd2lsZC1jaGVycnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2hlcnJ5LnBuZyl9LmJnLWJsb29kLW9yYW5nZXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy1ibG9vZC1vcmFuZ2UucG5nKX0uYmctY2Fyb2xpbmEtYXBwbGV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2EtYXBwbGUucG5nKX0uYmctY2Fyb2xpbmEtZHJhZnR7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtY2EtZHJhZnQucG5nKX0uYmctY2l0cnVze2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvbGRSb2NrLXByb2R1Y3RzLWNpdHJ1cy5wbmcpfS5iZy1pcGF7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtaXBhLnBuZyl9LmJnLW9yY2hhcmQtZnJvc3R7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtb3JjaGFyZC1mcm9zdC5wbmcpfS5iZy1wZWFjaHtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy1wZWFjaC5wbmcpfS5iZy1wZWFye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JvbGRSb2NrLXByb2R1Y3RzLXBlYXIucG5nKX0uYmctcHJlbWl1bS1kcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtcHJlbWl1bS1kcnkucG5nKX0uYmctdmlyZ2luaWEtYXBwbGV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmEtYXBwbGUucG5nKX0uYmctdmlyZ2luaWEtZHJhZnR7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmEtZHJhZnQucG5nKX0uYmctdmludGFnZS1kcnl7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYm9sZFJvY2stcHJvZHVjdHMtdmludGFnZS1kcnkucG5nKX0uYmctdmFyaWV0eS1jcmF0ZXtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ib2xkUm9jay1wcm9kdWN0cy12YXJpZXR5LWNyYXRlLnBuZyl9LmNvbnRlbnQtY2lkZXItaW5mb3stbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmZsaXAtY29udGFpbmVyey13ZWJraXQtcGVyc3BlY3RpdmU6MTAwMHB4O3BlcnNwZWN0aXZlOjEwMDBweDttYXJnaW4tbGVmdDozNSV9LmZsaXAtY29udGFpbmVyLmhvdmVyIC5mbGlwcGVyLC5mbGlwLWNvbnRhaW5lcjpob3ZlciAuZmxpcHBlcnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGVZKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKX0uYmFjaywuZmxpcC1jb250YWluZXIsLmZyb250e3dpZHRoOjMyMHB4O2hlaWdodDo0MDBweH0uZmxpcHBlcnstd2Via2l0LXRyYW5zaXRpb246LjZzO3RyYW5zaXRpb246LjZzOy13ZWJraXQtdHJhbnNmb3JtLXN0eWxlOnByZXNlcnZlLTNkO3RyYW5zZm9ybS1zdHlsZTpwcmVzZXJ2ZS0zZDtwb3NpdGlvbjpyZWxhdGl2ZX0uYmFjaywuZnJvbnR7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtiYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9LmJhY2sgaW1nLC5mcm9udCBpbWd7bWFyZ2luOjAgYXV0bzt3aWR0aDphdXRvO21heC1oZWlnaHQ6MTAwJX0uZnJvbnR7ei1pbmRleDoyOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZVkoMGRlZyk7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fS5iYWNrey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVkoMTgwZGVnKTt0cmFuc2Zvcm06cm90YXRlWSgxODBkZWcpfS5pbmZvLXNwZWNpZmlje21hcmdpbi10b3A6NDBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uaW5mby1zcGVjaWZpYyAuYXZhaWwtaWNvbntkaXNwbGF5OmJsb2NrO3dpZHRoOjEwMHB4O2hlaWdodDoxMDBweDtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LTgwcHg7cmlnaHQ6LTMwcHh9LmluZm8tc3BlY2lmaWMgLmF2YWlsLWljb24gc3Zne2ZpbGw6I2E5YTZhMX0uY2lkZXItaW5mby1saXN0e2JhY2tncm91bmQ6I2ZmZjtib3JkZXI6MXB4IHNvbGlkICNjYmM5YzU7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbTo0MHB4O3RleHQtYWxpZ246bGVmdH0uY2lkZXItaW5mby1saXN0IGxpe2JvcmRlci1ib3R0b206MXB4IHNvbGlkICNjYmM5YzU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleH0uY2lkZXItaW5mby1saXN0IGxpOmxhc3Qtb2YtdHlwZXtib3JkZXItYm90dG9tOm5vbmV9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItaWNvbnt3aWR0aDo2MHB4O2JvcmRlci1yaWdodDoxcHggc29saWQgI2NiYzljNX0uY2lkZXItaW5mby1saXN0IGxpIC5jaWRlci1pY29uIHN2Z3toZWlnaHQ6NjBweDtmaWxsOiNjYmM5YzV9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItY29udGVudHstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjE7cGFkZGluZzoxMHB4fS5jaWRlci1pbmZvLWxpc3QgbGkgLmNpZGVyLWNvbnRlbnQgc3BhbntsaW5lLWhlaWdodDoxLjJ9LmNpZGVyLWluZm8tbGlzdCBsaSAuY2lkZXItY29udGVudCAuaW5mby1pdGVtLWhlYWR7ZGlzcGxheTpibG9jaztmb250LXdlaWdodDo2MDA7Zm9udC1zaXplOjEuNHJlbTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2V9LmNpZGVyLWluZm8tbGlzdDphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTotMTNweDtsZWZ0Oi0xcHg7cmlnaHQ6LTFweDtoZWlnaHQ6MTRweDtiYWNrZ3JvdW5kLWNvbG9yOiNjYmM5YzU7YmFja2dyb3VuZDpyZXBlYXRpbmctbGluZWFyLWdyYWRpZW50KDQ1ZGVnLCNjYmM5YzUsI2NiYzljNSA4cHgsI2JmYmNiOCAwLCNiZmJjYjggMTZweCl9Lm11c3RhY2hlPnB7ZGlzcGxheTppbmxpbmUtYmxvY2s7Zm9udC1zaXplOjEuNHJlbTttYXJnaW46MCBhdXRvO21hcmdpbi1yaWdodDoyMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtsZXR0ZXItc3BhY2luZzouMTVyZW07Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmZpbmQtdGhpcy13cmFwcGVye21hcmdpbi10b3A6NDBweH0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b257Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1jb2xvcjojOTc5MjhhO2NvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cGFkZGluZzowIDE1cHg7Zm9udC1zaXplOjEuNHJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtsZXR0ZXItc3BhY2luZzouMXJlbX0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YmVmb3Jle21hcmdpbjphdXRvO2NvbnRlbnQ6YXR0cihkYXRhLWhvdmVyKTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7cmlnaHQ6MDt0ZXh0LWFsaWduOmNlbnRlcjtvcGFjaXR5OjA7Y29sb3I6I2ZmZn0uZmluZC10aGlzLXdyYXBwZXIgLmNpZGVyX2ZpbmRlcl9idXR0b246YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTtsZWZ0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiNhZmFiYTV9LmZpbmQtdGhpcy13cmFwcGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyOmJlZm9yZXtvcGFjaXR5OjE7LXdlYmtpdC1hbmltYXRpb246cSAuNHM7YW5pbWF0aW9uOnEgLjRzfS5maW5kLXRoaXMtd3JhcHBlciAuY2lkZXJfZmluZGVyX2J1dHRvbjpob3ZlcjphZnRlcnstd2Via2l0LWFuaW1hdGlvbjpyIC40czthbmltYXRpb246ciAuNHN9LmZpbmQtdGhpcy13cmFwcGVyIC5jaWRlcl9maW5kZXJfYnV0dG9uOmhvdmVyIHNwYW57b3BhY2l0eTowfS5vdGhlci1jaWRlcnN7cGFkZGluZzowO2JhY2tncm91bmQ6I2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZX0ub3RoZXItY2lkZXJzOmFmdGVye3dpZHRoOjEwMCU7aGVpZ2h0OjEwcHg7YmFja2dyb3VuZDojOTc5MjhhO2NvbnRlbnQ6XFxcIlxcXCI7ZGlzcGxheTpibG9jaztiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC93b29kLWJnLTAxLnN2Zyl9Lm90aGVyLWNpZGVycyBoNHt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjIwcHh9Lm90aGVyLWNpZGVycyAuY2lkZXJfd3JhcHBlcl9pbm5lcnt3aWR0aDoxMDAlO3BhZGRpbmc6MjBweCAzMHB4fS5vdGhlci1jaWRlcnMgLmNpZGVyX3dyYXBwZXJfaW5uZXIgYXtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojN2Q3NzZkfS5taWRkbGUtc3RhY2t7cG9zaXRpb246cmVsYXRpdmV9Lm1pZGRsZS1zdGFjazphZnRlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmczLWRhcmsuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlO3otaW5kZXg6LTE7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47YmFja2dyb3VuZC1yZXBlYXQ6cmVwZWF0fS5jaWRlci1yZWNpcGVze2JhY2tncm91bmQtY29sb3I6I2E5YTZhMTtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9yZWNpcGVzLmpwZyk7YmFja2dyb3VuZC1zaXplOmNvdmVyOy1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTttYXJnaW4tbGVmdDoxMHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5jaWRlci1yZWNpcGVzOmJlZm9yZXtiYWNrZ3JvdW5kOnJnYmEoMTI2LDExOSwxMDksLjg1KTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjE7Y29udGVudDpcXFwiXFxcIjstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZCAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YmFja2dyb3VuZCAuMzVzIGVhc2UtaW4tb3V0fS5jaWRlci1yZWNpcGVzIGF7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwcHg7bGVmdDoxMHB4O2JvdHRvbToxMHB4O3JpZ2h0OjEwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO3BhZGRpbmc6MTBweDtib3JkZXI6MXB4IHNvbGlkICNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ei1pbmRleDoyO2NvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4zNXMsYm9yZGVyIC4zNXM7dHJhbnNpdGlvbjpjb2xvciAuMzVzLGJvcmRlciAuMzVzfS5jaWRlci1yZWNpcGVzIGgze21hcmdpbjowfS5jaWRlci1yZWNpcGVzOmhvdmVyOmJlZm9yZXtiYWNrZ3JvdW5kOnJnYmEoMTI2LDExOSwxMDksLjQpfS5jaWRlci1yZWNpcGVzOmhvdmVyIGF7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2NvbG9yOiNmZmZ9LmF7LW1zLWZsZXg6MCAwIDQwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgNDAlO2JhY2tncm91bmQtY29sb3I6I2U1ZTRlMjtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmctbGlnaHQuc3ZnKTtiYWNrZ3JvdW5kLXNpemU6Y292ZXJ9LmEsLmJ7bWFyZ2luLWJvdHRvbToxMHB4fS5iey1tcy1mbGV4LXBvc2l0aXZlOjA7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXgtZ3JvdzowOy1tcy1mbGV4LW5lZ2F0aXZlOjA7ZmxleC1zaHJpbms6MDt3aWR0aDpjYWxjKDYwJSAtIDEwcHgpO2JhY2tncm91bmQ6Z3JheTttYXJnaW4tbGVmdDoxMHB4fS5jaWRlci12aWRlb3stbXMtZmxleDowIDAgNzAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA3MCV9LmNpZGVyLXBhZ2UtaGVhZGVyIC5vdXRlci1jb250YWluZXJ7ZGlzcGxheTpub25lfS5jaWRlci1saXN0aW5ne2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JnLW5vaXNlLnBuZyk7cGFkZGluZzo2cmVtIDB9LmNpZGVyLWxpc3RpbmcgLm91dGVyLWNvbnRhaW5lcntib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfS5jaWRlci1saXN0aW5nOmxhc3Qtb2YtdHlwZSAub3V0ZXItY29udGFpbmVye2JvcmRlci1ib3R0b206bm9uZX0uY2lkZXItbGlzdGluZyBoMnt0ZXh0LWFsaWduOmNlbnRlcjttYXJnaW4tYm90dG9tOjQwcHh9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWFyY2hpdmUtbGlzdHt3aWR0aDoxMDAlO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTIwcHg7bWFyZ2luLXJpZ2h0Oi0yMHB4O2xpc3Qtc3R5bGU6bm9uZX0uY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7cGFkZGluZzoyMHB4Oy1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfUBtZWRpYSAobWluLXdpZHRoOjU0MHB4KXsuY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MzMuMzMzMzMlO2ZsZXgtYmFzaXM6MzMuMzMzMzMlO21heC13aWR0aDozMy4zMzMzMyV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuY2lkZXItbGlzdGluZyAuY2lkZXItYXJjaGl2ZS1saXN0Pip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWFyY2hpdmUtbGlzdD4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjI1JTtmbGV4LWJhc2lzOjI1JTttYXgtd2lkdGg6MjUlfX0uY2lkZXItbGlzdGluZyAuY2lkZXItaW1hZ2UtaG9sZGVye3dpZHRoOjEwMCU7aGVpZ2h0OjI3MHB4O21hcmdpbjowIGF1dG99LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWltYWdlLWhvbGRlciBpbWd7bWF4LWhlaWdodDoxMDAlO3dpZHRoOmF1dG99LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbmsgaDN7Zm9udC1zaXplOjEuNnJlbTt0ZXh0LWFsaWduOmNlbnRlcjstd2Via2l0LXRyYW5zaXRpb246Y29sb3IgLjM1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmNvbG9yIC4zNXMgZWFzZS1pbi1vdXQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOiM5NzkyOGF9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbmsgaW1ne21hcmdpbjowIGF1dG87bWFyZ2luLWJvdHRvbTo0MHB4Oy13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnNjYWxlKDEpIHRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0fS5jaWRlci1saXN0aW5nIC5jaWRlci1saW5rOmhvdmVyIGgze2NvbG9yOiMyZThiNTd9LmNpZGVyLWxpc3RpbmcgLmNpZGVyLWxpbms6aG92ZXIgaW1ney13ZWJraXQtdHJhbnNmb3JtOnNjYWxlKDEuMDUpIHRyYW5zbGF0ZVkoMTBweCk7dHJhbnNmb3JtOnNjYWxlKDEuMDUpIHRyYW5zbGF0ZVkoMTBweCl9LmNpZGVyX2xpc3RfaW1hZ2Vze3dpZHRoOjEwMCU7cG9zaXRpb246cmVsYXRpdmV9LmNpZGVyX2xpc3RfaW1hZ2VzIGltZ3t3aWR0aDoxMDAlfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTA0MHB4KXsuc2luZ2xlLWNpZGVyLWludHJvIC5jb250ZW50LWNpZGVyLWltYWdle21hcmdpbjowIGF1dG87bWFyZ2luLWJvdHRvbToyMHB4fS5zaW5nbGUtY2lkZXItaW50cm8gLmNvbnRlbnQtY2lkZXItaW5mb3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTt3aWR0aDoxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5hey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7d2lkdGg6Y2FsYyg1MCUgLSA1cHgpOy1tcy1mbGV4OjAgMCBjYWxjKDUwJSAtIDVweCk7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIGNhbGMoNTAlIC0gNXB4KTttYXJnaW4tYm90dG9tOjEwcHg7bWFyZ2luLXJpZ2h0OjVweH0uYnstbXMtZmxleC1vcmRlcjo0Oy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NTtvcmRlcjo0Oy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlfS5iLC5jaWRlci12aWRlb3t3aWR0aDoxMDAlO21hcmdpbjowfS5jaWRlci12aWRlb3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO21hcmdpbi1ib3R0b206MTBweH0uY2lkZXItcmVjaXBlc3stbXMtZmxleC1vcmRlcjozOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NDtvcmRlcjozOy1tcy1mbGV4OjAgMCBjYWxjKDUwJSAtIDVweCk7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIGNhbGMoNTAlIC0gNXB4KTt3aWR0aDpjYWxjKDUwJSAtIDVweCk7bWFyZ2luLWJvdHRvbToxMHB4O21hcmdpbi1sZWZ0OjVweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo3MDBweCl7LmF7bWFyZ2luLXJpZ2h0OjB9LmEsLmNpZGVyLXJlY2lwZXN7d2lkdGg6MTAwJTstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uY2lkZXItcmVjaXBlc3ttYXJnaW4tbGVmdDowO21pbi1oZWlnaHQ6MTIwcHh9Lm90aGVyLWNpZGVyc3tkaXNwbGF5Om5vbmV9fS5ldmVudF9pbWFnZV93cmFwcGVye3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmO3Bvc2l0aW9uOnJlbGF0aXZlfS5ldmVudF9pbWFnZV93cmFwcGVyPip7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7b3ZlcmZsb3c6aGlkZGVufS5ldmVudF9pbWFnZV93cmFwcGVyPiogaW1ne3dpZHRoOjEwMCV9LmFyY2hpdmUtcGFnZS1oZWFkZXJ7cGFkZGluZy10b3A6MTIwcHg7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTt0ZXh0LWFsaWduOmNlbnRlcjtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfS5ldmVudC1saXN0aW5nc3twb3NpdGlvbjpyZWxhdGl2ZX0uZXZlbnQtbGlzdGluZ3MgLm92ZXJsYXktd3JhcHBlcntwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9ncnVuZ2UtYmczLWRhcmsuc3ZnKTt6LWluZGV4OjI7Y29udGVudDpcXFwiXFxcIjtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7YmFja2dyb3VuZC1wb3NpdGlvbjoxMDAlO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uZXZlbnQtbGlzdGluZ3MgLm91dGVyLWNvbnRhaW5lcnt6LWluZGV4OjI7cG9zaXRpb246cmVsYXRpdmV9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yMHB4O21hcmdpbi1yaWdodDotMjBweDtsaXN0LXN0eWxlOm5vbmV9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qe3BhZGRpbmc6MjBweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC5pbm5lci1jb250YWluZXItZj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAuaW5uZXItY29udGFpbmVyLWY+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IC5ldmVudC1pbm5lci13cmFwe2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjEwMCU7YmFja2dyb3VuZDojZmZmOy13ZWJraXQtYm94LXNoYWRvdzpub25lO2JveC1zaGFkb3c6bm9uZTt3aGl0ZS1zcGFjZTpub3JtYWw7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt3aWxsLWNoYW5nZTpib3gtc2hhZG93LHRyYW5zZm9ybTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOi13ZWJraXQtYm94LXNoYWRvdyAuMzVzLC13ZWJraXQtdHJhbnNmb3JtIC4zNXM7dHJhbnNpdGlvbjpib3gtc2hhZG93IC4zNXMsdHJhbnNmb3JtIC4zNXM7dHJhbnNpdGlvbjpib3gtc2hhZG93IC4zNXMsdHJhbnNmb3JtIC4zNXMsLXdlYmtpdC1ib3gtc2hhZG93IC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1c30ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLnR5cGUtZXZlbnQgLmV2ZW50LWlubmVyLXdyYXA6aG92ZXJ7LXdlYmtpdC1ib3gtc2hhZG93OjAgMCAxMnB4IHJnYmEoMCwwLDAsLjEpO2JveC1zaGFkb3c6MCAwIDEycHggcmdiYSgwLDAsMCwuMSk7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLnR5cGUtZXZlbnQgLmV2ZW50X2luZm9fd3JhcHBlcntwYWRkaW5nOjEwcHh9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IGg0LmV2ZW50LXRpdGxle21hcmdpbjowO21hcmdpbi1ib3R0b206NXB4O2NvbG9yOiM3ZDc3NmR9LnBvc3QtdHlwZS1hcmNoaXZlLWV2ZW50IC50eXBlLWV2ZW50IHB7bWFyZ2luOjA7dGV4dC10cmFuc2Zvcm06bm9uZTtmb250LXNpemU6MS41cmVtO2xldHRlci1zcGFjaW5nOi4wNXJlbX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLmNoaWxlcy1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjOTczYjE1fS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAubmVsbHlzZm9yZC1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjZDRhNzRkfS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAubWlsbHMtZXZlbnRzIC5ldmVudF9pbmZvX3dyYXBwZXJ7Ym9yZGVyLWJvdHRvbTo1cHggc29saWQgIzk3M2IxNX0ucG9zdC10eXBlLWFyY2hpdmUtZXZlbnQgLmNhcnRlci1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjMTkzNTNifS5wb3N0LXR5cGUtYXJjaGl2ZS1ldmVudCAub2Zmc2l0ZS1ldmVudHMgLmV2ZW50X2luZm9fd3JhcHBlcntib3JkZXItYm90dG9tOjVweCBzb2xpZCAjYzY5YzU0fS5zaW5nbGUtZXZlbnQgaDF7bWFyZ2luLXRvcDotOHB4O2xpbmUtaGVpZ2h0OjEuMjttYXJnaW4tYm90dG9tOjEwcHg7Zm9udC1zaXplOjQycHh9LnNpbmdsZS1ldmVudCBoNXtmb250LXNpemU6MjBweH0uc2luZ2xlLWV2ZW50IC5pY29uLXNlcGFyYXRvcnt3aWR0aDo4cHg7aGVpZ2h0OjhweDtkaXNwbGF5OmlubGluZS1ibG9jaztiYWNrZ3JvdW5kOiNkNGE3NGQ7bWFyZ2luOjAgMTBweDttYXJnaW4tYm90dG9tOjNweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbWFnZV93cmFwcGVye21hcmdpbi1ib3R0b206MTBweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhe2JhY2tncm91bmQ6I2Y4ZjhmODtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7bWFyZ2luLWxlZnQ6NDBweDtwYWRkaW5nOjIwcHggM2VtO2hlaWdodDoxMDAlfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGl7cGFkZGluZzoxMHB4IDB9LnNpbmdsZS1ldmVudCAubGlzdC1oZWFke2Rpc3BsYXk6YmxvY2s7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmfS5zaW5nbGUtZXZlbnQgLmJyZWFkY3J1bWJzLXdyYXBwZXJ7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDttYXJnaW4tYm90dG9tOjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMDQwcHgpey5zaW5nbGUtZXZlbnQgLmV2ZW50X2JsdXJiLC5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm97LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCV9LnNpbmdsZS1ldmVudCAuZXZlbnRfaW5mb3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1ib3R0b206MjBweH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhe21hcmdpbjowO3BhZGRpbmc6MjBweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcH0uc2luZ2xlLWV2ZW50IC5ldmVudF9pbmZvIC5ldmVudC1tZXRhIGxpey1tcy1mbGV4OjAgMCA1MCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDUwJTtwYWRkaW5nOjEwcHh9LnNpbmdsZS1ldmVudCAuZXZlbnRfaW5mbyAuZXZlbnQtbWV0YSBsaTpudGgtb2YtdHlwZSgyKXstbXMtZmxleC1vcmRlcjozOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6NDtvcmRlcjozfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGk6bnRoLW9mLXR5cGUoMyl7LW1zLWZsZXgtb3JkZXI6NDstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjU7b3JkZXI6NH19I2NoYW5nZW1lIHNwYW57Zm9udC1zaXplOjEuOHJlbTtkaXNwbGF5OmJsb2NrfS5ldmVudC1saXN0aW5ncy1oZWFkey1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LnBsaW5re2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDoyNHB4O2xpbmUtaGVpZ2h0OjI0cHg7cGFkZGluZy1yaWdodDoxMHB4O3BhZGRpbmctbGVmdDoyNXB4O3Bvc2l0aW9uOnJlbGF0aXZlO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2ZvbnQtc2l6ZToxLjFyZW07Zm9udC13ZWlnaHQ6NzAwO3dpbGwtY2hhbmdlOmNvbG9yOy13ZWJraXQtdHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjpjb2xvciAuMnMgZWFzZS1pbi1vdXR9LnBsaW5rIHNwYW57d2lkdGg6MjBweDtoZWlnaHQ6MjBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6MnB4fS5wbGluayBzcGFuIHN2Z3t3aWxsLWNoYW5nZTpmaWxsOy13ZWJraXQtdHJhbnNpdGlvbjpmaWxsIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmZpbGwgLjJzIGVhc2UtaW4tb3V0O2ZpbGw6IzdkNzc2ZH0ucGxpbms6aG92ZXJ7Y29sb3I6Izk3M2IxNX0ucGxpbms6aG92ZXIgc3BhbiBzdmd7ZmlsbDojOTczYjE1fS5ldmVudC1saXN0aW5ncyAub3V0ZXItY29udGFpbmVye2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwOy1tcy1mbGV4LWFsaWduOnN0YXJ0Oy13ZWJraXQtYm94LWFsaWduOnN0YXJ0O2FsaWduLWl0ZW1zOmZsZXgtc3RhcnR9LmV2ZW50LWxpc3RpbmdzIC5ldmVudC1saXN0ey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0ey1tcy1mbGV4OjAgMCAyNSU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDI1JTttYXJnaW4tbGVmdDo0MHB4O21pbi13aWR0aDoyNTBweDtiYWNrZ3JvdW5kLWltYWdlOnVybChodHRwOi8vYnJocy5mbHl3aGVlbHNpdGVzLmNvbS93cC1jb250ZW50L3RoZW1lcy9ib2xkcm9jay9pbWFnZXMvZGlzdC9iZy1ub2lzZS5wbmcpO2JvcmRlcjoxcHggc29saWQgI2U1ZTRlMn0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5maWx0ZXItbGlzdC1pbm5lcntwYWRkaW5nOjIwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuZmlsdGVyLWxpc3QtaW5uZXIgaDR7bWFyZ2luLWJvdHRvbToxMHB4fS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmJ0bi12YWx7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO21hcmdpbjowIGF1dG87aGVpZ2h0OjMwcHg7Ym9yZGVyOjFweCBzb2xpZCAjYTlhNmExO2JhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7bWFyZ2luLWJvdHRvbTo1cHg7b3V0bGluZTowO2ZvbnQtc2l6ZToxLjJyZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt3aWxsLWNoYW5nZTp0cmFuc2Zvcm0sYmFja2dyb3VuZDstd2Via2l0LXRyYW5zaXRpb246YWxsIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjphbGwgLjI1cyBlYXNlLWluLW91dH0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5idG4tdmFsOmxhc3Qtb2YtdHlwZXttYXJnaW4tYm90dG9tOjB9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuYnRuLXZhbDpob3Zlcnstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVYKDJweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KX0uZXZlbnQtbGlzdGluZ3MgLmZpbHRlci1saXN0IC5idG4tdmFsLmlzLWFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOiNhOWE2YTE7Y29sb3I6I2ZmZn0uZXZlbnQtY2FyZHt3aWR0aDoxMDAlO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwO21hcmdpbi1ib3R0b206NHJlbX0uZXZlbnQtY2FyZC1sZWZ0e3Bvc2l0aW9uOnJlbGF0aXZlOy1tcy1mbGV4OjAgMCA0MCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDQwJTttaW4td2lkdGg6MzAwcHh9LmV2ZW50LWNhcmQtbGVmdCAuZXZlbnRfaW1hZ2V7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LmV2ZW50LWNhcmQtcmlnaHQgaDR7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmV2ZW50LWNhcmQtcmlnaHQgaDN7bWFyZ2luOjB9LmV2ZW50LWNhcmQtcmlnaHQgcHttYXJnaW46MDtsaW5lLWhlaWdodDoxLjN9LmV2ZW50LWNhcmQtcmlnaHQgYXttYXJnaW46MjBweCAwO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbG9yOiM5NzNiMTU7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0uZXZlbnQtY2FyZC1yaWdodHstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmV2ZW50LWNhcmQtcmlnaHQgLmV2ZW50LWNhcmQtaW5uZXJ7cGFkZGluZy1sZWZ0OjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LmFyY2hpdmUtcGFnZS1oZWFkZXJ7cGFkZGluZy10b3A6NjBweH19QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMDQwcHgpey5ldmVudC1saXN0aW5ncyAuZXZlbnQtbGlzdHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3R7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7bWFyZ2luLWxlZnQ6MDttYXJnaW4tYm90dG9tOjQwcHh9LmV2ZW50LWxpc3RpbmdzIC5maWx0ZXItbGlzdCAuZmlsdGVyLWxpc3QtaW5uZXJ7dGV4dC1hbGlnbjpsZWZ0fS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmJ0bi12YWx7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6YXV0b319QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo4MDBweCl7LnNpbmdsZS1ldmVudCBoNXtmb250LXNpemU6MS40cmVtfS5zaW5nbGUtZXZlbnQgLmV2ZW50X2luZm8gLmV2ZW50LW1ldGEgbGl7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7cGFkZGluZzoxMHB4fX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjY1MHB4KXsuZXZlbnQtbGlzdGluZ3MtaGVhZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5ldmVudC1saXN0aW5ncy1oZWFkIGgxI2NoYW5nZW1le3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncy1oZWFkIC5ldmVudHMtbGlzdC1idXR0b25zey1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmZpbHRlci1saXN0LWlubmVye3RleHQtYWxpZ246Y2VudGVyfS5ldmVudC1saXN0aW5ncyAuZmlsdGVyLWxpc3QgLmZpbHRlci1saXN0LWlubmVyIC5idG4tdmFse3dpZHRoOjEwMCV9LmV2ZW50LWNhcmQtbGVmdHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uZXZlbnQtY2FyZC1yaWdodCAuZXZlbnQtY2FyZC1pbm5lcntwYWRkaW5nLWxlZnQ6MDtwYWRkaW5nLXRvcDoyMHB4fX0ubG9jYXRpb25zLWxpc3Rpbmdze3Bvc2l0aW9uOnJlbGF0aXZlfS5sb2NhdGlvbnMtbGlzdGluZ3M6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0ubG9jYXRpb25zLWxpc3Rpbmd7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjVweDttYXJnaW4tcmlnaHQ6LTI1cHg7bGlzdC1zdHlsZTpub25lfS5sb2NhdGlvbnMtbGlzdGluZz4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmxvY2F0aW9ucy1saXN0aW5nPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6NTAlO2ZsZXgtYmFzaXM6NTAlO21heC13aWR0aDo1MCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsubG9jYXRpb25zLWxpc3Rpbmc+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsubG9jYXRpb25zLWxpc3Rpbmc+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19LmxvY2F0aW9ucy1saXN0aW5nIC5sb2NhdGlvbi1pbWFnZS13cmFwe2JhY2tncm91bmQtY29sb3I6I2YwZmZmMDtwb3NpdGlvbjpyZWxhdGl2ZX0ubG9jYXRpb25zLWxpc3RpbmcgLmxvY2F0aW9uLWltYWdlLXdyYXAgLnNlYXNvbmFsLXRhcHJvb20tYmFubmVye2JhY2tncm91bmQ6I2Q0YTc0ZDtwYWRkaW5nOjEwcHg7Y29sb3I6I2ZmZjtmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0ubG9jYXRpb25zLWxpc3RpbmcgLmxvY2F0aW9uLWltYWdlLXdyYXAgLmxvY2F0aW9uLXRodW1ibmFpbHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtvdmVyZmxvdzpoaWRkZW59LmxvY2F0aW9ucy1saXN0aW5nIC5sb2NhdGlvbi1pbWFnZS13cmFwIC5sb2NhdGlvbi10aHVtYm5haWwgaW1ne3dpbGwtY2hhbmdlOnRyYW5zZm9ybTstd2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxKTt0cmFuc2Zvcm06c2NhbGUoMSk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC43NXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuNzVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC43NXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjc1cywtd2Via2l0LXRyYW5zZm9ybSAuNzVzfS5sb2NhdGlvbnMtbGlzdGluZyAubG9jYXRpb24taW1hZ2Utd3JhcCAubG9jYXRpb24tdGh1bWJuYWlsOmhvdmVyIGltZ3std2Via2l0LXRyYW5zZm9ybTpzY2FsZSgxLjAzKTt0cmFuc2Zvcm06c2NhbGUoMS4wMyl9LmxvY2F0aW9ucy1saXN0aW5nIGgze21hcmdpbjoyMHB4IDA7Y29sb3I6IzE5MzUzYn0ubG9jYXRpb25zLWxpc3RpbmcgcHt0ZXh0LXRyYW5zZm9ybTpub25lO2xldHRlci1zcGFjaW5nOi4wNXJlbTt3aGl0ZS1zcGFjZTpub3JtYWx9LmxvY2F0aW9uLWRldGFpbHMgLmljb24tbGlua3tjb2xvcjojN2Q3NzZkO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZn0ubG9jYXRpb24tZGV0YWlscyAuaWNvbi1saW5rIHNwYW4gc3Zne2ZpbGw6IzdkNzc2ZH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXJ7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtwYWRkaW5nOjEwcHggMjBweDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1uOy1tcy1mbGV4LXBhY2s6anVzdGlmeTstd2Via2l0LWJveC1wYWNrOmp1c3RpZnk7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW59LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3B7d2lkdGg6MTAwJTtoZWlnaHQ6NjBweDtwb3NpdGlvbjpyZWxhdGl2ZX0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnRvcCAucXVvdGUtaWNvbntoZWlnaHQ6NDBweDt3aWR0aDo0MHB4O3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotMjBweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotMjBweH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnRvcCAucXVvdGUtaWNvbiBzdmd7ZmlsbDojOTc5MjhhfS5jaWRlci1yZXZpZXctd3JhcHBlciAucXVvdGUtaW5uZXItd3JhcHBlciAudG9wOmJlZm9yZXtsZWZ0OjB9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YWZ0ZXIsLmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YmVmb3Jle3dpZHRoOmNhbGMoNTAlIC0gMjBweCk7aGVpZ2h0OjFweDtiYWNrZ3JvdW5kOiM5NzkyOGE7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0uNXB4O2JvcmRlci1yYWRpdXM6MnB4O2NvbnRlbnQ6XFxcIlxcXCJ9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC50b3A6YWZ0ZXJ7cmlnaHQ6MH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLnF1b3RlLWNvbnRlbnR7dGV4dC1hbGlnbjpjZW50ZXJ9LmNpZGVyLXJldmlldy13cmFwcGVyIC5xdW90ZS1pbm5lci13cmFwcGVyIC5xdW90ZS1jb250ZW50IHB7Zm9udC1zaXplOjEuN3JlbTttYXJnaW46MH0uY2lkZXItcmV2aWV3LXdyYXBwZXIgLnF1b3RlLWlubmVyLXdyYXBwZXIgLmJvdHRvbXt3aWR0aDoxMDAlO2hlaWdodDo2MHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5jaWRlci1yZXZpZXctd3JhcHBlciAucXVvdGUtaW5uZXItd3JhcHBlciAuYm90dG9tOmJlZm9yZXt3aWR0aDoxMDAlO2hlaWdodDoxcHg7YmFja2dyb3VuZDojYTlhNmExO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotLjVweDtsZWZ0OjA7Ym9yZGVyLXJhZGl1czoycHg7Y29udGVudDpcXFwiXFxcIn0ubm8taGVyby1oZWFkZXJ7YmFja2dyb3VuZDojZjdmN2Y3O3RleHQtYWxpZ246Y2VudGVyfS5ibG9nLWxpc3QtaXRlbXtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtwYWRkaW5nOjQwcHggMDtib3JkZXItYm90dG9tOjJweCBzb2xpZCAjZWRlYmVhfS5ibG9nLWxpc3QtaXRlbS1pbmZvey1tcy1mbGV4OjEgMCA2Ni42NjYlOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjEgMCA2Ni42NjYlfS5ibG9nLWxpc3QtaXRlbS1pbmZvIC5ibGktY2F0LC5ibG9nLWxpc3QtaXRlbS1pbmZvIGF7Y29sb3I6I2M2OWM1NDtmb250LWZhbWlseTpteXJpYWQtcHJvLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW07Zm9udC13ZWlnaHQ6NjAwfS5ibG9nLWxpc3QtaXRlbS1pbmZvIGF7bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi10b3A6MjBweH0uYmxvZy1saXN0LWl0ZW0taW5mbyBoM3ttYXJnaW46NXB4IDB9LmJsb2ctbGlzdC1pdGVtLWluZm8gLmJsaS1tZXRhe2ZvbnQtc2l6ZToxLjRyZW07bWFyZ2luLWJvdHRvbToxMHB4fS5ibG9nLWxpc3QtaXRlbS1pbmZvIC5ibGktZXhjZXJwdHtwYWRkaW5nLXJpZ2h0OjYwcHh9LmJsb2ctbGlzdC1pdGVtLWltYWdley1tcy1mbGV4OjEgMCAzMy4zMzMlOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjEgMCAzMy4zMzMlfS5saW5rLWJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztjb2xvcjojZmZmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtiYWNrZ3JvdW5kLWNvbG9yOiNhOWE2YTE7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWY7cGFkZGluZzo1cHggMTVweDtib3JkZXItcmFkaXVzOjJweDtmb250LXNpemU6MS4zcmVtO2xldHRlci1zcGFjaW5nOi4xNXJlbTstd2Via2l0LXRyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzIGVhc2UtaW4tb3V0fS5saW5rLWJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiM5ZDk5OTQ7Y29sb3I6I2ZmZn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc2N3B4KXsuYmxvZy1saXN0LWl0ZW0taW5mb3stbXMtZmxleDoxIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxIDAgMTAwJTstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfS5ibG9nLWxpc3QtaXRlbS1pbWFnZXstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1ib3R0b206MjBweH19LmJyZWFkY3J1bWJzLXdyYXBwZXJ7YmFja2dyb3VuZDojZjFmMWVmO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHh9ZmlndXJle21hcmdpbjowfWZpZ2NhcHRpb24ud3AtY2FwdGlvbi10ZXh0e2ZvbnQtc2l6ZToxLjVyZW07cGFkZGluZzo1cHggMDtmb250LXN0eWxlOml0YWxpY31pbWcuYWxpZ25yaWdodHtmbG9hdDpyaWdodDttYXJnaW46MCAwIDFlbSAxZW19aW1nLmFsaWdubGVmdHtmbG9hdDpsZWZ0O21hcmdpbjowIDFlbSAxZW0gMH1pbWcuYWxpZ25jZW50ZXJ7ZGlzcGxheTpibG9jazttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS5hbGlnbnJpZ2h0e2Zsb2F0OnJpZ2h0O21hcmdpbi1sZWZ0OjQwcHh9LmFsaWdubGVmdHtmbG9hdDpsZWZ0O21hcmdpbi1yaWdodDo0MHB4fS5hbGlnbmNlbnRlcntkaXNwbGF5OmJsb2NrO21hcmdpbi1sZWZ0OmF1dG87bWFyZ2luLXJpZ2h0OmF1dG99LmVudHJ5LXRpdGxle21hcmdpbjowfS5lbnRyeS1tZXRhe2ZvbnQtc2l6ZToxLjRyZW07Zm9udC1zdHlsZTppdGFsaWN9LnRoZS1wb3N0LWNvbnRlbnR7bWFyZ2luLXRvcDozMHB4fS50aGUtcG9zdC1mb290ZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjttYXJnaW4tdG9wOjMwcHh9LnRhZ3MtaWNvbnt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfS50YWdzLWljb24gc3Zne2ZpbGw6Z3JheX0udGFnLWxpc3Q+bGl7ZGlzcGxheTppbmxpbmUtYmxvY2t9LnRhZy1saXN0PmxpIGF7Zm9udC1zaXplOjEuNHJlbTtmb250LXdlaWdodDozMDA7bGV0dGVyLXNwYWNpbmc6MDt0ZXh0LXRyYW5zZm9ybTpub25lO2NvbG9yOmdyYXl9LnRhZy1saXN0PmxpOmFmdGVye2NvbnRlbnQ6XFxcIixcXFwiO3BhZGRpbmctcmlnaHQ6NXB4fS50YWctbGlzdD5saTpsYXN0LW9mLXR5cGU6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIn0ucmVjaXBlLWltYWdlLXdyYXBwZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6NDAlO21heC13aWR0aDo0MDBweDttYXJnaW4tbGVmdDo0MHB4fS5yZWNpcGUtaW1hZ2Utd3JhcHBlcj4qe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO292ZXJmbG93OmhpZGRlbn0ucmVjaXBlLWltYWdlLXdyYXBwZXI+KiBpbWd7d2lkdGg6MTAwJX0ucmVjaXBlLW1ldGF7LW1zLWZsZXg6MTstd2Via2l0LWJveC1mbGV4OjE7ZmxleDoxfS5yZWNpcGUtbWV0YSAuYnJlYWRjcnVtYnttYXJnaW4tYm90dG9tOjEwcHh9LnJlY2lwZS1tZXRhIC5yZWNpcGUtZGV0YWlsc3ttYXJnaW4tdG9wOjIwcHh9LnJlY2lwZS1tZXRhIC5yZWNpcGUtZGV0YWlscyBwe21hcmdpbjowfS5yZWNpcGUtbWV0YSAucmVjaXBlLWRldGFpbHMgcC5yZWNpcGUtZGVzY3JpcHRpb257bWFyZ2luOjEwcHggMH0udGhlLXJlY2lwZS1pbmdyZWRpZW50cyBoNHttYXJnaW4tYm90dG9tOjEwcHh9LnJlY2lwZS1pbmdyZWRpZW50cy1saXN0e2xpc3Qtc3R5bGUtdHlwZTpkaXNjO3BhZGRpbmctbGVmdDoyMHB4fS50aGUtcmVjaXBlLWRpcmVjdGlvbnN7bWFyZ2luLXRvcDoyMHB4fS50aGUtcmVjaXBlLWRpcmVjdGlvbnMgaDR7bWFyZ2luLWJvdHRvbToxMHB4fS50aGUtcmVjaXBlLXNvdXJjZXttYXJnaW4tdG9wOjEwcHh9LnBvc3Qtd3JhcHBlci1SZWNpcGVze2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtZGlyZWN0aW9uOnJvdzstd2Via2l0LWJveC1vcmllbnQ6aG9yaXpvbnRhbDstd2Via2l0LWJveC1kaXJlY3Rpb246bm9ybWFsO2ZsZXgtZGlyZWN0aW9uOnJvdzstbXMtZmxleC1mbG93OndyYXA7ZmxleC1mbG93OndyYXA7bWFyZ2luLWxlZnQ6LTI1cHg7bWFyZ2luLXJpZ2h0Oi0yNXB4O2xpc3Qtc3R5bGU6bm9uZX0ucG9zdC13cmFwcGVyLVJlY2lwZXM+KntwYWRkaW5nOjI1cHg7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MTAwJTtmbGV4LWJhc2lzOjEwMCU7bWF4LXdpZHRoOjEwMCV9QG1lZGlhIChtaW4td2lkdGg6NTQwcHgpey5wb3N0LXdyYXBwZXItUmVjaXBlcz4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjUwJTtmbGV4LWJhc2lzOjUwJTttYXgtd2lkdGg6NTAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LnBvc3Qtd3JhcHBlci1SZWNpcGVzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fUBtZWRpYSAobWluLXdpZHRoOjExNDBweCl7LnBvc3Qtd3JhcHBlci1SZWNpcGVzPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MjUlO2ZsZXgtYmFzaXM6MjUlO21heC13aWR0aDoyNSV9fS5wb3N0LXdyYXBwZXItUmVjaXBlcyAuYmxvZy1saXN0LWl0ZW17Ym9yZGVyLWJvdHRvbTpub25lO3BhZGRpbmc6MH0ucG9zdC13cmFwcGVyLVJlY2lwZXMgLmJsb2ctbGlzdC1pdGVtIGF7bWFyZ2luOjIwcHggMDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojN2Q3NzZkO2ZvbnQtc2l6ZToxLjZyZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTstd2Via2l0LXRyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXN9LnBvc3Qtd3JhcHBlci1SZWNpcGVzIC5ibG9nLWxpc3QtaXRlbSBhOmhvdmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6MTAwMHB4KXsucmVjaXBlLW1ldGF7LW1zLWZsZXg6MCAwIDEwMCU7LXdlYmtpdC1ib3gtZmxleDowO2ZsZXg6MCAwIDEwMCU7LW1zLWZsZXgtb3JkZXI6Mjstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7b3JkZXI6Mn0ucmVjaXBlLWltYWdlLXdyYXBwZXJ7d2lkdGg6MTAwJTstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1sZWZ0OjA7bWFyZ2luLWJvdHRvbToxMHB4fX0ucXVlc3Rpb257cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luLWJvdHRvbToyMHB4fS5xdWVzdGlvbjpob3ZlcntjdXJzb3I6cG9pbnRlcn0ucXVlc3Rpb24gaDR7ZGlzcGxheTpibG9jazt3aWR0aDoxMDAlO3BhZGRpbmctbGVmdDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cG9zaXRpb246cmVsYXRpdmV9LnF1ZXN0aW9uIC5mYXEtaWNvbnt3aWR0aDoyNHB4O2hlaWdodDoyNHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo4cHg7bGVmdDo0cHg7ZmlsbDojN2Q3NzZkOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjM1czt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMzVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjM1c30uYW5zd2Vye21heC1oZWlnaHQ6MDtvdmVyZmxvdzpoaWRkZW47LXdlYmtpdC10cmFuc2l0aW9uOm1heC1oZWlnaHQgLjI1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOm1heC1oZWlnaHQgLjI1cyBlYXNlLWluLW91dH0uYW5zd2VyIHB7d2lkdGg6MTAwJTttYXJnaW46MDtwYWRkaW5nOjAgMCAyMHB4IDQwcHh9LnF1ZXN0aW9uLmlzLWV4cGFuZGVkIC5mYXEtaWNvbnstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO2ZpbGw6Izk3M2IxNX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjEwMDBweCl7LnF1ZXN0aW9uIGg0e2Rpc3BsYXk6YmxvY2s7d2lkdGg6MTAwJTtwYWRkaW5nLWxlZnQ6NDBweDtsaW5lLWhlaWdodDoxLjR9fS5hYm91dC1pbnRyb3twb3NpdGlvbjpyZWxhdGl2ZX0uYWJvdXQtaW50cm86YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uYWJvdXQtaW1hZ2UtZ3JpZHstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5hYm91dC1pbWFnZS1ncmlkIC5jb250ZW50e21hcmdpbjowIDEwcHh9LmFib3V0LXF1b3RlLXRleHR7dGV4dC1hbGlnbjpjZW50ZXJ9LmFib3V0LXF1b3RlLXRleHQgaDN7ZGlzcGxheTppbmxpbmUtYmxvY2s7bGluZS1oZWlnaHQ6NTBweDtib3JkZXItdG9wOjJweCBzb2xpZCAjOTczYjE1O2JvcmRlci1ib3R0b206MnB4IHNvbGlkICM5NzNiMTU7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZToyLjRyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO2NvbG9yOiM5NzNiMTU7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LmFib3V0LWdyaWQgLm91dGVyLWNvbnRhaW5lci1mdWxse3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtc2l6ZTpjb3Zlcn0uYWJvdXQtZ3JpZCAuY29udGFpbmVyLW92ZXJsYXl7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuMik7LW1zLWZsZXgtcGFjazpzdGFydDstd2Via2l0LWJveC1wYWNrOnN0YXJ0O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0fS5hYm91dC1ncmlkIC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHt3aWR0aDo1MDBweDttYXJnaW4tbGVmdDoxNSV9LmFib3V0LWdyaWQgLmNvbnRhaW5lci1vdmVybGF5IGgye2NvbG9yOiNmZmY7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZTo2NHB4fS5hYm91dC1ib3R0b20tdGV4dHtwb3NpdGlvbjpyZWxhdGl2ZX0uYWJvdXQtYm90dG9tLXRleHQ6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7Ym90dG9tOjA7bGVmdDowO3JpZ2h0OjA7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvZ3J1bmdlLWJnMy1kYXJrLnN2Zyk7ei1pbmRleDoyO2NvbnRlbnQ6XFxcIlxcXCI7YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0O2JhY2tncm91bmQtcG9zaXRpb246MTAwJTt6LWluZGV4Oi0xO2JhY2tncm91bmQtc2l6ZTpjb250YWluO2JhY2tncm91bmQtcmVwZWF0OnJlcGVhdH0uc3RvcC1ieSAub3V0ZXItY29udGFpbmVyLWZ1bGx7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1zaXplOmNvdmVyO2JhY2tncm91bmQtcmVwZWF0Om5vLXJlcGVhdH0uc3RvcC1ieSAuY29udGFpbmVyLW92ZXJsYXl7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjA7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsLjI1KTstbXMtZmxleC1wYWNrOmVuZDstd2Via2l0LWJveC1wYWNrOmVuZDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1lbmR9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5LC5zdG9wLWJ5IC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zdG9wLWJ5IC5jb250YWluZXItb3ZlcmxheSAuY29udGVudHt3aWR0aDo0MDBweDttYXJnaW4tcmlnaHQ6MTUlO2JhY2tncm91bmQ6I2YxZjFlZjtib3JkZXItcmFkaXVzOjNweDtwYWRkaW5nOjIwcHg7dGV4dC1hbGlnbjpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uc3RvcC1ieSAuY29udGFpbmVyLW92ZXJsYXkgLmNvbnRlbnQgcHttYXJnaW4tdG9wOjEwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5ey1tcy1mbGV4LXBhY2s6Y2VudGVyOy13ZWJraXQtYm94LXBhY2s6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5IC5jb250ZW50e21hcmdpbjowfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjcwMHB4KXsuYWJvdXQtaW1hZ2UtZ3JpZCAuY29udGVudHstbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW4tYm90dG9tOjIwcHh9LmFib3V0LWltYWdlLWdyaWQgLmNvbnRlbnQ6bGFzdC1vZi10eXBle21hcmdpbi1ib3R0b206MH0uYWJvdXQtaW1hZ2UtZ3JpZCAuY29udGVudCBpbWd7d2lkdGg6MTAwJX0uYWJvdXQtcXVvdGUtdGV4dCBoM3tsaW5lLWhlaWdodDozMHB4fS5hYm91dC1ncmlkIC5jb250YWluZXItb3ZlcmxheSBoMntmb250LXNpemU6MzZweDt0ZXh0LWFsaWduOmNlbnRlcn0uYWJvdXQtZ3JpZCAuY29udGFpbmVyLW92ZXJsYXkgLmNvbnRlbnR7bWFyZ2luOjAgYXV0bzt3aWR0aDo3MCV9LnN0b3AtYnkgLm91dGVyLWNvbnRhaW5lci1mdWxse21pbi1oZWlnaHQ6MzAwcHh9LnN0b3AtYnkgLmNvbnRhaW5lci1vdmVybGF5IC5jb250ZW50e21hcmdpbjowIGF1dG87d2lkdGg6OTAlfX0uY2lkZXIxMDEtaW50cm97YmFja2dyb3VuZDojZjJmMmYyfS5wcm9jZXNzLXNsaWRlcnt3aWR0aDo4MCU7bWF4LXdpZHRoOjU1MHB4O21hcmdpbjowIGF1dG87dGV4dC1hbGlnbjpjZW50ZXJ9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3Rze3Bvc2l0aW9uOnJlbGF0aXZlO3BhZGRpbmc6MCA0MHB4fS5wcm9jZXNzLXNsaWRlciAuc2xpY2stZG90czphZnRlcntjb250ZW50OlxcXCJcXFwiO3dpZHRoOjEwMCU7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTttYXJnaW4tdG9wOi0xcHg7aGVpZ2h0OjJweDtiYWNrZ3JvdW5kOiM3ZDc3NmQ7bGVmdDowO2JvcmRlci1yYWRpdXM6MnB4O3otaW5kZXg6LTF9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpOmJlZm9yZXtkaXNwbGF5Om5vbmV9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpe3dpZHRoOjI0cHg7aGVpZ2h0OjI0cHg7Ym9yZGVyLXJhZGl1czoxMDAlO2JvcmRlcjoycHggc29saWQgIzdkNzc2ZDtiYWNrZ3JvdW5kOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXI7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2N1cnNvcjpwb2ludGVyfS5wcm9jZXNzLXNsaWRlciAuc2xpY2stZG90cyBsaSBhe2xldHRlci1zcGFjaW5nOjA7Zm9udC1zaXplOjEuMXJlbTtsaW5lLWhlaWdodDoyM3B4O2hlaWdodDoyMnB4O2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6dmlueWwsc2VyaWZ9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZXtiYWNrZ3JvdW5kOiM3ZDc3NmR9LnByb2Nlc3Mtc2xpZGVyIC5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZSBhe2NvbG9yOiNmZmZ9LnByb2Nlc3Mtc2xpZGV7cGFkZGluZzoyMHB4fS5wcm9jZXNzLXNsaWRlIC5wcm9jZXNzLWRlc2NyaXB0aW9uLXdyYXBwZXJ7bWFyZ2luLXRvcDoxMHB4fS5jaWRlci1mYWN0c3tiYWNrZ3JvdW5kOiM1ZTU5NTI7cGFkZGluZzo2cmVtIDB9LmNpZGVyLWZhY3RzIGgze2NvbG9yOiNmZmY7dGV4dC1hbGlnbjpjZW50ZXJ9LmZhY3Qtd3JhcHBlcntkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3c7LW1zLWZsZXgtZmxvdzp3cmFwO2ZsZXgtZmxvdzp3cmFwO21hcmdpbi1sZWZ0Oi0yNXB4O21hcmdpbi1yaWdodDotMjVweDtsaXN0LXN0eWxlOm5vbmV9LmZhY3Qtd3JhcHBlcj4qe3BhZGRpbmc6MjVweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmZhY3Qtd3JhcHBlcj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfX1AbWVkaWEgKG1pbi13aWR0aDo3ODZweCl7LmZhY3Qtd3JhcHBlcj4qey1tcy1mbGV4LXByZWZlcnJlZC1zaXplOjEwMCU7ZmxleC1iYXNpczoxMDAlO21heC13aWR0aDoxMDAlfX1AbWVkaWEgKG1pbi13aWR0aDoxMTQwcHgpey5mYWN0LXdyYXBwZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTozMy4zMzMzMyU7ZmxleC1iYXNpczozMy4zMzMzMyU7bWF4LXdpZHRoOjMzLjMzMzMzJX19LmZhY3Qtd3JhcHBlciBoNHtoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6I2ZmZn0uZmFjdC13cmFwcGVyIGg0IC5pY29ue2Rpc3BsYXk6aW5saW5lLWJsb2NrO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7bWFyZ2luLXJpZ2h0OjVweH0uZmFjdC13cmFwcGVyIGg0IC5pY29uIHN2Z3tmaWxsOiNmZmZ9LmZhY3Qtd3JhcHBlciBwe3BhZGRpbmctbGVmdDoyNXB4O21hcmdpbjowO2NvbG9yOiNmMmYyZjJ9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1ue2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7cGFkZGluZzoxMHB4Oy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlOy1tcy1mbGV4LWRpcmVjdGlvbjpyb3c7LXdlYmtpdC1ib3gtb3JpZW50Omhvcml6b250YWw7LXdlYmtpdC1ib3gtZGlyZWN0aW9uOm5vcm1hbDtmbGV4LWRpcmVjdGlvbjpyb3d9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ldmVudF9pbWFnZV93cmFwcGVye3dpZHRoOjYwJX0uaW5uZXItY29udGFpbmVyLWYgLmNvbW1pdC1jb2x1bW4gLnF1b3RlLXRleHR7bWFyZ2luLWxlZnQ6MjBweDstbXMtZmxleDoxOy13ZWJraXQtYm94LWZsZXg6MTtmbGV4OjF9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ibHVyYi10ZXh0e21hcmdpbi1yaWdodDoyMHB4Oy1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uY2FsbG91dC13cmFwcGVye2JhY2tncm91bmQ6I2YxZjFlZjtwYWRkaW5nOjIwcHg7cG9zaXRpb246cmVsYXRpdmU7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5jYWxsb3V0LXdyYXBwZXI6YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTBweDtsZWZ0OjEwcHg7cmlnaHQ6MTBweDtib3R0b206MTBweDtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9LmNhbGxvdXQtd3JhcHBlciBwe21hcmdpbjowO3RleHQtYWxpZ246Y2VudGVyfS52YWx1ZXN7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKX0udmFsdWVzIC52YWx1ZXtiYWNrZ3JvdW5kOiNmZmY7Ym9yZGVyOjFweCBzb2xpZCAjZTVlNGUyO3Bvc2l0aW9uOnJlbGF0aXZlO21hcmdpbjoxMHB4IDB9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmd7d2lkdGg6MjAwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2JvdHRvbTowO2JvcmRlci1yaWdodDoxcHggc29saWQgI2U1ZTRlMjtwYWRkaW5nOjEwcHg7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO2FsaWduLWl0ZW1zOmNlbnRlcjstbXMtZmxleC1wYWNrOmNlbnRlcjstd2Via2l0LWJveC1wYWNrOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS52YWx1ZXMgLnZhbHVlIC5oZWFkaW5nIHNwYW57cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3JpZ2h0OjA7Ym90dG9tOjB9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmcgc3BhbiBzdmd7ZmlsbDpyZ2JhKDE1MSw1OSwyMSwuMil9LnZhbHVlcyAudmFsdWUgLmhlYWRpbmcgaDR7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDoyfS52YWx1ZXMgLnZhbHVlIC5jb250ZW50e3BhZGRpbmc6MjBweCAyMHB4IDIwcHggMjIwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo5MDBweCl7LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uey1tcy1mbGV4LWRpcmVjdGlvbjpjb2x1bW47LXdlYmtpdC1ib3gtb3JpZW50OnZlcnRpY2FsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5pbm5lci1jb250YWluZXItZiAuY29tbWl0LWNvbHVtbiAuZXZlbnRfaW1hZ2Vfd3JhcHBlcnt3aWR0aDoxMDAlOy1tcy1mbGV4LW9yZGVyOjE7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDoyO29yZGVyOjF9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5xdW90ZS10ZXh0e21hcmdpbi1sZWZ0OjA7bWFyZ2luLXRvcDoyMHB4Oy1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjJ9LmlubmVyLWNvbnRhaW5lci1mIC5jb21taXQtY29sdW1uIC5ibHVyYi10ZXh0e21hcmdpbi1yaWdodDowO21hcmdpbi10b3A6MjBweDstbXMtZmxleC1vcmRlcjoyOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MztvcmRlcjoyfX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjcwMHB4KXsudmFsdWVzIC52YWx1ZXtwYWRkaW5nLXRvcDo4MHB4fS52YWx1ZXMgLnZhbHVlIC5oZWFkaW5ne3dpZHRoOjEwMCU7Ym9yZGVyLXJpZ2h0Om5vbmU7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2U1ZTRlMjtoZWlnaHQ6ODBweH0udmFsdWVzIC52YWx1ZSAuY29udGVudHt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nLWxlZnQ6MjBweH19LnN0b3J5LWludHJve2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2JnLW5vaXNlLnBuZyl9Lmhpc3RvcnktYmFubmVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMTVweDtsZWZ0OjUwJTttYXJnaW4tbGVmdDotNjVweDt3aWR0aDoxMzBweDtoZWlnaHQ6MzBweH0uaGlzdG9yeS1iYW5uZXIgaW1ne3dpZHRoOjEwMCV9Lm91ci1oaXN0b3J5e3Bvc2l0aW9uOnJlbGF0aXZlfS5vdXItaGlzdG9yeTpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxcHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6NTAlfS5oaXN0b3J5LXdyYXB7bWF4LXdpZHRoOjEwMDBweDttYXJnaW46MCBhdXRvfS5oaXN0b3J5LWl0ZW17ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDtwYWRkaW5nOjhyZW0gMDstbXMtZmxleC1wYWNrOmp1c3RpZnk7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuOy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtvcGFjaXR5OjA7cG9zaXRpb246cmVsYXRpdmU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSg1MHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSg1MHB4KTstd2Via2l0LXRyYW5zaXRpb246YWxsIDFzIGVhc2Utb3V0O3RyYW5zaXRpb246YWxsIDFzIGVhc2Utb3V0fS5oaXN0b3J5LWl0ZW0gLmhpc3RvcnktaGVhZHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDowO2xlZnQ6MDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlzdG9yeS1pdGVtIC5oaXN0b3J5LWhlYWQgLmhpc3RvcnktaGVhZC1jb250ZW50e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JhY2tncm91bmQ6I2YxZjFlZjtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7aGVpZ2h0OjI2cHg7bGluZS1oZWlnaHQ6MjZweDt3aWR0aDoxMDBweDt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtjb2xvcjojYTlhNmExfS5oaXN0b3J5LWl0ZW0gLnNpZGUtb25ley1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MTttYXJnaW4tcmlnaHQ6MjBweDstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxfS5oaXN0b3J5LWl0ZW0gLnNpZGUtb25lIC5ldmVudF9pbWFnZV93cmFwcGVye2JhY2tncm91bmQ6I2ZmZn0uaGlzdG9yeS1pdGVtIC5zaWRlLXR3b3stbXMtZmxleDowIDAgNDUlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCA0NSU7LW1zLWZsZXgtb3JkZXI6Mjstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7b3JkZXI6MjttYXJnaW4tcmlnaHQ6MDttYXJnaW4tbGVmdDo0MHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7YmFja2dyb3VuZDojZmZmfS5oaXN0b3J5LWl0ZW06bnRoLWNoaWxkKG9kZCkgLnNpZGUtb25ley1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7bWFyZ2luLWxlZnQ6MjBweDttYXJnaW4tcmlnaHQ6MH0uaGlzdG9yeS1pdGVtOm50aC1jaGlsZChvZGQpIC5zaWRlLXR3b3stbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbi1yaWdodDo0MHB4O21hcmdpbi1sZWZ0OjB9Lmhpc3RvcnktaXRlbS5mYWRlLWlue29wYWNpdHk6MTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6OTYwcHgpey5oaXN0b3J5LXdyYXB7bWF4LXdpZHRoOjYwMHB4fS5oaXN0b3J5LWl0ZW17bWFyZ2luOjRyZW0gMH0uaGlzdG9yeS1pdGVtIC5zaWRlLW9uZSwuaGlzdG9yeS1pdGVtIC5zaWRlLXR3b3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJTttYXJnaW46MDt0ZXh0LWFsaWduOmNlbnRlcn0uaGlzdG9yeS1pdGVtOm50aC1jaGlsZChvZGQpIC5zaWRlLW9uZXstbXMtZmxleC1vcmRlcjoxOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjtvcmRlcjoxO21hcmdpbjowfS5oaXN0b3J5LWl0ZW06bnRoLWNoaWxkKG9kZCkgLnNpZGUtdHdvey1tcy1mbGV4LW9yZGVyOjI7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozO29yZGVyOjI7bWFyZ2luOjB9fS5jb250YWN0LWJsdXJiey1tcy1mbGV4OjE7LXdlYmtpdC1ib3gtZmxleDoxO2ZsZXg6MX0uY29udGFjdC1pbmZve21hcmdpbi1sZWZ0OjUwcHh9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo3MDBweCl7LmNvbnRhY3QtYmx1cmIsLmNvbnRhY3QtaW5mb3stbXMtZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1mbGV4OjA7ZmxleDowIDAgMTAwJX0uY29udGFjdC1pbmZve21hcmdpbi1sZWZ0OjB9fS5jb250YWN0LWZvcm17YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYmctbm9pc2UucG5nKTtwYWRkaW5nOjZyZW0gMH0ucG9wdXAtaXRlbS13cmFwe3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbi1yaWdodDoxMHB4fS5wb3B1cC1pdGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtLXdyYXB7d2lkdGg6NzBweDtoZWlnaHQ6NzBweH0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIGEucG9wdXAtaXRlbS1lbWJsZW17Y3Vyc29yOnBvaW50ZXJ9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW17d2lkdGg6NzBweDtoZWlnaHQ6NzBweDtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbSBzdmd7ZmlsbDojZDRhNzRkfS5wb3B1cC1pdGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtLXdyYXAgLnBvcHVwLWl0ZW0tZW1ibGVtIC5jb3VudHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDtib3R0b206MDtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojZmZmO3BhZGRpbmctdG9wOjE0cHh9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0gLmNvdW50IHNwYW57ZGlzcGxheTpibG9jazt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDoxO2ZvbnQtc2l6ZToxMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbS13cmFwIC5wb3B1cC1pdGVtLWVtYmxlbSAuY291bnQgc3Bhbi5udW1iZXJ7Zm9udC1zaXplOjE4cHh9LnBvcHVwLWl0ZW0td3JhcCAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtdHJpYW5nbGV7ZGlzcGxheTpub25lO3dpZHRoOjA7aGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7Ym9yZGVyLWxlZnQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItcmlnaHQ6MTBweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOjEwcHggc29saWQgI2ZmZjtib3R0b206LTEwcHg7bGVmdDoyNXB4O3otaW5kZXg6MztvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0cmFuc2l0aW9uOm9wYWNpdHkgLjI1c30ucG9wdXAtaXRlbS13cmFwIC5wb3B1cC1pdGVtLWNvbnRlbnR7ZGlzcGxheTpub25lO3dpZHRoOjIwMHB4O2JhY2tncm91bmQ6I2ZmZjtwYWRkaW5nOjIwcHg7cG9zaXRpb246YWJzb2x1dGU7dG9wOjEwMCU7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsMTBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDEwcHgpO21hcmdpbi1sZWZ0OjM1cHg7LXdlYmtpdC1ib3gtc2hhZG93OjFweCAycHggMnB4IDAgcmdiYSgwLDAsMCwuMSk7Ym94LXNoYWRvdzoxcHggMnB4IDJweCAwIHJnYmEoMCwwLDAsLjEpO3otaW5kZXg6MjtvcGFjaXR5OjA7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0cmFuc2l0aW9uOm9wYWNpdHkgLjI1czt0ZXh0LWFsaWduOmNlbnRlcn0ucG9wdXAtaXRlbS13cmFwOmhvdmVyIC5wb3B1cC1pdGVtLWNvbnRlbnQsLnBvcHVwLWl0ZW0td3JhcDpob3ZlciAucG9wdXAtaXRlbS1lbWJsZW0td3JhcCAucG9wdXAtdHJpYW5nbGV7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3BhY2l0eToxfS5hd2FyZHMtd3JhcHttYXJnaW4tdG9wOjIwcHh9LmF3YXJkcy1oZWFkZXJ7cGFkZGluZy1ib3R0b206MTBweDtwYWRkaW5nLXRvcDoxMHB4O2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246ZW5kOy13ZWJraXQtYm94LWFsaWduOmVuZDthbGlnbi1pdGVtczpmbGV4LWVuZDttYXJnaW4tYm90dG9tOjEwcHh9LmF3YXJkcy1oZWFkZXIgaDJ7bWFyZ2luOjA7Zm9udC1zaXplOjJyZW19dWwuYXdhcmRzLWl0ZW1zLWxpc3R7d2lkdGg6MTAwJTtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LXdyYXA6d3JhcDtmbGV4LXdyYXA6d3JhcDtwb3NpdGlvbjpyZWxhdGl2ZTtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9dWwuYXdhcmRzLWl0ZW1zLWxpc3QgbGkuYXdhcmRzLWl0ZW17YmFja2dyb3VuZDojZmZmO3dpZHRoOjUwJTtwYWRkaW5nOjEwcHg7cGFkZGluZy1sZWZ0OjMwcHg7Ym9yZGVyLXRvcDoxcHggc29saWQgI2U1ZTRlMjtwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MS40cmVtfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOmZpcnN0LWNoaWxkLHVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOm50aC1jaGlsZCgyKXtib3JkZXItdG9wOm5vbmV9dWwuYXdhcmRzLWl0ZW1zLWxpc3QgbGkuYXdhcmRzLWl0ZW0gc3Bhbntwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoyMHB4O2hlaWdodDoyMHB4O2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtiYWNrZ3JvdW5kLXJlcGVhdDpuby1yZXBlYXQ7dG9wOjUwJTttYXJnaW4tdG9wOi0xMXB4O2xlZnQ6NXB4fXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtIHNwYW4uYXdhcmQtaWNvbi1nb2xke2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L2dvbGQtbWVkYWwucG5nKX11bC5hd2FyZHMtaXRlbXMtbGlzdCBsaS5hd2FyZHMtaXRlbSBzcGFuLmF3YXJkLWljb24tc2lsdmVye2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ltYWdlcy9kaXN0L3NpbHZlci1tZWRhbC5wbmcpfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtIHNwYW4uYXdhcmQtaWNvbi1icm9uemV7YmFja2dyb3VuZC1pbWFnZTp1cmwoaHR0cDovL2JyaHMuZmx5d2hlZWxzaXRlcy5jb20vd3AtY29udGVudC90aGVtZXMvYm9sZHJvY2svaW1hZ2VzL2Rpc3QvYnJvbnplLW1lZGFsLnBuZyl9dWwuYXdhcmRzLWl0ZW1zLWxpc3Q6YWZ0ZXJ7aGVpZ2h0OjEwMCU7Y29udGVudDpcXFwiXFxcIjt3aWR0aDoxcHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6NTAlfS5hd2FyZHMtaXRlbXMtdHJpZ2dlcnt3aWR0aDoxMDAlOy1tcy1mbGV4OjAgMCAxMDAlOy13ZWJraXQtYm94LWZsZXg6MDtmbGV4OjAgMCAxMDAlO2JhY2tncm91bmQ6I2NiYzljNTtjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjVweCAwO3Bvc2l0aW9uOnJlbGF0aXZlO3otaW5kZXg6MjttYXJnaW4tdG9wOjEwcHh9LmF3YXJkcy1pdGVtcy10cmlnZ2VyOmJlZm9yZXtjb250ZW50OlxcXCJTaG93IE1vcmVcXFwifS5hd2FyZHMtaXRlbXMtdHJpZ2dlci5zaG93LWxlc3M6YmVmb3Jle2NvbnRlbnQ6XFxcIlNob3cgTGVzc1xcXCJ9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxMTQwcHgpe3VsLmF3YXJkcy1pdGVtcy1saXN0OmFmdGVye2Rpc3BsYXk6bm9uZX11bC5hd2FyZHMtaXRlbXMtbGlzdCBsaS5hd2FyZHMtaXRlbXt3aWR0aDoxMDAlfXVsLmF3YXJkcy1pdGVtcy1saXN0IGxpLmF3YXJkcy1pdGVtOm50aC1jaGlsZCgyKXtib3JkZXItdG9wOjFweCBzb2xpZCAjZTVlNGUyfX0uZmluZGVyLWludHJvIC5pbm5lci1jb250YWluZXItYnttYXJnaW4tYm90dG9tOjEwcHh9LmZpbmRlci1pbnRybyAuaWZyYW1lLXdyYXBwZXIgaWZyYW1le3Bvc2l0aW9uOnN0YXRpYzt3aWR0aDoxMDAlO21heC13aWR0aDoxMDAlfS5zY19jbGVhcmZpeDphZnRlcntjb250ZW50OlxcXCJcXFwiO2Rpc3BsYXk6dGFibGU7dGFibGUtbGF5b3V0OmZpeGVkO2NsZWFyOmJvdGh9I3NjX2NhbGVuZGFyIHRhYmxle3dpZHRoOjEwMCU7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2Zsb2F0OmxlZnR9I3NjX2NhbGVuZGFyIHRoe2JhY2tncm91bmQ6I2ZkZmRmZDt0ZXh0LWFsaWduOmNlbnRlcjt0ZXh0LXRyYW5zZm9ybTpjYXBpdGFsaXplO3BhZGRpbmc6M3B4IDRweCFpbXBvcnRhbnQ7Zm9udC1zaXplOjEuMnJlbX0jc2NfY2FsZW5kYXIgdGQsI3NjX2NhbGVuZGFyIHRoe3dpZHRoOjEzLjI1JTtib3JkZXI6MXB4IHNvbGlkICNkZGR9I3NjX2NhbGVuZGFyIHRke2ZvbnQtc2l6ZToxMXB4O3BhZGRpbmc6MCFpbXBvcnRhbnR9I3NjX2NhbGVuZGFyIHRkLmNhbGVuZGFyLWRheXtiYWNrZ3JvdW5kOiNmYmZiZmI7aGVpZ2h0OjQwcHh9I3NjX2NhbGVuZGFyIHRkLmNhbGVuZGFyLWRheS1ucHtiYWNrZ3JvdW5kOiNmMGYwZjB9I3NjX2NhbGVuZGFyIHRkIGRpdi5zY19kYXlfZGl2e3BhZGRpbmc6OHB4fSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZHtwYWRkaW5nOjhweDtiYWNrZ3JvdW5kOiNmMGYwZjA7Ym9yZGVyOjFweCBzb2xpZCAjZGRkO2JvcmRlci1ib3R0b206MH0jc2NfZXZlbnRfbmF2X3dyYXAsI3NjX2V2ZW50X3NlbGVjdCwjc2NfZXZlbnRzX2NhbGVuZGFyX2hlYWQgaDJ7d2lkdGg6MzMlO2Zsb2F0OmxlZnQ7bWFyZ2luOjA7Y2xlYXI6bm9uZX0jc2NfZXZlbnRfbmF2X3dyYXB7dGV4dC1hbGlnbjpyaWdodH0jc2NfZXZlbnRfbmF2X3dyYXAgZm9ybXtkaXNwbGF5OmlubGluZTt0ZXh0LWFsaWduOnJpZ2h0fSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZCBoMnt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDoyNnB4O2ZvbnQtc2l6ZToxLjhyZW19I3NjX2V2ZW50c19jYWxlbmRhcl9oZWFkIHNlbGVjdHtmb250LXNpemU6LjdyZW19I3NjX2V2ZW50c19jYWxlbmRhcl9oZWFkIGlucHV0e2ZvbnQtc2l6ZToxcmVtO3BhZGRpbmc6MnB4IDEwcHh9I3NjX2V2ZW50c19jYWxlbmRhciBpbnB1dCwjc2NfZXZlbnRzX2NhbGVuZGFyIHNlbGVjdHttYXJnaW46MCA1cHggMCAwfS5zY19zbWFsbCAjc2NfZXZlbnRfbmF2X3dyYXB7bWFyZ2luOjhweCAwIDB9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfd3JhcCwuc2Nfc21hbGwgI3NjX2V2ZW50X3NlbGVjdHtmbG9hdDpub25lO3dpZHRoOjEwMCV9LnNjX3NtYWxsICNzY19jYWxlbmRhciB0ZCBkaXZ7cGFkZGluZzoxcHh9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfbmV4dCwuc2Nfc21hbGwgI3NjX2V2ZW50X25hdl9wcmV2e2Rpc3BsYXk6YmxvY2s7d2lkdGg6NTAlO2Zsb2F0OmxlZnR9LnNjX3NtYWxsICNzY19ldmVudF9uYXZfcHJldnt0ZXh0LWFsaWduOmxlZnR9I3NjX2NhbGVuZGFyIHRkIGRpdi5kYXktbnVtYmVye2Zsb2F0OnJpZ2h0O21hcmdpbjotNnB4IC00cHggMCAwfS5zY19zbWFsbCAjc2NfY2FsZW5kYXIgdGQgZGl2LmRheS1udW1iZXJ7ZmxvYXQ6bm9uZTt0ZXh0LWFsaWduOnJpZ2h0O3BhZGRpbmc6MDttYXJnaW46LTNweCAxcHggMCAwfS5zY19ldmVudF9kZXRhaWxze21hcmdpbjowIDAgMTVweH0uc2NfZXZlbnRzX2xpc3QgLnNjX2V2ZW50e2NsZWFyOmJvdGh9LnNjX2V2ZW50c19saXN0IC5zY19ldmVudF9jYXRlZ29yaWVzLC5zY19ldmVudHNfbGlzdCAuc2NfZXZlbnRfZGF0ZSwuc2NfZXZlbnRzX2xpc3QgLnNjX2V2ZW50X2xpbmssLnNjX2V2ZW50c19saXN0IC5zY19ldmVudF90aW1lLC5zY19ldmVudHNfbGlzdCAuc2NfZXZlbnRfdGl0bGV7ZmxvYXQ6bGVmdDtjbGVhcjpsZWZ0fS5zY19ldmVudHNfY2FsZW5kYXIgYXt3aGl0ZS1zcGFjZTpub3JtYWw7cGFkZGluZy10b3A6MnB4O2ZvbnQtc2l6ZToxLjJyZW07dGV4dC10cmFuc2Zvcm06bm9uZTtjb2xvcjojOTczYjE1fSNjb250ZW50IC5pbm5lci1jb250YWluZXJ7b3ZlcmZsb3c6aGlkZGVufUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDo2ODBweCl7LnNjLXRhYmxle292ZXJmbG93OmhpZGRlbn0uc2MtdGFibGUgdGh7ZGlzcGxheTpub25lfSNjb250ZW50IC5zYy10YWJsZSB0ciB0ZHtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246bGVmdDtwYWRkaW5nLWxlZnQ6NTAlO3dpZHRoOmF1dG99LnNjLXRhYmxlIHRkOmZpcnN0LWNoaWxke3BhZGRpbmctdG9wOi41ZW19LnNjLXRhYmxlIHRkOmxhc3QtY2hpbGR7cGFkZGluZy1ib3R0b206LjVlbX0uc2MtdGFibGUgdGQ6Zmlyc3QtY2hpbGR7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsMCwwLC4xKX0jc2NfY2FsZW5kYXIgdGQuY2FsZW5kYXItZGF5e2hlaWdodDphdXRvO292ZXJmbG93OmhpZGRlbn0jc2NfY2FsZW5kYXIgLnNjLXRhYmxlIHRkLmNhbGVuZGFyLWRheS1ucHtkaXNwbGF5Om5vbmV9I3NjX2NhbGVuZGFyIHRkIGRpdi5kYXktbnVtYmVye2Zsb2F0OmxlZnQ7bWFyZ2luOjAgNXB4IDVweCAwfSNzYy1jYWxlbmRhciAuc2MtdGFibGUgLnNjX2RheV9kaXZ7b3ZlcmZsb3c6aGlkZGVufSNzY19ldmVudHNfY2FsZW5kYXJfaGVhZCBoMnt3aWR0aDoxMDAlO21hcmdpbjowIDAgMTBweH0jc2NfZXZlbnRfbmF2X3dyYXB7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjAgYXV0bztmbG9hdDpub25lfSNzY19ldmVudF9uYXZfd3JhcCBmb3Jte2Rpc3BsYXk6aW5saW5lO3RleHQtYWxpZ246Y2VudGVyfX0uYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXJ7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5Oi13ZWJraXQtYm94O2Rpc3BsYXk6ZmxleDstbXMtZmxleC1kaXJlY3Rpb246cm93Oy13ZWJraXQtYm94LW9yaWVudDpob3Jpem9udGFsOy13ZWJraXQtYm94LWRpcmVjdGlvbjpub3JtYWw7ZmxleC1kaXJlY3Rpb246cm93Oy1tcy1mbGV4LWZsb3c6d3JhcDtmbGV4LWZsb3c6d3JhcDttYXJnaW4tbGVmdDotMjBweDttYXJnaW4tcmlnaHQ6LTIwcHg7bGlzdC1zdHlsZTpub25lfS5hbGwtbWVkaWEgLmlubmVyLWNvbnRhaW5lcj4qe3BhZGRpbmc6MjBweDstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZToxMDAlO2ZsZXgtYmFzaXM6MTAwJTttYXgtd2lkdGg6MTAwJX1AbWVkaWEgKG1pbi13aWR0aDo1NDBweCl7LmFsbC1tZWRpYSAuaW5uZXItY29udGFpbmVyPip7LW1zLWZsZXgtcHJlZmVycmVkLXNpemU6MTAwJTtmbGV4LWJhc2lzOjEwMCU7bWF4LXdpZHRoOjEwMCV9fUBtZWRpYSAobWluLXdpZHRoOjc4NnB4KXsuYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19QG1lZGlhIChtaW4td2lkdGg6MTE0MHB4KXsuYWxsLW1lZGlhIC5pbm5lci1jb250YWluZXI+KnstbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTo1MCU7ZmxleC1iYXNpczo1MCU7bWF4LXdpZHRoOjUwJX19YS5idXR0b257cGFkZGluZzowIDQwcHg7YmFja2dyb3VuZDowIDA7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Y29sb3I6IzE5MzUzYjt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Zm9udC13ZWlnaHQ6NzAwO2xldHRlci1zcGFjaW5nOi4ycmVtO2ZvbnQtc2l6ZToxNHB4O2ZvbnQtc2l6ZToxLjRyZW07LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMjVzIGVhc2UtaW4tb3V0fS5pY29uLWJ1dHRvbixhLmJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4fS5pY29uLWJ1dHRvbntiYWNrZ3JvdW5kOmdyYXk7cGFkZGluZzowIDMwcHg7cGFkZGluZy1yaWdodDo1NXB4O3Bvc2l0aW9uOnJlbGF0aXZlO2NvbG9yOiNmZmZ9Lmljb24tYnV0dG9uIC5idXR0b24tdGV4dHtkaXNwbGF5OmlubGluZS1ibG9ja30uaWNvbi1idXR0b24gLmJ1dHRvbi1pY29ue3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZDojMDBmO2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDo1MCU7bWFyZ2luLXRvcDotMTBweDtyaWdodDoyNXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQ7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dCwtd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0fS5pY29uLWJ1dHRvbjpob3Zlcntjb2xvcjojZmZmfS5pY29uLWJ1dHRvbjpob3ZlciAuYnV0dG9uLWljb257LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgzcHgpO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDNweCk7b3BhY2l0eToxOy13ZWJraXQtdHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246LXdlYmtpdC10cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOnRyYW5zZm9ybSAuMzVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246dHJhbnNmb3JtIC4zNXMgZWFzZS1pbi1vdXQsLXdlYmtpdC10cmFuc2Zvcm0gLjM1cyBlYXNlLWluLW91dH0uc2xpZGVCdXR0b257Ym9yZGVyLXJhZGl1czozcHg7cG9zaXRpb246cmVsYXRpdmU7YmFja2dyb3VuZC1jb2xvcjojOTczYjE1O2NvbG9yOiNmZmY7b3ZlcmZsb3c6aGlkZGVuO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7cGFkZGluZzowIDE1cHh9LnNsaWRlQnV0dG9uOmJlZm9yZXttYXJnaW46YXV0bztjb250ZW50OmF0dHIoZGF0YS1ob3Zlcik7cG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3JpZ2h0OjA7dGV4dC1hbGlnbjpjZW50ZXI7b3BhY2l0eTowfS5zbGlkZUJ1dHRvbjphZnRlcntjb250ZW50OlxcXCJcXFwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDAlO2xlZnQ6MDtoZWlnaHQ6MTAwJTt3aWR0aDoxMDAlO2JhY2tncm91bmQ6I2M0NGMxYn0uc2xpZGVCdXR0b246aG92ZXI6YmVmb3Jle29wYWNpdHk6MTstd2Via2l0LWFuaW1hdGlvbjpxIC40czthbmltYXRpb246cSAuNHN9LnNsaWRlQnV0dG9uOmhvdmVyOmFmdGVyey13ZWJraXQtYW5pbWF0aW9uOnIgLjRzO2FuaW1hdGlvbjpyIC40c30uc2xpZGVCdXR0b246aG92ZXIgc3BhbntvcGFjaXR5OjB9QC13ZWJraXQta2V5ZnJhbWVzIHF7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX01MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1MCUpO29wYWNpdHk6MX01MSV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTE1MCUpO29wYWNpdHk6MH01MiV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTtvcGFjaXR5OjB9NTMley13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwJSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMjAwJSk7b3BhY2l0eToxfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9fUBrZXlmcmFtZXMgcXswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfTUwJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7b3BhY2l0eToxfTUxJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0xNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTUwJSk7b3BhY2l0eTowfTUyJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDIwMCUpO29wYWNpdHk6MH01MyV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgyMDAlKTtvcGFjaXR5OjF9dG97LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX19QC13ZWJraXQta2V5ZnJhbWVzIHJ7MCV7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgwKX10b3std2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMjAwJSl9fUBrZXlmcmFtZXMgcnswJXstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGVZKDApO3RyYW5zZm9ybTp0cmFuc2xhdGVZKDApfXRvey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTIwMCUpO3RyYW5zZm9ybTp0cmFuc2xhdGVZKC0yMDAlKX19LnNoYXJlLWJ1dHRvbnN7ZGlzcGxheTpub25lfWF7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO3RleHQtZGVjb3JhdGlvbjpub25lO3doaXRlLXNwYWNlOm5vd3JhcDtmb250LXNpemU6aW5oZXJpdDtjb2xvcjojN2Q3NzZkO2N1cnNvcjpwb2ludGVyfWE6YWN0aXZlLGE6Zm9jdXMsYTpob3ZlcntvdXRsaW5lOjB9YS5saW5re2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjQwcHg7bWFyZ2luLXRvcDoyMHB4fWEubGluayxhLm1hcGxpbmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7cG9zaXRpb246cmVsYXRpdmV9YS5tYXBsaW5re2hlaWdodDoyNHB4O3BhZGRpbmctcmlnaHQ6MjVweDtwYWRkaW5nLWxlZnQ6MTBweDtsaW5lLWhlaWdodDoyNHB4O2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7Zm9udC13ZWlnaHQ6NjAwO2xldHRlci1zcGFjaW5nOi4xcmVtO2ZvbnQtc2l6ZToxLjNyZW07bWFyZ2luOjVweCAwO2NvbG9yOiNmZmY7YmFja2dyb3VuZDojOTc5MjhhO2JvcmRlci1yYWRpdXM6M3B4fWEubWFwbGluayBzcGFue3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MnB4O3JpZ2h0OjA7d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfWEubWFwbGluayBzcGFuIHN2Z3tmaWxsOiNmZmZ9YS5tYXBsaW5rOmhvdmVyIHNwYW57LXdlYmtpdC1hbmltYXRpb24tZHVyYXRpb246Ljc1czthbmltYXRpb24tZHVyYXRpb246Ljc1czstd2Via2l0LWFuaW1hdGlvbi1maWxsLW1vZGU6Ym90aDthbmltYXRpb24tZmlsbC1tb2RlOmJvdGg7LXdlYmtpdC1hbmltYXRpb24tbmFtZTpuO2FuaW1hdGlvbi1uYW1lOm47LXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOmNlbnRlciBib3R0b207dHJhbnNmb3JtLW9yaWdpbjpjZW50ZXIgYm90dG9tfWEuZW1haWxsaW5re3RleHQtdHJhbnNmb3JtOm5vbmU7Y29sb3I6aW5oZXJpdH0uYnJlYWRjcnVtYntmb250LWZhbWlseTp2aW55bCxzZXJpZjtmb250LXNpemU6MS40cmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0uYnJlYWRjcnVtYiBhe2NvbG9yOiM3ZDc3NmR9LmJyZWFkY3J1bWIgLmN1cnJlbnR7Y29sb3I6Izk3OTI4YX1hLmFycm93LWJ1dHRvbntkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6MzBweDtsaW5lLWhlaWdodDozMHB4O3Bvc2l0aW9uOnJlbGF0aXZlO3RleHQtdHJhbnNmb3JtOm5vbmU7Zm9udC13ZWlnaHQ6NjAwO2ZvbnQtc2l6ZToxLjZyZW07Y29sb3I6Izk3M2IxNTttYXJnaW46MjBweCAwfWEuYXJyb3ctYnV0dG9uIHNwYW57d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0Oi0zNXB4Oy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMCk7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246dHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzfWEuYXJyb3ctYnV0dG9uIHNwYW4gc3Zne2ZpbGw6Izk3M2IxNX1hLmFycm93LWJ1dHRvbjpob3ZlciBzcGFuey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoM3B4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgzcHgpfS5idXR0b24tYmd7YmFja2dyb3VuZDojMTkzNTNiO3BhZGRpbmc6NXB4IDQ1cHggNXB4IDE1cHg7ZGlzcGxheTppbmxpbmUtYmxvY2s7Ym9yZGVyLXJhZGl1czozcHg7bWFyZ2luLXRvcDoxMHB4fS5idXR0b24tYmcgYS5hcnJvdy1idXR0b257Y29sb3I6I2ZmZjttYXJnaW46MH0uYnV0dG9uLWJnIGEuYXJyb3ctYnV0dG9uIHNwYW4gc3Zne2ZpbGw6I2ZmZn0uaG9tZS1saW5ldXAgYS5hcnJvdy1idXR0b257Y29sb3I6I2U1ZTRlMjttYXJnaW46NXB4IDA7Zm9udC1zaXplOjJyZW07bGV0dGVyLXNwYWNpbmc6LjA1cmVtfS5ob21lLWxpbmV1cCBhLmFycm93LWJ1dHRvbiBzcGFuIHN2Z3tmaWxsOiNlNWU0ZTJ9Lmljb24tbGlua3tkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjM1cHg7Zm9udC1zaXplOjEuNnJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojOTczYjE1O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46NXB4IDB9Lmljb24tbGluayBzcGFue3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7ZGlzcGxheTpibG9jaztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjB9Lmljb24tbGluayBzcGFuIHN2Z3tmaWxsOiM5NzNiMTV9LmlubGluZS1saW5rLHA+YXt0ZXh0LXRyYW5zZm9ybTpub25lO2NvbG9yOiNkNGE3NGQ7LXdlYmtpdC10cmFuc2l0aW9uOmNvbG9yIC4yczt0cmFuc2l0aW9uOmNvbG9yIC4ycztmb250LXdlaWdodDo2MDB9LmlubGluZS1saW5rOmhvdmVyLHA+YTpob3Zlcntjb2xvcjojYTlhNmExfS5lbWFpbC1saW5rLC5waG9uZS1saW5re2ZvbnQtc2l6ZToxLjZyZW07Y29sb3I6IzdkNzc2ZDtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjM1cHg7dGV4dC10cmFuc2Zvcm06bm9uZX0uZW1haWwtbGluayBzcGFuLC5waG9uZS1saW5rIHNwYW57d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uZW1haWwtbGluayBzcGFuIHN2ZywucGhvbmUtbGluayBzcGFuIHN2Z3tmaWxsOiM3ZDc3NmR9aW5wdXRbdHlwZT1jb2xvcl0saW5wdXRbdHlwZT1kYXRlXSxpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXSxpbnB1dFt0eXBlPWRhdGV0aW1lXSxpbnB1dFt0eXBlPWVtYWlsXSxpbnB1dFt0eXBlPW1vbnRoXSxpbnB1dFt0eXBlPW51bWJlcl0saW5wdXRbdHlwZT1wYXNzd29yZF0saW5wdXRbdHlwZT1yYW5nZV0saW5wdXRbdHlwZT1zZWFyY2hdLGlucHV0W3R5cGU9dGVsXSxpbnB1dFt0eXBlPXRleHRdLGlucHV0W3R5cGU9dGltZV0saW5wdXRbdHlwZT11cmxdLGlucHV0W3R5cGU9d2Vla10sdGV4dGFyZWF7Y29sb3I6Izk3OTI4YTtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTI7Ym9yZGVyLXJhZGl1czozcHg7cGFkZGluZzozcHh9aW5wdXRbdHlwZT1jb2xvcl06Zm9jdXMsaW5wdXRbdHlwZT1kYXRlXTpmb2N1cyxpbnB1dFt0eXBlPWRhdGV0aW1lLWxvY2FsXTpmb2N1cyxpbnB1dFt0eXBlPWRhdGV0aW1lXTpmb2N1cyxpbnB1dFt0eXBlPWVtYWlsXTpmb2N1cyxpbnB1dFt0eXBlPW1vbnRoXTpmb2N1cyxpbnB1dFt0eXBlPW51bWJlcl06Zm9jdXMsaW5wdXRbdHlwZT1wYXNzd29yZF06Zm9jdXMsaW5wdXRbdHlwZT1yYW5nZV06Zm9jdXMsaW5wdXRbdHlwZT1zZWFyY2hdOmZvY3VzLGlucHV0W3R5cGU9dGVsXTpmb2N1cyxpbnB1dFt0eXBlPXRleHRdOmZvY3VzLGlucHV0W3R5cGU9dGltZV06Zm9jdXMsaW5wdXRbdHlwZT11cmxdOmZvY3VzLGlucHV0W3R5cGU9d2Vla106Zm9jdXMsdGV4dGFyZWE6Zm9jdXN7Y29sb3I6Izk3M2IxNTtib3JkZXI6MXB4IHNvbGlkICM5NzNiMTU7b3V0bGluZTowfXNlbGVjdHtib3JkZXI6MXB4IHNvbGlkICNlNWU0ZTJ9dGV4dGFyZWF7d2lkdGg6MTAwJX06Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX06Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX06LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM5NzkyOGE7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtc2l6ZToxLjNyZW19Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6Izk3OTI4YTtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuM3JlbX0jZ2Zvcm1fMSAuZ2ZpZWxkX2xhYmVse2Rpc3BsYXk6bm9uZX0jZ2Zvcm1fMSBpbnB1dFt0eXBlPXN1Ym1pdF17Ym9yZGVyOjA7Zm9udC1zaXplOjEuNHJlbTtmb250LWZhbWlseTp2aW55bCxzZXJpZjtjb2xvcjojZmZmO2JhY2tncm91bmQ6Izk3M2IxNTtwYWRkaW5nOjEwcHggMjBweDt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7Ym9yZGVyLXJhZGl1czozcHh9Lm5ld3NsZXR0ZXJfZm9ybSBmb3JtIGlucHV0W3R5cGU9ZW1haWxdOmZvY3VzLC5uZXdzbGV0dGVyX2Zvcm0gZm9ybSBpbnB1dFt0eXBlPXRleHRdOmZvY3Vze2NvbG9yOiNlNWU0ZTI7b3V0bGluZTowO2JvcmRlcjowfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6Oi13ZWJraXQtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6Oi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfS5uZXdzbGV0dGVyX2Zvcm0gZm9ybSA6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOnJnYmEoMjI4LDIyNywyMjYsLjYpO2ZvbnQtZmFtaWx5Om15cmlhZC1wcm8sc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0ubmV3c2xldHRlcl9mb3JtIGZvcm0gOi1tb3otcGxhY2Vob2xkZXJ7Y29sb3I6cmdiYSgyMjgsMjI3LDIyNiwuNik7Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtmb250LXNpemU6MS40cmVtfUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6Nzg2cHgpey5zcGxpdC1saXN0IHVsey13ZWJraXQtY29sdW1uLWNvdW50OjI7Y29sdW1uLWNvdW50OjJ9fSNnZm9ybV8yIDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIDo6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIDotbXMtaW5wdXQtcGxhY2Vob2xkZXJ7Y29sb3I6I2ZmZjtmb250LWZhbWlseTphZGVsbGUsc2VyaWY7Zm9udC1zaXplOjEuNHJlbX0jZ2Zvcm1fMiA6LW1vei1wbGFjZWhvbGRlcntjb2xvcjojZmZmO2ZvbnQtZmFtaWx5OmFkZWxsZSxzZXJpZjtmb250LXNpemU6MS40cmVtfSNnZm9ybV8yIGlucHV0W3R5cGU9c3VibWl0XXtib3JkZXI6MDtmb250LXNpemU6MS40cmVtO2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2NvbG9yOiNmZmY7YmFja2dyb3VuZDojOTczYjE1O3BhZGRpbmc6MTBweCAyMHB4O3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtib3JkZXItcmFkaXVzOjNweH0jZ2Zvcm1fMiAuZ2Zvcm1fd3JhcHBlciAudG9wX2xhYmVsIC5nZmllbGRfbGFiZWx7ZGlzcGxheTpub25lIWltcG9ydGFudH0jZ2Zvcm1fMiAuZ2ZpZWxkX3JhZGlvIGxhYmVse2NvbG9yOiM3ZDc3NmQ7Zm9udC1mYW1pbHk6YWRlbGxlLHNlcmlmO2ZvbnQtc2l6ZToxLjRyZW19I2dmb3JtXzIgLmdmaWVsZF9sYWJlbHtjb2xvcjojOTc5MjhhO2ZvbnQtc2l6ZToxLjRyZW07Zm9udC1mYW1pbHk6bXlyaWFkLXBybyxzZXJpZjtsZXR0ZXItc3BhY2luZzouMTVyZW07dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtd2VpZ2h0OjYwMH1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjc2OHB4KXsjZ2Zvcm1fMiAuc2Utbm8tbGFiZWwgLmdmaWVsZF9sYWJlbHtkaXNwbGF5Om5vbmV9I2dmb3JtXzIgOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9I2dmb3JtXzIgOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9I2dmb3JtXzIgOi1tcy1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjojN2Q3NzZkfSNnZm9ybV8yIDotbW96LXBsYWNlaG9sZGVye2NvbG9yOiM3ZDc3NmR9fS5vdmVyZmxvdy1oaWRkZW57b3ZlcmZsb3c6aGlkZGVufS5ob3Vycy1tb2RhbHtwb3NpdGlvbjpmaXhlZDt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMjAyLDIwMCwxOTYsLjkpO2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtYWxpZ246Y2VudGVyOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt6LWluZGV4OjMwMDA7b3ZlcmZsb3cteTphdXRvO2N1cnNvcjpwb2ludGVyO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246b3BhY2l0eSAuM3MgMCx2aXNpYmlsaXR5IDAgLjNzO3RyYW5zaXRpb246b3BhY2l0eSAuM3MgMCx2aXNpYmlsaXR5IDAgLjNzfS5ob3Vycy1tb2RhbC1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6OTAlO21heC13aWR0aDo2MDBweDtiYWNrZ3JvdW5kOnJnYmEoMjI4LDIyNywyMjYsLjYpO2N1cnNvcjphdXRvO2JvcmRlci1yYWRpdXM6LjI1ZW07LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMzBweCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTMwcHgpOy13ZWJraXQtdHJhbnNpdGlvbi1wcm9wZXJ0eTotd2Via2l0LXRyYW5zZm9ybTt0cmFuc2l0aW9uLXByb3BlcnR5Oi13ZWJraXQtdHJhbnNmb3JtO3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtO3RyYW5zaXRpb24tcHJvcGVydHk6dHJhbnNmb3JtLC13ZWJraXQtdHJhbnNmb3JtOy13ZWJraXQtdHJhbnNpdGlvbi1kdXJhdGlvbjouM3M7dHJhbnNpdGlvbi1kdXJhdGlvbjouM3N9I2hvdXJzLWZvb2QsI2hvdXJzLXNwZWNpYWwsI3NwZWNpYWwtZXZlbnR7ZGlzcGxheTpub25lO3BhZGRpbmc6MzBweDtiYWNrZ3JvdW5kOnJnYmEoMjU1LDI1NSwyNTUsLjkpOy13ZWJraXQtYm94LXNoYWRvdzowIDAgNXB4IDAgcmdiYSgwLDAsMCwuMTUpO2JveC1zaGFkb3c6MCAwIDVweCAwIHJnYmEoMCwwLDAsLjE1KTttYXgtaGVpZ2h0Ojcwdmg7b3ZlcmZsb3c6c2Nyb2xsfS5ob3Vycy1tb2RhbC5pcy12aXNpYmxle3Zpc2liaWxpdHk6dmlzaWJsZTtvcGFjaXR5OjE7LXdlYmtpdC10cmFuc2l0aW9uOm9wYWNpdHkgLjNzIDAsdmlzaWJpbGl0eSAwIC4zczt0cmFuc2l0aW9uOm9wYWNpdHkgLjNzIDAsdmlzaWJpbGl0eSAwIC4zc30uaG91cnMtbW9kYWwuaXMtdmlzaWJsZSAuaG91cnMtbW9kYWwtY29udGFpbmVyey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCl9I2hvdXJzLWZvb2QuaXMtc2VsZWN0ZWQsI2hvdXJzLXNwZWNpYWwuaXMtc2VsZWN0ZWQsI3NwZWNpYWwtZXZlbnQuaXMtc2VsZWN0ZWQsLmNsb3NlLWhyc3tkaXNwbGF5OmJsb2NrfS5jbG9zZS1ocnN7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NDBweDtoZWlnaHQ6NDBweDtyaWdodDowO3RvcDotNDBweDtiYWNrZ3JvdW5kOnVybChodHRwczovL3MzLXVzLXdlc3QtMi5hbWF6b25hd3MuY29tL3MuY2Rwbi5pby8xNDg4NjYvY2QtaWNvbi1jbG9zZS5zdmcpIG5vLXJlcGVhdCA1MCU7dGV4dC1pbmRlbnQ6MTAwJTt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3c6aGlkZGVufS5zcGhyc19pbm5lcl93cmFwIGgze2ZvbnQtZmFtaWx5OnZpbnlsLHNlcmlmO2ZvbnQtc2l6ZToycmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTtib3JkZXItYm90dG9tOjFweCBzb2xpZCAjZTVlNGUyfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDo2MDBweCl7LmNkLXVzZXItbW9kYWwtY29udGFpbmVye21hcmdpbjo0ZW0gYXV0b30uc3BocnNfaW5uZXJfd3JhcCBoM3tmb250LXNpemU6Mi42cmVtfX1pbWd7aGVpZ2h0OmF1dG87bWF4LXdpZHRoOjEwMCU7Ym9yZGVyOjA7b3V0bGluZTowO2Rpc3BsYXk6YmxvY2t9LmFzcGVjdHt3aWR0aDoxMDAlO3otaW5kZXg6LTEwO3Bvc2l0aW9uOnJlbGF0aXZlO29wYWNpdHk6MH1zdmd7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfS5zcHJpdGVTaGVldHttYXgtaGVpZ2h0OjB9LnNwaW5uZXItbG9nb3t3aWR0aDoxNTBweDtoZWlnaHQ6MTUwcHh9LnNvY2lhbHtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTpmbGV4Oy1tcy1mbGV4LWFsaWduOmNlbnRlcjstd2Via2l0LWJveC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5zb2NpYWwgbGl7ZGlzcGxheTppbmxpbmUtYmxvY2s7d2lkdGg6MjhweDtoZWlnaHQ6MjhweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMjU1LDI1NSwyNTUsLjgpO2JvcmRlci1yYWRpdXM6MTAwJTttYXJnaW46MCAxMHB4O2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoMCk7LXdlYmtpdC10cmFuc2l0aW9uOmJhY2tncm91bmQtY29sb3IgLjI1cywtd2Via2l0LXRyYW5zZm9ybSAuMjVzO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciAuMjVzLC13ZWJraXQtdHJhbnNmb3JtIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxiYWNrZ3JvdW5kLWNvbG9yIC4yNXM7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gLjI1cyxiYWNrZ3JvdW5kLWNvbG9yIC4yNXMsLXdlYmtpdC10cmFuc2Zvcm0gLjI1c30uc29jaWFsIGxpOmZpcnN0LW9mLXR5cGV7bWFyZ2luLWxlZnQ6MH0uc29jaWFsIGxpOmxhc3Qtb2YtdHlwZXttYXJnaW4tcmlnaHQ6MH0uc29jaWFsIGxpIGF7d2lkdGg6MjBweDtoZWlnaHQ6MjBweDttYXJnaW46NHB4O2Rpc3BsYXk6YmxvY2t9LnNvY2lhbCBsaTpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMnB4KX0udG9wLWJhciAuc29jaWFsIHN2Z3tmaWxsOiM3ZDc3NmR9Zm9vdGVyIC5zb2NpYWwgc3Zne2ZpbGw6Izk3OTI4YX0uY2FsbG91dF9pdGVtIC5zb2NpYWwgbGl7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEyNiwxMTksMTA5LC44KX0uY2FsbG91dF9pdGVtIC5zb2NpYWwgbGk6aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjojN2Q3NzZkfS5jYWxsb3V0X2l0ZW0gLnNvY2lhbCBzdmd7ZmlsbDojZjFmMWVmfS5lbWJlZC1jb250YWluZXJ7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1ib3R0b206NTYuMjUlO2hlaWdodDowO292ZXJmbG93OmhpZGRlbjttYXgtd2lkdGg6MTAwJTtoZWlnaHQ6YXV0b30uZW1iZWQtY29udGFpbmVyIGlmcmFtZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0jaW5zdGFmZWVke2Rpc3BsYXk6LW1zLWZsZXhib3g7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5OmZsZXh9LnNsaWNrLXNsaWRlcnstd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdG91Y2gtY2FsbG91dDpub25lOy1tcy10b3VjaC1hY3Rpb246cGFuLXk7dG91Y2gtYWN0aW9uOnBhbi15Oy13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjp0cmFuc3BhcmVudH0uc2xpY2stbGlzdCwuc2xpY2stc2xpZGVye3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2t9LnNsaWNrLWxpc3R7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbjowO3BhZGRpbmc6MTBweCAwfS5zbGljay1saXN0OmZvY3Vze291dGxpbmU6MH0uc2xpY2stbGlzdC5kcmFnZ2luZ3tjdXJzb3I6cG9pbnRlcjtjdXJzb3I6aGFuZH0uc2xpY2stc2xpZGVyIC5zbGljay1saXN0LC5zbGljay1zbGlkZXIgLnNsaWNrLXRyYWNrey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVooMCk7dHJhbnNmb3JtOnRyYW5zbGF0ZVooMCl9LnNsaWNrLXRyYWNre3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDowO2xlZnQ6MDtkaXNwbGF5OmJsb2NrfS5zbGljay10cmFjazphZnRlciwuc2xpY2stdHJhY2s6YmVmb3Jle2Rpc3BsYXk6dGFibGU7Y29udGVudDpcXFwiXFxcIn0uc2xpY2stdHJhY2s6YWZ0ZXJ7Y2xlYXI6Ym90aH0uc2xpY2stbG9hZGluZyAuc2xpY2stdHJhY2t7dmlzaWJpbGl0eTpoaWRkZW59LnNsaWNrLXNsaWRle2Rpc3BsYXk6bm9uZTtmbG9hdDpsZWZ0O291dGxpbmU6MDtoZWlnaHQ6MTAwJTttaW4taGVpZ2h0OjFweH1bZGlyPXJ0bF0gLnNsaWNrLXNsaWRle2Zsb2F0OnJpZ2h0fS5zbGljay1zbGlkZSBpbWd7ZGlzcGxheTpibG9ja30uc2xpY2stc2xpZGUuc2xpY2stbG9hZGluZyBpbWd7ZGlzcGxheTpub25lfS5zbGljay1zbGlkZS5kcmFnZ2luZyBpbWd7cG9pbnRlci1ldmVudHM6bm9uZX0uc2xpY2staW5pdGlhbGl6ZWQgLnNsaWNrLXNsaWRle2Rpc3BsYXk6YmxvY2t9LnNsaWNrLWxvYWRpbmcgLnNsaWNrLXNsaWRle3Zpc2liaWxpdHk6aGlkZGVufS5zbGljay12ZXJ0aWNhbCAuc2xpY2stc2xpZGV7ZGlzcGxheTpibG9jaztoZWlnaHQ6YXV0bztib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50fS5zbGljay1hcnJvdy5zbGljay1oaWRkZW57ZGlzcGxheTpub25lfS5zbGljay1kb3Rze2Rpc3BsYXk6aW5saW5lLWJsb2NrO21hcmdpbjowIGF1dG87bWFyZ2luLXRvcDoyMHB4fS5zbGljay1kb3RzIGxpe2Zsb2F0OmxlZnQ7bWFyZ2luOjAgNXB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5zbGljay1kb3RzIGxpIGJ1dHRvbntkaXNwbGF5Om5vbmV9LnNsaWNrLWRvdHMgbGk6YmVmb3Jle3dpZHRoOjdweDtoZWlnaHQ6N3B4O2JhY2tncm91bmQ6I2E5YTlhOTtkaXNwbGF5OmJsb2NrO2NvbnRlbnQ6XFxcIlxcXCI7Ym9yZGVyLXJhZGl1czoxMDAlOy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmJhY2tncm91bmQgLjJzIGVhc2UtaW4tb3V0fS5zbGljay1kb3RzIGxpLnNsaWNrLWFjdGl2ZTpiZWZvcmV7YmFja2dyb3VuZDpncmF5Oy13ZWJraXQtdHJhbnNpdGlvbjpiYWNrZ3JvdW5kIC4ycyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmJhY2tncm91bmQgLjJzIGVhc2UtaW4tb3V0fS5zbGljay1uZXh0LC5zbGljay1wcmV2e2ZvbnQtc2l6ZTowO2xpbmUtaGVpZ2h0OjA7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtkaXNwbGF5OmJsb2NrO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7bWFyZ2luLXRvcDotMTVweDtwYWRkaW5nOjA7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyOjA7b3V0bGluZTowO2JhY2tncm91bmQ6MCAwfS5zbGljay1uZXh0OmJlZm9yZSwuc2xpY2stcHJldjpiZWZvcmV7Y29udGVudDpcXFwiXFxcIjt3aWR0aDozMHB4O2hlaWdodDozMHB4O2JhY2tncm91bmQtaW1hZ2U6dXJsKGh0dHA6Ly9icmhzLmZseXdoZWVsc2l0ZXMuY29tL3dwLWNvbnRlbnQvdGhlbWVzL2JvbGRyb2NrL2ljb25zL3Jhdy9jYXJhdGFsdC5zdmcpO2JhY2tncm91bmQtc2l6ZTpjb3ZlcjtiYWNrZ3JvdW5kLXBvc2l0aW9uOjUwJTtkaXNwbGF5OmJsb2NrfS5zbGljay1wcmV2e2xlZnQ6LTMwcHg7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlKDE4MGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfS5zbGljay1uZXh0e3JpZ2h0Oi0zMHB4fS5mbGV4e2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LW1zLWZsZXgtd3JhcDp3cmFwO2ZsZXgtd3JhcDp3cmFwfS5zZWFyY2gtZm9ybSwuZmluZGVye21heC13aWR0aDoxNjAwcHg7bWFyZ2luOjAgYXV0b30uaGVyby5maC00MDB7aGVpZ2h0OjMwMHB4O21pbi1oZWlnaHQ6MzAwcHh9LmZpbmRlcnttaW4taGVpZ2h0OmNhbGMoMTAwdmggLSAzMDBweCl9LmhlYWRlclNwYWNlcntoZWlnaHQ6MTIwcHg7d2lkdGg6MTAwJTtkaXNwbGF5OmJsb2NrfS5zZWFyY2gtY29sey13ZWJraXQtYm94LWZsZXg6MDstbXMtZmxleDowIDAgY2FsYygxMDAlIC0gODBweCk7ZmxleDowIDAgY2FsYygxMDAlIC0gODBweCk7LXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDozOy1tcy1mbGV4LW9yZGVyOjI7b3JkZXI6MjttYXJnaW46NDBweH0ubWFwLWNvbHstd2Via2l0LWJveC1mbGV4OjA7LW1zLWZsZXg6MCAwIDEwMCU7ZmxleDowIDAgMTAwJTstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjI7LW1zLWZsZXgtb3JkZXI6MTtvcmRlcjoxfSNtYXB7aGVpZ2h0OjQwMHB4fS5zZWFyY2h7YmFja2dyb3VuZDojZjdmN2Y3O3BhZGRpbmc6NDBweH0uc2VhcmNoLWNvbCBoM3ttYXJnaW4tdG9wOjB9LnNlYXJjaC1jb2wgaDV7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZToxNnB4O2NvbG9yOiNjNjljNTR9LnNlYXJjaC1jb2wgcHttYXJnaW46MH0uc2VhcmNoLWNvbCBhe2NvbG9yOiM5NjkwODc7Zm9udC13ZWlnaHQ6NjAwfS5sb2NhdGlvbi1xd3JhcHt3aWR0aDoxMDAlO2hlaWdodDo0MHB4fS5tYXJrZXItaWNvbi1idG57ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleDtoZWlnaHQ6NDBweDtmb250LXNpemU6MS42cmVtOy13ZWJraXQtYm94LWFsaWduOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyfS5tYXJrZXItaWNvbi1idG4gc3Bhbnstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXg6MTtmbGV4OjF9Lm1hcmtlci1pY29uLWJ0biAubG9jYXRpb24tYnRuLXdyYXB7ZGlzcGxheTotd2Via2l0LWJveDtkaXNwbGF5Oi1tcy1mbGV4Ym94O2Rpc3BsYXk6ZmxleH0ubWFya2VyLWljb24tYnRuIC5sb2NhdGlvbi1idG4td3JhcCBidXR0b257cGFkZGluZzowIDEwcHg7YmFja2dyb3VuZDojYmU5YTVjO2hlaWdodDozMHB4O2xpbmUtaGVpZ2h0OjMwcHg7bWFyZ2luLXJpZ2h0OjEwcHg7Ym9yZGVyOjA7Zm9udC1mYW1pbHk6XFxcInZpbnlsXFxcIjtjb2xvcjojZmZmO2ZvbnQtc2l6ZToxLjZyZW07bGV0dGVyLXNwYWNpbmc6LjE1cmVtO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZX0ucGFnaW5hdGlvbntwYWRkaW5nOjEwcHggMDtib3JkZXItdG9wOjFweCBzb2xpZCAjZGRkO2Rpc3BsYXk6LXdlYmtpdC1ib3g7ZGlzcGxheTotbXMtZmxleGJveDtkaXNwbGF5OmZsZXg7LXdlYmtpdC1ib3gtcGFjazpqdXN0aWZ5Oy1tcy1mbGV4LXBhY2s6anVzdGlmeTtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0jbG9jYXRpb25SZXN1bHRze3Bvc2l0aW9uOnJlbGF0aXZlO2hlaWdodDpjYWxjKDEwMHZoIC0gMTQwcHgpO292ZXJmbG93LXk6c2Nyb2xsfS5zZWFyY2gtZm9ybXt3aWR0aDoxMDAlOy13ZWJraXQtYm94LXBhY2s6c3RhcnQ7LW1zLWZsZXgtcGFjazpzdGFydDtqdXN0aWZ5LWNvbnRlbnQ6ZmxleC1zdGFydH1pbnB1dFt0eXBlPXRleHRde2NvbG9yOmdyYXk7Ym9yZGVyOjJweCBzb2xpZCAjY2FiMjgyO3BhZGRpbmc6MCAxNnB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjM2cHg7bWFyZ2luOjEwcHggNXB4O3dpZHRoOmNhbGMoNTAlIC0gMTBweCk7Zm9udC1zaXplOjE2cHg7YmFja2dyb3VuZDowIDB9I3ppcDo6LXdlYmtpdC1pbnB1dC1wbGFjZWhvbGRlcntjb2xvcjpncmF5O2ZvbnQtc2l6ZToxNnB4O29wYWNpdHk6MX0jemlwOjotbW96LXBsYWNlaG9sZGVye2NvbG9yOmdyYXk7Zm9udC1zaXplOjE2cHg7b3BhY2l0eToxfSN6aXA6LW1zLWlucHV0LXBsYWNlaG9sZGVye2NvbG9yOmdyYXk7Zm9udC1zaXplOjE2cHg7b3BhY2l0eToxfSN6aXA6LW1vei1wbGFjZWhvbGRlcntjb2xvcjpncmF5O2ZvbnQtc2l6ZToxNnB4O29wYWNpdHk6MX0uY3VzdG9tLXNlbGVjdHtwb3NpdGlvbjpyZWxhdGl2ZTtmb250LXNpemU6MS42cmVtO2NvbG9yOiM5NjkwODc7bWFyZ2luOjEwcHggNXB4fS5jdXN0b20tc2VsZWN0IHNlbGVjdHtkaXNwbGF5Om5vbmV9LnNlbGVjdC1zZWxlY3RlZHtiYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOmdyYXk7Ym9yZGVyOjJweCBzb2xpZCAjYmU5YTVjO3BhZGRpbmc6MCAxNnB4O2hlaWdodDo0MHB4O2xpbmUtaGVpZ2h0OjM2cHg7Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lfS5zZWxlY3Qtc2VsZWN0ZWQ6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7Y29udGVudDpcXFwiXFxcIjt0b3A6MThweDtyaWdodDoxMHB4O3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyOjZweCBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItY29sb3I6I2JlOWE1YyB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudH0uc2VsZWN0LXNlbGVjdGVkLnNlbGVjdC1hcnJvdy1hY3RpdmU6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50IHRyYW5zcGFyZW50ICNiZTlhNWMgdHJhbnNwYXJlbnQ7dG9wOjEycHh9LnNlbGVjdC1pdGVtcyBkaXZ7Y29sb3I6Z3JheTtwYWRkaW5nOjhweCAxNnB4O2JvcmRlcjoycHggc29saWQgI2U1ZTRlMjtib3JkZXItdG9wOm5vbmU7Ym9yZGVyLWJvdHRvbTpub25lO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uc2VsZWN0LWl0ZW1ze3Bvc2l0aW9uOmFic29sdXRlO2JhY2tncm91bmQtY29sb3I6I2ZmZjt0b3A6MTAwJTtsZWZ0OjA7cmlnaHQ6MDt6LWluZGV4Ojk5fS5zZWxlY3QtaXRlbXM6YWZ0ZXJ7Y29udGVudDonJzt3aWR0aDoxMDAlO2hlaWdodDoycHg7YmFja2dyb3VuZDojZTVlNGUyO3Bvc2l0aW9uOmFic29sdXRlO2JvdHRvbTowO2xlZnQ6MH0uc2VsZWN0LWhpZGV7ZGlzcGxheTpub25lfS5zZWxlY3QtaXRlbXMgZGl2OmhvdmVyLC5zYW1lLWFzLXNlbGVjdGVke2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwuMSl9LnBhZ2UtaWQtOTQxMCBmb290ZXJ7YmFja2dyb3VuZDojMDAwfS5sb2NhdGlvbnttYXJnaW4tYm90dG9tOjIwcHh9LmxvY2F0aW9uIGg1e2xpbmUtaGVpZ2h0OjEuMjtoZWlnaHQ6YXV0b30jemlwe2Rpc3BsYXk6bm9uZX0jemlwLmlzLXNob3due2Rpc3BsYXk6YmxvY2t9LmlzLWhpZGRlbntkaXNwbGF5Om5vbmV9LmxvYWRpbmctYWN0aXZle2NvbG9yOnJlZH0ubG9jYXRpb24tY29tcGxldGV7Y29sb3I6Z3JlZW59LnNsaWRlQnV0dG9ue2JvcmRlci1yYWRpdXM6M3B4O3Bvc2l0aW9uOnJlbGF0aXZlO2JhY2tncm91bmQtY29sb3I6Izk3M2IxNTtjb2xvcjojZmZmO292ZXJmbG93OmhpZGRlbjtkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6NDBweDtsaW5lLWhlaWdodDo0MHB4O3BhZGRpbmc6MCAxNXB4O2JvcmRlcjowO3RleHQtdHJhbnNmb3JtOnVwcGVyY2FzZTttYXJnaW46MTBweCAwfS5zbGlkZUJ1dHRvbjpiZWZvcmV7bWFyZ2luOmF1dG87Y29udGVudDphdHRyKGRhdGEtaG92ZXIpO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtyaWdodDowO3RleHQtYWxpZ246Y2VudGVyO29wYWNpdHk6MH0uc2xpZGVCdXR0b246YWZ0ZXJ7Y29udGVudDpcXFwiXFxcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MTAwJTtsZWZ0OjA7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOiNjNDRjMWJ9LmNhcmQtaG9sZGVye3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjQwcHh9LmNhcmQtZnJvbnR7ei1pbmRleDo4O2JhY2tncm91bmQ6I2ZmZn0uY2FyZC1iYWNre3otaW5kZXg6NDtiYWNrZ3JvdW5kOiNmZmZ9LmNhcmQtaG9sZGVyOmhvdmVyIC5jYXJkLWZyb250ey13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZVgoLS41dHVybik7dHJhbnNmb3JtOnJvdGF0ZVgoLS41dHVybil9LmNhcmQtaG9sZGVyOmhvdmVyIC5jYXJkLWJhY2t7LXdlYmtpdC10cmFuc2Zvcm06cm90YXRlWCgwdHVybik7dHJhbnNmb3JtOnJvdGF0ZVgoMHR1cm4pfS5jYXJke3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7LXdlYmtpdC10cmFuc2l0aW9uOi13ZWJraXQtdHJhbnNmb3JtIDFzIGVhc2U7dHJhbnNpdGlvbjotd2Via2l0LXRyYW5zZm9ybSAxcyBlYXNlO3RyYW5zaXRpb246dHJhbnNmb3JtIDFzIGVhc2U7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gMXMgZWFzZSwtd2Via2l0LXRyYW5zZm9ybSAxcyBlYXNlOy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW47YmFja2ZhY2UtdmlzaWJpbGl0eTpoaWRkZW59LmNvbnRhaW5lcnstd2Via2l0LXBlcnNwZWN0aXZlOjEwMDBweDtwZXJzcGVjdGl2ZToxMDAwcHh9LmNpZGVyX2ZpbmRlcl9idXR0b257Y3Vyc29yOnBvaW50ZXI7Zm9udC1mYW1pbHk6XFxcInZpbnlsXFxcIjtsZXR0ZXItc3BhY2luZzouMTVyZW07Zm9udC1zaXplOjEuNnJlbX1AbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOjc2OHB4KXsuaGVyby5maC00MDB7aGVpZ2h0OjM1MHB4O21pbi1oZWlnaHQ6MzUwcHh9LmZpbmRlcntoZWlnaHQ6MTAwdmg7bWluLWhlaWdodDo2MDBweH0uc2VhcmNoLWNvbHstd2Via2l0LWJveC1mbGV4OjA7LW1zLWZsZXg6MCAwIDMyMHB4O2ZsZXg6MCAwIDMyMHB4fS5zZWFyY2gtY29sIC5jb250ZW50ey13ZWJraXQtdHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTQwMHB4KTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNDAwcHgpOy13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6MjstbXMtZmxleC1vcmRlcjoxO29yZGVyOjE7LXdlYmtpdC10cmFuc2l0aW9uOmFsbCAyMDBtcyBjdWJpYy1iZXppZXIoLjYxLC45MiwuNjgsMS4xNCkgMHM7dHJhbnNpdGlvbjphbGwgMjAwbXMgY3ViaWMtYmV6aWVyKC42MSwuOTIsLjY4LDEuMTQpIDBzfS5zZWFyY2gtY29sLnJlc3VsdHMtcmV2ZWFsZWQgLmNvbnRlbnR7LXdlYmtpdC10cmFuc2Zvcm06dHJhbnNsYXRlWCgwKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgwKX0ubWFwLWNvbHstd2Via2l0LWJveC1mbGV4OjE7LW1zLWZsZXg6MSAwIGF1dG87ZmxleDoxIDAgYXV0bzstd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOjM7LW1zLWZsZXgtb3JkZXI6MjtvcmRlcjoyfSNtYXB7aGVpZ2h0OjEwMHZoO21pbi1oZWlnaHQ6NjAwcHh9fUBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6MTI0MHB4KXsuc2VhcmNoLWZvcm17LXdlYmtpdC1ib3gtcGFjazpjZW50ZXI7LW1zLWZsZXgtcGFjazpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcn19XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXI/e1wic291cmNlTWFwXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zcmMvc3R5bGVzL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/e1wic291cmNlTWFwXCI6dHJ1ZX0hLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zcmMvc3R5bGVzL3N0eWxlLnNjc3Ncbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBYbWxFbnRpdGllczogcmVxdWlyZSgnLi9saWIveG1sLWVudGl0aWVzLmpzJyksXG4gIEh0bWw0RW50aXRpZXM6IHJlcXVpcmUoJy4vbGliL2h0bWw0LWVudGl0aWVzLmpzJyksXG4gIEh0bWw1RW50aXRpZXM6IHJlcXVpcmUoJy4vbGliL2h0bWw1LWVudGl0aWVzLmpzJyksXG4gIEFsbEh0bWxFbnRpdGllczogcmVxdWlyZSgnLi9saWIvaHRtbDUtZW50aXRpZXMuanMnKVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvaW5kZXguanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwidmFyIEhUTUxfQUxQSEEgPSBbJ2Fwb3MnLCAnbmJzcCcsICdpZXhjbCcsICdjZW50JywgJ3BvdW5kJywgJ2N1cnJlbicsICd5ZW4nLCAnYnJ2YmFyJywgJ3NlY3QnLCAndW1sJywgJ2NvcHknLCAnb3JkZicsICdsYXF1bycsICdub3QnLCAnc2h5JywgJ3JlZycsICdtYWNyJywgJ2RlZycsICdwbHVzbW4nLCAnc3VwMicsICdzdXAzJywgJ2FjdXRlJywgJ21pY3JvJywgJ3BhcmEnLCAnbWlkZG90JywgJ2NlZGlsJywgJ3N1cDEnLCAnb3JkbScsICdyYXF1bycsICdmcmFjMTQnLCAnZnJhYzEyJywgJ2ZyYWMzNCcsICdpcXVlc3QnLCAnQWdyYXZlJywgJ0FhY3V0ZScsICdBY2lyYycsICdBdGlsZGUnLCAnQXVtbCcsICdBcmluZycsICdBZWxpZycsICdDY2VkaWwnLCAnRWdyYXZlJywgJ0VhY3V0ZScsICdFY2lyYycsICdFdW1sJywgJ0lncmF2ZScsICdJYWN1dGUnLCAnSWNpcmMnLCAnSXVtbCcsICdFVEgnLCAnTnRpbGRlJywgJ09ncmF2ZScsICdPYWN1dGUnLCAnT2NpcmMnLCAnT3RpbGRlJywgJ091bWwnLCAndGltZXMnLCAnT3NsYXNoJywgJ1VncmF2ZScsICdVYWN1dGUnLCAnVWNpcmMnLCAnVXVtbCcsICdZYWN1dGUnLCAnVEhPUk4nLCAnc3psaWcnLCAnYWdyYXZlJywgJ2FhY3V0ZScsICdhY2lyYycsICdhdGlsZGUnLCAnYXVtbCcsICdhcmluZycsICdhZWxpZycsICdjY2VkaWwnLCAnZWdyYXZlJywgJ2VhY3V0ZScsICdlY2lyYycsICdldW1sJywgJ2lncmF2ZScsICdpYWN1dGUnLCAnaWNpcmMnLCAnaXVtbCcsICdldGgnLCAnbnRpbGRlJywgJ29ncmF2ZScsICdvYWN1dGUnLCAnb2NpcmMnLCAnb3RpbGRlJywgJ291bWwnLCAnZGl2aWRlJywgJ29zbGFzaCcsICd1Z3JhdmUnLCAndWFjdXRlJywgJ3VjaXJjJywgJ3V1bWwnLCAneWFjdXRlJywgJ3Rob3JuJywgJ3l1bWwnLCAncXVvdCcsICdhbXAnLCAnbHQnLCAnZ3QnLCAnT0VsaWcnLCAnb2VsaWcnLCAnU2Nhcm9uJywgJ3NjYXJvbicsICdZdW1sJywgJ2NpcmMnLCAndGlsZGUnLCAnZW5zcCcsICdlbXNwJywgJ3RoaW5zcCcsICd6d25qJywgJ3p3aicsICdscm0nLCAncmxtJywgJ25kYXNoJywgJ21kYXNoJywgJ2xzcXVvJywgJ3JzcXVvJywgJ3NicXVvJywgJ2xkcXVvJywgJ3JkcXVvJywgJ2JkcXVvJywgJ2RhZ2dlcicsICdEYWdnZXInLCAncGVybWlsJywgJ2xzYXF1bycsICdyc2FxdW8nLCAnZXVybycsICdmbm9mJywgJ0FscGhhJywgJ0JldGEnLCAnR2FtbWEnLCAnRGVsdGEnLCAnRXBzaWxvbicsICdaZXRhJywgJ0V0YScsICdUaGV0YScsICdJb3RhJywgJ0thcHBhJywgJ0xhbWJkYScsICdNdScsICdOdScsICdYaScsICdPbWljcm9uJywgJ1BpJywgJ1JobycsICdTaWdtYScsICdUYXUnLCAnVXBzaWxvbicsICdQaGknLCAnQ2hpJywgJ1BzaScsICdPbWVnYScsICdhbHBoYScsICdiZXRhJywgJ2dhbW1hJywgJ2RlbHRhJywgJ2Vwc2lsb24nLCAnemV0YScsICdldGEnLCAndGhldGEnLCAnaW90YScsICdrYXBwYScsICdsYW1iZGEnLCAnbXUnLCAnbnUnLCAneGknLCAnb21pY3JvbicsICdwaScsICdyaG8nLCAnc2lnbWFmJywgJ3NpZ21hJywgJ3RhdScsICd1cHNpbG9uJywgJ3BoaScsICdjaGknLCAncHNpJywgJ29tZWdhJywgJ3RoZXRhc3ltJywgJ3Vwc2loJywgJ3BpdicsICdidWxsJywgJ2hlbGxpcCcsICdwcmltZScsICdQcmltZScsICdvbGluZScsICdmcmFzbCcsICd3ZWllcnAnLCAnaW1hZ2UnLCAncmVhbCcsICd0cmFkZScsICdhbGVmc3ltJywgJ2xhcnInLCAndWFycicsICdyYXJyJywgJ2RhcnInLCAnaGFycicsICdjcmFycicsICdsQXJyJywgJ3VBcnInLCAnckFycicsICdkQXJyJywgJ2hBcnInLCAnZm9yYWxsJywgJ3BhcnQnLCAnZXhpc3QnLCAnZW1wdHknLCAnbmFibGEnLCAnaXNpbicsICdub3RpbicsICduaScsICdwcm9kJywgJ3N1bScsICdtaW51cycsICdsb3dhc3QnLCAncmFkaWMnLCAncHJvcCcsICdpbmZpbicsICdhbmcnLCAnYW5kJywgJ29yJywgJ2NhcCcsICdjdXAnLCAnaW50JywgJ3RoZXJlNCcsICdzaW0nLCAnY29uZycsICdhc3ltcCcsICduZScsICdlcXVpdicsICdsZScsICdnZScsICdzdWInLCAnc3VwJywgJ25zdWInLCAnc3ViZScsICdzdXBlJywgJ29wbHVzJywgJ290aW1lcycsICdwZXJwJywgJ3Nkb3QnLCAnbGNlaWwnLCAncmNlaWwnLCAnbGZsb29yJywgJ3JmbG9vcicsICdsYW5nJywgJ3JhbmcnLCAnbG96JywgJ3NwYWRlcycsICdjbHVicycsICdoZWFydHMnLCAnZGlhbXMnXTtcbnZhciBIVE1MX0NPREVTID0gWzM5LCAxNjAsIDE2MSwgMTYyLCAxNjMsIDE2NCwgMTY1LCAxNjYsIDE2NywgMTY4LCAxNjksIDE3MCwgMTcxLCAxNzIsIDE3MywgMTc0LCAxNzUsIDE3NiwgMTc3LCAxNzgsIDE3OSwgMTgwLCAxODEsIDE4MiwgMTgzLCAxODQsIDE4NSwgMTg2LCAxODcsIDE4OCwgMTg5LCAxOTAsIDE5MSwgMTkyLCAxOTMsIDE5NCwgMTk1LCAxOTYsIDE5NywgMTk4LCAxOTksIDIwMCwgMjAxLCAyMDIsIDIwMywgMjA0LCAyMDUsIDIwNiwgMjA3LCAyMDgsIDIwOSwgMjEwLCAyMTEsIDIxMiwgMjEzLCAyMTQsIDIxNSwgMjE2LCAyMTcsIDIxOCwgMjE5LCAyMjAsIDIyMSwgMjIyLCAyMjMsIDIyNCwgMjI1LCAyMjYsIDIyNywgMjI4LCAyMjksIDIzMCwgMjMxLCAyMzIsIDIzMywgMjM0LCAyMzUsIDIzNiwgMjM3LCAyMzgsIDIzOSwgMjQwLCAyNDEsIDI0MiwgMjQzLCAyNDQsIDI0NSwgMjQ2LCAyNDcsIDI0OCwgMjQ5LCAyNTAsIDI1MSwgMjUyLCAyNTMsIDI1NCwgMjU1LCAzNCwgMzgsIDYwLCA2MiwgMzM4LCAzMzksIDM1MiwgMzUzLCAzNzYsIDcxMCwgNzMyLCA4MTk0LCA4MTk1LCA4MjAxLCA4MjA0LCA4MjA1LCA4MjA2LCA4MjA3LCA4MjExLCA4MjEyLCA4MjE2LCA4MjE3LCA4MjE4LCA4MjIwLCA4MjIxLCA4MjIyLCA4MjI0LCA4MjI1LCA4MjQwLCA4MjQ5LCA4MjUwLCA4MzY0LCA0MDIsIDkxMywgOTE0LCA5MTUsIDkxNiwgOTE3LCA5MTgsIDkxOSwgOTIwLCA5MjEsIDkyMiwgOTIzLCA5MjQsIDkyNSwgOTI2LCA5MjcsIDkyOCwgOTI5LCA5MzEsIDkzMiwgOTMzLCA5MzQsIDkzNSwgOTM2LCA5MzcsIDk0NSwgOTQ2LCA5NDcsIDk0OCwgOTQ5LCA5NTAsIDk1MSwgOTUyLCA5NTMsIDk1NCwgOTU1LCA5NTYsIDk1NywgOTU4LCA5NTksIDk2MCwgOTYxLCA5NjIsIDk2MywgOTY0LCA5NjUsIDk2NiwgOTY3LCA5NjgsIDk2OSwgOTc3LCA5NzgsIDk4MiwgODIyNiwgODIzMCwgODI0MiwgODI0MywgODI1NCwgODI2MCwgODQ3MiwgODQ2NSwgODQ3NiwgODQ4MiwgODUwMSwgODU5MiwgODU5MywgODU5NCwgODU5NSwgODU5NiwgODYyOSwgODY1NiwgODY1NywgODY1OCwgODY1OSwgODY2MCwgODcwNCwgODcwNiwgODcwNywgODcwOSwgODcxMSwgODcxMiwgODcxMywgODcxNSwgODcxOSwgODcyMSwgODcyMiwgODcyNywgODczMCwgODczMywgODczNCwgODczNiwgODc0MywgODc0NCwgODc0NSwgODc0NiwgODc0NywgODc1NiwgODc2NCwgODc3MywgODc3NiwgODgwMCwgODgwMSwgODgwNCwgODgwNSwgODgzNCwgODgzNSwgODgzNiwgODgzOCwgODgzOSwgODg1MywgODg1NSwgODg2OSwgODkwMSwgODk2OCwgODk2OSwgODk3MCwgODk3MSwgOTAwMSwgOTAwMiwgOTY3NCwgOTgyNCwgOTgyNywgOTgyOSwgOTgzMF07XG5cbnZhciBhbHBoYUluZGV4ID0ge307XG52YXIgbnVtSW5kZXggPSB7fTtcblxudmFyIGkgPSAwO1xudmFyIGxlbmd0aCA9IEhUTUxfQUxQSEEubGVuZ3RoO1xud2hpbGUgKGkgPCBsZW5ndGgpIHtcbiAgICB2YXIgYSA9IEhUTUxfQUxQSEFbaV07XG4gICAgdmFyIGMgPSBIVE1MX0NPREVTW2ldO1xuICAgIGFscGhhSW5kZXhbYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGMpO1xuICAgIG51bUluZGV4W2NdID0gYTtcbiAgICBpKys7XG59XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEh0bWw0RW50aXRpZXMoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uKHMsIGVudGl0eSkge1xuICAgICAgICB2YXIgY2hyO1xuICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIHZhciBjb2RlID0gZW50aXR5LmNoYXJBdCgxKS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgICAgICAgICAgIHBhcnNlSW50KGVudGl0eS5zdWJzdHIoMiksIDE2KSA6XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG5cbiAgICAgICAgICAgIGlmICghKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSkge1xuICAgICAgICAgICAgICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNociB8fCBzO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5IdG1sNEVudGl0aWVzLmRlY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBuZXcgSHRtbDRFbnRpdGllcygpLmRlY29kZShzdHIpO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5IdG1sNEVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbc3RyLmNoYXJDb2RlQXQoaSldO1xuICAgICAgICByZXN1bHQgKz0gYWxwaGEgPyBcIiZcIiArIGFscGhhICsgXCI7XCIgOiBzdHIuY2hhckF0KGkpO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlKHN0cik7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICB2YXIgY2MgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdmFyIGFscGhhID0gbnVtSW5kZXhbY2NdO1xuICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgIHJlc3VsdCArPSBcIiZcIiArIGFscGhhICsgXCI7XCI7XG4gICAgICAgIH0gZWxzZSBpZiAoY2MgPCAzMiB8fCBjYyA+IDEyNikge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiJiNcIiArIGNjICsgXCI7XCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBIdG1sNEVudGl0aWVzKCkuZW5jb2RlTm9uVVRGKHN0cik7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDw9IDI1NSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw0RW50aXRpZXMuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gbmV3IEh0bWw0RW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBIdG1sNEVudGl0aWVzO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvaHRtbC1lbnRpdGllcy9saWIvaHRtbDQtZW50aXRpZXMuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2h0bWw0LWVudGl0aWVzLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBFTlRJVElFUyA9IFtbJ0FhY3V0ZScsIFsxOTNdXSwgWydhYWN1dGUnLCBbMjI1XV0sIFsnQWJyZXZlJywgWzI1OF1dLCBbJ2FicmV2ZScsIFsyNTldXSwgWydhYycsIFs4NzY2XV0sIFsnYWNkJywgWzg3NjddXSwgWydhY0UnLCBbODc2NiwgODE5XV0sIFsnQWNpcmMnLCBbMTk0XV0sIFsnYWNpcmMnLCBbMjI2XV0sIFsnYWN1dGUnLCBbMTgwXV0sIFsnQWN5JywgWzEwNDBdXSwgWydhY3knLCBbMTA3Ml1dLCBbJ0FFbGlnJywgWzE5OF1dLCBbJ2FlbGlnJywgWzIzMF1dLCBbJ2FmJywgWzgyODldXSwgWydBZnInLCBbMTIwMDY4XV0sIFsnYWZyJywgWzEyMDA5NF1dLCBbJ0FncmF2ZScsIFsxOTJdXSwgWydhZ3JhdmUnLCBbMjI0XV0sIFsnYWxlZnN5bScsIFs4NTAxXV0sIFsnYWxlcGgnLCBbODUwMV1dLCBbJ0FscGhhJywgWzkxM11dLCBbJ2FscGhhJywgWzk0NV1dLCBbJ0FtYWNyJywgWzI1Nl1dLCBbJ2FtYWNyJywgWzI1N11dLCBbJ2FtYWxnJywgWzEwODE1XV0sIFsnYW1wJywgWzM4XV0sIFsnQU1QJywgWzM4XV0sIFsnYW5kYW5kJywgWzEwODM3XV0sIFsnQW5kJywgWzEwODM1XV0sIFsnYW5kJywgWzg3NDNdXSwgWydhbmRkJywgWzEwODQ0XV0sIFsnYW5kc2xvcGUnLCBbMTA4NDBdXSwgWydhbmR2JywgWzEwODQyXV0sIFsnYW5nJywgWzg3MzZdXSwgWydhbmdlJywgWzEwNjYwXV0sIFsnYW5nbGUnLCBbODczNl1dLCBbJ2FuZ21zZGFhJywgWzEwNjY0XV0sIFsnYW5nbXNkYWInLCBbMTA2NjVdXSwgWydhbmdtc2RhYycsIFsxMDY2Nl1dLCBbJ2FuZ21zZGFkJywgWzEwNjY3XV0sIFsnYW5nbXNkYWUnLCBbMTA2NjhdXSwgWydhbmdtc2RhZicsIFsxMDY2OV1dLCBbJ2FuZ21zZGFnJywgWzEwNjcwXV0sIFsnYW5nbXNkYWgnLCBbMTA2NzFdXSwgWydhbmdtc2QnLCBbODczN11dLCBbJ2FuZ3J0JywgWzg3MzVdXSwgWydhbmdydHZiJywgWzg4OTRdXSwgWydhbmdydHZiZCcsIFsxMDY1M11dLCBbJ2FuZ3NwaCcsIFs4NzM4XV0sIFsnYW5nc3QnLCBbMTk3XV0sIFsnYW5nemFycicsIFs5MDg0XV0sIFsnQW9nb24nLCBbMjYwXV0sIFsnYW9nb24nLCBbMjYxXV0sIFsnQW9wZicsIFsxMjAxMjBdXSwgWydhb3BmJywgWzEyMDE0Nl1dLCBbJ2FwYWNpcicsIFsxMDg2M11dLCBbJ2FwJywgWzg3NzZdXSwgWydhcEUnLCBbMTA4NjRdXSwgWydhcGUnLCBbODc3OF1dLCBbJ2FwaWQnLCBbODc3OV1dLCBbJ2Fwb3MnLCBbMzldXSwgWydBcHBseUZ1bmN0aW9uJywgWzgyODldXSwgWydhcHByb3gnLCBbODc3Nl1dLCBbJ2FwcHJveGVxJywgWzg3NzhdXSwgWydBcmluZycsIFsxOTddXSwgWydhcmluZycsIFsyMjldXSwgWydBc2NyJywgWzExOTk2NF1dLCBbJ2FzY3InLCBbMTE5OTkwXV0sIFsnQXNzaWduJywgWzg3ODhdXSwgWydhc3QnLCBbNDJdXSwgWydhc3ltcCcsIFs4Nzc2XV0sIFsnYXN5bXBlcScsIFs4NzgxXV0sIFsnQXRpbGRlJywgWzE5NV1dLCBbJ2F0aWxkZScsIFsyMjddXSwgWydBdW1sJywgWzE5Nl1dLCBbJ2F1bWwnLCBbMjI4XV0sIFsnYXdjb25pbnQnLCBbODc1NV1dLCBbJ2F3aW50JywgWzEwNzY5XV0sIFsnYmFja2NvbmcnLCBbODc4MF1dLCBbJ2JhY2tlcHNpbG9uJywgWzEwMTRdXSwgWydiYWNrcHJpbWUnLCBbODI0NV1dLCBbJ2JhY2tzaW0nLCBbODc2NV1dLCBbJ2JhY2tzaW1lcScsIFs4OTA5XV0sIFsnQmFja3NsYXNoJywgWzg3MjZdXSwgWydCYXJ2JywgWzEwOTgzXV0sIFsnYmFydmVlJywgWzg4OTNdXSwgWydiYXJ3ZWQnLCBbODk2NV1dLCBbJ0JhcndlZCcsIFs4OTY2XV0sIFsnYmFyd2VkZ2UnLCBbODk2NV1dLCBbJ2JicmsnLCBbOTE0MV1dLCBbJ2Jicmt0YnJrJywgWzkxNDJdXSwgWydiY29uZycsIFs4NzgwXV0sIFsnQmN5JywgWzEwNDFdXSwgWydiY3knLCBbMTA3M11dLCBbJ2JkcXVvJywgWzgyMjJdXSwgWydiZWNhdXMnLCBbODc1N11dLCBbJ2JlY2F1c2UnLCBbODc1N11dLCBbJ0JlY2F1c2UnLCBbODc1N11dLCBbJ2JlbXB0eXYnLCBbMTA2NzJdXSwgWydiZXBzaScsIFsxMDE0XV0sIFsnYmVybm91JywgWzg0OTJdXSwgWydCZXJub3VsbGlzJywgWzg0OTJdXSwgWydCZXRhJywgWzkxNF1dLCBbJ2JldGEnLCBbOTQ2XV0sIFsnYmV0aCcsIFs4NTAyXV0sIFsnYmV0d2VlbicsIFs4ODEyXV0sIFsnQmZyJywgWzEyMDA2OV1dLCBbJ2JmcicsIFsxMjAwOTVdXSwgWydiaWdjYXAnLCBbODg5OF1dLCBbJ2JpZ2NpcmMnLCBbOTcxMV1dLCBbJ2JpZ2N1cCcsIFs4ODk5XV0sIFsnYmlnb2RvdCcsIFsxMDc1Ml1dLCBbJ2JpZ29wbHVzJywgWzEwNzUzXV0sIFsnYmlnb3RpbWVzJywgWzEwNzU0XV0sIFsnYmlnc3FjdXAnLCBbMTA3NThdXSwgWydiaWdzdGFyJywgWzk3MzNdXSwgWydiaWd0cmlhbmdsZWRvd24nLCBbOTY2MV1dLCBbJ2JpZ3RyaWFuZ2xldXAnLCBbOTY1MV1dLCBbJ2JpZ3VwbHVzJywgWzEwNzU2XV0sIFsnYmlndmVlJywgWzg4OTddXSwgWydiaWd3ZWRnZScsIFs4ODk2XV0sIFsnYmthcm93JywgWzEwNTA5XV0sIFsnYmxhY2tsb3plbmdlJywgWzEwNzMxXV0sIFsnYmxhY2tzcXVhcmUnLCBbOTY0Ml1dLCBbJ2JsYWNrdHJpYW5nbGUnLCBbOTY1Ml1dLCBbJ2JsYWNrdHJpYW5nbGVkb3duJywgWzk2NjJdXSwgWydibGFja3RyaWFuZ2xlbGVmdCcsIFs5NjY2XV0sIFsnYmxhY2t0cmlhbmdsZXJpZ2h0JywgWzk2NTZdXSwgWydibGFuaycsIFs5MjUxXV0sIFsnYmxrMTInLCBbOTYxOF1dLCBbJ2JsazE0JywgWzk2MTddXSwgWydibGszNCcsIFs5NjE5XV0sIFsnYmxvY2snLCBbOTYwOF1dLCBbJ2JuZScsIFs2MSwgODQyMV1dLCBbJ2JuZXF1aXYnLCBbODgwMSwgODQyMV1dLCBbJ2JOb3QnLCBbMTA5ODldXSwgWydibm90JywgWzg5NzZdXSwgWydCb3BmJywgWzEyMDEyMV1dLCBbJ2JvcGYnLCBbMTIwMTQ3XV0sIFsnYm90JywgWzg4NjldXSwgWydib3R0b20nLCBbODg2OV1dLCBbJ2Jvd3RpZScsIFs4OTA0XV0sIFsnYm94Ym94JywgWzEwNjk3XV0sIFsnYm94ZGwnLCBbOTQ4OF1dLCBbJ2JveGRMJywgWzk1NTddXSwgWydib3hEbCcsIFs5NTU4XV0sIFsnYm94REwnLCBbOTU1OV1dLCBbJ2JveGRyJywgWzk0ODRdXSwgWydib3hkUicsIFs5NTU0XV0sIFsnYm94RHInLCBbOTU1NV1dLCBbJ2JveERSJywgWzk1NTZdXSwgWydib3hoJywgWzk0NzJdXSwgWydib3hIJywgWzk1NTJdXSwgWydib3hoZCcsIFs5NTE2XV0sIFsnYm94SGQnLCBbOTU3Ml1dLCBbJ2JveGhEJywgWzk1NzNdXSwgWydib3hIRCcsIFs5NTc0XV0sIFsnYm94aHUnLCBbOTUyNF1dLCBbJ2JveEh1JywgWzk1NzVdXSwgWydib3hoVScsIFs5NTc2XV0sIFsnYm94SFUnLCBbOTU3N11dLCBbJ2JveG1pbnVzJywgWzg4NjNdXSwgWydib3hwbHVzJywgWzg4NjJdXSwgWydib3h0aW1lcycsIFs4ODY0XV0sIFsnYm94dWwnLCBbOTQ5Nl1dLCBbJ2JveHVMJywgWzk1NjNdXSwgWydib3hVbCcsIFs5NTY0XV0sIFsnYm94VUwnLCBbOTU2NV1dLCBbJ2JveHVyJywgWzk0OTJdXSwgWydib3h1UicsIFs5NTYwXV0sIFsnYm94VXInLCBbOTU2MV1dLCBbJ2JveFVSJywgWzk1NjJdXSwgWydib3h2JywgWzk0NzRdXSwgWydib3hWJywgWzk1NTNdXSwgWydib3h2aCcsIFs5NTMyXV0sIFsnYm94dkgnLCBbOTU3OF1dLCBbJ2JveFZoJywgWzk1NzldXSwgWydib3hWSCcsIFs5NTgwXV0sIFsnYm94dmwnLCBbOTUwOF1dLCBbJ2JveHZMJywgWzk1NjldXSwgWydib3hWbCcsIFs5NTcwXV0sIFsnYm94VkwnLCBbOTU3MV1dLCBbJ2JveHZyJywgWzk1MDBdXSwgWydib3h2UicsIFs5NTY2XV0sIFsnYm94VnInLCBbOTU2N11dLCBbJ2JveFZSJywgWzk1NjhdXSwgWydicHJpbWUnLCBbODI0NV1dLCBbJ2JyZXZlJywgWzcyOF1dLCBbJ0JyZXZlJywgWzcyOF1dLCBbJ2JydmJhcicsIFsxNjZdXSwgWydic2NyJywgWzExOTk5MV1dLCBbJ0JzY3InLCBbODQ5Ml1dLCBbJ2JzZW1pJywgWzgyNzFdXSwgWydic2ltJywgWzg3NjVdXSwgWydic2ltZScsIFs4OTA5XV0sIFsnYnNvbGInLCBbMTA2OTNdXSwgWydic29sJywgWzkyXV0sIFsnYnNvbGhzdWInLCBbMTAxODRdXSwgWydidWxsJywgWzgyMjZdXSwgWydidWxsZXQnLCBbODIyNl1dLCBbJ2J1bXAnLCBbODc4Ml1dLCBbJ2J1bXBFJywgWzEwOTI2XV0sIFsnYnVtcGUnLCBbODc4M11dLCBbJ0J1bXBlcScsIFs4NzgyXV0sIFsnYnVtcGVxJywgWzg3ODNdXSwgWydDYWN1dGUnLCBbMjYyXV0sIFsnY2FjdXRlJywgWzI2M11dLCBbJ2NhcGFuZCcsIFsxMDgyMF1dLCBbJ2NhcGJyY3VwJywgWzEwODI1XV0sIFsnY2FwY2FwJywgWzEwODI3XV0sIFsnY2FwJywgWzg3NDVdXSwgWydDYXAnLCBbODkxNF1dLCBbJ2NhcGN1cCcsIFsxMDgyM11dLCBbJ2NhcGRvdCcsIFsxMDgxNl1dLCBbJ0NhcGl0YWxEaWZmZXJlbnRpYWxEJywgWzg1MTddXSwgWydjYXBzJywgWzg3NDUsIDY1MDI0XV0sIFsnY2FyZXQnLCBbODI1N11dLCBbJ2Nhcm9uJywgWzcxMV1dLCBbJ0NheWxleXMnLCBbODQ5M11dLCBbJ2NjYXBzJywgWzEwODI5XV0sIFsnQ2Nhcm9uJywgWzI2OF1dLCBbJ2NjYXJvbicsIFsyNjldXSwgWydDY2VkaWwnLCBbMTk5XV0sIFsnY2NlZGlsJywgWzIzMV1dLCBbJ0NjaXJjJywgWzI2NF1dLCBbJ2NjaXJjJywgWzI2NV1dLCBbJ0Njb25pbnQnLCBbODc1Ml1dLCBbJ2NjdXBzJywgWzEwODI4XV0sIFsnY2N1cHNzbScsIFsxMDgzMl1dLCBbJ0Nkb3QnLCBbMjY2XV0sIFsnY2RvdCcsIFsyNjddXSwgWydjZWRpbCcsIFsxODRdXSwgWydDZWRpbGxhJywgWzE4NF1dLCBbJ2NlbXB0eXYnLCBbMTA2NzRdXSwgWydjZW50JywgWzE2Ml1dLCBbJ2NlbnRlcmRvdCcsIFsxODNdXSwgWydDZW50ZXJEb3QnLCBbMTgzXV0sIFsnY2ZyJywgWzEyMDA5Nl1dLCBbJ0NmcicsIFs4NDkzXV0sIFsnQ0hjeScsIFsxMDYzXV0sIFsnY2hjeScsIFsxMDk1XV0sIFsnY2hlY2snLCBbMTAwMDNdXSwgWydjaGVja21hcmsnLCBbMTAwMDNdXSwgWydDaGknLCBbOTM1XV0sIFsnY2hpJywgWzk2N11dLCBbJ2NpcmMnLCBbNzEwXV0sIFsnY2lyY2VxJywgWzg3OTFdXSwgWydjaXJjbGVhcnJvd2xlZnQnLCBbODYzNF1dLCBbJ2NpcmNsZWFycm93cmlnaHQnLCBbODYzNV1dLCBbJ2NpcmNsZWRhc3QnLCBbODg1OV1dLCBbJ2NpcmNsZWRjaXJjJywgWzg4NThdXSwgWydjaXJjbGVkZGFzaCcsIFs4ODYxXV0sIFsnQ2lyY2xlRG90JywgWzg4NTddXSwgWydjaXJjbGVkUicsIFsxNzRdXSwgWydjaXJjbGVkUycsIFs5NDE2XV0sIFsnQ2lyY2xlTWludXMnLCBbODg1NF1dLCBbJ0NpcmNsZVBsdXMnLCBbODg1M11dLCBbJ0NpcmNsZVRpbWVzJywgWzg4NTVdXSwgWydjaXInLCBbOTY3NV1dLCBbJ2NpckUnLCBbMTA2OTFdXSwgWydjaXJlJywgWzg3OTFdXSwgWydjaXJmbmludCcsIFsxMDc2OF1dLCBbJ2Npcm1pZCcsIFsxMDk5MV1dLCBbJ2NpcnNjaXInLCBbMTA2OTBdXSwgWydDbG9ja3dpc2VDb250b3VySW50ZWdyYWwnLCBbODc1NF1dLCBbJ2NsdWJzJywgWzk4MjddXSwgWydjbHVic3VpdCcsIFs5ODI3XV0sIFsnY29sb24nLCBbNThdXSwgWydDb2xvbicsIFs4NzU5XV0sIFsnQ29sb25lJywgWzEwODY4XV0sIFsnY29sb25lJywgWzg3ODhdXSwgWydjb2xvbmVxJywgWzg3ODhdXSwgWydjb21tYScsIFs0NF1dLCBbJ2NvbW1hdCcsIFs2NF1dLCBbJ2NvbXAnLCBbODcwNV1dLCBbJ2NvbXBmbicsIFs4NzI4XV0sIFsnY29tcGxlbWVudCcsIFs4NzA1XV0sIFsnY29tcGxleGVzJywgWzg0NTBdXSwgWydjb25nJywgWzg3NzNdXSwgWydjb25nZG90JywgWzEwODYxXV0sIFsnQ29uZ3J1ZW50JywgWzg4MDFdXSwgWydjb25pbnQnLCBbODc1MF1dLCBbJ0NvbmludCcsIFs4NzUxXV0sIFsnQ29udG91ckludGVncmFsJywgWzg3NTBdXSwgWydjb3BmJywgWzEyMDE0OF1dLCBbJ0NvcGYnLCBbODQ1MF1dLCBbJ2NvcHJvZCcsIFs4NzIwXV0sIFsnQ29wcm9kdWN0JywgWzg3MjBdXSwgWydjb3B5JywgWzE2OV1dLCBbJ0NPUFknLCBbMTY5XV0sIFsnY29weXNyJywgWzg0NzFdXSwgWydDb3VudGVyQ2xvY2t3aXNlQ29udG91ckludGVncmFsJywgWzg3NTVdXSwgWydjcmFycicsIFs4NjI5XV0sIFsnY3Jvc3MnLCBbMTAwMDddXSwgWydDcm9zcycsIFsxMDc5OV1dLCBbJ0NzY3InLCBbMTE5OTY2XV0sIFsnY3NjcicsIFsxMTk5OTJdXSwgWydjc3ViJywgWzEwOTU5XV0sIFsnY3N1YmUnLCBbMTA5NjFdXSwgWydjc3VwJywgWzEwOTYwXV0sIFsnY3N1cGUnLCBbMTA5NjJdXSwgWydjdGRvdCcsIFs4OTQzXV0sIFsnY3VkYXJybCcsIFsxMDU1Ml1dLCBbJ2N1ZGFycnInLCBbMTA1NDldXSwgWydjdWVwcicsIFs4OTI2XV0sIFsnY3Vlc2MnLCBbODkyN11dLCBbJ2N1bGFycicsIFs4NjMwXV0sIFsnY3VsYXJycCcsIFsxMDU1N11dLCBbJ2N1cGJyY2FwJywgWzEwODI0XV0sIFsnY3VwY2FwJywgWzEwODIyXV0sIFsnQ3VwQ2FwJywgWzg3ODFdXSwgWydjdXAnLCBbODc0Nl1dLCBbJ0N1cCcsIFs4OTE1XV0sIFsnY3VwY3VwJywgWzEwODI2XV0sIFsnY3VwZG90JywgWzg4NDVdXSwgWydjdXBvcicsIFsxMDgyMV1dLCBbJ2N1cHMnLCBbODc0NiwgNjUwMjRdXSwgWydjdXJhcnInLCBbODYzMV1dLCBbJ2N1cmFycm0nLCBbMTA1NTZdXSwgWydjdXJseWVxcHJlYycsIFs4OTI2XV0sIFsnY3VybHllcXN1Y2MnLCBbODkyN11dLCBbJ2N1cmx5dmVlJywgWzg5MTBdXSwgWydjdXJseXdlZGdlJywgWzg5MTFdXSwgWydjdXJyZW4nLCBbMTY0XV0sIFsnY3VydmVhcnJvd2xlZnQnLCBbODYzMF1dLCBbJ2N1cnZlYXJyb3dyaWdodCcsIFs4NjMxXV0sIFsnY3V2ZWUnLCBbODkxMF1dLCBbJ2N1d2VkJywgWzg5MTFdXSwgWydjd2NvbmludCcsIFs4NzU0XV0sIFsnY3dpbnQnLCBbODc1M11dLCBbJ2N5bGN0eScsIFs5MDA1XV0sIFsnZGFnZ2VyJywgWzgyMjRdXSwgWydEYWdnZXInLCBbODIyNV1dLCBbJ2RhbGV0aCcsIFs4NTA0XV0sIFsnZGFycicsIFs4NTk1XV0sIFsnRGFycicsIFs4NjA5XV0sIFsnZEFycicsIFs4NjU5XV0sIFsnZGFzaCcsIFs4MjA4XV0sIFsnRGFzaHYnLCBbMTA5ODBdXSwgWydkYXNodicsIFs4ODY3XV0sIFsnZGJrYXJvdycsIFsxMDUxMV1dLCBbJ2RibGFjJywgWzczM11dLCBbJ0RjYXJvbicsIFsyNzBdXSwgWydkY2Fyb24nLCBbMjcxXV0sIFsnRGN5JywgWzEwNDRdXSwgWydkY3knLCBbMTA3Nl1dLCBbJ2RkYWdnZXInLCBbODIyNV1dLCBbJ2RkYXJyJywgWzg2NTBdXSwgWydERCcsIFs4NTE3XV0sIFsnZGQnLCBbODUxOF1dLCBbJ0REb3RyYWhkJywgWzEwNTEzXV0sIFsnZGRvdHNlcScsIFsxMDg3MV1dLCBbJ2RlZycsIFsxNzZdXSwgWydEZWwnLCBbODcxMV1dLCBbJ0RlbHRhJywgWzkxNl1dLCBbJ2RlbHRhJywgWzk0OF1dLCBbJ2RlbXB0eXYnLCBbMTA2NzNdXSwgWydkZmlzaHQnLCBbMTA2MjNdXSwgWydEZnInLCBbMTIwMDcxXV0sIFsnZGZyJywgWzEyMDA5N11dLCBbJ2RIYXInLCBbMTA1OTddXSwgWydkaGFybCcsIFs4NjQzXV0sIFsnZGhhcnInLCBbODY0Ml1dLCBbJ0RpYWNyaXRpY2FsQWN1dGUnLCBbMTgwXV0sIFsnRGlhY3JpdGljYWxEb3QnLCBbNzI5XV0sIFsnRGlhY3JpdGljYWxEb3VibGVBY3V0ZScsIFs3MzNdXSwgWydEaWFjcml0aWNhbEdyYXZlJywgWzk2XV0sIFsnRGlhY3JpdGljYWxUaWxkZScsIFs3MzJdXSwgWydkaWFtJywgWzg5MDBdXSwgWydkaWFtb25kJywgWzg5MDBdXSwgWydEaWFtb25kJywgWzg5MDBdXSwgWydkaWFtb25kc3VpdCcsIFs5ODMwXV0sIFsnZGlhbXMnLCBbOTgzMF1dLCBbJ2RpZScsIFsxNjhdXSwgWydEaWZmZXJlbnRpYWxEJywgWzg1MThdXSwgWydkaWdhbW1hJywgWzk4OV1dLCBbJ2Rpc2luJywgWzg5NDZdXSwgWydkaXYnLCBbMjQ3XV0sIFsnZGl2aWRlJywgWzI0N11dLCBbJ2RpdmlkZW9udGltZXMnLCBbODkwM11dLCBbJ2Rpdm9ueCcsIFs4OTAzXV0sIFsnREpjeScsIFsxMDI2XV0sIFsnZGpjeScsIFsxMTA2XV0sIFsnZGxjb3JuJywgWzg5OTBdXSwgWydkbGNyb3AnLCBbODk3M11dLCBbJ2RvbGxhcicsIFszNl1dLCBbJ0RvcGYnLCBbMTIwMTIzXV0sIFsnZG9wZicsIFsxMjAxNDldXSwgWydEb3QnLCBbMTY4XV0sIFsnZG90JywgWzcyOV1dLCBbJ0RvdERvdCcsIFs4NDEyXV0sIFsnZG90ZXEnLCBbODc4NF1dLCBbJ2RvdGVxZG90JywgWzg3ODVdXSwgWydEb3RFcXVhbCcsIFs4Nzg0XV0sIFsnZG90bWludXMnLCBbODc2MF1dLCBbJ2RvdHBsdXMnLCBbODcyNF1dLCBbJ2RvdHNxdWFyZScsIFs4ODY1XV0sIFsnZG91YmxlYmFyd2VkZ2UnLCBbODk2Nl1dLCBbJ0RvdWJsZUNvbnRvdXJJbnRlZ3JhbCcsIFs4NzUxXV0sIFsnRG91YmxlRG90JywgWzE2OF1dLCBbJ0RvdWJsZURvd25BcnJvdycsIFs4NjU5XV0sIFsnRG91YmxlTGVmdEFycm93JywgWzg2NTZdXSwgWydEb3VibGVMZWZ0UmlnaHRBcnJvdycsIFs4NjYwXV0sIFsnRG91YmxlTGVmdFRlZScsIFsxMDk4MF1dLCBbJ0RvdWJsZUxvbmdMZWZ0QXJyb3cnLCBbMTAyMzJdXSwgWydEb3VibGVMb25nTGVmdFJpZ2h0QXJyb3cnLCBbMTAyMzRdXSwgWydEb3VibGVMb25nUmlnaHRBcnJvdycsIFsxMDIzM11dLCBbJ0RvdWJsZVJpZ2h0QXJyb3cnLCBbODY1OF1dLCBbJ0RvdWJsZVJpZ2h0VGVlJywgWzg4NzJdXSwgWydEb3VibGVVcEFycm93JywgWzg2NTddXSwgWydEb3VibGVVcERvd25BcnJvdycsIFs4NjYxXV0sIFsnRG91YmxlVmVydGljYWxCYXInLCBbODc0MV1dLCBbJ0Rvd25BcnJvd0JhcicsIFsxMDUxNV1dLCBbJ2Rvd25hcnJvdycsIFs4NTk1XV0sIFsnRG93bkFycm93JywgWzg1OTVdXSwgWydEb3duYXJyb3cnLCBbODY1OV1dLCBbJ0Rvd25BcnJvd1VwQXJyb3cnLCBbODY5M11dLCBbJ0Rvd25CcmV2ZScsIFs3ODVdXSwgWydkb3duZG93bmFycm93cycsIFs4NjUwXV0sIFsnZG93bmhhcnBvb25sZWZ0JywgWzg2NDNdXSwgWydkb3duaGFycG9vbnJpZ2h0JywgWzg2NDJdXSwgWydEb3duTGVmdFJpZ2h0VmVjdG9yJywgWzEwNTc2XV0sIFsnRG93bkxlZnRUZWVWZWN0b3InLCBbMTA1OTBdXSwgWydEb3duTGVmdFZlY3RvckJhcicsIFsxMDU4Ml1dLCBbJ0Rvd25MZWZ0VmVjdG9yJywgWzg2MzddXSwgWydEb3duUmlnaHRUZWVWZWN0b3InLCBbMTA1OTFdXSwgWydEb3duUmlnaHRWZWN0b3JCYXInLCBbMTA1ODNdXSwgWydEb3duUmlnaHRWZWN0b3InLCBbODY0MV1dLCBbJ0Rvd25UZWVBcnJvdycsIFs4NjE1XV0sIFsnRG93blRlZScsIFs4ODY4XV0sIFsnZHJia2Fyb3cnLCBbMTA1MTJdXSwgWydkcmNvcm4nLCBbODk5MV1dLCBbJ2RyY3JvcCcsIFs4OTcyXV0sIFsnRHNjcicsIFsxMTk5NjddXSwgWydkc2NyJywgWzExOTk5M11dLCBbJ0RTY3knLCBbMTAyOV1dLCBbJ2RzY3knLCBbMTEwOV1dLCBbJ2Rzb2wnLCBbMTA3NDJdXSwgWydEc3Ryb2snLCBbMjcyXV0sIFsnZHN0cm9rJywgWzI3M11dLCBbJ2R0ZG90JywgWzg5NDVdXSwgWydkdHJpJywgWzk2NjNdXSwgWydkdHJpZicsIFs5NjYyXV0sIFsnZHVhcnInLCBbODY5M11dLCBbJ2R1aGFyJywgWzEwNjA3XV0sIFsnZHdhbmdsZScsIFsxMDY2Ml1dLCBbJ0RaY3knLCBbMTAzOV1dLCBbJ2R6Y3knLCBbMTExOV1dLCBbJ2R6aWdyYXJyJywgWzEwMjM5XV0sIFsnRWFjdXRlJywgWzIwMV1dLCBbJ2VhY3V0ZScsIFsyMzNdXSwgWydlYXN0ZXInLCBbMTA4NjJdXSwgWydFY2Fyb24nLCBbMjgyXV0sIFsnZWNhcm9uJywgWzI4M11dLCBbJ0VjaXJjJywgWzIwMl1dLCBbJ2VjaXJjJywgWzIzNF1dLCBbJ2VjaXInLCBbODc5MF1dLCBbJ2Vjb2xvbicsIFs4Nzg5XV0sIFsnRWN5JywgWzEwNjldXSwgWydlY3knLCBbMTEwMV1dLCBbJ2VERG90JywgWzEwODcxXV0sIFsnRWRvdCcsIFsyNzhdXSwgWydlZG90JywgWzI3OV1dLCBbJ2VEb3QnLCBbODc4NV1dLCBbJ2VlJywgWzg1MTldXSwgWydlZkRvdCcsIFs4Nzg2XV0sIFsnRWZyJywgWzEyMDA3Ml1dLCBbJ2VmcicsIFsxMjAwOThdXSwgWydlZycsIFsxMDkwNl1dLCBbJ0VncmF2ZScsIFsyMDBdXSwgWydlZ3JhdmUnLCBbMjMyXV0sIFsnZWdzJywgWzEwOTAyXV0sIFsnZWdzZG90JywgWzEwOTA0XV0sIFsnZWwnLCBbMTA5MDVdXSwgWydFbGVtZW50JywgWzg3MTJdXSwgWydlbGludGVycycsIFs5MTkxXV0sIFsnZWxsJywgWzg0NjddXSwgWydlbHMnLCBbMTA5MDFdXSwgWydlbHNkb3QnLCBbMTA5MDNdXSwgWydFbWFjcicsIFsyNzRdXSwgWydlbWFjcicsIFsyNzVdXSwgWydlbXB0eScsIFs4NzA5XV0sIFsnZW1wdHlzZXQnLCBbODcwOV1dLCBbJ0VtcHR5U21hbGxTcXVhcmUnLCBbOTcyM11dLCBbJ2VtcHR5dicsIFs4NzA5XV0sIFsnRW1wdHlWZXJ5U21hbGxTcXVhcmUnLCBbOTY0M11dLCBbJ2Vtc3AxMycsIFs4MTk2XV0sIFsnZW1zcDE0JywgWzgxOTddXSwgWydlbXNwJywgWzgxOTVdXSwgWydFTkcnLCBbMzMwXV0sIFsnZW5nJywgWzMzMV1dLCBbJ2Vuc3AnLCBbODE5NF1dLCBbJ0VvZ29uJywgWzI4MF1dLCBbJ2VvZ29uJywgWzI4MV1dLCBbJ0VvcGYnLCBbMTIwMTI0XV0sIFsnZW9wZicsIFsxMjAxNTBdXSwgWydlcGFyJywgWzg5MTddXSwgWydlcGFyc2wnLCBbMTA3MjNdXSwgWydlcGx1cycsIFsxMDg2NV1dLCBbJ2Vwc2knLCBbOTQ5XV0sIFsnRXBzaWxvbicsIFs5MTddXSwgWydlcHNpbG9uJywgWzk0OV1dLCBbJ2Vwc2l2JywgWzEwMTNdXSwgWydlcWNpcmMnLCBbODc5MF1dLCBbJ2VxY29sb24nLCBbODc4OV1dLCBbJ2Vxc2ltJywgWzg3NzBdXSwgWydlcXNsYW50Z3RyJywgWzEwOTAyXV0sIFsnZXFzbGFudGxlc3MnLCBbMTA5MDFdXSwgWydFcXVhbCcsIFsxMDg2OV1dLCBbJ2VxdWFscycsIFs2MV1dLCBbJ0VxdWFsVGlsZGUnLCBbODc3MF1dLCBbJ2VxdWVzdCcsIFs4Nzk5XV0sIFsnRXF1aWxpYnJpdW0nLCBbODY1Ml1dLCBbJ2VxdWl2JywgWzg4MDFdXSwgWydlcXVpdkREJywgWzEwODcyXV0sIFsnZXF2cGFyc2wnLCBbMTA3MjVdXSwgWydlcmFycicsIFsxMDYwOV1dLCBbJ2VyRG90JywgWzg3ODddXSwgWydlc2NyJywgWzg0OTVdXSwgWydFc2NyJywgWzg0OTZdXSwgWydlc2RvdCcsIFs4Nzg0XV0sIFsnRXNpbScsIFsxMDg2N11dLCBbJ2VzaW0nLCBbODc3MF1dLCBbJ0V0YScsIFs5MTldXSwgWydldGEnLCBbOTUxXV0sIFsnRVRIJywgWzIwOF1dLCBbJ2V0aCcsIFsyNDBdXSwgWydFdW1sJywgWzIwM11dLCBbJ2V1bWwnLCBbMjM1XV0sIFsnZXVybycsIFs4MzY0XV0sIFsnZXhjbCcsIFszM11dLCBbJ2V4aXN0JywgWzg3MDddXSwgWydFeGlzdHMnLCBbODcwN11dLCBbJ2V4cGVjdGF0aW9uJywgWzg0OTZdXSwgWydleHBvbmVudGlhbGUnLCBbODUxOV1dLCBbJ0V4cG9uZW50aWFsRScsIFs4NTE5XV0sIFsnZmFsbGluZ2RvdHNlcScsIFs4Nzg2XV0sIFsnRmN5JywgWzEwNjBdXSwgWydmY3knLCBbMTA5Ml1dLCBbJ2ZlbWFsZScsIFs5NzkyXV0sIFsnZmZpbGlnJywgWzY0MjU5XV0sIFsnZmZsaWcnLCBbNjQyNTZdXSwgWydmZmxsaWcnLCBbNjQyNjBdXSwgWydGZnInLCBbMTIwMDczXV0sIFsnZmZyJywgWzEyMDA5OV1dLCBbJ2ZpbGlnJywgWzY0MjU3XV0sIFsnRmlsbGVkU21hbGxTcXVhcmUnLCBbOTcyNF1dLCBbJ0ZpbGxlZFZlcnlTbWFsbFNxdWFyZScsIFs5NjQyXV0sIFsnZmpsaWcnLCBbMTAyLCAxMDZdXSwgWydmbGF0JywgWzk4MzddXSwgWydmbGxpZycsIFs2NDI1OF1dLCBbJ2ZsdG5zJywgWzk2NDldXSwgWydmbm9mJywgWzQwMl1dLCBbJ0ZvcGYnLCBbMTIwMTI1XV0sIFsnZm9wZicsIFsxMjAxNTFdXSwgWydmb3JhbGwnLCBbODcwNF1dLCBbJ0ZvckFsbCcsIFs4NzA0XV0sIFsnZm9yaycsIFs4OTE2XV0sIFsnZm9ya3YnLCBbMTA5NjldXSwgWydGb3VyaWVydHJmJywgWzg0OTddXSwgWydmcGFydGludCcsIFsxMDc2NV1dLCBbJ2ZyYWMxMicsIFsxODldXSwgWydmcmFjMTMnLCBbODUzMV1dLCBbJ2ZyYWMxNCcsIFsxODhdXSwgWydmcmFjMTUnLCBbODUzM11dLCBbJ2ZyYWMxNicsIFs4NTM3XV0sIFsnZnJhYzE4JywgWzg1MzldXSwgWydmcmFjMjMnLCBbODUzMl1dLCBbJ2ZyYWMyNScsIFs4NTM0XV0sIFsnZnJhYzM0JywgWzE5MF1dLCBbJ2ZyYWMzNScsIFs4NTM1XV0sIFsnZnJhYzM4JywgWzg1NDBdXSwgWydmcmFjNDUnLCBbODUzNl1dLCBbJ2ZyYWM1NicsIFs4NTM4XV0sIFsnZnJhYzU4JywgWzg1NDFdXSwgWydmcmFjNzgnLCBbODU0Ml1dLCBbJ2ZyYXNsJywgWzgyNjBdXSwgWydmcm93bicsIFs4OTk0XV0sIFsnZnNjcicsIFsxMTk5OTVdXSwgWydGc2NyJywgWzg0OTddXSwgWydnYWN1dGUnLCBbNTAxXV0sIFsnR2FtbWEnLCBbOTE1XV0sIFsnZ2FtbWEnLCBbOTQ3XV0sIFsnR2FtbWFkJywgWzk4OF1dLCBbJ2dhbW1hZCcsIFs5ODldXSwgWydnYXAnLCBbMTA4ODZdXSwgWydHYnJldmUnLCBbMjg2XV0sIFsnZ2JyZXZlJywgWzI4N11dLCBbJ0djZWRpbCcsIFsyOTBdXSwgWydHY2lyYycsIFsyODRdXSwgWydnY2lyYycsIFsyODVdXSwgWydHY3knLCBbMTA0M11dLCBbJ2djeScsIFsxMDc1XV0sIFsnR2RvdCcsIFsyODhdXSwgWydnZG90JywgWzI4OV1dLCBbJ2dlJywgWzg4MDVdXSwgWydnRScsIFs4ODA3XV0sIFsnZ0VsJywgWzEwODkyXV0sIFsnZ2VsJywgWzg5MjNdXSwgWydnZXEnLCBbODgwNV1dLCBbJ2dlcXEnLCBbODgwN11dLCBbJ2dlcXNsYW50JywgWzEwODc4XV0sIFsnZ2VzY2MnLCBbMTA5MjFdXSwgWydnZXMnLCBbMTA4NzhdXSwgWydnZXNkb3QnLCBbMTA4ODBdXSwgWydnZXNkb3RvJywgWzEwODgyXV0sIFsnZ2VzZG90b2wnLCBbMTA4ODRdXSwgWydnZXNsJywgWzg5MjMsIDY1MDI0XV0sIFsnZ2VzbGVzJywgWzEwOTAwXV0sIFsnR2ZyJywgWzEyMDA3NF1dLCBbJ2dmcicsIFsxMjAxMDBdXSwgWydnZycsIFs4ODExXV0sIFsnR2cnLCBbODkyMV1dLCBbJ2dnZycsIFs4OTIxXV0sIFsnZ2ltZWwnLCBbODUwM11dLCBbJ0dKY3knLCBbMTAyN11dLCBbJ2dqY3knLCBbMTEwN11dLCBbJ2dsYScsIFsxMDkxN11dLCBbJ2dsJywgWzg4MjNdXSwgWydnbEUnLCBbMTA4OThdXSwgWydnbGonLCBbMTA5MTZdXSwgWydnbmFwJywgWzEwODkwXV0sIFsnZ25hcHByb3gnLCBbMTA4OTBdXSwgWydnbmUnLCBbMTA4ODhdXSwgWydnbkUnLCBbODgwOV1dLCBbJ2duZXEnLCBbMTA4ODhdXSwgWydnbmVxcScsIFs4ODA5XV0sIFsnZ25zaW0nLCBbODkzNV1dLCBbJ0dvcGYnLCBbMTIwMTI2XV0sIFsnZ29wZicsIFsxMjAxNTJdXSwgWydncmF2ZScsIFs5Nl1dLCBbJ0dyZWF0ZXJFcXVhbCcsIFs4ODA1XV0sIFsnR3JlYXRlckVxdWFsTGVzcycsIFs4OTIzXV0sIFsnR3JlYXRlckZ1bGxFcXVhbCcsIFs4ODA3XV0sIFsnR3JlYXRlckdyZWF0ZXInLCBbMTA5MTRdXSwgWydHcmVhdGVyTGVzcycsIFs4ODIzXV0sIFsnR3JlYXRlclNsYW50RXF1YWwnLCBbMTA4NzhdXSwgWydHcmVhdGVyVGlsZGUnLCBbODgxOV1dLCBbJ0dzY3InLCBbMTE5OTcwXV0sIFsnZ3NjcicsIFs4NDU4XV0sIFsnZ3NpbScsIFs4ODE5XV0sIFsnZ3NpbWUnLCBbMTA4OTRdXSwgWydnc2ltbCcsIFsxMDg5Nl1dLCBbJ2d0Y2MnLCBbMTA5MTldXSwgWydndGNpcicsIFsxMDg3NF1dLCBbJ2d0JywgWzYyXV0sIFsnR1QnLCBbNjJdXSwgWydHdCcsIFs4ODExXV0sIFsnZ3Rkb3QnLCBbODkxOV1dLCBbJ2d0bFBhcicsIFsxMDY0NV1dLCBbJ2d0cXVlc3QnLCBbMTA4NzZdXSwgWydndHJhcHByb3gnLCBbMTA4ODZdXSwgWydndHJhcnInLCBbMTA2MTZdXSwgWydndHJkb3QnLCBbODkxOV1dLCBbJ2d0cmVxbGVzcycsIFs4OTIzXV0sIFsnZ3RyZXFxbGVzcycsIFsxMDg5Ml1dLCBbJ2d0cmxlc3MnLCBbODgyM11dLCBbJ2d0cnNpbScsIFs4ODE5XV0sIFsnZ3ZlcnRuZXFxJywgWzg4MDksIDY1MDI0XV0sIFsnZ3ZuRScsIFs4ODA5LCA2NTAyNF1dLCBbJ0hhY2VrJywgWzcxMV1dLCBbJ2hhaXJzcCcsIFs4MjAyXV0sIFsnaGFsZicsIFsxODldXSwgWydoYW1pbHQnLCBbODQ1OV1dLCBbJ0hBUkRjeScsIFsxMDY2XV0sIFsnaGFyZGN5JywgWzEwOThdXSwgWydoYXJyY2lyJywgWzEwNTY4XV0sIFsnaGFycicsIFs4NTk2XV0sIFsnaEFycicsIFs4NjYwXV0sIFsnaGFycncnLCBbODYyMV1dLCBbJ0hhdCcsIFs5NF1dLCBbJ2hiYXInLCBbODQ2M11dLCBbJ0hjaXJjJywgWzI5Ml1dLCBbJ2hjaXJjJywgWzI5M11dLCBbJ2hlYXJ0cycsIFs5ODI5XV0sIFsnaGVhcnRzdWl0JywgWzk4MjldXSwgWydoZWxsaXAnLCBbODIzMF1dLCBbJ2hlcmNvbicsIFs4ODg5XV0sIFsnaGZyJywgWzEyMDEwMV1dLCBbJ0hmcicsIFs4NDYwXV0sIFsnSGlsYmVydFNwYWNlJywgWzg0NTldXSwgWydoa3NlYXJvdycsIFsxMDUzM11dLCBbJ2hrc3dhcm93JywgWzEwNTM0XV0sIFsnaG9hcnInLCBbODcwM11dLCBbJ2hvbXRodCcsIFs4NzYzXV0sIFsnaG9va2xlZnRhcnJvdycsIFs4NjE3XV0sIFsnaG9va3JpZ2h0YXJyb3cnLCBbODYxOF1dLCBbJ2hvcGYnLCBbMTIwMTUzXV0sIFsnSG9wZicsIFs4NDYxXV0sIFsnaG9yYmFyJywgWzgyMTNdXSwgWydIb3Jpem9udGFsTGluZScsIFs5NDcyXV0sIFsnaHNjcicsIFsxMTk5OTddXSwgWydIc2NyJywgWzg0NTldXSwgWydoc2xhc2gnLCBbODQ2M11dLCBbJ0hzdHJvaycsIFsyOTRdXSwgWydoc3Ryb2snLCBbMjk1XV0sIFsnSHVtcERvd25IdW1wJywgWzg3ODJdXSwgWydIdW1wRXF1YWwnLCBbODc4M11dLCBbJ2h5YnVsbCcsIFs4MjU5XV0sIFsnaHlwaGVuJywgWzgyMDhdXSwgWydJYWN1dGUnLCBbMjA1XV0sIFsnaWFjdXRlJywgWzIzN11dLCBbJ2ljJywgWzgyOTFdXSwgWydJY2lyYycsIFsyMDZdXSwgWydpY2lyYycsIFsyMzhdXSwgWydJY3knLCBbMTA0OF1dLCBbJ2ljeScsIFsxMDgwXV0sIFsnSWRvdCcsIFszMDRdXSwgWydJRWN5JywgWzEwNDVdXSwgWydpZWN5JywgWzEwNzddXSwgWydpZXhjbCcsIFsxNjFdXSwgWydpZmYnLCBbODY2MF1dLCBbJ2lmcicsIFsxMjAxMDJdXSwgWydJZnInLCBbODQ2NV1dLCBbJ0lncmF2ZScsIFsyMDRdXSwgWydpZ3JhdmUnLCBbMjM2XV0sIFsnaWknLCBbODUyMF1dLCBbJ2lpaWludCcsIFsxMDc2NF1dLCBbJ2lpaW50JywgWzg3NDldXSwgWydpaW5maW4nLCBbMTA3MTZdXSwgWydpaW90YScsIFs4NDg5XV0sIFsnSUpsaWcnLCBbMzA2XV0sIFsnaWpsaWcnLCBbMzA3XV0sIFsnSW1hY3InLCBbMjk4XV0sIFsnaW1hY3InLCBbMjk5XV0sIFsnaW1hZ2UnLCBbODQ2NV1dLCBbJ0ltYWdpbmFyeUknLCBbODUyMF1dLCBbJ2ltYWdsaW5lJywgWzg0NjRdXSwgWydpbWFncGFydCcsIFs4NDY1XV0sIFsnaW1hdGgnLCBbMzA1XV0sIFsnSW0nLCBbODQ2NV1dLCBbJ2ltb2YnLCBbODg4N11dLCBbJ2ltcGVkJywgWzQzN11dLCBbJ0ltcGxpZXMnLCBbODY1OF1dLCBbJ2luY2FyZScsIFs4NDUzXV0sIFsnaW4nLCBbODcxMl1dLCBbJ2luZmluJywgWzg3MzRdXSwgWydpbmZpbnRpZScsIFsxMDcxN11dLCBbJ2lub2RvdCcsIFszMDVdXSwgWydpbnRjYWwnLCBbODg5MF1dLCBbJ2ludCcsIFs4NzQ3XV0sIFsnSW50JywgWzg3NDhdXSwgWydpbnRlZ2VycycsIFs4NDg0XV0sIFsnSW50ZWdyYWwnLCBbODc0N11dLCBbJ2ludGVyY2FsJywgWzg4OTBdXSwgWydJbnRlcnNlY3Rpb24nLCBbODg5OF1dLCBbJ2ludGxhcmhrJywgWzEwNzc1XV0sIFsnaW50cHJvZCcsIFsxMDgxMl1dLCBbJ0ludmlzaWJsZUNvbW1hJywgWzgyOTFdXSwgWydJbnZpc2libGVUaW1lcycsIFs4MjkwXV0sIFsnSU9jeScsIFsxMDI1XV0sIFsnaW9jeScsIFsxMTA1XV0sIFsnSW9nb24nLCBbMzAyXV0sIFsnaW9nb24nLCBbMzAzXV0sIFsnSW9wZicsIFsxMjAxMjhdXSwgWydpb3BmJywgWzEyMDE1NF1dLCBbJ0lvdGEnLCBbOTIxXV0sIFsnaW90YScsIFs5NTNdXSwgWydpcHJvZCcsIFsxMDgxMl1dLCBbJ2lxdWVzdCcsIFsxOTFdXSwgWydpc2NyJywgWzExOTk5OF1dLCBbJ0lzY3InLCBbODQ2NF1dLCBbJ2lzaW4nLCBbODcxMl1dLCBbJ2lzaW5kb3QnLCBbODk0OV1dLCBbJ2lzaW5FJywgWzg5NTNdXSwgWydpc2lucycsIFs4OTQ4XV0sIFsnaXNpbnN2JywgWzg5NDddXSwgWydpc2ludicsIFs4NzEyXV0sIFsnaXQnLCBbODI5MF1dLCBbJ0l0aWxkZScsIFsyOTZdXSwgWydpdGlsZGUnLCBbMjk3XV0sIFsnSXVrY3knLCBbMTAzMF1dLCBbJ2l1a2N5JywgWzExMTBdXSwgWydJdW1sJywgWzIwN11dLCBbJ2l1bWwnLCBbMjM5XV0sIFsnSmNpcmMnLCBbMzA4XV0sIFsnamNpcmMnLCBbMzA5XV0sIFsnSmN5JywgWzEwNDldXSwgWydqY3knLCBbMTA4MV1dLCBbJ0pmcicsIFsxMjAwNzddXSwgWydqZnInLCBbMTIwMTAzXV0sIFsnam1hdGgnLCBbNTY3XV0sIFsnSm9wZicsIFsxMjAxMjldXSwgWydqb3BmJywgWzEyMDE1NV1dLCBbJ0pzY3InLCBbMTE5OTczXV0sIFsnanNjcicsIFsxMTk5OTldXSwgWydKc2VyY3knLCBbMTAzMl1dLCBbJ2pzZXJjeScsIFsxMTEyXV0sIFsnSnVrY3knLCBbMTAyOF1dLCBbJ2p1a2N5JywgWzExMDhdXSwgWydLYXBwYScsIFs5MjJdXSwgWydrYXBwYScsIFs5NTRdXSwgWydrYXBwYXYnLCBbMTAwOF1dLCBbJ0tjZWRpbCcsIFszMTBdXSwgWydrY2VkaWwnLCBbMzExXV0sIFsnS2N5JywgWzEwNTBdXSwgWydrY3knLCBbMTA4Ml1dLCBbJ0tmcicsIFsxMjAwNzhdXSwgWydrZnInLCBbMTIwMTA0XV0sIFsna2dyZWVuJywgWzMxMl1dLCBbJ0tIY3knLCBbMTA2MV1dLCBbJ2toY3knLCBbMTA5M11dLCBbJ0tKY3knLCBbMTAzNl1dLCBbJ2tqY3knLCBbMTExNl1dLCBbJ0tvcGYnLCBbMTIwMTMwXV0sIFsna29wZicsIFsxMjAxNTZdXSwgWydLc2NyJywgWzExOTk3NF1dLCBbJ2tzY3InLCBbMTIwMDAwXV0sIFsnbEFhcnInLCBbODY2Nl1dLCBbJ0xhY3V0ZScsIFszMTNdXSwgWydsYWN1dGUnLCBbMzE0XV0sIFsnbGFlbXB0eXYnLCBbMTA2NzZdXSwgWydsYWdyYW4nLCBbODQ2Nl1dLCBbJ0xhbWJkYScsIFs5MjNdXSwgWydsYW1iZGEnLCBbOTU1XV0sIFsnbGFuZycsIFsxMDIxNl1dLCBbJ0xhbmcnLCBbMTAyMThdXSwgWydsYW5nZCcsIFsxMDY0MV1dLCBbJ2xhbmdsZScsIFsxMDIxNl1dLCBbJ2xhcCcsIFsxMDg4NV1dLCBbJ0xhcGxhY2V0cmYnLCBbODQ2Nl1dLCBbJ2xhcXVvJywgWzE3MV1dLCBbJ2xhcnJiJywgWzg2NzZdXSwgWydsYXJyYmZzJywgWzEwNTI3XV0sIFsnbGFycicsIFs4NTkyXV0sIFsnTGFycicsIFs4NjA2XV0sIFsnbEFycicsIFs4NjU2XV0sIFsnbGFycmZzJywgWzEwNTI1XV0sIFsnbGFycmhrJywgWzg2MTddXSwgWydsYXJybHAnLCBbODYxOV1dLCBbJ2xhcnJwbCcsIFsxMDU1M11dLCBbJ2xhcnJzaW0nLCBbMTA2MTFdXSwgWydsYXJydGwnLCBbODYxMF1dLCBbJ2xhdGFpbCcsIFsxMDUyMV1dLCBbJ2xBdGFpbCcsIFsxMDUyM11dLCBbJ2xhdCcsIFsxMDkyM11dLCBbJ2xhdGUnLCBbMTA5MjVdXSwgWydsYXRlcycsIFsxMDkyNSwgNjUwMjRdXSwgWydsYmFycicsIFsxMDUwOF1dLCBbJ2xCYXJyJywgWzEwNTEwXV0sIFsnbGJicmsnLCBbMTAwOThdXSwgWydsYnJhY2UnLCBbMTIzXV0sIFsnbGJyYWNrJywgWzkxXV0sIFsnbGJya2UnLCBbMTA2MzVdXSwgWydsYnJrc2xkJywgWzEwNjM5XV0sIFsnbGJya3NsdScsIFsxMDYzN11dLCBbJ0xjYXJvbicsIFszMTddXSwgWydsY2Fyb24nLCBbMzE4XV0sIFsnTGNlZGlsJywgWzMxNV1dLCBbJ2xjZWRpbCcsIFszMTZdXSwgWydsY2VpbCcsIFs4OTY4XV0sIFsnbGN1YicsIFsxMjNdXSwgWydMY3knLCBbMTA1MV1dLCBbJ2xjeScsIFsxMDgzXV0sIFsnbGRjYScsIFsxMDU1MF1dLCBbJ2xkcXVvJywgWzgyMjBdXSwgWydsZHF1b3InLCBbODIyMl1dLCBbJ2xkcmRoYXInLCBbMTA1OTldXSwgWydsZHJ1c2hhcicsIFsxMDU3MV1dLCBbJ2xkc2gnLCBbODYyNl1dLCBbJ2xlJywgWzg4MDRdXSwgWydsRScsIFs4ODA2XV0sIFsnTGVmdEFuZ2xlQnJhY2tldCcsIFsxMDIxNl1dLCBbJ0xlZnRBcnJvd0JhcicsIFs4Njc2XV0sIFsnbGVmdGFycm93JywgWzg1OTJdXSwgWydMZWZ0QXJyb3cnLCBbODU5Ml1dLCBbJ0xlZnRhcnJvdycsIFs4NjU2XV0sIFsnTGVmdEFycm93UmlnaHRBcnJvdycsIFs4NjQ2XV0sIFsnbGVmdGFycm93dGFpbCcsIFs4NjEwXV0sIFsnTGVmdENlaWxpbmcnLCBbODk2OF1dLCBbJ0xlZnREb3VibGVCcmFja2V0JywgWzEwMjE0XV0sIFsnTGVmdERvd25UZWVWZWN0b3InLCBbMTA1OTNdXSwgWydMZWZ0RG93blZlY3RvckJhcicsIFsxMDU4NV1dLCBbJ0xlZnREb3duVmVjdG9yJywgWzg2NDNdXSwgWydMZWZ0Rmxvb3InLCBbODk3MF1dLCBbJ2xlZnRoYXJwb29uZG93bicsIFs4NjM3XV0sIFsnbGVmdGhhcnBvb251cCcsIFs4NjM2XV0sIFsnbGVmdGxlZnRhcnJvd3MnLCBbODY0N11dLCBbJ2xlZnRyaWdodGFycm93JywgWzg1OTZdXSwgWydMZWZ0UmlnaHRBcnJvdycsIFs4NTk2XV0sIFsnTGVmdHJpZ2h0YXJyb3cnLCBbODY2MF1dLCBbJ2xlZnRyaWdodGFycm93cycsIFs4NjQ2XV0sIFsnbGVmdHJpZ2h0aGFycG9vbnMnLCBbODY1MV1dLCBbJ2xlZnRyaWdodHNxdWlnYXJyb3cnLCBbODYyMV1dLCBbJ0xlZnRSaWdodFZlY3RvcicsIFsxMDU3NF1dLCBbJ0xlZnRUZWVBcnJvdycsIFs4NjEyXV0sIFsnTGVmdFRlZScsIFs4ODY3XV0sIFsnTGVmdFRlZVZlY3RvcicsIFsxMDU4Nl1dLCBbJ2xlZnR0aHJlZXRpbWVzJywgWzg5MDddXSwgWydMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDNdXSwgWydMZWZ0VHJpYW5nbGUnLCBbODg4Ml1dLCBbJ0xlZnRUcmlhbmdsZUVxdWFsJywgWzg4ODRdXSwgWydMZWZ0VXBEb3duVmVjdG9yJywgWzEwNTc3XV0sIFsnTGVmdFVwVGVlVmVjdG9yJywgWzEwNTkyXV0sIFsnTGVmdFVwVmVjdG9yQmFyJywgWzEwNTg0XV0sIFsnTGVmdFVwVmVjdG9yJywgWzg2MzldXSwgWydMZWZ0VmVjdG9yQmFyJywgWzEwNTc4XV0sIFsnTGVmdFZlY3RvcicsIFs4NjM2XV0sIFsnbEVnJywgWzEwODkxXV0sIFsnbGVnJywgWzg5MjJdXSwgWydsZXEnLCBbODgwNF1dLCBbJ2xlcXEnLCBbODgwNl1dLCBbJ2xlcXNsYW50JywgWzEwODc3XV0sIFsnbGVzY2MnLCBbMTA5MjBdXSwgWydsZXMnLCBbMTA4NzddXSwgWydsZXNkb3QnLCBbMTA4NzldXSwgWydsZXNkb3RvJywgWzEwODgxXV0sIFsnbGVzZG90b3InLCBbMTA4ODNdXSwgWydsZXNnJywgWzg5MjIsIDY1MDI0XV0sIFsnbGVzZ2VzJywgWzEwODk5XV0sIFsnbGVzc2FwcHJveCcsIFsxMDg4NV1dLCBbJ2xlc3Nkb3QnLCBbODkxOF1dLCBbJ2xlc3NlcWd0cicsIFs4OTIyXV0sIFsnbGVzc2VxcWd0cicsIFsxMDg5MV1dLCBbJ0xlc3NFcXVhbEdyZWF0ZXInLCBbODkyMl1dLCBbJ0xlc3NGdWxsRXF1YWwnLCBbODgwNl1dLCBbJ0xlc3NHcmVhdGVyJywgWzg4MjJdXSwgWydsZXNzZ3RyJywgWzg4MjJdXSwgWydMZXNzTGVzcycsIFsxMDkxM11dLCBbJ2xlc3NzaW0nLCBbODgxOF1dLCBbJ0xlc3NTbGFudEVxdWFsJywgWzEwODc3XV0sIFsnTGVzc1RpbGRlJywgWzg4MThdXSwgWydsZmlzaHQnLCBbMTA2MjBdXSwgWydsZmxvb3InLCBbODk3MF1dLCBbJ0xmcicsIFsxMjAwNzldXSwgWydsZnInLCBbMTIwMTA1XV0sIFsnbGcnLCBbODgyMl1dLCBbJ2xnRScsIFsxMDg5N11dLCBbJ2xIYXInLCBbMTA1OTRdXSwgWydsaGFyZCcsIFs4NjM3XV0sIFsnbGhhcnUnLCBbODYzNl1dLCBbJ2xoYXJ1bCcsIFsxMDYwMl1dLCBbJ2xoYmxrJywgWzk2MDRdXSwgWydMSmN5JywgWzEwMzNdXSwgWydsamN5JywgWzExMTNdXSwgWydsbGFycicsIFs4NjQ3XV0sIFsnbGwnLCBbODgxMF1dLCBbJ0xsJywgWzg5MjBdXSwgWydsbGNvcm5lcicsIFs4OTkwXV0sIFsnTGxlZnRhcnJvdycsIFs4NjY2XV0sIFsnbGxoYXJkJywgWzEwNjAzXV0sIFsnbGx0cmknLCBbOTcyMl1dLCBbJ0xtaWRvdCcsIFszMTldXSwgWydsbWlkb3QnLCBbMzIwXV0sIFsnbG1vdXN0YWNoZScsIFs5MTM2XV0sIFsnbG1vdXN0JywgWzkxMzZdXSwgWydsbmFwJywgWzEwODg5XV0sIFsnbG5hcHByb3gnLCBbMTA4ODldXSwgWydsbmUnLCBbMTA4ODddXSwgWydsbkUnLCBbODgwOF1dLCBbJ2xuZXEnLCBbMTA4ODddXSwgWydsbmVxcScsIFs4ODA4XV0sIFsnbG5zaW0nLCBbODkzNF1dLCBbJ2xvYW5nJywgWzEwMjIwXV0sIFsnbG9hcnInLCBbODcwMV1dLCBbJ2xvYnJrJywgWzEwMjE0XV0sIFsnbG9uZ2xlZnRhcnJvdycsIFsxMDIyOV1dLCBbJ0xvbmdMZWZ0QXJyb3cnLCBbMTAyMjldXSwgWydMb25nbGVmdGFycm93JywgWzEwMjMyXV0sIFsnbG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjMxXV0sIFsnTG9uZ0xlZnRSaWdodEFycm93JywgWzEwMjMxXV0sIFsnTG9uZ2xlZnRyaWdodGFycm93JywgWzEwMjM0XV0sIFsnbG9uZ21hcHN0bycsIFsxMDIzNl1dLCBbJ2xvbmdyaWdodGFycm93JywgWzEwMjMwXV0sIFsnTG9uZ1JpZ2h0QXJyb3cnLCBbMTAyMzBdXSwgWydMb25ncmlnaHRhcnJvdycsIFsxMDIzM11dLCBbJ2xvb3BhcnJvd2xlZnQnLCBbODYxOV1dLCBbJ2xvb3BhcnJvd3JpZ2h0JywgWzg2MjBdXSwgWydsb3BhcicsIFsxMDYyOV1dLCBbJ0xvcGYnLCBbMTIwMTMxXV0sIFsnbG9wZicsIFsxMjAxNTddXSwgWydsb3BsdXMnLCBbMTA3OTddXSwgWydsb3RpbWVzJywgWzEwODA0XV0sIFsnbG93YXN0JywgWzg3MjddXSwgWydsb3diYXInLCBbOTVdXSwgWydMb3dlckxlZnRBcnJvdycsIFs4NjAxXV0sIFsnTG93ZXJSaWdodEFycm93JywgWzg2MDBdXSwgWydsb3onLCBbOTY3NF1dLCBbJ2xvemVuZ2UnLCBbOTY3NF1dLCBbJ2xvemYnLCBbMTA3MzFdXSwgWydscGFyJywgWzQwXV0sIFsnbHBhcmx0JywgWzEwNjQzXV0sIFsnbHJhcnInLCBbODY0Nl1dLCBbJ2xyY29ybmVyJywgWzg5OTFdXSwgWydscmhhcicsIFs4NjUxXV0sIFsnbHJoYXJkJywgWzEwNjA1XV0sIFsnbHJtJywgWzgyMDZdXSwgWydscnRyaScsIFs4ODk1XV0sIFsnbHNhcXVvJywgWzgyNDldXSwgWydsc2NyJywgWzEyMDAwMV1dLCBbJ0xzY3InLCBbODQ2Nl1dLCBbJ2xzaCcsIFs4NjI0XV0sIFsnTHNoJywgWzg2MjRdXSwgWydsc2ltJywgWzg4MThdXSwgWydsc2ltZScsIFsxMDg5M11dLCBbJ2xzaW1nJywgWzEwODk1XV0sIFsnbHNxYicsIFs5MV1dLCBbJ2xzcXVvJywgWzgyMTZdXSwgWydsc3F1b3InLCBbODIxOF1dLCBbJ0xzdHJvaycsIFszMjFdXSwgWydsc3Ryb2snLCBbMzIyXV0sIFsnbHRjYycsIFsxMDkxOF1dLCBbJ2x0Y2lyJywgWzEwODczXV0sIFsnbHQnLCBbNjBdXSwgWydMVCcsIFs2MF1dLCBbJ0x0JywgWzg4MTBdXSwgWydsdGRvdCcsIFs4OTE4XV0sIFsnbHRocmVlJywgWzg5MDddXSwgWydsdGltZXMnLCBbODkwNV1dLCBbJ2x0bGFycicsIFsxMDYxNF1dLCBbJ2x0cXVlc3QnLCBbMTA4NzVdXSwgWydsdHJpJywgWzk2NjddXSwgWydsdHJpZScsIFs4ODg0XV0sIFsnbHRyaWYnLCBbOTY2Nl1dLCBbJ2x0clBhcicsIFsxMDY0Nl1dLCBbJ2x1cmRzaGFyJywgWzEwNTcwXV0sIFsnbHVydWhhcicsIFsxMDU5OF1dLCBbJ2x2ZXJ0bmVxcScsIFs4ODA4LCA2NTAyNF1dLCBbJ2x2bkUnLCBbODgwOCwgNjUwMjRdXSwgWydtYWNyJywgWzE3NV1dLCBbJ21hbGUnLCBbOTc5NF1dLCBbJ21hbHQnLCBbMTAwMTZdXSwgWydtYWx0ZXNlJywgWzEwMDE2XV0sIFsnTWFwJywgWzEwNTAxXV0sIFsnbWFwJywgWzg2MTRdXSwgWydtYXBzdG8nLCBbODYxNF1dLCBbJ21hcHN0b2Rvd24nLCBbODYxNV1dLCBbJ21hcHN0b2xlZnQnLCBbODYxMl1dLCBbJ21hcHN0b3VwJywgWzg2MTNdXSwgWydtYXJrZXInLCBbOTY0Nl1dLCBbJ21jb21tYScsIFsxMDc5M11dLCBbJ01jeScsIFsxMDUyXV0sIFsnbWN5JywgWzEwODRdXSwgWydtZGFzaCcsIFs4MjEyXV0sIFsnbUREb3QnLCBbODc2Ml1dLCBbJ21lYXN1cmVkYW5nbGUnLCBbODczN11dLCBbJ01lZGl1bVNwYWNlJywgWzgyODddXSwgWydNZWxsaW50cmYnLCBbODQ5OV1dLCBbJ01mcicsIFsxMjAwODBdXSwgWydtZnInLCBbMTIwMTA2XV0sIFsnbWhvJywgWzg0ODddXSwgWydtaWNybycsIFsxODFdXSwgWydtaWRhc3QnLCBbNDJdXSwgWydtaWRjaXInLCBbMTA5OTJdXSwgWydtaWQnLCBbODczOV1dLCBbJ21pZGRvdCcsIFsxODNdXSwgWydtaW51c2InLCBbODg2M11dLCBbJ21pbnVzJywgWzg3MjJdXSwgWydtaW51c2QnLCBbODc2MF1dLCBbJ21pbnVzZHUnLCBbMTA3OTRdXSwgWydNaW51c1BsdXMnLCBbODcyM11dLCBbJ21sY3AnLCBbMTA5NzFdXSwgWydtbGRyJywgWzgyMzBdXSwgWydtbnBsdXMnLCBbODcyM11dLCBbJ21vZGVscycsIFs4ODcxXV0sIFsnTW9wZicsIFsxMjAxMzJdXSwgWydtb3BmJywgWzEyMDE1OF1dLCBbJ21wJywgWzg3MjNdXSwgWydtc2NyJywgWzEyMDAwMl1dLCBbJ01zY3InLCBbODQ5OV1dLCBbJ21zdHBvcycsIFs4NzY2XV0sIFsnTXUnLCBbOTI0XV0sIFsnbXUnLCBbOTU2XV0sIFsnbXVsdGltYXAnLCBbODg4OF1dLCBbJ211bWFwJywgWzg4ODhdXSwgWyduYWJsYScsIFs4NzExXV0sIFsnTmFjdXRlJywgWzMyM11dLCBbJ25hY3V0ZScsIFszMjRdXSwgWyduYW5nJywgWzg3MzYsIDg0MDJdXSwgWyduYXAnLCBbODc3N11dLCBbJ25hcEUnLCBbMTA4NjQsIDgyNF1dLCBbJ25hcGlkJywgWzg3NzksIDgyNF1dLCBbJ25hcG9zJywgWzMyOV1dLCBbJ25hcHByb3gnLCBbODc3N11dLCBbJ25hdHVyYWwnLCBbOTgzOF1dLCBbJ25hdHVyYWxzJywgWzg0NjldXSwgWyduYXR1cicsIFs5ODM4XV0sIFsnbmJzcCcsIFsxNjBdXSwgWyduYnVtcCcsIFs4NzgyLCA4MjRdXSwgWyduYnVtcGUnLCBbODc4MywgODI0XV0sIFsnbmNhcCcsIFsxMDgxOV1dLCBbJ05jYXJvbicsIFszMjddXSwgWyduY2Fyb24nLCBbMzI4XV0sIFsnTmNlZGlsJywgWzMyNV1dLCBbJ25jZWRpbCcsIFszMjZdXSwgWyduY29uZycsIFs4Nzc1XV0sIFsnbmNvbmdkb3QnLCBbMTA4NjEsIDgyNF1dLCBbJ25jdXAnLCBbMTA4MThdXSwgWydOY3knLCBbMTA1M11dLCBbJ25jeScsIFsxMDg1XV0sIFsnbmRhc2gnLCBbODIxMV1dLCBbJ25lYXJoaycsIFsxMDUzMl1dLCBbJ25lYXJyJywgWzg1OTldXSwgWyduZUFycicsIFs4NjYzXV0sIFsnbmVhcnJvdycsIFs4NTk5XV0sIFsnbmUnLCBbODgwMF1dLCBbJ25lZG90JywgWzg3ODQsIDgyNF1dLCBbJ05lZ2F0aXZlTWVkaXVtU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVGhpY2tTcGFjZScsIFs4MjAzXV0sIFsnTmVnYXRpdmVUaGluU3BhY2UnLCBbODIwM11dLCBbJ05lZ2F0aXZlVmVyeVRoaW5TcGFjZScsIFs4MjAzXV0sIFsnbmVxdWl2JywgWzg4MDJdXSwgWyduZXNlYXInLCBbMTA1MzZdXSwgWyduZXNpbScsIFs4NzcwLCA4MjRdXSwgWydOZXN0ZWRHcmVhdGVyR3JlYXRlcicsIFs4ODExXV0sIFsnTmVzdGVkTGVzc0xlc3MnLCBbODgxMF1dLCBbJ25leGlzdCcsIFs4NzA4XV0sIFsnbmV4aXN0cycsIFs4NzA4XV0sIFsnTmZyJywgWzEyMDA4MV1dLCBbJ25mcicsIFsxMjAxMDddXSwgWyduZ0UnLCBbODgwNywgODI0XV0sIFsnbmdlJywgWzg4MTddXSwgWyduZ2VxJywgWzg4MTddXSwgWyduZ2VxcScsIFs4ODA3LCA4MjRdXSwgWyduZ2Vxc2xhbnQnLCBbMTA4NzgsIDgyNF1dLCBbJ25nZXMnLCBbMTA4NzgsIDgyNF1dLCBbJ25HZycsIFs4OTIxLCA4MjRdXSwgWyduZ3NpbScsIFs4ODIxXV0sIFsnbkd0JywgWzg4MTEsIDg0MDJdXSwgWyduZ3QnLCBbODgxNV1dLCBbJ25ndHInLCBbODgxNV1dLCBbJ25HdHYnLCBbODgxMSwgODI0XV0sIFsnbmhhcnInLCBbODYyMl1dLCBbJ25oQXJyJywgWzg2NTRdXSwgWyduaHBhcicsIFsxMDk5NF1dLCBbJ25pJywgWzg3MTVdXSwgWyduaXMnLCBbODk1Nl1dLCBbJ25pc2QnLCBbODk1NF1dLCBbJ25pdicsIFs4NzE1XV0sIFsnTkpjeScsIFsxMDM0XV0sIFsnbmpjeScsIFsxMTE0XV0sIFsnbmxhcnInLCBbODYwMl1dLCBbJ25sQXJyJywgWzg2NTNdXSwgWydubGRyJywgWzgyMjldXSwgWydubEUnLCBbODgwNiwgODI0XV0sIFsnbmxlJywgWzg4MTZdXSwgWydubGVmdGFycm93JywgWzg2MDJdXSwgWyduTGVmdGFycm93JywgWzg2NTNdXSwgWydubGVmdHJpZ2h0YXJyb3cnLCBbODYyMl1dLCBbJ25MZWZ0cmlnaHRhcnJvdycsIFs4NjU0XV0sIFsnbmxlcScsIFs4ODE2XV0sIFsnbmxlcXEnLCBbODgwNiwgODI0XV0sIFsnbmxlcXNsYW50JywgWzEwODc3LCA4MjRdXSwgWydubGVzJywgWzEwODc3LCA4MjRdXSwgWydubGVzcycsIFs4ODE0XV0sIFsnbkxsJywgWzg5MjAsIDgyNF1dLCBbJ25sc2ltJywgWzg4MjBdXSwgWyduTHQnLCBbODgxMCwgODQwMl1dLCBbJ25sdCcsIFs4ODE0XV0sIFsnbmx0cmknLCBbODkzOF1dLCBbJ25sdHJpZScsIFs4OTQwXV0sIFsnbkx0dicsIFs4ODEwLCA4MjRdXSwgWydubWlkJywgWzg3NDBdXSwgWydOb0JyZWFrJywgWzgyODhdXSwgWydOb25CcmVha2luZ1NwYWNlJywgWzE2MF1dLCBbJ25vcGYnLCBbMTIwMTU5XV0sIFsnTm9wZicsIFs4NDY5XV0sIFsnTm90JywgWzEwOTg4XV0sIFsnbm90JywgWzE3Ml1dLCBbJ05vdENvbmdydWVudCcsIFs4ODAyXV0sIFsnTm90Q3VwQ2FwJywgWzg4MTNdXSwgWydOb3REb3VibGVWZXJ0aWNhbEJhcicsIFs4NzQyXV0sIFsnTm90RWxlbWVudCcsIFs4NzEzXV0sIFsnTm90RXF1YWwnLCBbODgwMF1dLCBbJ05vdEVxdWFsVGlsZGUnLCBbODc3MCwgODI0XV0sIFsnTm90RXhpc3RzJywgWzg3MDhdXSwgWydOb3RHcmVhdGVyJywgWzg4MTVdXSwgWydOb3RHcmVhdGVyRXF1YWwnLCBbODgxN11dLCBbJ05vdEdyZWF0ZXJGdWxsRXF1YWwnLCBbODgwNywgODI0XV0sIFsnTm90R3JlYXRlckdyZWF0ZXInLCBbODgxMSwgODI0XV0sIFsnTm90R3JlYXRlckxlc3MnLCBbODgyNV1dLCBbJ05vdEdyZWF0ZXJTbGFudEVxdWFsJywgWzEwODc4LCA4MjRdXSwgWydOb3RHcmVhdGVyVGlsZGUnLCBbODgyMV1dLCBbJ05vdEh1bXBEb3duSHVtcCcsIFs4NzgyLCA4MjRdXSwgWydOb3RIdW1wRXF1YWwnLCBbODc4MywgODI0XV0sIFsnbm90aW4nLCBbODcxM11dLCBbJ25vdGluZG90JywgWzg5NDksIDgyNF1dLCBbJ25vdGluRScsIFs4OTUzLCA4MjRdXSwgWydub3RpbnZhJywgWzg3MTNdXSwgWydub3RpbnZiJywgWzg5NTFdXSwgWydub3RpbnZjJywgWzg5NTBdXSwgWydOb3RMZWZ0VHJpYW5nbGVCYXInLCBbMTA3MDMsIDgyNF1dLCBbJ05vdExlZnRUcmlhbmdsZScsIFs4OTM4XV0sIFsnTm90TGVmdFRyaWFuZ2xlRXF1YWwnLCBbODk0MF1dLCBbJ05vdExlc3MnLCBbODgxNF1dLCBbJ05vdExlc3NFcXVhbCcsIFs4ODE2XV0sIFsnTm90TGVzc0dyZWF0ZXInLCBbODgyNF1dLCBbJ05vdExlc3NMZXNzJywgWzg4MTAsIDgyNF1dLCBbJ05vdExlc3NTbGFudEVxdWFsJywgWzEwODc3LCA4MjRdXSwgWydOb3RMZXNzVGlsZGUnLCBbODgyMF1dLCBbJ05vdE5lc3RlZEdyZWF0ZXJHcmVhdGVyJywgWzEwOTE0LCA4MjRdXSwgWydOb3ROZXN0ZWRMZXNzTGVzcycsIFsxMDkxMywgODI0XV0sIFsnbm90bmknLCBbODcxNl1dLCBbJ25vdG5pdmEnLCBbODcxNl1dLCBbJ25vdG5pdmInLCBbODk1OF1dLCBbJ25vdG5pdmMnLCBbODk1N11dLCBbJ05vdFByZWNlZGVzJywgWzg4MzJdXSwgWydOb3RQcmVjZWRlc0VxdWFsJywgWzEwOTI3LCA4MjRdXSwgWydOb3RQcmVjZWRlc1NsYW50RXF1YWwnLCBbODkyOF1dLCBbJ05vdFJldmVyc2VFbGVtZW50JywgWzg3MTZdXSwgWydOb3RSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0LCA4MjRdXSwgWydOb3RSaWdodFRyaWFuZ2xlJywgWzg5MzldXSwgWydOb3RSaWdodFRyaWFuZ2xlRXF1YWwnLCBbODk0MV1dLCBbJ05vdFNxdWFyZVN1YnNldCcsIFs4ODQ3LCA4MjRdXSwgWydOb3RTcXVhcmVTdWJzZXRFcXVhbCcsIFs4OTMwXV0sIFsnTm90U3F1YXJlU3VwZXJzZXQnLCBbODg0OCwgODI0XV0sIFsnTm90U3F1YXJlU3VwZXJzZXRFcXVhbCcsIFs4OTMxXV0sIFsnTm90U3Vic2V0JywgWzg4MzQsIDg0MDJdXSwgWydOb3RTdWJzZXRFcXVhbCcsIFs4ODQwXV0sIFsnTm90U3VjY2VlZHMnLCBbODgzM11dLCBbJ05vdFN1Y2NlZWRzRXF1YWwnLCBbMTA5MjgsIDgyNF1dLCBbJ05vdFN1Y2NlZWRzU2xhbnRFcXVhbCcsIFs4OTI5XV0sIFsnTm90U3VjY2VlZHNUaWxkZScsIFs4ODMxLCA4MjRdXSwgWydOb3RTdXBlcnNldCcsIFs4ODM1LCA4NDAyXV0sIFsnTm90U3VwZXJzZXRFcXVhbCcsIFs4ODQxXV0sIFsnTm90VGlsZGUnLCBbODc2OV1dLCBbJ05vdFRpbGRlRXF1YWwnLCBbODc3Ml1dLCBbJ05vdFRpbGRlRnVsbEVxdWFsJywgWzg3NzVdXSwgWydOb3RUaWxkZVRpbGRlJywgWzg3NzddXSwgWydOb3RWZXJ0aWNhbEJhcicsIFs4NzQwXV0sIFsnbnBhcmFsbGVsJywgWzg3NDJdXSwgWyducGFyJywgWzg3NDJdXSwgWyducGFyc2wnLCBbMTEwMDUsIDg0MjFdXSwgWyducGFydCcsIFs4NzA2LCA4MjRdXSwgWyducG9saW50JywgWzEwNzcyXV0sIFsnbnByJywgWzg4MzJdXSwgWyducHJjdWUnLCBbODkyOF1dLCBbJ25wcmVjJywgWzg4MzJdXSwgWyducHJlY2VxJywgWzEwOTI3LCA4MjRdXSwgWyducHJlJywgWzEwOTI3LCA4MjRdXSwgWyducmFycmMnLCBbMTA1NDcsIDgyNF1dLCBbJ25yYXJyJywgWzg2MDNdXSwgWyduckFycicsIFs4NjU1XV0sIFsnbnJhcnJ3JywgWzg2MDUsIDgyNF1dLCBbJ25yaWdodGFycm93JywgWzg2MDNdXSwgWyduUmlnaHRhcnJvdycsIFs4NjU1XV0sIFsnbnJ0cmknLCBbODkzOV1dLCBbJ25ydHJpZScsIFs4OTQxXV0sIFsnbnNjJywgWzg4MzNdXSwgWyduc2NjdWUnLCBbODkyOV1dLCBbJ25zY2UnLCBbMTA5MjgsIDgyNF1dLCBbJ05zY3InLCBbMTE5OTc3XV0sIFsnbnNjcicsIFsxMjAwMDNdXSwgWyduc2hvcnRtaWQnLCBbODc0MF1dLCBbJ25zaG9ydHBhcmFsbGVsJywgWzg3NDJdXSwgWyduc2ltJywgWzg3NjldXSwgWyduc2ltZScsIFs4NzcyXV0sIFsnbnNpbWVxJywgWzg3NzJdXSwgWyduc21pZCcsIFs4NzQwXV0sIFsnbnNwYXInLCBbODc0Ml1dLCBbJ25zcXN1YmUnLCBbODkzMF1dLCBbJ25zcXN1cGUnLCBbODkzMV1dLCBbJ25zdWInLCBbODgzNl1dLCBbJ25zdWJFJywgWzEwOTQ5LCA4MjRdXSwgWyduc3ViZScsIFs4ODQwXV0sIFsnbnN1YnNldCcsIFs4ODM0LCA4NDAyXV0sIFsnbnN1YnNldGVxJywgWzg4NDBdXSwgWyduc3Vic2V0ZXFxJywgWzEwOTQ5LCA4MjRdXSwgWyduc3VjYycsIFs4ODMzXV0sIFsnbnN1Y2NlcScsIFsxMDkyOCwgODI0XV0sIFsnbnN1cCcsIFs4ODM3XV0sIFsnbnN1cEUnLCBbMTA5NTAsIDgyNF1dLCBbJ25zdXBlJywgWzg4NDFdXSwgWyduc3Vwc2V0JywgWzg4MzUsIDg0MDJdXSwgWyduc3Vwc2V0ZXEnLCBbODg0MV1dLCBbJ25zdXBzZXRlcXEnLCBbMTA5NTAsIDgyNF1dLCBbJ250Z2wnLCBbODgyNV1dLCBbJ050aWxkZScsIFsyMDldXSwgWydudGlsZGUnLCBbMjQxXV0sIFsnbnRsZycsIFs4ODI0XV0sIFsnbnRyaWFuZ2xlbGVmdCcsIFs4OTM4XV0sIFsnbnRyaWFuZ2xlbGVmdGVxJywgWzg5NDBdXSwgWydudHJpYW5nbGVyaWdodCcsIFs4OTM5XV0sIFsnbnRyaWFuZ2xlcmlnaHRlcScsIFs4OTQxXV0sIFsnTnUnLCBbOTI1XV0sIFsnbnUnLCBbOTU3XV0sIFsnbnVtJywgWzM1XV0sIFsnbnVtZXJvJywgWzg0NzBdXSwgWydudW1zcCcsIFs4MTk5XV0sIFsnbnZhcCcsIFs4NzgxLCA4NDAyXV0sIFsnbnZkYXNoJywgWzg4NzZdXSwgWydudkRhc2gnLCBbODg3N11dLCBbJ25WZGFzaCcsIFs4ODc4XV0sIFsnblZEYXNoJywgWzg4NzldXSwgWydudmdlJywgWzg4MDUsIDg0MDJdXSwgWydudmd0JywgWzYyLCA4NDAyXV0sIFsnbnZIYXJyJywgWzEwNTAwXV0sIFsnbnZpbmZpbicsIFsxMDcxOF1dLCBbJ252bEFycicsIFsxMDQ5OF1dLCBbJ252bGUnLCBbODgwNCwgODQwMl1dLCBbJ252bHQnLCBbNjAsIDg0MDJdXSwgWydudmx0cmllJywgWzg4ODQsIDg0MDJdXSwgWydudnJBcnInLCBbMTA0OTldXSwgWydudnJ0cmllJywgWzg4ODUsIDg0MDJdXSwgWydudnNpbScsIFs4NzY0LCA4NDAyXV0sIFsnbndhcmhrJywgWzEwNTMxXV0sIFsnbndhcnInLCBbODU5OF1dLCBbJ253QXJyJywgWzg2NjJdXSwgWydud2Fycm93JywgWzg1OThdXSwgWydud25lYXInLCBbMTA1MzVdXSwgWydPYWN1dGUnLCBbMjExXV0sIFsnb2FjdXRlJywgWzI0M11dLCBbJ29hc3QnLCBbODg1OV1dLCBbJ09jaXJjJywgWzIxMl1dLCBbJ29jaXJjJywgWzI0NF1dLCBbJ29jaXInLCBbODg1OF1dLCBbJ09jeScsIFsxMDU0XV0sIFsnb2N5JywgWzEwODZdXSwgWydvZGFzaCcsIFs4ODYxXV0sIFsnT2RibGFjJywgWzMzNl1dLCBbJ29kYmxhYycsIFszMzddXSwgWydvZGl2JywgWzEwODA4XV0sIFsnb2RvdCcsIFs4ODU3XV0sIFsnb2Rzb2xkJywgWzEwNjg0XV0sIFsnT0VsaWcnLCBbMzM4XV0sIFsnb2VsaWcnLCBbMzM5XV0sIFsnb2ZjaXInLCBbMTA2ODddXSwgWydPZnInLCBbMTIwMDgyXV0sIFsnb2ZyJywgWzEyMDEwOF1dLCBbJ29nb24nLCBbNzMxXV0sIFsnT2dyYXZlJywgWzIxMF1dLCBbJ29ncmF2ZScsIFsyNDJdXSwgWydvZ3QnLCBbMTA2ODldXSwgWydvaGJhcicsIFsxMDY3N11dLCBbJ29obScsIFs5MzddXSwgWydvaW50JywgWzg3NTBdXSwgWydvbGFycicsIFs4NjM0XV0sIFsnb2xjaXInLCBbMTA2ODZdXSwgWydvbGNyb3NzJywgWzEwNjgzXV0sIFsnb2xpbmUnLCBbODI1NF1dLCBbJ29sdCcsIFsxMDY4OF1dLCBbJ09tYWNyJywgWzMzMl1dLCBbJ29tYWNyJywgWzMzM11dLCBbJ09tZWdhJywgWzkzN11dLCBbJ29tZWdhJywgWzk2OV1dLCBbJ09taWNyb24nLCBbOTI3XV0sIFsnb21pY3JvbicsIFs5NTldXSwgWydvbWlkJywgWzEwNjc4XV0sIFsnb21pbnVzJywgWzg4NTRdXSwgWydPb3BmJywgWzEyMDEzNF1dLCBbJ29vcGYnLCBbMTIwMTYwXV0sIFsnb3BhcicsIFsxMDY3OV1dLCBbJ09wZW5DdXJseURvdWJsZVF1b3RlJywgWzgyMjBdXSwgWydPcGVuQ3VybHlRdW90ZScsIFs4MjE2XV0sIFsnb3BlcnAnLCBbMTA2ODFdXSwgWydvcGx1cycsIFs4ODUzXV0sIFsnb3JhcnInLCBbODYzNV1dLCBbJ09yJywgWzEwODM2XV0sIFsnb3InLCBbODc0NF1dLCBbJ29yZCcsIFsxMDg0NV1dLCBbJ29yZGVyJywgWzg1MDBdXSwgWydvcmRlcm9mJywgWzg1MDBdXSwgWydvcmRmJywgWzE3MF1dLCBbJ29yZG0nLCBbMTg2XV0sIFsnb3JpZ29mJywgWzg4ODZdXSwgWydvcm9yJywgWzEwODM4XV0sIFsnb3JzbG9wZScsIFsxMDgzOV1dLCBbJ29ydicsIFsxMDg0M11dLCBbJ29TJywgWzk0MTZdXSwgWydPc2NyJywgWzExOTk3OF1dLCBbJ29zY3InLCBbODUwMF1dLCBbJ09zbGFzaCcsIFsyMTZdXSwgWydvc2xhc2gnLCBbMjQ4XV0sIFsnb3NvbCcsIFs4ODU2XV0sIFsnT3RpbGRlJywgWzIxM11dLCBbJ290aWxkZScsIFsyNDVdXSwgWydvdGltZXNhcycsIFsxMDgwNl1dLCBbJ090aW1lcycsIFsxMDgwN11dLCBbJ290aW1lcycsIFs4ODU1XV0sIFsnT3VtbCcsIFsyMTRdXSwgWydvdW1sJywgWzI0Nl1dLCBbJ292YmFyJywgWzkwMjFdXSwgWydPdmVyQmFyJywgWzgyNTRdXSwgWydPdmVyQnJhY2UnLCBbOTE4Ml1dLCBbJ092ZXJCcmFja2V0JywgWzkxNDBdXSwgWydPdmVyUGFyZW50aGVzaXMnLCBbOTE4MF1dLCBbJ3BhcmEnLCBbMTgyXV0sIFsncGFyYWxsZWwnLCBbODc0MV1dLCBbJ3BhcicsIFs4NzQxXV0sIFsncGFyc2ltJywgWzEwOTk1XV0sIFsncGFyc2wnLCBbMTEwMDVdXSwgWydwYXJ0JywgWzg3MDZdXSwgWydQYXJ0aWFsRCcsIFs4NzA2XV0sIFsnUGN5JywgWzEwNTVdXSwgWydwY3knLCBbMTA4N11dLCBbJ3BlcmNudCcsIFszN11dLCBbJ3BlcmlvZCcsIFs0Nl1dLCBbJ3Blcm1pbCcsIFs4MjQwXV0sIFsncGVycCcsIFs4ODY5XV0sIFsncGVydGVuaycsIFs4MjQxXV0sIFsnUGZyJywgWzEyMDA4M11dLCBbJ3BmcicsIFsxMjAxMDldXSwgWydQaGknLCBbOTM0XV0sIFsncGhpJywgWzk2Nl1dLCBbJ3BoaXYnLCBbOTgxXV0sIFsncGhtbWF0JywgWzg0OTldXSwgWydwaG9uZScsIFs5NzQyXV0sIFsnUGknLCBbOTI4XV0sIFsncGknLCBbOTYwXV0sIFsncGl0Y2hmb3JrJywgWzg5MTZdXSwgWydwaXYnLCBbOTgyXV0sIFsncGxhbmNrJywgWzg0NjNdXSwgWydwbGFuY2toJywgWzg0NjJdXSwgWydwbGFua3YnLCBbODQ2M11dLCBbJ3BsdXNhY2lyJywgWzEwNzg3XV0sIFsncGx1c2InLCBbODg2Ml1dLCBbJ3BsdXNjaXInLCBbMTA3ODZdXSwgWydwbHVzJywgWzQzXV0sIFsncGx1c2RvJywgWzg3MjRdXSwgWydwbHVzZHUnLCBbMTA3ODldXSwgWydwbHVzZScsIFsxMDg2Nl1dLCBbJ1BsdXNNaW51cycsIFsxNzddXSwgWydwbHVzbW4nLCBbMTc3XV0sIFsncGx1c3NpbScsIFsxMDc5MF1dLCBbJ3BsdXN0d28nLCBbMTA3OTFdXSwgWydwbScsIFsxNzddXSwgWydQb2luY2FyZXBsYW5lJywgWzg0NjBdXSwgWydwb2ludGludCcsIFsxMDc3M11dLCBbJ3BvcGYnLCBbMTIwMTYxXV0sIFsnUG9wZicsIFs4NDczXV0sIFsncG91bmQnLCBbMTYzXV0sIFsncHJhcCcsIFsxMDkzNV1dLCBbJ1ByJywgWzEwOTM5XV0sIFsncHInLCBbODgyNl1dLCBbJ3ByY3VlJywgWzg4MjhdXSwgWydwcmVjYXBwcm94JywgWzEwOTM1XV0sIFsncHJlYycsIFs4ODI2XV0sIFsncHJlY2N1cmx5ZXEnLCBbODgyOF1dLCBbJ1ByZWNlZGVzJywgWzg4MjZdXSwgWydQcmVjZWRlc0VxdWFsJywgWzEwOTI3XV0sIFsnUHJlY2VkZXNTbGFudEVxdWFsJywgWzg4MjhdXSwgWydQcmVjZWRlc1RpbGRlJywgWzg4MzBdXSwgWydwcmVjZXEnLCBbMTA5MjddXSwgWydwcmVjbmFwcHJveCcsIFsxMDkzN11dLCBbJ3ByZWNuZXFxJywgWzEwOTMzXV0sIFsncHJlY25zaW0nLCBbODkzNl1dLCBbJ3ByZScsIFsxMDkyN11dLCBbJ3ByRScsIFsxMDkzMV1dLCBbJ3ByZWNzaW0nLCBbODgzMF1dLCBbJ3ByaW1lJywgWzgyNDJdXSwgWydQcmltZScsIFs4MjQzXV0sIFsncHJpbWVzJywgWzg0NzNdXSwgWydwcm5hcCcsIFsxMDkzN11dLCBbJ3BybkUnLCBbMTA5MzNdXSwgWydwcm5zaW0nLCBbODkzNl1dLCBbJ3Byb2QnLCBbODcxOV1dLCBbJ1Byb2R1Y3QnLCBbODcxOV1dLCBbJ3Byb2ZhbGFyJywgWzkwMDZdXSwgWydwcm9mbGluZScsIFs4OTc4XV0sIFsncHJvZnN1cmYnLCBbODk3OV1dLCBbJ3Byb3AnLCBbODczM11dLCBbJ1Byb3BvcnRpb25hbCcsIFs4NzMzXV0sIFsnUHJvcG9ydGlvbicsIFs4NzU5XV0sIFsncHJvcHRvJywgWzg3MzNdXSwgWydwcnNpbScsIFs4ODMwXV0sIFsncHJ1cmVsJywgWzg4ODBdXSwgWydQc2NyJywgWzExOTk3OV1dLCBbJ3BzY3InLCBbMTIwMDA1XV0sIFsnUHNpJywgWzkzNl1dLCBbJ3BzaScsIFs5NjhdXSwgWydwdW5jc3AnLCBbODIwMF1dLCBbJ1FmcicsIFsxMjAwODRdXSwgWydxZnInLCBbMTIwMTEwXV0sIFsncWludCcsIFsxMDc2NF1dLCBbJ3FvcGYnLCBbMTIwMTYyXV0sIFsnUW9wZicsIFs4NDc0XV0sIFsncXByaW1lJywgWzgyNzldXSwgWydRc2NyJywgWzExOTk4MF1dLCBbJ3FzY3InLCBbMTIwMDA2XV0sIFsncXVhdGVybmlvbnMnLCBbODQ2MV1dLCBbJ3F1YXRpbnQnLCBbMTA3NzRdXSwgWydxdWVzdCcsIFs2M11dLCBbJ3F1ZXN0ZXEnLCBbODc5OV1dLCBbJ3F1b3QnLCBbMzRdXSwgWydRVU9UJywgWzM0XV0sIFsnckFhcnInLCBbODY2N11dLCBbJ3JhY2UnLCBbODc2NSwgODE3XV0sIFsnUmFjdXRlJywgWzM0MF1dLCBbJ3JhY3V0ZScsIFszNDFdXSwgWydyYWRpYycsIFs4NzMwXV0sIFsncmFlbXB0eXYnLCBbMTA2NzVdXSwgWydyYW5nJywgWzEwMjE3XV0sIFsnUmFuZycsIFsxMDIxOV1dLCBbJ3JhbmdkJywgWzEwNjQyXV0sIFsncmFuZ2UnLCBbMTA2NjFdXSwgWydyYW5nbGUnLCBbMTAyMTddXSwgWydyYXF1bycsIFsxODddXSwgWydyYXJyYXAnLCBbMTA2MTNdXSwgWydyYXJyYicsIFs4Njc3XV0sIFsncmFycmJmcycsIFsxMDUyOF1dLCBbJ3JhcnJjJywgWzEwNTQ3XV0sIFsncmFycicsIFs4NTk0XV0sIFsnUmFycicsIFs4NjA4XV0sIFsnckFycicsIFs4NjU4XV0sIFsncmFycmZzJywgWzEwNTI2XV0sIFsncmFycmhrJywgWzg2MThdXSwgWydyYXJybHAnLCBbODYyMF1dLCBbJ3JhcnJwbCcsIFsxMDU2NV1dLCBbJ3JhcnJzaW0nLCBbMTA2MTJdXSwgWydSYXJydGwnLCBbMTA1MThdXSwgWydyYXJydGwnLCBbODYxMV1dLCBbJ3JhcnJ3JywgWzg2MDVdXSwgWydyYXRhaWwnLCBbMTA1MjJdXSwgWydyQXRhaWwnLCBbMTA1MjRdXSwgWydyYXRpbycsIFs4NzU4XV0sIFsncmF0aW9uYWxzJywgWzg0NzRdXSwgWydyYmFycicsIFsxMDUwOV1dLCBbJ3JCYXJyJywgWzEwNTExXV0sIFsnUkJhcnInLCBbMTA1MTJdXSwgWydyYmJyaycsIFsxMDA5OV1dLCBbJ3JicmFjZScsIFsxMjVdXSwgWydyYnJhY2snLCBbOTNdXSwgWydyYnJrZScsIFsxMDYzNl1dLCBbJ3JicmtzbGQnLCBbMTA2MzhdXSwgWydyYnJrc2x1JywgWzEwNjQwXV0sIFsnUmNhcm9uJywgWzM0NF1dLCBbJ3JjYXJvbicsIFszNDVdXSwgWydSY2VkaWwnLCBbMzQyXV0sIFsncmNlZGlsJywgWzM0M11dLCBbJ3JjZWlsJywgWzg5NjldXSwgWydyY3ViJywgWzEyNV1dLCBbJ1JjeScsIFsxMDU2XV0sIFsncmN5JywgWzEwODhdXSwgWydyZGNhJywgWzEwNTUxXV0sIFsncmRsZGhhcicsIFsxMDYwMV1dLCBbJ3JkcXVvJywgWzgyMjFdXSwgWydyZHF1b3InLCBbODIyMV1dLCBbJ0Nsb3NlQ3VybHlEb3VibGVRdW90ZScsIFs4MjIxXV0sIFsncmRzaCcsIFs4NjI3XV0sIFsncmVhbCcsIFs4NDc2XV0sIFsncmVhbGluZScsIFs4NDc1XV0sIFsncmVhbHBhcnQnLCBbODQ3Nl1dLCBbJ3JlYWxzJywgWzg0NzddXSwgWydSZScsIFs4NDc2XV0sIFsncmVjdCcsIFs5NjQ1XV0sIFsncmVnJywgWzE3NF1dLCBbJ1JFRycsIFsxNzRdXSwgWydSZXZlcnNlRWxlbWVudCcsIFs4NzE1XV0sIFsnUmV2ZXJzZUVxdWlsaWJyaXVtJywgWzg2NTFdXSwgWydSZXZlcnNlVXBFcXVpbGlicml1bScsIFsxMDYwN11dLCBbJ3JmaXNodCcsIFsxMDYyMV1dLCBbJ3JmbG9vcicsIFs4OTcxXV0sIFsncmZyJywgWzEyMDExMV1dLCBbJ1JmcicsIFs4NDc2XV0sIFsnckhhcicsIFsxMDU5Nl1dLCBbJ3JoYXJkJywgWzg2NDFdXSwgWydyaGFydScsIFs4NjQwXV0sIFsncmhhcnVsJywgWzEwNjA0XV0sIFsnUmhvJywgWzkyOV1dLCBbJ3JobycsIFs5NjFdXSwgWydyaG92JywgWzEwMDldXSwgWydSaWdodEFuZ2xlQnJhY2tldCcsIFsxMDIxN11dLCBbJ1JpZ2h0QXJyb3dCYXInLCBbODY3N11dLCBbJ3JpZ2h0YXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0QXJyb3cnLCBbODU5NF1dLCBbJ1JpZ2h0YXJyb3cnLCBbODY1OF1dLCBbJ1JpZ2h0QXJyb3dMZWZ0QXJyb3cnLCBbODY0NF1dLCBbJ3JpZ2h0YXJyb3d0YWlsJywgWzg2MTFdXSwgWydSaWdodENlaWxpbmcnLCBbODk2OV1dLCBbJ1JpZ2h0RG91YmxlQnJhY2tldCcsIFsxMDIxNV1dLCBbJ1JpZ2h0RG93blRlZVZlY3RvcicsIFsxMDU4OV1dLCBbJ1JpZ2h0RG93blZlY3RvckJhcicsIFsxMDU4MV1dLCBbJ1JpZ2h0RG93blZlY3RvcicsIFs4NjQyXV0sIFsnUmlnaHRGbG9vcicsIFs4OTcxXV0sIFsncmlnaHRoYXJwb29uZG93bicsIFs4NjQxXV0sIFsncmlnaHRoYXJwb29udXAnLCBbODY0MF1dLCBbJ3JpZ2h0bGVmdGFycm93cycsIFs4NjQ0XV0sIFsncmlnaHRsZWZ0aGFycG9vbnMnLCBbODY1Ml1dLCBbJ3JpZ2h0cmlnaHRhcnJvd3MnLCBbODY0OV1dLCBbJ3JpZ2h0c3F1aWdhcnJvdycsIFs4NjA1XV0sIFsnUmlnaHRUZWVBcnJvdycsIFs4NjE0XV0sIFsnUmlnaHRUZWUnLCBbODg2Nl1dLCBbJ1JpZ2h0VGVlVmVjdG9yJywgWzEwNTg3XV0sIFsncmlnaHR0aHJlZXRpbWVzJywgWzg5MDhdXSwgWydSaWdodFRyaWFuZ2xlQmFyJywgWzEwNzA0XV0sIFsnUmlnaHRUcmlhbmdsZScsIFs4ODgzXV0sIFsnUmlnaHRUcmlhbmdsZUVxdWFsJywgWzg4ODVdXSwgWydSaWdodFVwRG93blZlY3RvcicsIFsxMDU3NV1dLCBbJ1JpZ2h0VXBUZWVWZWN0b3InLCBbMTA1ODhdXSwgWydSaWdodFVwVmVjdG9yQmFyJywgWzEwNTgwXV0sIFsnUmlnaHRVcFZlY3RvcicsIFs4NjM4XV0sIFsnUmlnaHRWZWN0b3JCYXInLCBbMTA1NzldXSwgWydSaWdodFZlY3RvcicsIFs4NjQwXV0sIFsncmluZycsIFs3MzBdXSwgWydyaXNpbmdkb3RzZXEnLCBbODc4N11dLCBbJ3JsYXJyJywgWzg2NDRdXSwgWydybGhhcicsIFs4NjUyXV0sIFsncmxtJywgWzgyMDddXSwgWydybW91c3RhY2hlJywgWzkxMzddXSwgWydybW91c3QnLCBbOTEzN11dLCBbJ3JubWlkJywgWzEwOTkwXV0sIFsncm9hbmcnLCBbMTAyMjFdXSwgWydyb2FycicsIFs4NzAyXV0sIFsncm9icmsnLCBbMTAyMTVdXSwgWydyb3BhcicsIFsxMDYzMF1dLCBbJ3JvcGYnLCBbMTIwMTYzXV0sIFsnUm9wZicsIFs4NDc3XV0sIFsncm9wbHVzJywgWzEwNzk4XV0sIFsncm90aW1lcycsIFsxMDgwNV1dLCBbJ1JvdW5kSW1wbGllcycsIFsxMDYwOF1dLCBbJ3JwYXInLCBbNDFdXSwgWydycGFyZ3QnLCBbMTA2NDRdXSwgWydycHBvbGludCcsIFsxMDc3MF1dLCBbJ3JyYXJyJywgWzg2NDldXSwgWydScmlnaHRhcnJvdycsIFs4NjY3XV0sIFsncnNhcXVvJywgWzgyNTBdXSwgWydyc2NyJywgWzEyMDAwN11dLCBbJ1JzY3InLCBbODQ3NV1dLCBbJ3JzaCcsIFs4NjI1XV0sIFsnUnNoJywgWzg2MjVdXSwgWydyc3FiJywgWzkzXV0sIFsncnNxdW8nLCBbODIxN11dLCBbJ3JzcXVvcicsIFs4MjE3XV0sIFsnQ2xvc2VDdXJseVF1b3RlJywgWzgyMTddXSwgWydydGhyZWUnLCBbODkwOF1dLCBbJ3J0aW1lcycsIFs4OTA2XV0sIFsncnRyaScsIFs5NjU3XV0sIFsncnRyaWUnLCBbODg4NV1dLCBbJ3J0cmlmJywgWzk2NTZdXSwgWydydHJpbHRyaScsIFsxMDcwMl1dLCBbJ1J1bGVEZWxheWVkJywgWzEwNzQwXV0sIFsncnVsdWhhcicsIFsxMDYwMF1dLCBbJ3J4JywgWzg0NzhdXSwgWydTYWN1dGUnLCBbMzQ2XV0sIFsnc2FjdXRlJywgWzM0N11dLCBbJ3NicXVvJywgWzgyMThdXSwgWydzY2FwJywgWzEwOTM2XV0sIFsnU2Nhcm9uJywgWzM1Ml1dLCBbJ3NjYXJvbicsIFszNTNdXSwgWydTYycsIFsxMDk0MF1dLCBbJ3NjJywgWzg4MjddXSwgWydzY2N1ZScsIFs4ODI5XV0sIFsnc2NlJywgWzEwOTI4XV0sIFsnc2NFJywgWzEwOTMyXV0sIFsnU2NlZGlsJywgWzM1MF1dLCBbJ3NjZWRpbCcsIFszNTFdXSwgWydTY2lyYycsIFszNDhdXSwgWydzY2lyYycsIFszNDldXSwgWydzY25hcCcsIFsxMDkzOF1dLCBbJ3NjbkUnLCBbMTA5MzRdXSwgWydzY25zaW0nLCBbODkzN11dLCBbJ3NjcG9saW50JywgWzEwNzcxXV0sIFsnc2NzaW0nLCBbODgzMV1dLCBbJ1NjeScsIFsxMDU3XV0sIFsnc2N5JywgWzEwODldXSwgWydzZG90YicsIFs4ODY1XV0sIFsnc2RvdCcsIFs4OTAxXV0sIFsnc2RvdGUnLCBbMTA4NTRdXSwgWydzZWFyaGsnLCBbMTA1MzNdXSwgWydzZWFycicsIFs4NjAwXV0sIFsnc2VBcnInLCBbODY2NF1dLCBbJ3NlYXJyb3cnLCBbODYwMF1dLCBbJ3NlY3QnLCBbMTY3XV0sIFsnc2VtaScsIFs1OV1dLCBbJ3Nlc3dhcicsIFsxMDUzN11dLCBbJ3NldG1pbnVzJywgWzg3MjZdXSwgWydzZXRtbicsIFs4NzI2XV0sIFsnc2V4dCcsIFsxMDAzOF1dLCBbJ1NmcicsIFsxMjAwODZdXSwgWydzZnInLCBbMTIwMTEyXV0sIFsnc2Zyb3duJywgWzg5OTRdXSwgWydzaGFycCcsIFs5ODM5XV0sIFsnU0hDSGN5JywgWzEwNjVdXSwgWydzaGNoY3knLCBbMTA5N11dLCBbJ1NIY3knLCBbMTA2NF1dLCBbJ3NoY3knLCBbMTA5Nl1dLCBbJ1Nob3J0RG93bkFycm93JywgWzg1OTVdXSwgWydTaG9ydExlZnRBcnJvdycsIFs4NTkyXV0sIFsnc2hvcnRtaWQnLCBbODczOV1dLCBbJ3Nob3J0cGFyYWxsZWwnLCBbODc0MV1dLCBbJ1Nob3J0UmlnaHRBcnJvdycsIFs4NTk0XV0sIFsnU2hvcnRVcEFycm93JywgWzg1OTNdXSwgWydzaHknLCBbMTczXV0sIFsnU2lnbWEnLCBbOTMxXV0sIFsnc2lnbWEnLCBbOTYzXV0sIFsnc2lnbWFmJywgWzk2Ml1dLCBbJ3NpZ21hdicsIFs5NjJdXSwgWydzaW0nLCBbODc2NF1dLCBbJ3NpbWRvdCcsIFsxMDg1OF1dLCBbJ3NpbWUnLCBbODc3MV1dLCBbJ3NpbWVxJywgWzg3NzFdXSwgWydzaW1nJywgWzEwOTEwXV0sIFsnc2ltZ0UnLCBbMTA5MTJdXSwgWydzaW1sJywgWzEwOTA5XV0sIFsnc2ltbEUnLCBbMTA5MTFdXSwgWydzaW1uZScsIFs4Nzc0XV0sIFsnc2ltcGx1cycsIFsxMDc4OF1dLCBbJ3NpbXJhcnInLCBbMTA2MTBdXSwgWydzbGFycicsIFs4NTkyXV0sIFsnU21hbGxDaXJjbGUnLCBbODcyOF1dLCBbJ3NtYWxsc2V0bWludXMnLCBbODcyNl1dLCBbJ3NtYXNocCcsIFsxMDgwM11dLCBbJ3NtZXBhcnNsJywgWzEwNzI0XV0sIFsnc21pZCcsIFs4NzM5XV0sIFsnc21pbGUnLCBbODk5NV1dLCBbJ3NtdCcsIFsxMDkyMl1dLCBbJ3NtdGUnLCBbMTA5MjRdXSwgWydzbXRlcycsIFsxMDkyNCwgNjUwMjRdXSwgWydTT0ZUY3knLCBbMTA2OF1dLCBbJ3NvZnRjeScsIFsxMTAwXV0sIFsnc29sYmFyJywgWzkwMjNdXSwgWydzb2xiJywgWzEwNjkyXV0sIFsnc29sJywgWzQ3XV0sIFsnU29wZicsIFsxMjAxMzhdXSwgWydzb3BmJywgWzEyMDE2NF1dLCBbJ3NwYWRlcycsIFs5ODI0XV0sIFsnc3BhZGVzdWl0JywgWzk4MjRdXSwgWydzcGFyJywgWzg3NDFdXSwgWydzcWNhcCcsIFs4ODUxXV0sIFsnc3FjYXBzJywgWzg4NTEsIDY1MDI0XV0sIFsnc3FjdXAnLCBbODg1Ml1dLCBbJ3NxY3VwcycsIFs4ODUyLCA2NTAyNF1dLCBbJ1NxcnQnLCBbODczMF1dLCBbJ3Nxc3ViJywgWzg4NDddXSwgWydzcXN1YmUnLCBbODg0OV1dLCBbJ3Nxc3Vic2V0JywgWzg4NDddXSwgWydzcXN1YnNldGVxJywgWzg4NDldXSwgWydzcXN1cCcsIFs4ODQ4XV0sIFsnc3FzdXBlJywgWzg4NTBdXSwgWydzcXN1cHNldCcsIFs4ODQ4XV0sIFsnc3FzdXBzZXRlcScsIFs4ODUwXV0sIFsnc3F1YXJlJywgWzk2MzNdXSwgWydTcXVhcmUnLCBbOTYzM11dLCBbJ1NxdWFyZUludGVyc2VjdGlvbicsIFs4ODUxXV0sIFsnU3F1YXJlU3Vic2V0JywgWzg4NDddXSwgWydTcXVhcmVTdWJzZXRFcXVhbCcsIFs4ODQ5XV0sIFsnU3F1YXJlU3VwZXJzZXQnLCBbODg0OF1dLCBbJ1NxdWFyZVN1cGVyc2V0RXF1YWwnLCBbODg1MF1dLCBbJ1NxdWFyZVVuaW9uJywgWzg4NTJdXSwgWydzcXVhcmYnLCBbOTY0Ml1dLCBbJ3NxdScsIFs5NjMzXV0sIFsnc3F1ZicsIFs5NjQyXV0sIFsnc3JhcnInLCBbODU5NF1dLCBbJ1NzY3InLCBbMTE5OTgyXV0sIFsnc3NjcicsIFsxMjAwMDhdXSwgWydzc2V0bW4nLCBbODcyNl1dLCBbJ3NzbWlsZScsIFs4OTk1XV0sIFsnc3N0YXJmJywgWzg5MDJdXSwgWydTdGFyJywgWzg5MDJdXSwgWydzdGFyJywgWzk3MzRdXSwgWydzdGFyZicsIFs5NzMzXV0sIFsnc3RyYWlnaHRlcHNpbG9uJywgWzEwMTNdXSwgWydzdHJhaWdodHBoaScsIFs5ODFdXSwgWydzdHJucycsIFsxNzVdXSwgWydzdWInLCBbODgzNF1dLCBbJ1N1YicsIFs4OTEyXV0sIFsnc3ViZG90JywgWzEwOTQxXV0sIFsnc3ViRScsIFsxMDk0OV1dLCBbJ3N1YmUnLCBbODgzOF1dLCBbJ3N1YmVkb3QnLCBbMTA5NDddXSwgWydzdWJtdWx0JywgWzEwOTQ1XV0sIFsnc3VibkUnLCBbMTA5NTVdXSwgWydzdWJuZScsIFs4ODQyXV0sIFsnc3VicGx1cycsIFsxMDk0M11dLCBbJ3N1YnJhcnInLCBbMTA2MTddXSwgWydzdWJzZXQnLCBbODgzNF1dLCBbJ1N1YnNldCcsIFs4OTEyXV0sIFsnc3Vic2V0ZXEnLCBbODgzOF1dLCBbJ3N1YnNldGVxcScsIFsxMDk0OV1dLCBbJ1N1YnNldEVxdWFsJywgWzg4MzhdXSwgWydzdWJzZXRuZXEnLCBbODg0Ml1dLCBbJ3N1YnNldG5lcXEnLCBbMTA5NTVdXSwgWydzdWJzaW0nLCBbMTA5NTFdXSwgWydzdWJzdWInLCBbMTA5NjVdXSwgWydzdWJzdXAnLCBbMTA5NjNdXSwgWydzdWNjYXBwcm94JywgWzEwOTM2XV0sIFsnc3VjYycsIFs4ODI3XV0sIFsnc3VjY2N1cmx5ZXEnLCBbODgyOV1dLCBbJ1N1Y2NlZWRzJywgWzg4MjddXSwgWydTdWNjZWVkc0VxdWFsJywgWzEwOTI4XV0sIFsnU3VjY2VlZHNTbGFudEVxdWFsJywgWzg4MjldXSwgWydTdWNjZWVkc1RpbGRlJywgWzg4MzFdXSwgWydzdWNjZXEnLCBbMTA5MjhdXSwgWydzdWNjbmFwcHJveCcsIFsxMDkzOF1dLCBbJ3N1Y2NuZXFxJywgWzEwOTM0XV0sIFsnc3VjY25zaW0nLCBbODkzN11dLCBbJ3N1Y2NzaW0nLCBbODgzMV1dLCBbJ1N1Y2hUaGF0JywgWzg3MTVdXSwgWydzdW0nLCBbODcyMV1dLCBbJ1N1bScsIFs4NzIxXV0sIFsnc3VuZycsIFs5ODM0XV0sIFsnc3VwMScsIFsxODVdXSwgWydzdXAyJywgWzE3OF1dLCBbJ3N1cDMnLCBbMTc5XV0sIFsnc3VwJywgWzg4MzVdXSwgWydTdXAnLCBbODkxM11dLCBbJ3N1cGRvdCcsIFsxMDk0Ml1dLCBbJ3N1cGRzdWInLCBbMTA5NjhdXSwgWydzdXBFJywgWzEwOTUwXV0sIFsnc3VwZScsIFs4ODM5XV0sIFsnc3VwZWRvdCcsIFsxMDk0OF1dLCBbJ1N1cGVyc2V0JywgWzg4MzVdXSwgWydTdXBlcnNldEVxdWFsJywgWzg4MzldXSwgWydzdXBoc29sJywgWzEwMTg1XV0sIFsnc3VwaHN1YicsIFsxMDk2N11dLCBbJ3N1cGxhcnInLCBbMTA2MTldXSwgWydzdXBtdWx0JywgWzEwOTQ2XV0sIFsnc3VwbkUnLCBbMTA5NTZdXSwgWydzdXBuZScsIFs4ODQzXV0sIFsnc3VwcGx1cycsIFsxMDk0NF1dLCBbJ3N1cHNldCcsIFs4ODM1XV0sIFsnU3Vwc2V0JywgWzg5MTNdXSwgWydzdXBzZXRlcScsIFs4ODM5XV0sIFsnc3Vwc2V0ZXFxJywgWzEwOTUwXV0sIFsnc3Vwc2V0bmVxJywgWzg4NDNdXSwgWydzdXBzZXRuZXFxJywgWzEwOTU2XV0sIFsnc3Vwc2ltJywgWzEwOTUyXV0sIFsnc3Vwc3ViJywgWzEwOTY0XV0sIFsnc3Vwc3VwJywgWzEwOTY2XV0sIFsnc3dhcmhrJywgWzEwNTM0XV0sIFsnc3dhcnInLCBbODYwMV1dLCBbJ3N3QXJyJywgWzg2NjVdXSwgWydzd2Fycm93JywgWzg2MDFdXSwgWydzd253YXInLCBbMTA1MzhdXSwgWydzemxpZycsIFsyMjNdXSwgWydUYWInLCBbOV1dLCBbJ3RhcmdldCcsIFs4OTgyXV0sIFsnVGF1JywgWzkzMl1dLCBbJ3RhdScsIFs5NjRdXSwgWyd0YnJrJywgWzkxNDBdXSwgWydUY2Fyb24nLCBbMzU2XV0sIFsndGNhcm9uJywgWzM1N11dLCBbJ1RjZWRpbCcsIFszNTRdXSwgWyd0Y2VkaWwnLCBbMzU1XV0sIFsnVGN5JywgWzEwNThdXSwgWyd0Y3knLCBbMTA5MF1dLCBbJ3Rkb3QnLCBbODQxMV1dLCBbJ3RlbHJlYycsIFs4OTgxXV0sIFsnVGZyJywgWzEyMDA4N11dLCBbJ3RmcicsIFsxMjAxMTNdXSwgWyd0aGVyZTQnLCBbODc1Nl1dLCBbJ3RoZXJlZm9yZScsIFs4NzU2XV0sIFsnVGhlcmVmb3JlJywgWzg3NTZdXSwgWydUaGV0YScsIFs5MjBdXSwgWyd0aGV0YScsIFs5NTJdXSwgWyd0aGV0YXN5bScsIFs5NzddXSwgWyd0aGV0YXYnLCBbOTc3XV0sIFsndGhpY2thcHByb3gnLCBbODc3Nl1dLCBbJ3RoaWNrc2ltJywgWzg3NjRdXSwgWydUaGlja1NwYWNlJywgWzgyODcsIDgyMDJdXSwgWydUaGluU3BhY2UnLCBbODIwMV1dLCBbJ3RoaW5zcCcsIFs4MjAxXV0sIFsndGhrYXAnLCBbODc3Nl1dLCBbJ3Roa3NpbScsIFs4NzY0XV0sIFsnVEhPUk4nLCBbMjIyXV0sIFsndGhvcm4nLCBbMjU0XV0sIFsndGlsZGUnLCBbNzMyXV0sIFsnVGlsZGUnLCBbODc2NF1dLCBbJ1RpbGRlRXF1YWwnLCBbODc3MV1dLCBbJ1RpbGRlRnVsbEVxdWFsJywgWzg3NzNdXSwgWydUaWxkZVRpbGRlJywgWzg3NzZdXSwgWyd0aW1lc2JhcicsIFsxMDgwMV1dLCBbJ3RpbWVzYicsIFs4ODY0XV0sIFsndGltZXMnLCBbMjE1XV0sIFsndGltZXNkJywgWzEwODAwXV0sIFsndGludCcsIFs4NzQ5XV0sIFsndG9lYScsIFsxMDUzNl1dLCBbJ3RvcGJvdCcsIFs5MDE0XV0sIFsndG9wY2lyJywgWzEwOTkzXV0sIFsndG9wJywgWzg4NjhdXSwgWydUb3BmJywgWzEyMDEzOV1dLCBbJ3RvcGYnLCBbMTIwMTY1XV0sIFsndG9wZm9yaycsIFsxMDk3MF1dLCBbJ3Rvc2EnLCBbMTA1MzddXSwgWyd0cHJpbWUnLCBbODI0NF1dLCBbJ3RyYWRlJywgWzg0ODJdXSwgWydUUkFERScsIFs4NDgyXV0sIFsndHJpYW5nbGUnLCBbOTY1M11dLCBbJ3RyaWFuZ2xlZG93bicsIFs5NjYzXV0sIFsndHJpYW5nbGVsZWZ0JywgWzk2NjddXSwgWyd0cmlhbmdsZWxlZnRlcScsIFs4ODg0XV0sIFsndHJpYW5nbGVxJywgWzg3OTZdXSwgWyd0cmlhbmdsZXJpZ2h0JywgWzk2NTddXSwgWyd0cmlhbmdsZXJpZ2h0ZXEnLCBbODg4NV1dLCBbJ3RyaWRvdCcsIFs5NzA4XV0sIFsndHJpZScsIFs4Nzk2XV0sIFsndHJpbWludXMnLCBbMTA4MTBdXSwgWydUcmlwbGVEb3QnLCBbODQxMV1dLCBbJ3RyaXBsdXMnLCBbMTA4MDldXSwgWyd0cmlzYicsIFsxMDcwMV1dLCBbJ3RyaXRpbWUnLCBbMTA4MTFdXSwgWyd0cnBleml1bScsIFs5MTg2XV0sIFsnVHNjcicsIFsxMTk5ODNdXSwgWyd0c2NyJywgWzEyMDAwOV1dLCBbJ1RTY3knLCBbMTA2Ml1dLCBbJ3RzY3knLCBbMTA5NF1dLCBbJ1RTSGN5JywgWzEwMzVdXSwgWyd0c2hjeScsIFsxMTE1XV0sIFsnVHN0cm9rJywgWzM1OF1dLCBbJ3RzdHJvaycsIFszNTldXSwgWyd0d2l4dCcsIFs4ODEyXV0sIFsndHdvaGVhZGxlZnRhcnJvdycsIFs4NjA2XV0sIFsndHdvaGVhZHJpZ2h0YXJyb3cnLCBbODYwOF1dLCBbJ1VhY3V0ZScsIFsyMThdXSwgWyd1YWN1dGUnLCBbMjUwXV0sIFsndWFycicsIFs4NTkzXV0sIFsnVWFycicsIFs4NjA3XV0sIFsndUFycicsIFs4NjU3XV0sIFsnVWFycm9jaXInLCBbMTA1NjldXSwgWydVYnJjeScsIFsxMDM4XV0sIFsndWJyY3knLCBbMTExOF1dLCBbJ1VicmV2ZScsIFszNjRdXSwgWyd1YnJldmUnLCBbMzY1XV0sIFsnVWNpcmMnLCBbMjE5XV0sIFsndWNpcmMnLCBbMjUxXV0sIFsnVWN5JywgWzEwNTldXSwgWyd1Y3knLCBbMTA5MV1dLCBbJ3VkYXJyJywgWzg2NDVdXSwgWydVZGJsYWMnLCBbMzY4XV0sIFsndWRibGFjJywgWzM2OV1dLCBbJ3VkaGFyJywgWzEwNjA2XV0sIFsndWZpc2h0JywgWzEwNjIyXV0sIFsnVWZyJywgWzEyMDA4OF1dLCBbJ3VmcicsIFsxMjAxMTRdXSwgWydVZ3JhdmUnLCBbMjE3XV0sIFsndWdyYXZlJywgWzI0OV1dLCBbJ3VIYXInLCBbMTA1OTVdXSwgWyd1aGFybCcsIFs4NjM5XV0sIFsndWhhcnInLCBbODYzOF1dLCBbJ3VoYmxrJywgWzk2MDBdXSwgWyd1bGNvcm4nLCBbODk4OF1dLCBbJ3VsY29ybmVyJywgWzg5ODhdXSwgWyd1bGNyb3AnLCBbODk3NV1dLCBbJ3VsdHJpJywgWzk3MjBdXSwgWydVbWFjcicsIFszNjJdXSwgWyd1bWFjcicsIFszNjNdXSwgWyd1bWwnLCBbMTY4XV0sIFsnVW5kZXJCYXInLCBbOTVdXSwgWydVbmRlckJyYWNlJywgWzkxODNdXSwgWydVbmRlckJyYWNrZXQnLCBbOTE0MV1dLCBbJ1VuZGVyUGFyZW50aGVzaXMnLCBbOTE4MV1dLCBbJ1VuaW9uJywgWzg4OTldXSwgWydVbmlvblBsdXMnLCBbODg0Nl1dLCBbJ1VvZ29uJywgWzM3MF1dLCBbJ3VvZ29uJywgWzM3MV1dLCBbJ1VvcGYnLCBbMTIwMTQwXV0sIFsndW9wZicsIFsxMjAxNjZdXSwgWydVcEFycm93QmFyJywgWzEwNTE0XV0sIFsndXBhcnJvdycsIFs4NTkzXV0sIFsnVXBBcnJvdycsIFs4NTkzXV0sIFsnVXBhcnJvdycsIFs4NjU3XV0sIFsnVXBBcnJvd0Rvd25BcnJvdycsIFs4NjQ1XV0sIFsndXBkb3duYXJyb3cnLCBbODU5N11dLCBbJ1VwRG93bkFycm93JywgWzg1OTddXSwgWydVcGRvd25hcnJvdycsIFs4NjYxXV0sIFsnVXBFcXVpbGlicml1bScsIFsxMDYwNl1dLCBbJ3VwaGFycG9vbmxlZnQnLCBbODYzOV1dLCBbJ3VwaGFycG9vbnJpZ2h0JywgWzg2MzhdXSwgWyd1cGx1cycsIFs4ODQ2XV0sIFsnVXBwZXJMZWZ0QXJyb3cnLCBbODU5OF1dLCBbJ1VwcGVyUmlnaHRBcnJvdycsIFs4NTk5XV0sIFsndXBzaScsIFs5NjVdXSwgWydVcHNpJywgWzk3OF1dLCBbJ3Vwc2loJywgWzk3OF1dLCBbJ1Vwc2lsb24nLCBbOTMzXV0sIFsndXBzaWxvbicsIFs5NjVdXSwgWydVcFRlZUFycm93JywgWzg2MTNdXSwgWydVcFRlZScsIFs4ODY5XV0sIFsndXB1cGFycm93cycsIFs4NjQ4XV0sIFsndXJjb3JuJywgWzg5ODldXSwgWyd1cmNvcm5lcicsIFs4OTg5XV0sIFsndXJjcm9wJywgWzg5NzRdXSwgWydVcmluZycsIFszNjZdXSwgWyd1cmluZycsIFszNjddXSwgWyd1cnRyaScsIFs5NzIxXV0sIFsnVXNjcicsIFsxMTk5ODRdXSwgWyd1c2NyJywgWzEyMDAxMF1dLCBbJ3V0ZG90JywgWzg5NDRdXSwgWydVdGlsZGUnLCBbMzYwXV0sIFsndXRpbGRlJywgWzM2MV1dLCBbJ3V0cmknLCBbOTY1M11dLCBbJ3V0cmlmJywgWzk2NTJdXSwgWyd1dWFycicsIFs4NjQ4XV0sIFsnVXVtbCcsIFsyMjBdXSwgWyd1dW1sJywgWzI1Ml1dLCBbJ3V3YW5nbGUnLCBbMTA2NjNdXSwgWyd2YW5ncnQnLCBbMTA2NTJdXSwgWyd2YXJlcHNpbG9uJywgWzEwMTNdXSwgWyd2YXJrYXBwYScsIFsxMDA4XV0sIFsndmFybm90aGluZycsIFs4NzA5XV0sIFsndmFycGhpJywgWzk4MV1dLCBbJ3ZhcnBpJywgWzk4Ml1dLCBbJ3ZhcnByb3B0bycsIFs4NzMzXV0sIFsndmFycicsIFs4NTk3XV0sIFsndkFycicsIFs4NjYxXV0sIFsndmFycmhvJywgWzEwMDldXSwgWyd2YXJzaWdtYScsIFs5NjJdXSwgWyd2YXJzdWJzZXRuZXEnLCBbODg0MiwgNjUwMjRdXSwgWyd2YXJzdWJzZXRuZXFxJywgWzEwOTU1LCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcScsIFs4ODQzLCA2NTAyNF1dLCBbJ3ZhcnN1cHNldG5lcXEnLCBbMTA5NTYsIDY1MDI0XV0sIFsndmFydGhldGEnLCBbOTc3XV0sIFsndmFydHJpYW5nbGVsZWZ0JywgWzg4ODJdXSwgWyd2YXJ0cmlhbmdsZXJpZ2h0JywgWzg4ODNdXSwgWyd2QmFyJywgWzEwOTg0XV0sIFsnVmJhcicsIFsxMDk4N11dLCBbJ3ZCYXJ2JywgWzEwOTg1XV0sIFsnVmN5JywgWzEwNDJdXSwgWyd2Y3knLCBbMTA3NF1dLCBbJ3ZkYXNoJywgWzg4NjZdXSwgWyd2RGFzaCcsIFs4ODcyXV0sIFsnVmRhc2gnLCBbODg3M11dLCBbJ1ZEYXNoJywgWzg4NzVdXSwgWydWZGFzaGwnLCBbMTA5ODJdXSwgWyd2ZWViYXInLCBbODg5MV1dLCBbJ3ZlZScsIFs4NzQ0XV0sIFsnVmVlJywgWzg4OTddXSwgWyd2ZWVlcScsIFs4Nzk0XV0sIFsndmVsbGlwJywgWzg5NDJdXSwgWyd2ZXJiYXInLCBbMTI0XV0sIFsnVmVyYmFyJywgWzgyMTRdXSwgWyd2ZXJ0JywgWzEyNF1dLCBbJ1ZlcnQnLCBbODIxNF1dLCBbJ1ZlcnRpY2FsQmFyJywgWzg3MzldXSwgWydWZXJ0aWNhbExpbmUnLCBbMTI0XV0sIFsnVmVydGljYWxTZXBhcmF0b3InLCBbMTAwNzJdXSwgWydWZXJ0aWNhbFRpbGRlJywgWzg3NjhdXSwgWydWZXJ5VGhpblNwYWNlJywgWzgyMDJdXSwgWydWZnInLCBbMTIwMDg5XV0sIFsndmZyJywgWzEyMDExNV1dLCBbJ3ZsdHJpJywgWzg4ODJdXSwgWyd2bnN1YicsIFs4ODM0LCA4NDAyXV0sIFsndm5zdXAnLCBbODgzNSwgODQwMl1dLCBbJ1ZvcGYnLCBbMTIwMTQxXV0sIFsndm9wZicsIFsxMjAxNjddXSwgWyd2cHJvcCcsIFs4NzMzXV0sIFsndnJ0cmknLCBbODg4M11dLCBbJ1ZzY3InLCBbMTE5OTg1XV0sIFsndnNjcicsIFsxMjAwMTFdXSwgWyd2c3VibkUnLCBbMTA5NTUsIDY1MDI0XV0sIFsndnN1Ym5lJywgWzg4NDIsIDY1MDI0XV0sIFsndnN1cG5FJywgWzEwOTU2LCA2NTAyNF1dLCBbJ3ZzdXBuZScsIFs4ODQzLCA2NTAyNF1dLCBbJ1Z2ZGFzaCcsIFs4ODc0XV0sIFsndnppZ3phZycsIFsxMDY1MF1dLCBbJ1djaXJjJywgWzM3Ml1dLCBbJ3djaXJjJywgWzM3M11dLCBbJ3dlZGJhcicsIFsxMDg0N11dLCBbJ3dlZGdlJywgWzg3NDNdXSwgWydXZWRnZScsIFs4ODk2XV0sIFsnd2VkZ2VxJywgWzg3OTNdXSwgWyd3ZWllcnAnLCBbODQ3Ml1dLCBbJ1dmcicsIFsxMjAwOTBdXSwgWyd3ZnInLCBbMTIwMTE2XV0sIFsnV29wZicsIFsxMjAxNDJdXSwgWyd3b3BmJywgWzEyMDE2OF1dLCBbJ3dwJywgWzg0NzJdXSwgWyd3cicsIFs4NzY4XV0sIFsnd3JlYXRoJywgWzg3NjhdXSwgWydXc2NyJywgWzExOTk4Nl1dLCBbJ3dzY3InLCBbMTIwMDEyXV0sIFsneGNhcCcsIFs4ODk4XV0sIFsneGNpcmMnLCBbOTcxMV1dLCBbJ3hjdXAnLCBbODg5OV1dLCBbJ3hkdHJpJywgWzk2NjFdXSwgWydYZnInLCBbMTIwMDkxXV0sIFsneGZyJywgWzEyMDExN11dLCBbJ3hoYXJyJywgWzEwMjMxXV0sIFsneGhBcnInLCBbMTAyMzRdXSwgWydYaScsIFs5MjZdXSwgWyd4aScsIFs5NThdXSwgWyd4bGFycicsIFsxMDIyOV1dLCBbJ3hsQXJyJywgWzEwMjMyXV0sIFsneG1hcCcsIFsxMDIzNl1dLCBbJ3huaXMnLCBbODk1NV1dLCBbJ3hvZG90JywgWzEwNzUyXV0sIFsnWG9wZicsIFsxMjAxNDNdXSwgWyd4b3BmJywgWzEyMDE2OV1dLCBbJ3hvcGx1cycsIFsxMDc1M11dLCBbJ3hvdGltZScsIFsxMDc1NF1dLCBbJ3hyYXJyJywgWzEwMjMwXV0sIFsneHJBcnInLCBbMTAyMzNdXSwgWydYc2NyJywgWzExOTk4N11dLCBbJ3hzY3InLCBbMTIwMDEzXV0sIFsneHNxY3VwJywgWzEwNzU4XV0sIFsneHVwbHVzJywgWzEwNzU2XV0sIFsneHV0cmknLCBbOTY1MV1dLCBbJ3h2ZWUnLCBbODg5N11dLCBbJ3h3ZWRnZScsIFs4ODk2XV0sIFsnWWFjdXRlJywgWzIyMV1dLCBbJ3lhY3V0ZScsIFsyNTNdXSwgWydZQWN5JywgWzEwNzFdXSwgWyd5YWN5JywgWzExMDNdXSwgWydZY2lyYycsIFszNzRdXSwgWyd5Y2lyYycsIFszNzVdXSwgWydZY3knLCBbMTA2N11dLCBbJ3ljeScsIFsxMDk5XV0sIFsneWVuJywgWzE2NV1dLCBbJ1lmcicsIFsxMjAwOTJdXSwgWyd5ZnInLCBbMTIwMTE4XV0sIFsnWUljeScsIFsxMDMxXV0sIFsneWljeScsIFsxMTExXV0sIFsnWW9wZicsIFsxMjAxNDRdXSwgWyd5b3BmJywgWzEyMDE3MF1dLCBbJ1lzY3InLCBbMTE5OTg4XV0sIFsneXNjcicsIFsxMjAwMTRdXSwgWydZVWN5JywgWzEwNzBdXSwgWyd5dWN5JywgWzExMDJdXSwgWyd5dW1sJywgWzI1NV1dLCBbJ1l1bWwnLCBbMzc2XV0sIFsnWmFjdXRlJywgWzM3N11dLCBbJ3phY3V0ZScsIFszNzhdXSwgWydaY2Fyb24nLCBbMzgxXV0sIFsnemNhcm9uJywgWzM4Ml1dLCBbJ1pjeScsIFsxMDQ3XV0sIFsnemN5JywgWzEwNzldXSwgWydaZG90JywgWzM3OV1dLCBbJ3pkb3QnLCBbMzgwXV0sIFsnemVldHJmJywgWzg0ODhdXSwgWydaZXJvV2lkdGhTcGFjZScsIFs4MjAzXV0sIFsnWmV0YScsIFs5MThdXSwgWyd6ZXRhJywgWzk1MF1dLCBbJ3pmcicsIFsxMjAxMTldXSwgWydaZnInLCBbODQ4OF1dLCBbJ1pIY3knLCBbMTA0Nl1dLCBbJ3poY3knLCBbMTA3OF1dLCBbJ3ppZ3JhcnInLCBbODY2OV1dLCBbJ3pvcGYnLCBbMTIwMTcxXV0sIFsnWm9wZicsIFs4NDg0XV0sIFsnWnNjcicsIFsxMTk5ODldXSwgWyd6c2NyJywgWzEyMDAxNV1dLCBbJ3p3aicsIFs4MjA1XV0sIFsnenduaicsIFs4MjA0XV1dO1xuXG52YXIgYWxwaGFJbmRleCA9IHt9O1xudmFyIGNoYXJJbmRleCA9IHt9O1xuXG5jcmVhdGVJbmRleGVzKGFscGhhSW5kZXgsIGNoYXJJbmRleCk7XG5cbi8qKlxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEh0bWw1RW50aXRpZXMoKSB7fVxuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw1RW50aXRpZXMucHJvdG90eXBlLmRlY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8mKCM/W1xcd1xcZF0rKTs/L2csIGZ1bmN0aW9uKHMsIGVudGl0eSkge1xuICAgICAgICB2YXIgY2hyO1xuICAgICAgICBpZiAoZW50aXR5LmNoYXJBdCgwKSA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIHZhciBjb2RlID0gZW50aXR5LmNoYXJBdCgxKSA9PT0gJ3gnID9cbiAgICAgICAgICAgICAgICBwYXJzZUludChlbnRpdHkuc3Vic3RyKDIpLnRvTG93ZXJDYXNlKCksIDE2KSA6XG4gICAgICAgICAgICAgICAgcGFyc2VJbnQoZW50aXR5LnN1YnN0cigxKSk7XG5cbiAgICAgICAgICAgIGlmICghKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSkge1xuICAgICAgICAgICAgICAgIGNociA9IFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaHIgPSBhbHBoYUluZGV4W2VudGl0eV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNociB8fCBzO1xuICAgIH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG4gSHRtbDVFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gbmV3IEh0bWw1RW50aXRpZXMoKS5kZWNvZGUoc3RyKTtcbiB9O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbkh0bWw1RW50aXRpZXMucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgdmFyIHN0ckxlbmd0aCA9IHN0ci5sZW5ndGg7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHN0ckxlbmd0aCkge1xuICAgICAgICB2YXIgY2hhckluZm8gPSBjaGFySW5kZXhbc3RyLmNoYXJDb2RlQXQoaSldO1xuICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IGNoYXJJbmZvW3N0ci5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFscGhhID0gY2hhckluZm9bJyddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuIEh0bWw1RW50aXRpZXMuZW5jb2RlID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBIdG1sNUVudGl0aWVzKCkuZW5jb2RlKHN0cik7XG4gfTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5IdG1sNUVudGl0aWVzLnByb3RvdHlwZS5lbmNvZGVOb25VVEYgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgdmFyIGNoYXJJbmZvID0gY2hhckluZGV4W2NdO1xuICAgICAgICBpZiAoY2hhckluZm8pIHtcbiAgICAgICAgICAgIHZhciBhbHBoYSA9IGNoYXJJbmZvW3N0ci5jaGFyQ29kZUF0KGkgKyAxKV07XG4gICAgICAgICAgICBpZiAoYWxwaGEpIHtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFscGhhID0gY2hhckluZm9bJyddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFscGhhKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgPCAzMiB8fCBjID4gMTI2KSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyLmNoYXJBdChpKTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbiBIdG1sNUVudGl0aWVzLmVuY29kZU5vblVURiA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuIH07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuSHRtbDVFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uQVNDSUkgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHZhciBzdHJMZW5ndGggPSBzdHIubGVuZ3RoO1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBzdHJMZW5ndGgpIHtcbiAgICAgICAgdmFyIGMgPSBzdHIuY2hhckNvZGVBdChpKTtcbiAgICAgICAgaWYgKGMgPD0gMjU1KSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyW2krK107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHQgKz0gJyYjJyArIGMgKyAnOyc7XG4gICAgICAgIGkrK1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG4gSHRtbDVFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBuZXcgSHRtbDVFbnRpdGllcygpLmVuY29kZU5vbkFTQ0lJKHN0cik7XG4gfTtcblxuLyoqXG4gKiBAcGFyYW0ge09iamVjdH0gYWxwaGFJbmRleCBQYXNzZWQgYnkgcmVmZXJlbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IGNoYXJJbmRleCBQYXNzZWQgYnkgcmVmZXJlbmNlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVJbmRleGVzKGFscGhhSW5kZXgsIGNoYXJJbmRleCkge1xuICAgIHZhciBpID0gRU5USVRJRVMubGVuZ3RoO1xuICAgIHZhciBfcmVzdWx0cyA9IFtdO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdmFyIGUgPSBFTlRJVElFU1tpXTtcbiAgICAgICAgdmFyIGFscGhhID0gZVswXTtcbiAgICAgICAgdmFyIGNoYXJzID0gZVsxXTtcbiAgICAgICAgdmFyIGNociA9IGNoYXJzWzBdO1xuICAgICAgICB2YXIgYWRkQ2hhciA9IChjaHIgPCAzMiB8fCBjaHIgPiAxMjYpIHx8IGNociA9PT0gNjIgfHwgY2hyID09PSA2MCB8fCBjaHIgPT09IDM4IHx8IGNociA9PT0gMzQgfHwgY2hyID09PSAzOTtcbiAgICAgICAgdmFyIGNoYXJJbmZvO1xuICAgICAgICBpZiAoYWRkQ2hhcikge1xuICAgICAgICAgICAgY2hhckluZm8gPSBjaGFySW5kZXhbY2hyXSA9IGNoYXJJbmRleFtjaHJdIHx8IHt9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaGFyc1sxXSkge1xuICAgICAgICAgICAgdmFyIGNocjIgPSBjaGFyc1sxXTtcbiAgICAgICAgICAgIGFscGhhSW5kZXhbYWxwaGFdID0gU3RyaW5nLmZyb21DaGFyQ29kZShjaHIpICsgU3RyaW5nLmZyb21DaGFyQ29kZShjaHIyKTtcbiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goYWRkQ2hhciAmJiAoY2hhckluZm9bY2hyMl0gPSBhbHBoYSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWxwaGFJbmRleFthbHBoYV0gPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNocik7XG4gICAgICAgICAgICBfcmVzdWx0cy5wdXNoKGFkZENoYXIgJiYgKGNoYXJJbmZvWycnXSA9IGFscGhhKSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSHRtbDVFbnRpdGllcztcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL2h0bWw1LWVudGl0aWVzLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi9odG1sNS1lbnRpdGllcy5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgQUxQSEFfSU5ERVggPSB7XG4gICAgJyZsdCc6ICc8JyxcbiAgICAnJmd0JzogJz4nLFxuICAgICcmcXVvdCc6ICdcIicsXG4gICAgJyZhcG9zJzogJ1xcJycsXG4gICAgJyZhbXAnOiAnJicsXG4gICAgJyZsdDsnOiAnPCcsXG4gICAgJyZndDsnOiAnPicsXG4gICAgJyZxdW90Oyc6ICdcIicsXG4gICAgJyZhcG9zOyc6ICdcXCcnLFxuICAgICcmYW1wOyc6ICcmJ1xufTtcblxudmFyIENIQVJfSU5ERVggPSB7XG4gICAgNjA6ICdsdCcsXG4gICAgNjI6ICdndCcsXG4gICAgMzQ6ICdxdW90JyxcbiAgICAzOTogJ2Fwb3MnLFxuICAgIDM4OiAnYW1wJ1xufTtcblxudmFyIENIQVJfU19JTkRFWCA9IHtcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICAnXFwnJzogJyZhcG9zOycsXG4gICAgJyYnOiAnJmFtcDsnXG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBYbWxFbnRpdGllcygpIHt9XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuWG1sRW50aXRpZXMucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIGlmICghc3RyIHx8ICFzdHIubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC88fD58XCJ8J3wmL2csIGZ1bmN0aW9uKHMpIHtcbiAgICAgICAgcmV0dXJuIENIQVJfU19JTkRFWFtzXTtcbiAgICB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuIFhtbEVudGl0aWVzLmVuY29kZSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5lbmNvZGUoc3RyKTtcbiB9O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cblhtbEVudGl0aWVzLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICBpZiAoIXN0ciB8fCAhc3RyLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiM/WzAtOWEtekEtWl0rOz8vZywgZnVuY3Rpb24ocykge1xuICAgICAgICBpZiAocy5jaGFyQXQoMSkgPT09ICcjJykge1xuICAgICAgICAgICAgdmFyIGNvZGUgPSBzLmNoYXJBdCgyKS50b0xvd2VyQ2FzZSgpID09PSAneCcgP1xuICAgICAgICAgICAgICAgIHBhcnNlSW50KHMuc3Vic3RyKDMpLCAxNikgOlxuICAgICAgICAgICAgICAgIHBhcnNlSW50KHMuc3Vic3RyKDIpKTtcblxuICAgICAgICAgICAgaWYgKGlzTmFOKGNvZGUpIHx8IGNvZGUgPCAtMzI3NjggfHwgY29kZSA+IDY1NTM1KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEFMUEhBX0lOREVYW3NdIHx8IHM7XG4gICAgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbiBYbWxFbnRpdGllcy5kZWNvZGUgPSBmdW5jdGlvbihzdHIpIHtcbiAgICByZXR1cm4gbmV3IFhtbEVudGl0aWVzKCkuZGVjb2RlKHN0cik7XG4gfTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5YbWxFbnRpdGllcy5wcm90b3R5cGUuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgc3RyTGVuZ3RoID0gc3RyLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgc3RyTGVuZ3RoKSB7XG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIHZhciBhbHBoYSA9IENIQVJfSU5ERVhbY107XG4gICAgICAgIGlmIChhbHBoYSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IFwiJlwiICsgYWxwaGEgKyBcIjtcIjtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjIDwgMzIgfHwgYyA+IDEyNikge1xuICAgICAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG4gWG1sRW50aXRpZXMuZW5jb2RlTm9uVVRGID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIG5ldyBYbWxFbnRpdGllcygpLmVuY29kZU5vblVURihzdHIpO1xuIH07XG5cbi8qKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuWG1sRW50aXRpZXMucHJvdG90eXBlLmVuY29kZU5vbkFTQ0lJID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgaWYgKCFzdHIgfHwgIXN0ci5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICB2YXIgc3RyTGVuZ2h0ID0gc3RyLmxlbmd0aDtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdmFyIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgc3RyTGVuZ2h0KSB7XG4gICAgICAgIHZhciBjID0gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGlmIChjIDw9IDI1NSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0cltpKytdO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmVzdWx0ICs9ICcmIycgKyBjICsgJzsnO1xuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbiBYbWxFbnRpdGllcy5lbmNvZGVOb25BU0NJSSA9IGZ1bmN0aW9uKHN0cikge1xuICAgIHJldHVybiBuZXcgWG1sRW50aXRpZXMoKS5lbmNvZGVOb25BU0NJSShzdHIpO1xuIH07XG5cbm1vZHVsZS5leHBvcnRzID0gWG1sRW50aXRpZXM7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9odG1sLWVudGl0aWVzL2xpYi94bWwtZW50aXRpZXMuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2h0bWwtZW50aXRpZXMvbGliL3htbC1lbnRpdGllcy5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuKiBsb2dsZXZlbCAtIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbFxuKlxuKiBDb3B5cmlnaHQgKGMpIDIwMTMgVGltIFBlcnJ5XG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS5cbiovXG4oZnVuY3Rpb24gKHJvb3QsIGRlZmluaXRpb24pIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgICAgIGRlZmluZShkZWZpbml0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgIG1vZHVsZS5leHBvcnRzID0gZGVmaW5pdGlvbigpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJvb3QubG9nID0gZGVmaW5pdGlvbigpO1xuICAgIH1cbn0odGhpcywgZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgLy8gU2xpZ2h0bHkgZHViaW91cyB0cmlja3MgdG8gY3V0IGRvd24gbWluaW1pemVkIGZpbGUgc2l6ZVxuICAgIHZhciBub29wID0gZnVuY3Rpb24oKSB7fTtcbiAgICB2YXIgdW5kZWZpbmVkVHlwZSA9IFwidW5kZWZpbmVkXCI7XG5cbiAgICB2YXIgbG9nTWV0aG9kcyA9IFtcbiAgICAgICAgXCJ0cmFjZVwiLFxuICAgICAgICBcImRlYnVnXCIsXG4gICAgICAgIFwiaW5mb1wiLFxuICAgICAgICBcIndhcm5cIixcbiAgICAgICAgXCJlcnJvclwiXG4gICAgXTtcblxuICAgIC8vIENyb3NzLWJyb3dzZXIgYmluZCBlcXVpdmFsZW50IHRoYXQgd29ya3MgYXQgbGVhc3QgYmFjayB0byBJRTZcbiAgICBmdW5jdGlvbiBiaW5kTWV0aG9kKG9iaiwgbWV0aG9kTmFtZSkge1xuICAgICAgICB2YXIgbWV0aG9kID0gb2JqW21ldGhvZE5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1ldGhvZC5iaW5kID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4gbWV0aG9kLmJpbmQob2JqKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kLmNhbGwobWV0aG9kLCBvYmopO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIC8vIE1pc3NpbmcgYmluZCBzaGltIG9yIElFOCArIE1vZGVybml6ciwgZmFsbGJhY2sgdG8gd3JhcHBpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuYXBwbHkobWV0aG9kLCBbb2JqLCBhcmd1bWVudHNdKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQnVpbGQgdGhlIGJlc3QgbG9nZ2luZyBtZXRob2QgcG9zc2libGUgZm9yIHRoaXMgZW52XG4gICAgLy8gV2hlcmV2ZXIgcG9zc2libGUgd2Ugd2FudCB0byBiaW5kLCBub3Qgd3JhcCwgdG8gcHJlc2VydmUgc3RhY2sgdHJhY2VzXG4gICAgZnVuY3Rpb24gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB7XG4gICAgICAgIGlmIChtZXRob2ROYW1lID09PSAnZGVidWcnKSB7XG4gICAgICAgICAgICBtZXRob2ROYW1lID0gJ2xvZyc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTsgLy8gTm8gbWV0aG9kIHBvc3NpYmxlLCBmb3Igbm93IC0gZml4ZWQgbGF0ZXIgYnkgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlc1xuICAgICAgICB9IGVsc2UgaWYgKGNvbnNvbGVbbWV0aG9kTmFtZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgbWV0aG9kTmFtZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc29sZS5sb2cgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGJpbmRNZXRob2QoY29uc29sZSwgJ2xvZycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGVzZSBwcml2YXRlIGZ1bmN0aW9ucyBhbHdheXMgbmVlZCBgdGhpc2AgdG8gYmUgc2V0IHByb3Blcmx5XG5cbiAgICBmdW5jdGlvbiByZXBsYWNlTG9nZ2luZ01ldGhvZHMobGV2ZWwsIGxvZ2dlck5hbWUpIHtcbiAgICAgICAgLypqc2hpbnQgdmFsaWR0aGlzOnRydWUgKi9cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb2dNZXRob2RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgbWV0aG9kTmFtZSA9IGxvZ01ldGhvZHNbaV07XG4gICAgICAgICAgICB0aGlzW21ldGhvZE5hbWVdID0gKGkgPCBsZXZlbCkgP1xuICAgICAgICAgICAgICAgIG5vb3AgOlxuICAgICAgICAgICAgICAgIHRoaXMubWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBEZWZpbmUgbG9nLmxvZyBhcyBhbiBhbGlhcyBmb3IgbG9nLmRlYnVnXG4gICAgICAgIHRoaXMubG9nID0gdGhpcy5kZWJ1ZztcbiAgICB9XG5cbiAgICAvLyBJbiBvbGQgSUUgdmVyc2lvbnMsIHRoZSBjb25zb2xlIGlzbid0IHByZXNlbnQgdW50aWwgeW91IGZpcnN0IG9wZW4gaXQuXG4gICAgLy8gV2UgYnVpbGQgcmVhbE1ldGhvZCgpIHJlcGxhY2VtZW50cyBoZXJlIHRoYXQgcmVnZW5lcmF0ZSBsb2dnaW5nIG1ldGhvZHNcbiAgICBmdW5jdGlvbiBlbmFibGVMb2dnaW5nV2hlbkNvbnNvbGVBcnJpdmVzKG1ldGhvZE5hbWUsIGxldmVsLCBsb2dnZXJOYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXBsYWNlTG9nZ2luZ01ldGhvZHMuY2FsbCh0aGlzLCBsZXZlbCwgbG9nZ2VyTmFtZSk7XG4gICAgICAgICAgICAgICAgdGhpc1ttZXRob2ROYW1lXS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8vIEJ5IGRlZmF1bHQsIHdlIHVzZSBjbG9zZWx5IGJvdW5kIHJlYWwgbWV0aG9kcyB3aGVyZXZlciBwb3NzaWJsZSwgYW5kXG4gICAgLy8gb3RoZXJ3aXNlIHdlIHdhaXQgZm9yIGEgY29uc29sZSB0byBhcHBlYXIsIGFuZCB0aGVuIHRyeSBhZ2Fpbi5cbiAgICBmdW5jdGlvbiBkZWZhdWx0TWV0aG9kRmFjdG9yeShtZXRob2ROYW1lLCBsZXZlbCwgbG9nZ2VyTmFtZSkge1xuICAgICAgICAvKmpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgICAgICByZXR1cm4gcmVhbE1ldGhvZChtZXRob2ROYW1lKSB8fFxuICAgICAgICAgICAgICAgZW5hYmxlTG9nZ2luZ1doZW5Db25zb2xlQXJyaXZlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIExvZ2dlcihuYW1lLCBkZWZhdWx0TGV2ZWwsIGZhY3RvcnkpIHtcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHZhciBjdXJyZW50TGV2ZWw7XG4gICAgICB2YXIgc3RvcmFnZUtleSA9IFwibG9nbGV2ZWxcIjtcbiAgICAgIGlmIChuYW1lKSB7XG4gICAgICAgIHN0b3JhZ2VLZXkgKz0gXCI6XCIgKyBuYW1lO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwZXJzaXN0TGV2ZWxJZlBvc3NpYmxlKGxldmVsTnVtKSB7XG4gICAgICAgICAgdmFyIGxldmVsTmFtZSA9IChsb2dNZXRob2RzW2xldmVsTnVtXSB8fCAnc2lsZW50JykudG9VcHBlckNhc2UoKTtcblxuICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSB1bmRlZmluZWRUeXBlKSByZXR1cm47XG5cbiAgICAgICAgICAvLyBVc2UgbG9jYWxTdG9yYWdlIGlmIGF2YWlsYWJsZVxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Vbc3RvcmFnZUtleV0gPSBsZXZlbE5hbWU7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBVc2Ugc2Vzc2lvbiBjb29raWUgYXMgZmFsbGJhY2tcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuY29va2llID1cbiAgICAgICAgICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RvcmFnZUtleSkgKyBcIj1cIiArIGxldmVsTmFtZSArIFwiO1wiO1xuICAgICAgICAgIH0gY2F0Y2ggKGlnbm9yZSkge31cbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZ2V0UGVyc2lzdGVkTGV2ZWwoKSB7XG4gICAgICAgICAgdmFyIHN0b3JlZExldmVsO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IHVuZGVmaW5lZFR5cGUpIHJldHVybjtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHN0b3JlZExldmVsID0gd2luZG93LmxvY2FsU3RvcmFnZVtzdG9yYWdlS2V5XTtcbiAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG5cbiAgICAgICAgICAvLyBGYWxsYmFjayB0byBjb29raWVzIGlmIGxvY2FsIHN0b3JhZ2UgZ2l2ZXMgdXMgbm90aGluZ1xuICAgICAgICAgIGlmICh0eXBlb2Ygc3RvcmVkTGV2ZWwgPT09IHVuZGVmaW5lZFR5cGUpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIHZhciBjb29raWUgPSB3aW5kb3cuZG9jdW1lbnQuY29va2llO1xuICAgICAgICAgICAgICAgICAgdmFyIGxvY2F0aW9uID0gY29va2llLmluZGV4T2YoXG4gICAgICAgICAgICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KHN0b3JhZ2VLZXkpICsgXCI9XCIpO1xuICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgIHN0b3JlZExldmVsID0gL14oW147XSspLy5leGVjKGNvb2tpZS5zbGljZShsb2NhdGlvbikpWzFdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGNhdGNoIChpZ25vcmUpIHt9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gSWYgdGhlIHN0b3JlZCBsZXZlbCBpcyBub3QgdmFsaWQsIHRyZWF0IGl0IGFzIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cbiAgICAgICAgICBpZiAoc2VsZi5sZXZlbHNbc3RvcmVkTGV2ZWxdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgc3RvcmVkTGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0b3JlZExldmVsO1xuICAgICAgfVxuXG4gICAgICAvKlxuICAgICAgICpcbiAgICAgICAqIFB1YmxpYyBsb2dnZXIgQVBJIC0gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waW10ZXJyeS9sb2dsZXZlbCBmb3IgZGV0YWlsc1xuICAgICAgICpcbiAgICAgICAqL1xuXG4gICAgICBzZWxmLm5hbWUgPSBuYW1lO1xuXG4gICAgICBzZWxmLmxldmVscyA9IHsgXCJUUkFDRVwiOiAwLCBcIkRFQlVHXCI6IDEsIFwiSU5GT1wiOiAyLCBcIldBUk5cIjogMyxcbiAgICAgICAgICBcIkVSUk9SXCI6IDQsIFwiU0lMRU5UXCI6IDV9O1xuXG4gICAgICBzZWxmLm1ldGhvZEZhY3RvcnkgPSBmYWN0b3J5IHx8IGRlZmF1bHRNZXRob2RGYWN0b3J5O1xuXG4gICAgICBzZWxmLmdldExldmVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjdXJyZW50TGV2ZWw7XG4gICAgICB9O1xuXG4gICAgICBzZWxmLnNldExldmVsID0gZnVuY3Rpb24gKGxldmVsLCBwZXJzaXN0KSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBsZXZlbCA9PT0gXCJzdHJpbmdcIiAmJiBzZWxmLmxldmVsc1tsZXZlbC50b1VwcGVyQ2FzZSgpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIGxldmVsID0gc2VsZi5sZXZlbHNbbGV2ZWwudG9VcHBlckNhc2UoKV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgbGV2ZWwgPT09IFwibnVtYmVyXCIgJiYgbGV2ZWwgPj0gMCAmJiBsZXZlbCA8PSBzZWxmLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgICAgY3VycmVudExldmVsID0gbGV2ZWw7XG4gICAgICAgICAgICAgIGlmIChwZXJzaXN0ICE9PSBmYWxzZSkgeyAgLy8gZGVmYXVsdHMgdG8gdHJ1ZVxuICAgICAgICAgICAgICAgICAgcGVyc2lzdExldmVsSWZQb3NzaWJsZShsZXZlbCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVwbGFjZUxvZ2dpbmdNZXRob2RzLmNhbGwoc2VsZiwgbGV2ZWwsIG5hbWUpO1xuICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgPT09IHVuZGVmaW5lZFR5cGUgJiYgbGV2ZWwgPCBzZWxmLmxldmVscy5TSUxFTlQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5vIGNvbnNvbGUgYXZhaWxhYmxlIGZvciBsb2dnaW5nXCI7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aHJvdyBcImxvZy5zZXRMZXZlbCgpIGNhbGxlZCB3aXRoIGludmFsaWQgbGV2ZWw6IFwiICsgbGV2ZWw7XG4gICAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgc2VsZi5zZXREZWZhdWx0TGV2ZWwgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICAgICAgICBpZiAoIWdldFBlcnNpc3RlZExldmVsKCkpIHtcbiAgICAgICAgICAgICAgc2VsZi5zZXRMZXZlbChsZXZlbCwgZmFsc2UpO1xuICAgICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHNlbGYuZW5hYmxlQWxsID0gZnVuY3Rpb24ocGVyc2lzdCkge1xuICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoc2VsZi5sZXZlbHMuVFJBQ0UsIHBlcnNpc3QpO1xuICAgICAgfTtcblxuICAgICAgc2VsZi5kaXNhYmxlQWxsID0gZnVuY3Rpb24ocGVyc2lzdCkge1xuICAgICAgICAgIHNlbGYuc2V0TGV2ZWwoc2VsZi5sZXZlbHMuU0lMRU5ULCBwZXJzaXN0KTtcbiAgICAgIH07XG5cbiAgICAgIC8vIEluaXRpYWxpemUgd2l0aCB0aGUgcmlnaHQgbGV2ZWxcbiAgICAgIHZhciBpbml0aWFsTGV2ZWwgPSBnZXRQZXJzaXN0ZWRMZXZlbCgpO1xuICAgICAgaWYgKGluaXRpYWxMZXZlbCA9PSBudWxsKSB7XG4gICAgICAgICAgaW5pdGlhbExldmVsID0gZGVmYXVsdExldmVsID09IG51bGwgPyBcIldBUk5cIiA6IGRlZmF1bHRMZXZlbDtcbiAgICAgIH1cbiAgICAgIHNlbGYuc2V0TGV2ZWwoaW5pdGlhbExldmVsLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKlxuICAgICAqIFRvcC1sZXZlbCBBUElcbiAgICAgKlxuICAgICAqL1xuXG4gICAgdmFyIGRlZmF1bHRMb2dnZXIgPSBuZXcgTG9nZ2VyKCk7XG5cbiAgICB2YXIgX2xvZ2dlcnNCeU5hbWUgPSB7fTtcbiAgICBkZWZhdWx0TG9nZ2VyLmdldExvZ2dlciA9IGZ1bmN0aW9uIGdldExvZ2dlcihuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCBuYW1lID09PSBcIlwiKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBtdXN0IHN1cHBseSBhIG5hbWUgd2hlbiBjcmVhdGluZyBhIGxvZ2dlci5cIik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV07XG4gICAgICAgIGlmICghbG9nZ2VyKSB7XG4gICAgICAgICAgbG9nZ2VyID0gX2xvZ2dlcnNCeU5hbWVbbmFtZV0gPSBuZXcgTG9nZ2VyKFxuICAgICAgICAgICAgbmFtZSwgZGVmYXVsdExvZ2dlci5nZXRMZXZlbCgpLCBkZWZhdWx0TG9nZ2VyLm1ldGhvZEZhY3RvcnkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dnZXI7XG4gICAgfTtcblxuICAgIC8vIEdyYWIgdGhlIGN1cnJlbnQgZ2xvYmFsIGxvZyB2YXJpYWJsZSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuICAgIHZhciBfbG9nID0gKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUpID8gd2luZG93LmxvZyA6IHVuZGVmaW5lZDtcbiAgICBkZWZhdWx0TG9nZ2VyLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IHVuZGVmaW5lZFR5cGUgJiZcbiAgICAgICAgICAgICAgIHdpbmRvdy5sb2cgPT09IGRlZmF1bHRMb2dnZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2cgPSBfbG9nO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG4gICAgfTtcblxuICAgIGRlZmF1bHRMb2dnZXIuZ2V0TG9nZ2VycyA9IGZ1bmN0aW9uIGdldExvZ2dlcnMoKSB7XG4gICAgICAgIHJldHVybiBfbG9nZ2Vyc0J5TmFtZTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGRlZmF1bHRMb2dnZXI7XG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9sb2dsZXZlbC9saWIvbG9nbGV2ZWwuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2xvZ2xldmVsL2xpYi9sb2dsZXZlbC5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuOyhmdW5jdGlvbihyb290KSB7XG5cblx0LyoqIERldGVjdCBmcmVlIHZhcmlhYmxlcyAqL1xuXHR2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmXG5cdFx0IWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblx0dmFyIGZyZWVNb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJlxuXHRcdCFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXHR2YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsO1xuXHRpZiAoXG5cdFx0ZnJlZUdsb2JhbC5nbG9iYWwgPT09IGZyZWVHbG9iYWwgfHxcblx0XHRmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCB8fFxuXHRcdGZyZWVHbG9iYWwuc2VsZiA9PT0gZnJlZUdsb2JhbFxuXHQpIHtcblx0XHRyb290ID0gZnJlZUdsb2JhbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgYHB1bnljb2RlYCBvYmplY3QuXG5cdCAqIEBuYW1lIHB1bnljb2RlXG5cdCAqIEB0eXBlIE9iamVjdFxuXHQgKi9cblx0dmFyIHB1bnljb2RlLFxuXG5cdC8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cblx0bWF4SW50ID0gMjE0NzQ4MzY0NywgLy8gYWthLiAweDdGRkZGRkZGIG9yIDJeMzEtMVxuXG5cdC8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cblx0YmFzZSA9IDM2LFxuXHR0TWluID0gMSxcblx0dE1heCA9IDI2LFxuXHRza2V3ID0gMzgsXG5cdGRhbXAgPSA3MDAsXG5cdGluaXRpYWxCaWFzID0gNzIsXG5cdGluaXRpYWxOID0gMTI4LCAvLyAweDgwXG5cdGRlbGltaXRlciA9ICctJywgLy8gJ1xceDJEJ1xuXG5cdC8qKiBSZWd1bGFyIGV4cHJlc3Npb25zICovXG5cdHJlZ2V4UHVueWNvZGUgPSAvXnhuLS0vLFxuXHRyZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLywgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcblx0cmVnZXhTZXBhcmF0b3JzID0gL1tcXHgyRVxcdTMwMDJcXHVGRjBFXFx1RkY2MV0vZywgLy8gUkZDIDM0OTAgc2VwYXJhdG9yc1xuXG5cdC8qKiBFcnJvciBtZXNzYWdlcyAqL1xuXHRlcnJvcnMgPSB7XG5cdFx0J292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcblx0XHQnbm90LWJhc2ljJzogJ0lsbGVnYWwgaW5wdXQgPj0gMHg4MCAobm90IGEgYmFzaWMgY29kZSBwb2ludCknLFxuXHRcdCdpbnZhbGlkLWlucHV0JzogJ0ludmFsaWQgaW5wdXQnXG5cdH0sXG5cblx0LyoqIENvbnZlbmllbmNlIHNob3J0Y3V0cyAqL1xuXHRiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW4sXG5cdGZsb29yID0gTWF0aC5mbG9vcixcblx0c3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZSxcblxuXHQvKiogVGVtcG9yYXJ5IHZhcmlhYmxlICovXG5cdGtleTtcblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKipcblx0ICogQSBnZW5lcmljIGVycm9yIHV0aWxpdHkgZnVuY3Rpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuXHQgKiBAcmV0dXJucyB7RXJyb3J9IFRocm93cyBhIGBSYW5nZUVycm9yYCB3aXRoIHRoZSBhcHBsaWNhYmxlIGVycm9yIG1lc3NhZ2UuXG5cdCAqL1xuXHRmdW5jdGlvbiBlcnJvcih0eXBlKSB7XG5cdFx0dGhyb3cgbmV3IFJhbmdlRXJyb3IoZXJyb3JzW3R5cGVdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIGdlbmVyaWMgYEFycmF5I21hcGAgdXRpbGl0eSBmdW5jdGlvbi5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5IGFycmF5XG5cdCAqIGl0ZW0uXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cblx0ICovXG5cdGZ1bmN0aW9uIG1hcChhcnJheSwgZm4pIHtcblx0XHR2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXHRcdHZhciByZXN1bHQgPSBbXTtcblx0XHR3aGlsZSAobGVuZ3RoLS0pIHtcblx0XHRcdHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogQSBzaW1wbGUgYEFycmF5I21hcGAtbGlrZSB3cmFwcGVyIHRvIHdvcmsgd2l0aCBkb21haW4gbmFtZSBzdHJpbmdzIG9yIGVtYWlsXG5cdCAqIGFkZHJlc3Nlcy5cblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGRvbWFpbiBUaGUgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcy5cblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG5cdCAqIGNoYXJhY3Rlci5cblx0ICogQHJldHVybnMge0FycmF5fSBBIG5ldyBzdHJpbmcgb2YgY2hhcmFjdGVycyByZXR1cm5lZCBieSB0aGUgY2FsbGJhY2tcblx0ICogZnVuY3Rpb24uXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXBEb21haW4oc3RyaW5nLCBmbikge1xuXHRcdHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuXHRcdHZhciByZXN1bHQgPSAnJztcblx0XHRpZiAocGFydHMubGVuZ3RoID4gMSkge1xuXHRcdFx0Ly8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuXHRcdFx0Ly8gdGhlIGxvY2FsIHBhcnQgKGkuZS4gZXZlcnl0aGluZyB1cCB0byBgQGApIGludGFjdC5cblx0XHRcdHJlc3VsdCA9IHBhcnRzWzBdICsgJ0AnO1xuXHRcdFx0c3RyaW5nID0gcGFydHNbMV07XG5cdFx0fVxuXHRcdC8vIEF2b2lkIGBzcGxpdChyZWdleClgIGZvciBJRTggY29tcGF0aWJpbGl0eS4gU2VlICMxNy5cblx0XHRzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuXHRcdHZhciBsYWJlbHMgPSBzdHJpbmcuc3BsaXQoJy4nKTtcblx0XHR2YXIgZW5jb2RlZCA9IG1hcChsYWJlbHMsIGZuKS5qb2luKCcuJyk7XG5cdFx0cmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuXHQgKiBjaGFyYWN0ZXIgaW4gdGhlIHN0cmluZy4gV2hpbGUgSmF2YVNjcmlwdCB1c2VzIFVDUy0yIGludGVybmFsbHksXG5cdCAqIHRoaXMgZnVuY3Rpb24gd2lsbCBjb252ZXJ0IGEgcGFpciBvZiBzdXJyb2dhdGUgaGFsdmVzIChlYWNoIG9mIHdoaWNoXG5cdCAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuXHQgKiBtYXRjaGluZyBVVEYtMTYuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZW5jb2RlYFxuXHQgKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlLnVjczJcblx0ICogQG5hbWUgZGVjb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG5cdCAqIEByZXR1cm5zIHtBcnJheX0gVGhlIG5ldyBhcnJheSBvZiBjb2RlIHBvaW50cy5cblx0ICovXG5cdGZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBjb3VudGVyID0gMCxcblx0XHQgICAgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcblx0XHQgICAgdmFsdWUsXG5cdFx0ICAgIGV4dHJhO1xuXHRcdHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHR2YWx1ZSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG5cdFx0XHRcdC8vIGhpZ2ggc3Vycm9nYXRlLCBhbmQgdGhlcmUgaXMgYSBuZXh0IGNoYXJhY3RlclxuXHRcdFx0XHRleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7XG5cdFx0XHRcdGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuXHRcdFx0XHRcdC8vIGNvZGUgdW5pdCBpcyB0aGUgaGlnaCBzdXJyb2dhdGUgb2YgYSBzdXJyb2dhdGUgcGFpclxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdFx0XHRjb3VudGVyLS07XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG91dHB1dC5wdXNoKHZhbHVlKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dDtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG5cdCAqIEBzZWUgYHB1bnljb2RlLnVjczIuZGVjb2RlYFxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGUudWNzMlxuXHQgKiBAbmFtZSBlbmNvZGVcblx0ICogQHBhcmFtIHtBcnJheX0gY29kZVBvaW50cyBUaGUgYXJyYXkgb2YgbnVtZXJpYyBjb2RlIHBvaW50cy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIG5ldyBVbmljb2RlIHN0cmluZyAoVUNTLTIpLlxuXHQgKi9cblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHJldHVybiBtYXAoYXJyYXksIGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgb3V0cHV0ID0gJyc7XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdFx0cmV0dXJuIG91dHB1dDtcblx0XHR9KS5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIGJhc2ljIGNvZGUgcG9pbnQgaW50byBhIGRpZ2l0L2ludGVnZXIuXG5cdCAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge051bWJlcn0gY29kZVBvaW50IFRoZSBiYXNpYyBudW1lcmljIGNvZGUgcG9pbnQgdmFsdWUuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuXHQgKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGluIHRoZSByYW5nZSBgMGAgdG8gYGJhc2UgLSAxYCwgb3IgYGJhc2VgIGlmXG5cdCAqIHRoZSBjb2RlIHBvaW50IGRvZXMgbm90IHJlcHJlc2VudCBhIHZhbHVlLlxuXHQgKi9cblx0ZnVuY3Rpb24gYmFzaWNUb0RpZ2l0KGNvZGVQb2ludCkge1xuXHRcdGlmIChjb2RlUG9pbnQgLSA0OCA8IDEwKSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gMjI7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA2NSA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gNjU7XG5cdFx0fVxuXHRcdGlmIChjb2RlUG9pbnQgLSA5NyA8IDI2KSB7XG5cdFx0XHRyZXR1cm4gY29kZVBvaW50IC0gOTc7XG5cdFx0fVxuXHRcdHJldHVybiBiYXNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgZGlnaXQvaW50ZWdlciBpbnRvIGEgYmFzaWMgY29kZSBwb2ludC5cblx0ICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG5cdCAqIEBwcml2YXRlXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBkaWdpdCBUaGUgbnVtZXJpYyB2YWx1ZSBvZiBhIGJhc2ljIGNvZGUgcG9pbnQuXG5cdCAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG5cdCAqIHJlcHJlc2VudGluZyBpbnRlZ2VycykgaXMgYGRpZ2l0YCwgd2hpY2ggbmVlZHMgdG8gYmUgaW4gdGhlIHJhbmdlXG5cdCAqIGAwYCB0byBgYmFzZSAtIDFgLiBJZiBgZmxhZ2AgaXMgbm9uLXplcm8sIHRoZSB1cHBlcmNhc2UgZm9ybSBpc1xuXHQgKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuXHQgKiBpZiBgZmxhZ2AgaXMgbm9uLXplcm8gYW5kIGBkaWdpdGAgaGFzIG5vIHVwcGVyY2FzZSBmb3JtLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG5cdFx0Ly8gIDAuLjI1IG1hcCB0byBBU0NJSSBhLi56IG9yIEEuLlpcblx0XHQvLyAyNi4uMzUgbWFwIHRvIEFTQ0lJIDAuLjlcblx0XHRyZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG5cdCAqIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzNDkyI3NlY3Rpb24tMy40XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRmdW5jdGlvbiBhZGFwdChkZWx0YSwgbnVtUG9pbnRzLCBmaXJzdFRpbWUpIHtcblx0XHR2YXIgayA9IDA7XG5cdFx0ZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcblx0XHRkZWx0YSArPSBmbG9vcihkZWx0YSAvIG51bVBvaW50cyk7XG5cdFx0Zm9yICgvKiBubyBpbml0aWFsaXphdGlvbiAqLzsgZGVsdGEgPiBiYXNlTWludXNUTWluICogdE1heCA+PiAxOyBrICs9IGJhc2UpIHtcblx0XHRcdGRlbHRhID0gZmxvb3IoZGVsdGEgLyBiYXNlTWludXNUTWluKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzIHRvIGEgc3RyaW5nIG9mIFVuaWNvZGVcblx0ICogc3ltYm9scy5cblx0ICogQG1lbWJlck9mIHB1bnljb2RlXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dCBUaGUgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIHJlc3VsdGluZyBzdHJpbmcgb2YgVW5pY29kZSBzeW1ib2xzLlxuXHQgKi9cblx0ZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdFx0Ly8gRG9uJ3QgdXNlIFVDUy0yXG5cdFx0dmFyIG91dHB1dCA9IFtdLFxuXHRcdCAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcblx0XHQgICAgb3V0LFxuXHRcdCAgICBpID0gMCxcblx0XHQgICAgbiA9IGluaXRpYWxOLFxuXHRcdCAgICBiaWFzID0gaW5pdGlhbEJpYXMsXG5cdFx0ICAgIGJhc2ljLFxuXHRcdCAgICBqLFxuXHRcdCAgICBpbmRleCxcblx0XHQgICAgb2xkaSxcblx0XHQgICAgdyxcblx0XHQgICAgayxcblx0XHQgICAgZGlnaXQsXG5cdFx0ICAgIHQsXG5cdFx0ICAgIC8qKiBDYWNoZWQgY2FsY3VsYXRpb24gcmVzdWx0cyAqL1xuXHRcdCAgICBiYXNlTWludXNUO1xuXG5cdFx0Ly8gSGFuZGxlIHRoZSBiYXNpYyBjb2RlIHBvaW50czogbGV0IGBiYXNpY2AgYmUgdGhlIG51bWJlciBvZiBpbnB1dCBjb2RlXG5cdFx0Ly8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcblx0XHQvLyB0aGUgZmlyc3QgYmFzaWMgY29kZSBwb2ludHMgdG8gdGhlIG91dHB1dC5cblxuXHRcdGJhc2ljID0gaW5wdXQubGFzdEluZGV4T2YoZGVsaW1pdGVyKTtcblx0XHRpZiAoYmFzaWMgPCAwKSB7XG5cdFx0XHRiYXNpYyA9IDA7XG5cdFx0fVxuXG5cdFx0Zm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcblx0XHRcdC8vIGlmIGl0J3Mgbm90IGEgYmFzaWMgY29kZSBwb2ludFxuXHRcdFx0aWYgKGlucHV0LmNoYXJDb2RlQXQoaikgPj0gMHg4MCkge1xuXHRcdFx0XHRlcnJvcignbm90LWJhc2ljJyk7XG5cdFx0XHR9XG5cdFx0XHRvdXRwdXQucHVzaChpbnB1dC5jaGFyQ29kZUF0KGopKTtcblx0XHR9XG5cblx0XHQvLyBNYWluIGRlY29kaW5nIGxvb3A6IHN0YXJ0IGp1c3QgYWZ0ZXIgdGhlIGxhc3QgZGVsaW1pdGVyIGlmIGFueSBiYXNpYyBjb2RlXG5cdFx0Ly8gcG9pbnRzIHdlcmUgY29waWVkOyBzdGFydCBhdCB0aGUgYmVnaW5uaW5nIG90aGVyd2lzZS5cblxuXHRcdGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovKSB7XG5cblx0XHRcdC8vIGBpbmRleGAgaXMgdGhlIGluZGV4IG9mIHRoZSBuZXh0IGNoYXJhY3RlciB0byBiZSBjb25zdW1lZC5cblx0XHRcdC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcblx0XHRcdC8vIHdoaWNoIGdldHMgYWRkZWQgdG8gYGlgLiBUaGUgb3ZlcmZsb3cgY2hlY2tpbmcgaXMgZWFzaWVyXG5cdFx0XHQvLyBpZiB3ZSBpbmNyZWFzZSBgaWAgYXMgd2UgZ28sIHRoZW4gc3VidHJhY3Qgb2ZmIGl0cyBzdGFydGluZ1xuXHRcdFx0Ly8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cblx0XHRcdGZvciAob2xkaSA9IGksIHcgPSAxLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblxuXHRcdFx0XHRpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcblx0XHRcdFx0XHRlcnJvcignaW52YWxpZC1pbnB1dCcpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cblx0XHRcdFx0aWYgKGRpZ2l0ID49IGJhc2UgfHwgZGlnaXQgPiBmbG9vcigobWF4SW50IC0gaSkgLyB3KSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aSArPSBkaWdpdCAqIHc7XG5cdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXG5cdFx0XHRcdGlmIChkaWdpdCA8IHQpIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcblx0XHRcdFx0aWYgKHcgPiBmbG9vcihtYXhJbnQgLyBiYXNlTWludXNUKSkge1xuXHRcdFx0XHRcdGVycm9yKCdvdmVyZmxvdycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dyAqPSBiYXNlTWludXNUO1xuXG5cdFx0XHR9XG5cblx0XHRcdG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuXHRcdFx0YmlhcyA9IGFkYXB0KGkgLSBvbGRpLCBvdXQsIG9sZGkgPT0gMCk7XG5cblx0XHRcdC8vIGBpYCB3YXMgc3VwcG9zZWQgdG8gd3JhcCBhcm91bmQgZnJvbSBgb3V0YCB0byBgMGAsXG5cdFx0XHQvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuXHRcdFx0aWYgKGZsb29yKGkgLyBvdXQpID4gbWF4SW50IC0gbikge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0biArPSBmbG9vcihpIC8gb3V0KTtcblx0XHRcdGkgJT0gb3V0O1xuXG5cdFx0XHQvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG5cdFx0XHRvdXRwdXQuc3BsaWNlKGkrKywgMCwgbik7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG5cdCAqIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSByZXN1bHRpbmcgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scy5cblx0ICovXG5cdGZ1bmN0aW9uIGVuY29kZShpbnB1dCkge1xuXHRcdHZhciBuLFxuXHRcdCAgICBkZWx0YSxcblx0XHQgICAgaGFuZGxlZENQQ291bnQsXG5cdFx0ICAgIGJhc2ljTGVuZ3RoLFxuXHRcdCAgICBiaWFzLFxuXHRcdCAgICBqLFxuXHRcdCAgICBtLFxuXHRcdCAgICBxLFxuXHRcdCAgICBrLFxuXHRcdCAgICB0LFxuXHRcdCAgICBjdXJyZW50VmFsdWUsXG5cdFx0ICAgIG91dHB1dCA9IFtdLFxuXHRcdCAgICAvKiogYGlucHV0TGVuZ3RoYCB3aWxsIGhvbGQgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyBpbiBgaW5wdXRgLiAqL1xuXHRcdCAgICBpbnB1dExlbmd0aCxcblx0XHQgICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG5cdFx0ICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSxcblx0XHQgICAgYmFzZU1pbnVzVCxcblx0XHQgICAgcU1pbnVzVDtcblxuXHRcdC8vIENvbnZlcnQgdGhlIGlucHV0IGluIFVDUy0yIHRvIFVuaWNvZGVcblx0XHRpbnB1dCA9IHVjczJkZWNvZGUoaW5wdXQpO1xuXG5cdFx0Ly8gQ2FjaGUgdGhlIGxlbmd0aFxuXHRcdGlucHV0TGVuZ3RoID0gaW5wdXQubGVuZ3RoO1xuXG5cdFx0Ly8gSW5pdGlhbGl6ZSB0aGUgc3RhdGVcblx0XHRuID0gaW5pdGlhbE47XG5cdFx0ZGVsdGEgPSAwO1xuXHRcdGJpYXMgPSBpbml0aWFsQmlhcztcblxuXHRcdC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcblx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0Y3VycmVudFZhbHVlID0gaW5wdXRbal07XG5cdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuXHRcdFx0XHRvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoY3VycmVudFZhbHVlKSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7XG5cblx0XHQvLyBgaGFuZGxlZENQQ291bnRgIGlzIHRoZSBudW1iZXIgb2YgY29kZSBwb2ludHMgdGhhdCBoYXZlIGJlZW4gaGFuZGxlZDtcblx0XHQvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cblx0XHQvLyBGaW5pc2ggdGhlIGJhc2ljIHN0cmluZyAtIGlmIGl0IGlzIG5vdCBlbXB0eSAtIHdpdGggYSBkZWxpbWl0ZXJcblx0XHRpZiAoYmFzaWNMZW5ndGgpIHtcblx0XHRcdG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG5cdFx0fVxuXG5cdFx0Ly8gTWFpbiBlbmNvZGluZyBsb29wOlxuXHRcdHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cblx0XHRcdC8vIEFsbCBub24tYmFzaWMgY29kZSBwb2ludHMgPCBuIGhhdmUgYmVlbiBoYW5kbGVkIGFscmVhZHkuIEZpbmQgdGhlIG5leHRcblx0XHRcdC8vIGxhcmdlciBvbmU6XG5cdFx0XHRmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblx0XHRcdFx0aWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHtcblx0XHRcdFx0XHRtID0gY3VycmVudFZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcblx0XHRcdC8vIGJ1dCBndWFyZCBhZ2FpbnN0IG92ZXJmbG93XG5cdFx0XHRoYW5kbGVkQ1BDb3VudFBsdXNPbmUgPSBoYW5kbGVkQ1BDb3VudCArIDE7XG5cdFx0XHRpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuXHRcdFx0XHRlcnJvcignb3ZlcmZsb3cnKTtcblx0XHRcdH1cblxuXHRcdFx0ZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcblx0XHRcdG4gPSBtO1xuXG5cdFx0XHRmb3IgKGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuXHRcdFx0XHRjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlIDwgbiAmJiArK2RlbHRhID4gbWF4SW50KSB7XG5cdFx0XHRcdFx0ZXJyb3IoJ292ZXJmbG93Jyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY3VycmVudFZhbHVlID09IG4pIHtcblx0XHRcdFx0XHQvLyBSZXByZXNlbnQgZGVsdGEgYXMgYSBnZW5lcmFsaXplZCB2YXJpYWJsZS1sZW5ndGggaW50ZWdlclxuXHRcdFx0XHRcdGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovOyBrICs9IGJhc2UpIHtcblx0XHRcdFx0XHRcdHQgPSBrIDw9IGJpYXMgPyB0TWluIDogKGsgPj0gYmlhcyArIHRNYXggPyB0TWF4IDogayAtIGJpYXMpO1xuXHRcdFx0XHRcdFx0aWYgKHEgPCB0KSB7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cU1pbnVzVCA9IHEgLSB0O1xuXHRcdFx0XHRcdFx0YmFzZU1pbnVzVCA9IGJhc2UgLSB0O1xuXHRcdFx0XHRcdFx0b3V0cHV0LnB1c2goXG5cdFx0XHRcdFx0XHRcdHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG91dHB1dC5wdXNoKHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWMocSwgMCkpKTtcblx0XHRcdFx0XHRiaWFzID0gYWRhcHQoZGVsdGEsIGhhbmRsZWRDUENvdW50UGx1c09uZSwgaGFuZGxlZENQQ291bnQgPT0gYmFzaWNMZW5ndGgpO1xuXHRcdFx0XHRcdGRlbHRhID0gMDtcblx0XHRcdFx0XHQrK2hhbmRsZWRDUENvdW50O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdCsrZGVsdGE7XG5cdFx0XHQrK247XG5cblx0XHR9XG5cdFx0cmV0dXJuIG91dHB1dC5qb2luKCcnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDb252ZXJ0cyBhIFB1bnljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzXG5cdCAqIHRvIFVuaWNvZGUuIE9ubHkgdGhlIFB1bnljb2RlZCBwYXJ0cyBvZiB0aGUgaW5wdXQgd2lsbCBiZSBjb252ZXJ0ZWQsIGkuZS5cblx0ICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG5cdCAqIGNvbnZlcnRlZCB0byBVbmljb2RlLlxuXHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0ICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuXHQgKiBjb252ZXJ0IHRvIFVuaWNvZGUuXG5cdCAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBVbmljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBQdW55Y29kZVxuXHQgKiBzdHJpbmcuXG5cdCAqL1xuXHRmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcblx0XHRyZXR1cm4gbWFwRG9tYWluKGlucHV0LCBmdW5jdGlvbihzdHJpbmcpIHtcblx0XHRcdHJldHVybiByZWdleFB1bnljb2RlLnRlc3Qoc3RyaW5nKVxuXHRcdFx0XHQ/IGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSlcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ29udmVydHMgYSBVbmljb2RlIHN0cmluZyByZXByZXNlbnRpbmcgYSBkb21haW4gbmFtZSBvciBhbiBlbWFpbCBhZGRyZXNzIHRvXG5cdCAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuXHQgKiBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmIHlvdSBjYWxsIGl0IHdpdGggYSBkb21haW4gdGhhdCdzIGFscmVhZHkgaW5cblx0ICogQVNDSUkuXG5cdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHQgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIGRvbWFpbiBuYW1lIG9yIGVtYWlsIGFkZHJlc3MgdG8gY29udmVydCwgYXMgYVxuXHQgKiBVbmljb2RlIHN0cmluZy5cblx0ICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuXHQgKiBlbWFpbCBhZGRyZXNzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdG9BU0NJSShpbnB1dCkge1xuXHRcdHJldHVybiBtYXBEb21haW4oaW5wdXQsIGZ1bmN0aW9uKHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpXG5cdFx0XHRcdD8gJ3huLS0nICsgZW5jb2RlKHN0cmluZylcblx0XHRcdFx0OiBzdHJpbmc7XG5cdFx0fSk7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHQvKiogRGVmaW5lIHRoZSBwdWJsaWMgQVBJICovXG5cdHB1bnljb2RlID0ge1xuXHRcdC8qKlxuXHRcdCAqIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCBQdW55Y29kZS5qcyB2ZXJzaW9uIG51bWJlci5cblx0XHQgKiBAbWVtYmVyT2YgcHVueWNvZGVcblx0XHQgKiBAdHlwZSBTdHJpbmdcblx0XHQgKi9cblx0XHQndmVyc2lvbic6ICcxLjQuMScsXG5cdFx0LyoqXG5cdFx0ICogQW4gb2JqZWN0IG9mIG1ldGhvZHMgdG8gY29udmVydCBmcm9tIEphdmFTY3JpcHQncyBpbnRlcm5hbCBjaGFyYWN0ZXJcblx0XHQgKiByZXByZXNlbnRhdGlvbiAoVUNTLTIpIHRvIFVuaWNvZGUgY29kZSBwb2ludHMsIGFuZCBiYWNrLlxuXHRcdCAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuXHRcdCAqIEBtZW1iZXJPZiBwdW55Y29kZVxuXHRcdCAqIEB0eXBlIE9iamVjdFxuXHRcdCAqL1xuXHRcdCd1Y3MyJzoge1xuXHRcdFx0J2RlY29kZSc6IHVjczJkZWNvZGUsXG5cdFx0XHQnZW5jb2RlJzogdWNzMmVuY29kZVxuXHRcdH0sXG5cdFx0J2RlY29kZSc6IGRlY29kZSxcblx0XHQnZW5jb2RlJzogZW5jb2RlLFxuXHRcdCd0b0FTQ0lJJzogdG9BU0NJSSxcblx0XHQndG9Vbmljb2RlJzogdG9Vbmljb2RlXG5cdH07XG5cblx0LyoqIEV4cG9zZSBgcHVueWNvZGVgICovXG5cdC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIHNwZWNpZmljIGNvbmRpdGlvbiBwYXR0ZXJuc1xuXHQvLyBsaWtlIHRoZSBmb2xsb3dpbmc6XG5cdGlmIChcblx0XHR0eXBlb2YgZGVmaW5lID09ICdmdW5jdGlvbicgJiZcblx0XHR0eXBlb2YgZGVmaW5lLmFtZCA9PSAnb2JqZWN0JyAmJlxuXHRcdGRlZmluZS5hbWRcblx0KSB7XG5cdFx0ZGVmaW5lKCdwdW55Y29kZScsIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHB1bnljb2RlO1xuXHRcdH0pO1xuXHR9IGVsc2UgaWYgKGZyZWVFeHBvcnRzICYmIGZyZWVNb2R1bGUpIHtcblx0XHRpZiAobW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMpIHtcblx0XHRcdC8vIGluIE5vZGUuanMsIGlvLmpzLCBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHB1bnljb2RlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBpbiBOYXJ3aGFsIG9yIFJpbmdvSlMgdjAuNy4wLVxuXHRcdFx0Zm9yIChrZXkgaW4gcHVueWNvZGUpIHtcblx0XHRcdFx0cHVueWNvZGUuaGFzT3duUHJvcGVydHkoa2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHB1bnljb2RlW2tleV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSBlbHNlIHtcblx0XHQvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC5wdW55Y29kZSA9IHB1bnljb2RlO1xuXHR9XG5cbn0odGhpcykpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcHVueWNvZGUvcHVueWNvZGUuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3B1bnljb2RlL3B1bnljb2RlLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZGVjb2RlLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBzdHJpbmdpZnlQcmltaXRpdmUgPSBmdW5jdGlvbih2KSB7XG4gIHN3aXRjaCAodHlwZW9mIHYpIHtcbiAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgcmV0dXJuIHY7XG5cbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiB2ID8gJ3RydWUnIDogJ2ZhbHNlJztcblxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNGaW5pdGUodikgPyB2IDogJyc7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9iaiwgc2VwLCBlcSwgbmFtZSkge1xuICBzZXAgPSBzZXAgfHwgJyYnO1xuICBlcSA9IGVxIHx8ICc9JztcbiAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgIG9iaiA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBtYXAob2JqZWN0S2V5cyhvYmopLCBmdW5jdGlvbihrKSB7XG4gICAgICB2YXIga3MgPSBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKGspKSArIGVxO1xuICAgICAgaWYgKGlzQXJyYXkob2JqW2tdKSkge1xuICAgICAgICByZXR1cm4gbWFwKG9ialtrXSwgZnVuY3Rpb24odikge1xuICAgICAgICAgIHJldHVybiBrcyArIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUodikpO1xuICAgICAgICB9KS5qb2luKHNlcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9ialtrXSkpO1xuICAgICAgfVxuICAgIH0pLmpvaW4oc2VwKTtcblxuICB9XG5cbiAgaWYgKCFuYW1lKSByZXR1cm4gJyc7XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG5hbWUpKSArIGVxICtcbiAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUob2JqKSk7XG59O1xuXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKHhzKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoeHMpID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2VuY29kZS5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gZXhwb3J0cy5wYXJzZSA9IHJlcXVpcmUoJy4vZGVjb2RlJyk7XG5leHBvcnRzLmVuY29kZSA9IGV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9lbmNvZGUnKTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qIHNvY2tqcy1jbGllbnQgdjEuMS40IHwgaHR0cDovL3NvY2tqcy5vcmcgfCBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuU29ja0pTID0gZigpfX0pKGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdHJhbnNwb3J0TGlzdCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0LWxpc3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21haW4nKSh0cmFuc3BvcnRMaXN0KTtcblxuLy8gVE9ETyBjYW4ndCBnZXQgcmlkIG9mIHRoaXMgdW50aWwgYWxsIHNlcnZlcnMgZG9cbmlmICgnX3NvY2tqc19vbmxvYWQnIGluIGdsb2JhbCkge1xuICBzZXRUaW1lb3V0KGdsb2JhbC5fc29ja2pzX29ubG9hZCwgMSk7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vbWFpblwiOjE0LFwiLi90cmFuc3BvcnQtbGlzdFwiOjE2fV0sMjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudCA9IHJlcXVpcmUoJy4vZXZlbnQnKVxuICA7XG5cbmZ1bmN0aW9uIENsb3NlRXZlbnQoKSB7XG4gIEV2ZW50LmNhbGwodGhpcyk7XG4gIHRoaXMuaW5pdEV2ZW50KCdjbG9zZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMud2FzQ2xlYW4gPSBmYWxzZTtcbiAgdGhpcy5jb2RlID0gMDtcbiAgdGhpcy5yZWFzb24gPSAnJztcbn1cblxuaW5oZXJpdHMoQ2xvc2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IENsb3NlRXZlbnQ7XG5cbn0se1wiLi9ldmVudFwiOjQsXCJpbmhlcml0c1wiOjU3fV0sMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnR0YXJnZXQnKVxuICA7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRUYXJnZXQuY2FsbCh0aGlzKTtcbn1cblxuaW5oZXJpdHMoRXZlbnRFbWl0dGVyLCBFdmVudFRhcmdldCk7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID0gZnVuY3Rpb24odHlwZSkge1xuICBpZiAodHlwZSkge1xuICAgIGRlbGV0ZSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzID0ge307XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICAgICwgZmlyZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBnKCkge1xuICAgIHNlbGYucmVtb3ZlTGlzdGVuZXIodHlwZSwgZyk7XG5cbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgfVxuXG4gIHRoaXMub24odHlwZSwgZyk7XG59O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHR5cGUgPSBhcmd1bWVudHNbMF07XG4gIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdHlwZV07XG4gIGlmICghbGlzdGVuZXJzKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIGVxdWl2YWxlbnQgb2YgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcbiAgdmFyIGwgPSBhcmd1bWVudHMubGVuZ3RoO1xuICB2YXIgYXJncyA9IG5ldyBBcnJheShsIC0gMSk7XG4gIGZvciAodmFyIGFpID0gMTsgYWkgPCBsOyBhaSsrKSB7XG4gICAgYXJnc1thaSAtIDFdID0gYXJndW1lbnRzW2FpXTtcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcjtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPSBFdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcjtcblxubW9kdWxlLmV4cG9ydHMuRXZlbnRFbWl0dGVyID0gRXZlbnRFbWl0dGVyO1xuXG59LHtcIi4vZXZlbnR0YXJnZXRcIjo1LFwiaW5oZXJpdHNcIjo1N31dLDQ6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBFdmVudChldmVudFR5cGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xufVxuXG5FdmVudC5wcm90b3R5cGUuaW5pdEV2ZW50ID0gZnVuY3Rpb24oZXZlbnRUeXBlLCBjYW5CdWJibGUsIGNhbmNlbGFibGUpIHtcbiAgdGhpcy50eXBlID0gZXZlbnRUeXBlO1xuICB0aGlzLmJ1YmJsZXMgPSBjYW5CdWJibGU7XG4gIHRoaXMuY2FuY2VsYWJsZSA9IGNhbmNlbGFibGU7XG4gIHRoaXMudGltZVN0YW1wID0gK25ldyBEYXRlKCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnQucHJvdG90eXBlLnN0b3BQcm9wYWdhdGlvbiA9IGZ1bmN0aW9uKCkge307XG5FdmVudC5wcm90b3R5cGUucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHt9O1xuXG5FdmVudC5DQVBUVVJJTkdfUEhBU0UgPSAxO1xuRXZlbnQuQVRfVEFSR0VUID0gMjtcbkV2ZW50LkJVQkJMSU5HX1BIQVNFID0gMztcblxubW9kdWxlLmV4cG9ydHMgPSBFdmVudDtcblxufSx7fV0sNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qIFNpbXBsaWZpZWQgaW1wbGVtZW50YXRpb24gb2YgRE9NMiBFdmVudFRhcmdldC5cbiAqICAgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTItRXZlbnRzL2V2ZW50cy5odG1sI0V2ZW50cy1FdmVudFRhcmdldFxuICovXG5cbmZ1bmN0aW9uIEV2ZW50VGFyZ2V0KCkge1xuICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcbn1cblxuRXZlbnRUYXJnZXQucHJvdG90eXBlLmFkZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbihldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICghKGV2ZW50VHlwZSBpbiB0aGlzLl9saXN0ZW5lcnMpKSB7XG4gICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBbXTtcbiAgfVxuICB2YXIgYXJyID0gdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV07XG4gIC8vICM0XG4gIGlmIChhcnIuaW5kZXhPZihsaXN0ZW5lcikgPT09IC0xKSB7XG4gICAgLy8gTWFrZSBhIGNvcHkgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIGEgY3VycmVudCBkaXNwYXRjaEV2ZW50LlxuICAgIGFyciA9IGFyci5jb25jYXQoW2xpc3RlbmVyXSk7XG4gIH1cbiAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBhcnI7XG59O1xuXG5FdmVudFRhcmdldC5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50VHlwZSwgbGlzdGVuZXIpIHtcbiAgdmFyIGFyciA9IHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICBpZiAoIWFycikge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgaWR4ID0gYXJyLmluZGV4T2YobGlzdGVuZXIpO1xuICBpZiAoaWR4ICE9PSAtMSkge1xuICAgIGlmIChhcnIubGVuZ3RoID4gMSkge1xuICAgICAgLy8gTWFrZSBhIGNvcHkgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIGEgY3VycmVudCBkaXNwYXRjaEV2ZW50LlxuICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50VHlwZV0gPSBhcnIuc2xpY2UoMCwgaWR4KS5jb25jYXQoYXJyLnNsaWNlKGlkeCArIDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHRoaXMuX2xpc3RlbmVyc1tldmVudFR5cGVdO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbn07XG5cbkV2ZW50VGFyZ2V0LnByb3RvdHlwZS5kaXNwYXRjaEV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBldmVudCA9IGFyZ3VtZW50c1swXTtcbiAgdmFyIHQgPSBldmVudC50eXBlO1xuICAvLyBlcXVpdmFsZW50IG9mIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHZhciBhcmdzID0gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IFtldmVudF0gOiBBcnJheS5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAvLyBUT0RPOiBUaGlzIGRvZXNuJ3QgbWF0Y2ggdGhlIHJlYWwgYmVoYXZpb3I7IHBlciBzcGVjLCBvbmZvbyBnZXRcbiAgLy8gdGhlaXIgcGxhY2UgaW4gbGluZSBmcm9tIHRoZSAvZmlyc3QvIHRpbWUgdGhleSdyZSBzZXQgZnJvbVxuICAvLyBub24tbnVsbC4gQWx0aG91Z2ggV2ViS2l0IGJ1bXBzIGl0IHRvIHRoZSBlbmQgZXZlcnkgdGltZSBpdCdzXG4gIC8vIHNldC5cbiAgaWYgKHRoaXNbJ29uJyArIHRdKSB7XG4gICAgdGhpc1snb24nICsgdF0uYXBwbHkodGhpcywgYXJncyk7XG4gIH1cbiAgaWYgKHQgaW4gdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgLy8gR3JhYiBhIHJlZmVyZW5jZSB0byB0aGUgbGlzdGVuZXJzIGxpc3QuIHJlbW92ZUV2ZW50TGlzdGVuZXIgbWF5IGFsdGVyIHRoZSBsaXN0LlxuICAgIHZhciBsaXN0ZW5lcnMgPSB0aGlzLl9saXN0ZW5lcnNbdF07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxpc3RlbmVyc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRUYXJnZXQ7XG5cbn0se31dLDY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50JylcbiAgO1xuXG5mdW5jdGlvbiBUcmFuc3BvcnRNZXNzYWdlRXZlbnQoZGF0YSkge1xuICBFdmVudC5jYWxsKHRoaXMpO1xuICB0aGlzLmluaXRFdmVudCgnbWVzc2FnZScsIGZhbHNlLCBmYWxzZSk7XG4gIHRoaXMuZGF0YSA9IGRhdGE7XG59XG5cbmluaGVyaXRzKFRyYW5zcG9ydE1lc3NhZ2VFdmVudCwgRXZlbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydE1lc3NhZ2VFdmVudDtcblxufSx7XCIuL2V2ZW50XCI6NCxcImluaGVyaXRzXCI6NTd9XSw3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9pZnJhbWUnKVxuICA7XG5cbmZ1bmN0aW9uIEZhY2FkZUpTKHRyYW5zcG9ydCkge1xuICB0aGlzLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIHRyYW5zcG9ydC5vbignbWVzc2FnZScsIHRoaXMuX3RyYW5zcG9ydE1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gIHRyYW5zcG9ydC5vbignY2xvc2UnLCB0aGlzLl90cmFuc3BvcnRDbG9zZS5iaW5kKHRoaXMpKTtcbn1cblxuRmFjYWRlSlMucHJvdG90eXBlLl90cmFuc3BvcnRDbG9zZSA9IGZ1bmN0aW9uKGNvZGUsIHJlYXNvbikge1xuICBpZnJhbWVVdGlscy5wb3N0TWVzc2FnZSgnYycsIEpTT04zLnN0cmluZ2lmeShbY29kZSwgcmVhc29uXSkpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fdHJhbnNwb3J0TWVzc2FnZSA9IGZ1bmN0aW9uKGZyYW1lKSB7XG4gIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCd0JywgZnJhbWUpO1xufTtcbkZhY2FkZUpTLnByb3RvdHlwZS5fc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdGhpcy5fdHJhbnNwb3J0LnNlbmQoZGF0YSk7XG59O1xuRmFjYWRlSlMucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgdGhpcy5fdHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBGYWNhZGVKUztcblxufSx7XCIuL3V0aWxzL2lmcmFtZVwiOjQ3LFwianNvbjNcIjo1OH1dLDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIHVybFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy91cmwnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCBGYWNhZGVKUyA9IHJlcXVpcmUoJy4vZmFjYWRlJylcbiAgLCBJbmZvSWZyYW1lUmVjZWl2ZXIgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lLXJlY2VpdmVyJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvaWZyYW1lJylcbiAgLCBsb2MgPSByZXF1aXJlKCcuL2xvY2F0aW9uJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmlmcmFtZS1ib290c3RyYXAnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihTb2NrSlMsIGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdmFyIHRyYW5zcG9ydE1hcCA9IHt9O1xuICBhdmFpbGFibGVUcmFuc3BvcnRzLmZvckVhY2goZnVuY3Rpb24oYXQpIHtcbiAgICBpZiAoYXQuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICB0cmFuc3BvcnRNYXBbYXQuZmFjYWRlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWVdID0gYXQuZmFjYWRlVHJhbnNwb3J0O1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gaGFyZC1jb2RlZCBmb3IgdGhlIGluZm8gaWZyYW1lXG4gIC8vIFRPRE8gc2VlIGlmIHdlIGNhbiBtYWtlIHRoaXMgbW9yZSBkeW5hbWljXG4gIHRyYW5zcG9ydE1hcFtJbmZvSWZyYW1lUmVjZWl2ZXIudHJhbnNwb3J0TmFtZV0gPSBJbmZvSWZyYW1lUmVjZWl2ZXI7XG4gIHZhciBwYXJlbnRPcmlnaW47XG5cbiAgLyogZXNsaW50LWRpc2FibGUgY2FtZWxjYXNlICovXG4gIFNvY2tKUy5ib290c3RyYXBfaWZyYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UgKi9cbiAgICB2YXIgZmFjYWRlO1xuICAgIGlmcmFtZVV0aWxzLmN1cnJlbnRXaW5kb3dJZCA9IGxvYy5oYXNoLnNsaWNlKDEpO1xuICAgIHZhciBvbk1lc3NhZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgICBpZiAoZS5zb3VyY2UgIT09IHBhcmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodHlwZW9mIHBhcmVudE9yaWdpbiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcGFyZW50T3JpZ2luID0gZS5vcmlnaW47XG4gICAgICB9XG4gICAgICBpZiAoZS5vcmlnaW4gIT09IHBhcmVudE9yaWdpbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpZnJhbWVNZXNzYWdlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWZyYW1lTWVzc2FnZSA9IEpTT04zLnBhcnNlKGUuZGF0YSk7XG4gICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgIGRlYnVnKCdiYWQganNvbicsIGUuZGF0YSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGlmcmFtZU1lc3NhZ2Uud2luZG93SWQgIT09IGlmcmFtZVV0aWxzLmN1cnJlbnRXaW5kb3dJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGlmcmFtZU1lc3NhZ2UudHlwZSkge1xuICAgICAgY2FzZSAncyc6XG4gICAgICAgIHZhciBwO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHAgPSBKU09OMy5wYXJzZShpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICAgICAgZGVidWcoJ2JhZCBqc29uJywgaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmVyc2lvbiA9IHBbMF07XG4gICAgICAgIHZhciB0cmFuc3BvcnQgPSBwWzFdO1xuICAgICAgICB2YXIgdHJhbnNVcmwgPSBwWzJdO1xuICAgICAgICB2YXIgYmFzZVVybCA9IHBbM107XG4gICAgICAgIGRlYnVnKHZlcnNpb24sIHRyYW5zcG9ydCwgdHJhbnNVcmwsIGJhc2VVcmwpO1xuICAgICAgICAvLyBjaGFuZ2UgdGhpcyB0byBzZW12ZXIgbG9naWNcbiAgICAgICAgaWYgKHZlcnNpb24gIT09IFNvY2tKUy52ZXJzaW9uKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbmNvbXBhdGlibGUgU29ja0pTISBNYWluIHNpdGUgdXNlczonICtcbiAgICAgICAgICAgICAgICAgICAgJyBcIicgKyB2ZXJzaW9uICsgJ1wiLCB0aGUgaWZyYW1lOicgK1xuICAgICAgICAgICAgICAgICAgICAnIFwiJyArIFNvY2tKUy52ZXJzaW9uICsgJ1wiLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1cmxVdGlscy5pc09yaWdpbkVxdWFsKHRyYW5zVXJsLCBsb2MuaHJlZikgfHxcbiAgICAgICAgICAgICF1cmxVdGlscy5pc09yaWdpbkVxdWFsKGJhc2VVcmwsIGxvYy5ocmVmKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2FuXFwndCBjb25uZWN0IHRvIGRpZmZlcmVudCBkb21haW4gZnJvbSB3aXRoaW4gYW4gJyArXG4gICAgICAgICAgICAgICAgICAgICdpZnJhbWUuICgnICsgbG9jLmhyZWYgKyAnLCAnICsgdHJhbnNVcmwgKyAnLCAnICsgYmFzZVVybCArICcpJyk7XG4gICAgICAgIH1cbiAgICAgICAgZmFjYWRlID0gbmV3IEZhY2FkZUpTKG5ldyB0cmFuc3BvcnRNYXBbdHJhbnNwb3J0XSh0cmFuc1VybCwgYmFzZVVybCkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICBmYWNhZGUuX3NlbmQoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgaWYgKGZhY2FkZSkge1xuICAgICAgICAgIGZhY2FkZS5fY2xvc2UoKTtcbiAgICAgICAgfVxuICAgICAgICBmYWNhZGUgPSBudWxsO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZXZlbnRVdGlscy5hdHRhY2hFdmVudCgnbWVzc2FnZScsIG9uTWVzc2FnZSk7XG5cbiAgICAvLyBTdGFydFxuICAgIGlmcmFtZVV0aWxzLnBvc3RNZXNzYWdlKCdzJyk7XG4gIH07XG59O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi9mYWNhZGVcIjo3LFwiLi9pbmZvLWlmcmFtZS1yZWNlaXZlclwiOjEwLFwiLi9sb2NhdGlvblwiOjEzLFwiLi91dGlscy9ldmVudFwiOjQ2LFwiLi91dGlscy9pZnJhbWVcIjo0NyxcIi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwianNvbjNcIjo1OH1dLDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIG9iamVjdFV0aWxzID0gcmVxdWlyZSgnLi91dGlscy9vYmplY3QnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1hamF4Jyk7XG59XG5cbmZ1bmN0aW9uIEluZm9BamF4KHVybCwgQWpheE9iamVjdCkge1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgc2VsZiA9IHRoaXM7XG4gIHZhciB0MCA9ICtuZXcgRGF0ZSgpO1xuICB0aGlzLnhvID0gbmV3IEFqYXhPYmplY3QoJ0dFVCcsIHVybCk7XG5cbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICB2YXIgaW5mbywgcnR0O1xuICAgIGlmIChzdGF0dXMgPT09IDIwMCkge1xuICAgICAgcnR0ID0gKCtuZXcgRGF0ZSgpKSAtIHQwO1xuICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpbmZvID0gSlNPTjMucGFyc2UodGV4dCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCB0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoIW9iamVjdFV0aWxzLmlzT2JqZWN0KGluZm8pKSB7XG4gICAgICAgIGluZm8gPSB7fTtcbiAgICAgIH1cbiAgICB9XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgIHNlbGYucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhJbmZvQWpheCwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb0FqYXgucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMueG8uY2xvc2UoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb0FqYXg7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuL3V0aWxzL29iamVjdFwiOjQ5LFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDEwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIFhIUkxvY2FsT2JqZWN0ID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgSW5mb0FqYXggPSByZXF1aXJlKCcuL2luZm8tYWpheCcpXG4gIDtcblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVySWZyYW1lKHRyYW5zVXJsKSB7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdGhpcy5pciA9IG5ldyBJbmZvQWpheCh0cmFuc1VybCwgWEhSTG9jYWxPYmplY3QpO1xuICB0aGlzLmlyLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIHNlbGYuaXIgPSBudWxsO1xuICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIEpTT04zLnN0cmluZ2lmeShbaW5mbywgcnR0XSkpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoSW5mb1JlY2VpdmVySWZyYW1lLCBFdmVudEVtaXR0ZXIpO1xuXG5JbmZvUmVjZWl2ZXJJZnJhbWUudHJhbnNwb3J0TmFtZSA9ICdpZnJhbWUtaW5mby1yZWNlaXZlcic7XG5cbkluZm9SZWNlaXZlcklmcmFtZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaXIpIHtcbiAgICB0aGlzLmlyLmNsb3NlKCk7XG4gICAgdGhpcy5pciA9IG51bGw7XG4gIH1cbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gSW5mb1JlY2VpdmVySWZyYW1lO1xuXG59LHtcIi4vaW5mby1hamF4XCI6OSxcIi4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWxcIjozNyxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDExOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSlNPTjMgPSByZXF1aXJlKCdqc29uMycpXG4gICwgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL2V2ZW50JylcbiAgLCBJZnJhbWVUcmFuc3BvcnQgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9pZnJhbWUnKVxuICAsIEluZm9SZWNlaXZlcklmcmFtZSA9IHJlcXVpcmUoJy4vaW5mby1pZnJhbWUtcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6aW5mby1pZnJhbWUnKTtcbn1cblxuZnVuY3Rpb24gSW5mb0lmcmFtZShiYXNlVXJsLCB1cmwpIHtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgaWZyID0gc2VsZi5pZnIgPSBuZXcgSWZyYW1lVHJhbnNwb3J0KEluZm9SZWNlaXZlcklmcmFtZS50cmFuc3BvcnROYW1lLCB1cmwsIGJhc2VVcmwpO1xuXG4gICAgaWZyLm9uY2UoJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICAgIGlmIChtc2cpIHtcbiAgICAgICAgdmFyIGQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgZCA9IEpTT04zLnBhcnNlKG1zZyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZygnYmFkIGpzb24nLCBtc2cpO1xuICAgICAgICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gICAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmZvID0gZFswXSwgcnR0ID0gZFsxXTtcbiAgICAgICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgICAgfVxuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuXG4gICAgaWZyLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcpO1xuICAgICAgc2VsZi5jbG9zZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIFRPRE8gdGhpcyBzZWVtcyB0aGUgc2FtZSBhcyB0aGUgJ25lZWRCb2R5JyBmcm9tIHRyYW5zcG9ydHNcbiAgaWYgKCFnbG9iYWwuZG9jdW1lbnQuYm9keSkge1xuICAgIHV0aWxzLmF0dGFjaEV2ZW50KCdsb2FkJywgZ28pO1xuICB9IGVsc2Uge1xuICAgIGdvKCk7XG4gIH1cbn1cblxuaW5oZXJpdHMoSW5mb0lmcmFtZSwgRXZlbnRFbWl0dGVyKTtcblxuSW5mb0lmcmFtZS5lbmFibGVkID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBJZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCgpO1xufTtcblxuSW5mb0lmcmFtZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgaWYgKHRoaXMuaWZyKSB7XG4gICAgdGhpcy5pZnIuY2xvc2UoKTtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICB0aGlzLmlmciA9IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9JZnJhbWU7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vaW5mby1pZnJhbWUtcmVjZWl2ZXJcIjoxMCxcIi4vdHJhbnNwb3J0L2lmcmFtZVwiOjIyLFwiLi91dGlscy9ldmVudFwiOjQ2LFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3LFwianNvbjNcIjo1OH1dLDEyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvdXJsJylcbiAgLCBYRFIgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGRyJylcbiAgLCBYSFJDb3JzID0gcmVxdWlyZSgnLi90cmFuc3BvcnQvc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbCA9IHJlcXVpcmUoJy4vdHJhbnNwb3J0L3NlbmRlci94aHItbG9jYWwnKVxuICAsIFhIUkZha2UgPSByZXF1aXJlKCcuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWZha2UnKVxuICAsIEluZm9JZnJhbWUgPSByZXF1aXJlKCcuL2luZm8taWZyYW1lJylcbiAgLCBJbmZvQWpheCA9IHJlcXVpcmUoJy4vaW5mby1hamF4JylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OmluZm8tcmVjZWl2ZXInKTtcbn1cblxuZnVuY3Rpb24gSW5mb1JlY2VpdmVyKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgZGVidWcoYmFzZVVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBzZWxmLmRvWGhyKGJhc2VVcmwsIHVybEluZm8pO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoSW5mb1JlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG4vLyBUT0RPIHRoaXMgaXMgY3VycmVudGx5IGlnbm9yaW5nIHRoZSBsaXN0IG9mIGF2YWlsYWJsZSB0cmFuc3BvcnRzIGFuZCB0aGUgd2hpdGVsaXN0XG5cbkluZm9SZWNlaXZlci5fZ2V0UmVjZWl2ZXIgPSBmdW5jdGlvbihiYXNlVXJsLCB1cmwsIHVybEluZm8pIHtcbiAgLy8gZGV0ZXJtaW5lIG1ldGhvZCBvZiBDT1JTIHN1cHBvcnQgKGlmIG5lZWRlZClcbiAgaWYgKHVybEluZm8uc2FtZU9yaWdpbikge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJMb2NhbCk7XG4gIH1cbiAgaWYgKFhIUkNvcnMuZW5hYmxlZCkge1xuICAgIHJldHVybiBuZXcgSW5mb0FqYXgodXJsLCBYSFJDb3JzKTtcbiAgfVxuICBpZiAoWERSLmVuYWJsZWQgJiYgdXJsSW5mby5zYW1lU2NoZW1lKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhEUik7XG4gIH1cbiAgaWYgKEluZm9JZnJhbWUuZW5hYmxlZCgpKSB7XG4gICAgcmV0dXJuIG5ldyBJbmZvSWZyYW1lKGJhc2VVcmwsIHVybCk7XG4gIH1cbiAgcmV0dXJuIG5ldyBJbmZvQWpheCh1cmwsIFhIUkZha2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnByb3RvdHlwZS5kb1hociA9IGZ1bmN0aW9uKGJhc2VVcmwsIHVybEluZm8pIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCB1cmwgPSB1cmxVdGlscy5hZGRQYXRoKGJhc2VVcmwsICcvaW5mbycpXG4gICAgO1xuICBkZWJ1ZygnZG9YaHInLCB1cmwpO1xuXG4gIHRoaXMueG8gPSBJbmZvUmVjZWl2ZXIuX2dldFJlY2VpdmVyKGJhc2VVcmwsIHVybCwgdXJsSW5mbyk7XG5cbiAgdGhpcy50aW1lb3V0UmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJyk7XG4gIH0sIEluZm9SZWNlaXZlci50aW1lb3V0KTtcblxuICB0aGlzLnhvLm9uY2UoJ2ZpbmlzaCcsIGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICAgIGRlYnVnKCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gICAgc2VsZi5lbWl0KCdmaW5pc2gnLCBpbmZvLCBydHQpO1xuICB9KTtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbih3YXNDbGVhbikge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dFJlZik7XG4gIHRoaXMudGltZW91dFJlZiA9IG51bGw7XG4gIGlmICghd2FzQ2xlYW4gJiYgdGhpcy54bykge1xuICAgIHRoaXMueG8uY2xvc2UoKTtcbiAgfVxuICB0aGlzLnhvID0gbnVsbDtcbn07XG5cbkluZm9SZWNlaXZlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Nsb3NlJyk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHRoaXMuX2NsZWFudXAoZmFsc2UpO1xufTtcblxuSW5mb1JlY2VpdmVyLnRpbWVvdXQgPSA4MDAwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEluZm9SZWNlaXZlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4vaW5mby1hamF4XCI6OSxcIi4vaW5mby1pZnJhbWVcIjoxMSxcIi4vdHJhbnNwb3J0L3NlbmRlci94ZHJcIjozNCxcIi4vdHJhbnNwb3J0L3NlbmRlci94aHItY29yc1wiOjM1LFwiLi90cmFuc3BvcnQvc2VuZGVyL3hoci1mYWtlXCI6MzYsXCIuL3RyYW5zcG9ydC9zZW5kZXIveGhyLWxvY2FsXCI6MzcsXCIuL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5sb2NhdGlvbiB8fCB7XG4gIG9yaWdpbjogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAnXG4sIHByb3RvY29sOiAnaHR0cCdcbiwgaG9zdDogJ2xvY2FsaG9zdCdcbiwgcG9ydDogODBcbiwgaHJlZjogJ2h0dHA6Ly9sb2NhbGhvc3QvJ1xuLCBoYXNoOiAnJ1xufTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDE0OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2VzcyxnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5yZXF1aXJlKCcuL3NoaW1zJyk7XG5cbnZhciBVUkwgPSByZXF1aXJlKCd1cmwtcGFyc2UnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4vdXRpbHMvcmFuZG9tJylcbiAgLCBlc2NhcGUgPSByZXF1aXJlKCcuL3V0aWxzL2VzY2FwZScpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzL3VybCcpXG4gICwgZXZlbnRVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvZXZlbnQnKVxuICAsIHRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vdXRpbHMvdHJhbnNwb3J0JylcbiAgLCBvYmplY3RVdGlscyA9IHJlcXVpcmUoJy4vdXRpbHMvb2JqZWN0JylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi91dGlscy9icm93c2VyJylcbiAgLCBsb2cgPSByZXF1aXJlKCcuL3V0aWxzL2xvZycpXG4gICwgRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2V2ZW50JylcbiAgLCBFdmVudFRhcmdldCA9IHJlcXVpcmUoJy4vZXZlbnQvZXZlbnR0YXJnZXQnKVxuICAsIGxvYyA9IHJlcXVpcmUoJy4vbG9jYXRpb24nKVxuICAsIENsb3NlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L2Nsb3NlJylcbiAgLCBUcmFuc3BvcnRNZXNzYWdlRXZlbnQgPSByZXF1aXJlKCcuL2V2ZW50L3RyYW5zLW1lc3NhZ2UnKVxuICAsIEluZm9SZWNlaXZlciA9IHJlcXVpcmUoJy4vaW5mby1yZWNlaXZlcicpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDptYWluJyk7XG59XG5cbnZhciB0cmFuc3BvcnRzO1xuXG4vLyBmb2xsb3cgY29uc3RydWN0b3Igc3RlcHMgZGVmaW5lZCBhdCBodHRwOi8vZGV2LnczLm9yZy9odG1sNS93ZWJzb2NrZXRzLyN0aGUtd2Vic29ja2V0LWludGVyZmFjZVxuZnVuY3Rpb24gU29ja0pTKHVybCwgcHJvdG9jb2xzLCBvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTb2NrSlMpKSB7XG4gICAgcmV0dXJuIG5ldyBTb2NrSlModXJsLCBwcm90b2NvbHMsIG9wdGlvbnMpO1xuICB9XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoIDwgMSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGYWlsZWQgdG8gY29uc3RydWN0ICdTb2NrSlM6IDEgYXJndW1lbnQgcmVxdWlyZWQsIGJ1dCBvbmx5IDAgcHJlc2VudFwiKTtcbiAgfVxuICBFdmVudFRhcmdldC5jYWxsKHRoaXMpO1xuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DT05ORUNUSU5HO1xuICB0aGlzLmV4dGVuc2lvbnMgPSAnJztcbiAgdGhpcy5wcm90b2NvbCA9ICcnO1xuXG4gIC8vIG5vbi1zdGFuZGFyZCBleHRlbnNpb25cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGlmIChvcHRpb25zLnByb3RvY29sc193aGl0ZWxpc3QpIHtcbiAgICBsb2cud2FybihcIidwcm90b2NvbHNfd2hpdGVsaXN0JyBpcyBERVBSRUNBVEVELiBVc2UgJ3RyYW5zcG9ydHMnIGluc3RlYWQuXCIpO1xuICB9XG4gIHRoaXMuX3RyYW5zcG9ydHNXaGl0ZWxpc3QgPSBvcHRpb25zLnRyYW5zcG9ydHM7XG4gIHRoaXMuX3RyYW5zcG9ydE9wdGlvbnMgPSBvcHRpb25zLnRyYW5zcG9ydE9wdGlvbnMgfHwge307XG5cbiAgdmFyIHNlc3Npb25JZCA9IG9wdGlvbnMuc2Vzc2lvbklkIHx8IDg7XG4gIGlmICh0eXBlb2Ygc2Vzc2lvbklkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5fZ2VuZXJhdGVTZXNzaW9uSWQgPSBzZXNzaW9uSWQ7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNlc3Npb25JZCA9PT0gJ251bWJlcicpIHtcbiAgICB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJhbmRvbS5zdHJpbmcoc2Vzc2lvbklkKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0lmIHNlc3Npb25JZCBpcyB1c2VkIGluIHRoZSBvcHRpb25zLCBpdCBuZWVkcyB0byBiZSBhIG51bWJlciBvciBhIGZ1bmN0aW9uLicpO1xuICB9XG5cbiAgdGhpcy5fc2VydmVyID0gb3B0aW9ucy5zZXJ2ZXIgfHwgcmFuZG9tLm51bWJlclN0cmluZygxMDAwKTtcblxuICAvLyBTdGVwIDEgb2YgV1Mgc3BlYyAtIHBhcnNlIGFuZCB2YWxpZGF0ZSB0aGUgdXJsLiBJc3N1ZSAjOFxuICB2YXIgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICBpZiAoIXBhcnNlZFVybC5ob3N0IHx8ICFwYXJzZWRVcmwucHJvdG9jb2wpIHtcbiAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgVVJMICdcIiArIHVybCArIFwiJyBpcyBpbnZhbGlkXCIpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5oYXNoKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdUaGUgVVJMIG11c3Qgbm90IGNvbnRhaW4gYSBmcmFnbWVudCcpO1xuICB9IGVsc2UgaWYgKHBhcnNlZFVybC5wcm90b2NvbCAhPT0gJ2h0dHA6JyAmJiBwYXJzZWRVcmwucHJvdG9jb2wgIT09ICdodHRwczonKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIFVSTCdzIHNjaGVtZSBtdXN0IGJlIGVpdGhlciAnaHR0cDonIG9yICdodHRwczonLiAnXCIgKyBwYXJzZWRVcmwucHJvdG9jb2wgKyBcIicgaXMgbm90IGFsbG93ZWQuXCIpO1xuICB9XG5cbiAgdmFyIHNlY3VyZSA9IHBhcnNlZFVybC5wcm90b2NvbCA9PT0gJ2h0dHBzOic7XG4gIC8vIFN0ZXAgMiAtIGRvbid0IGFsbG93IHNlY3VyZSBvcmlnaW4gd2l0aCBhbiBpbnNlY3VyZSBwcm90b2NvbFxuICBpZiAobG9jLnByb3RvY29sID09PSAnaHR0cHMnICYmICFzZWN1cmUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlY3VyaXR5RXJyb3I6IEFuIGluc2VjdXJlIFNvY2tKUyBjb25uZWN0aW9uIG1heSBub3QgYmUgaW5pdGlhdGVkIGZyb20gYSBwYWdlIGxvYWRlZCBvdmVyIEhUVFBTJyk7XG4gIH1cblxuICAvLyBTdGVwIDMgLSBjaGVjayBwb3J0IGFjY2VzcyAtIG5vIG5lZWQgaGVyZVxuICAvLyBTdGVwIDQgLSBwYXJzZSBwcm90b2NvbHMgYXJndW1lbnRcbiAgaWYgKCFwcm90b2NvbHMpIHtcbiAgICBwcm90b2NvbHMgPSBbXTtcbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShwcm90b2NvbHMpKSB7XG4gICAgcHJvdG9jb2xzID0gW3Byb3RvY29sc107XG4gIH1cblxuICAvLyBTdGVwIDUgLSBjaGVjayBwcm90b2NvbHMgYXJndW1lbnRcbiAgdmFyIHNvcnRlZFByb3RvY29scyA9IHByb3RvY29scy5zb3J0KCk7XG4gIHNvcnRlZFByb3RvY29scy5mb3JFYWNoKGZ1bmN0aW9uKHByb3RvLCBpKSB7XG4gICAgaWYgKCFwcm90bykge1xuICAgICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHByb3RvY29scyBlbnRyeSAnXCIgKyBwcm90byArIFwiJyBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG4gICAgaWYgKGkgPCAoc29ydGVkUHJvdG9jb2xzLmxlbmd0aCAtIDEpICYmIHByb3RvID09PSBzb3J0ZWRQcm90b2NvbHNbaSArIDFdKSB7XG4gICAgICB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgcHJvdG9jb2xzIGVudHJ5ICdcIiArIHByb3RvICsgXCInIGlzIGR1cGxpY2F0ZWQuXCIpO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gU3RlcCA2IC0gY29udmVydCBvcmlnaW5cbiAgdmFyIG8gPSB1cmxVdGlscy5nZXRPcmlnaW4obG9jLmhyZWYpO1xuICB0aGlzLl9vcmlnaW4gPSBvID8gby50b0xvd2VyQ2FzZSgpIDogbnVsbDtcblxuICAvLyByZW1vdmUgdGhlIHRyYWlsaW5nIHNsYXNoXG4gIHBhcnNlZFVybC5zZXQoJ3BhdGhuYW1lJywgcGFyc2VkVXJsLnBhdGhuYW1lLnJlcGxhY2UoL1xcLyskLywgJycpKTtcblxuICAvLyBzdG9yZSB0aGUgc2FuaXRpemVkIHVybFxuICB0aGlzLnVybCA9IHBhcnNlZFVybC5ocmVmO1xuICBkZWJ1ZygndXNpbmcgdXJsJywgdGhpcy51cmwpO1xuXG4gIC8vIFN0ZXAgNyAtIHN0YXJ0IGNvbm5lY3Rpb24gaW4gYmFja2dyb3VuZFxuICAvLyBvYnRhaW4gc2VydmVyIGluZm9cbiAgLy8gaHR0cDovL3NvY2tqcy5naXRodWIuaW8vc29ja2pzLXByb3RvY29sL3NvY2tqcy1wcm90b2NvbC0wLjMuMy5odG1sI3NlY3Rpb24tMjZcbiAgdGhpcy5fdXJsSW5mbyA9IHtcbiAgICBudWxsT3JpZ2luOiAhYnJvd3Nlci5oYXNEb21haW4oKVxuICAsIHNhbWVPcmlnaW46IHVybFV0aWxzLmlzT3JpZ2luRXF1YWwodGhpcy51cmwsIGxvYy5ocmVmKVxuICAsIHNhbWVTY2hlbWU6IHVybFV0aWxzLmlzU2NoZW1lRXF1YWwodGhpcy51cmwsIGxvYy5ocmVmKVxuICB9O1xuXG4gIHRoaXMuX2lyID0gbmV3IEluZm9SZWNlaXZlcih0aGlzLnVybCwgdGhpcy5fdXJsSW5mbyk7XG4gIHRoaXMuX2lyLm9uY2UoJ2ZpbmlzaCcsIHRoaXMuX3JlY2VpdmVJbmZvLmJpbmQodGhpcykpO1xufVxuXG5pbmhlcml0cyhTb2NrSlMsIEV2ZW50VGFyZ2V0KTtcblxuZnVuY3Rpb24gdXNlclNldENvZGUoY29kZSkge1xuICByZXR1cm4gY29kZSA9PT0gMTAwMCB8fCAoY29kZSA+PSAzMDAwICYmIGNvZGUgPD0gNDk5OSk7XG59XG5cblNvY2tKUy5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbihjb2RlLCByZWFzb24pIHtcbiAgLy8gU3RlcCAxXG4gIGlmIChjb2RlICYmICF1c2VyU2V0Q29kZShjb2RlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZEFjY2Vzc0Vycm9yOiBJbnZhbGlkIGNvZGUnKTtcbiAgfVxuICAvLyBTdGVwIDIuNCBzdGF0ZXMgdGhlIG1heCBpcyAxMjMgYnl0ZXMsIGJ1dCB3ZSBhcmUganVzdCBjaGVja2luZyBsZW5ndGhcbiAgaWYgKHJlYXNvbiAmJiByZWFzb24ubGVuZ3RoID4gMTIzKSB7XG4gICAgdGhyb3cgbmV3IFN5bnRheEVycm9yKCdyZWFzb24gYXJndW1lbnQgaGFzIGFuIGludmFsaWQgbGVuZ3RoJyk7XG4gIH1cblxuICAvLyBTdGVwIDMuMVxuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ0xPU0lORyB8fCB0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TRUQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBUT0RPIGxvb2sgYXQgZG9jcyB0byBkZXRlcm1pbmUgaG93IHRvIHNldCB0aGlzXG4gIHZhciB3YXNDbGVhbiA9IHRydWU7XG4gIHRoaXMuX2Nsb3NlKGNvZGUgfHwgMTAwMCwgcmVhc29uIHx8ICdOb3JtYWwgY2xvc3VyZScsIHdhc0NsZWFuKTtcbn07XG5cblNvY2tKUy5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgLy8gIzEzIC0gY29udmVydCBhbnl0aGluZyBub24tc3RyaW5nIHRvIHN0cmluZ1xuICAvLyBUT0RPIHRoaXMgY3VycmVudGx5IHR1cm5zIG9iamVjdHMgaW50byBbb2JqZWN0IE9iamVjdF1cbiAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gIH1cbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gU29ja0pTLkNPTk5FQ1RJTkcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yOiBUaGUgY29ubmVjdGlvbiBoYXMgbm90IGJlZW4gZXN0YWJsaXNoZWQgeWV0Jyk7XG4gIH1cbiAgaWYgKHRoaXMucmVhZHlTdGF0ZSAhPT0gU29ja0pTLk9QRU4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdGhpcy5fdHJhbnNwb3J0LnNlbmQoZXNjYXBlLnF1b3RlKGRhdGEpKTtcbn07XG5cblNvY2tKUy52ZXJzaW9uID0gcmVxdWlyZSgnLi92ZXJzaW9uJyk7XG5cblNvY2tKUy5DT05ORUNUSU5HID0gMDtcblNvY2tKUy5PUEVOID0gMTtcblNvY2tKUy5DTE9TSU5HID0gMjtcblNvY2tKUy5DTE9TRUQgPSAzO1xuXG5Tb2NrSlMucHJvdG90eXBlLl9yZWNlaXZlSW5mbyA9IGZ1bmN0aW9uKGluZm8sIHJ0dCkge1xuICBkZWJ1ZygnX3JlY2VpdmVJbmZvJywgcnR0KTtcbiAgdGhpcy5faXIgPSBudWxsO1xuICBpZiAoIWluZm8pIHtcbiAgICB0aGlzLl9jbG9zZSgxMDAyLCAnQ2Fubm90IGNvbm5lY3QgdG8gc2VydmVyJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gZXN0YWJsaXNoIGEgcm91bmQtdHJpcCB0aW1lb3V0IChSVE8pIGJhc2VkIG9uIHRoZVxuICAvLyByb3VuZC10cmlwIHRpbWUgKFJUVClcbiAgdGhpcy5fcnRvID0gdGhpcy5jb3VudFJUTyhydHQpO1xuICAvLyBhbGxvdyBzZXJ2ZXIgdG8gb3ZlcnJpZGUgdXJsIHVzZWQgZm9yIHRoZSBhY3R1YWwgdHJhbnNwb3J0XG4gIHRoaXMuX3RyYW5zVXJsID0gaW5mby5iYXNlX3VybCA/IGluZm8uYmFzZV91cmwgOiB0aGlzLnVybDtcbiAgaW5mbyA9IG9iamVjdFV0aWxzLmV4dGVuZChpbmZvLCB0aGlzLl91cmxJbmZvKTtcbiAgZGVidWcoJ2luZm8nLCBpbmZvKTtcbiAgLy8gZGV0ZXJtaW5lIGxpc3Qgb2YgZGVzaXJlZCBhbmQgc3VwcG9ydGVkIHRyYW5zcG9ydHNcbiAgdmFyIGVuYWJsZWRUcmFuc3BvcnRzID0gdHJhbnNwb3J0cy5maWx0ZXJUb0VuYWJsZWQodGhpcy5fdHJhbnNwb3J0c1doaXRlbGlzdCwgaW5mbyk7XG4gIHRoaXMuX3RyYW5zcG9ydHMgPSBlbmFibGVkVHJhbnNwb3J0cy5tYWluO1xuICBkZWJ1Zyh0aGlzLl90cmFuc3BvcnRzLmxlbmd0aCArICcgZW5hYmxlZCB0cmFuc3BvcnRzJyk7XG5cbiAgdGhpcy5fY29ubmVjdCgpO1xufTtcblxuU29ja0pTLnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICBmb3IgKHZhciBUcmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnRzLnNoaWZ0KCk7IFRyYW5zcG9ydDsgVHJhbnNwb3J0ID0gdGhpcy5fdHJhbnNwb3J0cy5zaGlmdCgpKSB7XG4gICAgZGVidWcoJ2F0dGVtcHQnLCBUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSk7XG4gICAgaWYgKFRyYW5zcG9ydC5uZWVkQm9keSkge1xuICAgICAgaWYgKCFnbG9iYWwuZG9jdW1lbnQuYm9keSB8fFxuICAgICAgICAgICh0eXBlb2YgZ2xvYmFsLmRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICBnbG9iYWwuZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gJ2NvbXBsZXRlJyAmJlxuICAgICAgICAgICAgZ2xvYmFsLmRvY3VtZW50LnJlYWR5U3RhdGUgIT09ICdpbnRlcmFjdGl2ZScpKSB7XG4gICAgICAgIGRlYnVnKCd3YWl0aW5nIGZvciBib2R5Jyk7XG4gICAgICAgIHRoaXMuX3RyYW5zcG9ydHMudW5zaGlmdChUcmFuc3BvcnQpO1xuICAgICAgICBldmVudFV0aWxzLmF0dGFjaEV2ZW50KCdsb2FkJywgdGhpcy5fY29ubmVjdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNhbGN1bGF0ZSB0aW1lb3V0IGJhc2VkIG9uIFJUTyBhbmQgcm91bmQgdHJpcHMuIERlZmF1bHQgdG8gNXNcbiAgICB2YXIgdGltZW91dE1zID0gKHRoaXMuX3J0byAqIFRyYW5zcG9ydC5yb3VuZFRyaXBzKSB8fCA1MDAwO1xuICAgIHRoaXMuX3RyYW5zcG9ydFRpbWVvdXRJZCA9IHNldFRpbWVvdXQodGhpcy5fdHJhbnNwb3J0VGltZW91dC5iaW5kKHRoaXMpLCB0aW1lb3V0TXMpO1xuICAgIGRlYnVnKCd1c2luZyB0aW1lb3V0JywgdGltZW91dE1zKTtcblxuICAgIHZhciB0cmFuc3BvcnRVcmwgPSB1cmxVdGlscy5hZGRQYXRoKHRoaXMuX3RyYW5zVXJsLCAnLycgKyB0aGlzLl9zZXJ2ZXIgKyAnLycgKyB0aGlzLl9nZW5lcmF0ZVNlc3Npb25JZCgpKTtcbiAgICB2YXIgb3B0aW9ucyA9IHRoaXMuX3RyYW5zcG9ydE9wdGlvbnNbVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWVdO1xuICAgIGRlYnVnKCd0cmFuc3BvcnQgdXJsJywgdHJhbnNwb3J0VXJsKTtcbiAgICB2YXIgdHJhbnNwb3J0T2JqID0gbmV3IFRyYW5zcG9ydCh0cmFuc3BvcnRVcmwsIHRoaXMuX3RyYW5zVXJsLCBvcHRpb25zKTtcbiAgICB0cmFuc3BvcnRPYmoub24oJ21lc3NhZ2UnLCB0aGlzLl90cmFuc3BvcnRNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgIHRyYW5zcG9ydE9iai5vbmNlKCdjbG9zZScsIHRoaXMuX3RyYW5zcG9ydENsb3NlLmJpbmQodGhpcykpO1xuICAgIHRyYW5zcG9ydE9iai50cmFuc3BvcnROYW1lID0gVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWU7XG4gICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0T2JqO1xuXG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMuX2Nsb3NlKDIwMDAsICdBbGwgdHJhbnNwb3J0cyBmYWlsZWQnLCBmYWxzZSk7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLl90cmFuc3BvcnRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfdHJhbnNwb3J0VGltZW91dCcpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIHRoaXMuX3RyYW5zcG9ydENsb3NlKDIwMDcsICdUcmFuc3BvcnQgdGltZWQgb3V0Jyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydE1lc3NhZ2UgPSBmdW5jdGlvbihtc2cpIHtcbiAgZGVidWcoJ190cmFuc3BvcnRNZXNzYWdlJywgbXNnKTtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gICAgLCB0eXBlID0gbXNnLnNsaWNlKDAsIDEpXG4gICAgLCBjb250ZW50ID0gbXNnLnNsaWNlKDEpXG4gICAgLCBwYXlsb2FkXG4gICAgO1xuXG4gIC8vIGZpcnN0IGNoZWNrIGZvciBtZXNzYWdlcyB0aGF0IGRvbid0IG5lZWQgYSBwYXlsb2FkXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ28nOlxuICAgICAgdGhpcy5fb3BlbigpO1xuICAgICAgcmV0dXJuO1xuICAgIGNhc2UgJ2gnOlxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaGVhcnRiZWF0JykpO1xuICAgICAgZGVidWcoJ2hlYXJ0YmVhdCcsIHRoaXMudHJhbnNwb3J0KTtcbiAgICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjb250ZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIHBheWxvYWQgPSBKU09OMy5wYXJzZShjb250ZW50KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBkZWJ1ZygnYmFkIGpzb24nLCBjb250ZW50KTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHBheWxvYWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgZGVidWcoJ2VtcHR5IHBheWxvYWQnLCBjb250ZW50KTtcbiAgICByZXR1cm47XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdhJzpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpKSB7XG4gICAgICAgIHBheWxvYWQuZm9yRWFjaChmdW5jdGlvbihwKSB7XG4gICAgICAgICAgZGVidWcoJ21lc3NhZ2UnLCBzZWxmLnRyYW5zcG9ydCwgcCk7XG4gICAgICAgICAgc2VsZi5kaXNwYXRjaEV2ZW50KG5ldyBUcmFuc3BvcnRNZXNzYWdlRXZlbnQocCkpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ20nOlxuICAgICAgZGVidWcoJ21lc3NhZ2UnLCB0aGlzLnRyYW5zcG9ydCwgcGF5bG9hZCk7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IFRyYW5zcG9ydE1lc3NhZ2VFdmVudChwYXlsb2FkKSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlICdjJzpcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpICYmIHBheWxvYWQubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHRoaXMuX2Nsb3NlKHBheWxvYWRbMF0sIHBheWxvYWRbMV0sIHRydWUpO1xuICAgICAgfVxuICAgICAgYnJlYWs7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX3RyYW5zcG9ydENsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gIGRlYnVnKCdfdHJhbnNwb3J0Q2xvc2UnLCB0aGlzLnRyYW5zcG9ydCwgY29kZSwgcmVhc29uKTtcbiAgaWYgKHRoaXMuX3RyYW5zcG9ydCkge1xuICAgIHRoaXMuX3RyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICghdXNlclNldENvZGUoY29kZSkgJiYgY29kZSAhPT0gMjAwMCAmJiB0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DT05ORUNUSU5HKSB7XG4gICAgdGhpcy5fY29ubmVjdCgpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHRoaXMuX2Nsb3NlKGNvZGUsIHJlYXNvbik7XG59O1xuXG5Tb2NrSlMucHJvdG90eXBlLl9vcGVuID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfb3BlbicsIHRoaXMuX3RyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0aGlzLnJlYWR5U3RhdGUpO1xuICBpZiAodGhpcy5yZWFkeVN0YXRlID09PSBTb2NrSlMuQ09OTkVDVElORykge1xuICAgIGlmICh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90cmFuc3BvcnRUaW1lb3V0SWQpO1xuICAgICAgdGhpcy5fdHJhbnNwb3J0VGltZW91dElkID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gU29ja0pTLk9QRU47XG4gICAgdGhpcy50cmFuc3BvcnQgPSB0aGlzLl90cmFuc3BvcnQudHJhbnNwb3J0TmFtZTtcbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdvcGVuJykpO1xuICAgIGRlYnVnKCdjb25uZWN0ZWQnLCB0aGlzLnRyYW5zcG9ydCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIHNlcnZlciBtaWdodCBoYXZlIGJlZW4gcmVzdGFydGVkLCBhbmQgbG9zdCB0cmFjayBvZiBvdXJcbiAgICAvLyBjb25uZWN0aW9uLlxuICAgIHRoaXMuX2Nsb3NlKDEwMDYsICdTZXJ2ZXIgbG9zdCBzZXNzaW9uJyk7XG4gIH1cbn07XG5cblNvY2tKUy5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24oY29kZSwgcmVhc29uLCB3YXNDbGVhbikge1xuICBkZWJ1ZygnX2Nsb3NlJywgdGhpcy50cmFuc3BvcnQsIGNvZGUsIHJlYXNvbiwgd2FzQ2xlYW4sIHRoaXMucmVhZHlTdGF0ZSk7XG4gIHZhciBmb3JjZUZhaWwgPSBmYWxzZTtcblxuICBpZiAodGhpcy5faXIpIHtcbiAgICBmb3JjZUZhaWwgPSB0cnVlO1xuICAgIHRoaXMuX2lyLmNsb3NlKCk7XG4gICAgdGhpcy5faXIgPSBudWxsO1xuICB9XG4gIGlmICh0aGlzLl90cmFuc3BvcnQpIHtcbiAgICB0aGlzLl90cmFuc3BvcnQuY2xvc2UoKTtcbiAgICB0aGlzLl90cmFuc3BvcnQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNwb3J0ID0gbnVsbDtcbiAgfVxuXG4gIGlmICh0aGlzLnJlYWR5U3RhdGUgPT09IFNvY2tKUy5DTE9TRUQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWRTdGF0ZUVycm9yOiBTb2NrSlMgaGFzIGFscmVhZHkgYmVlbiBjbG9zZWQnKTtcbiAgfVxuXG4gIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TSU5HO1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHRoaXMucmVhZHlTdGF0ZSA9IFNvY2tKUy5DTE9TRUQ7XG5cbiAgICBpZiAoZm9yY2VGYWlsKSB7XG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQobmV3IEV2ZW50KCdlcnJvcicpKTtcbiAgICB9XG5cbiAgICB2YXIgZSA9IG5ldyBDbG9zZUV2ZW50KCdjbG9zZScpO1xuICAgIGUud2FzQ2xlYW4gPSB3YXNDbGVhbiB8fCBmYWxzZTtcbiAgICBlLmNvZGUgPSBjb2RlIHx8IDEwMDA7XG4gICAgZS5yZWFzb24gPSByZWFzb247XG5cbiAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZSk7XG4gICAgdGhpcy5vbm1lc3NhZ2UgPSB0aGlzLm9uY2xvc2UgPSB0aGlzLm9uZXJyb3IgPSBudWxsO1xuICAgIGRlYnVnKCdkaXNjb25uZWN0ZWQnKTtcbiAgfS5iaW5kKHRoaXMpLCAwKTtcbn07XG5cbi8vIFNlZTogaHR0cDovL3d3dy5lcmcuYWJkbi5hYy51ay9+Z2Vycml0L2RjY3Avbm90ZXMvY2NpZDIvcnRvX2VzdGltYXRvci9cbi8vIGFuZCBSRkMgMjk4OC5cblNvY2tKUy5wcm90b3R5cGUuY291bnRSVE8gPSBmdW5jdGlvbihydHQpIHtcbiAgLy8gSW4gYSBsb2NhbCBlbnZpcm9ubWVudCwgd2hlbiB1c2luZyBJRTgvOSBhbmQgdGhlIGBqc29ucC1wb2xsaW5nYFxuICAvLyB0cmFuc3BvcnQgdGhlIHRpbWUgbmVlZGVkIHRvIGVzdGFibGlzaCBhIGNvbm5lY3Rpb24gKHRoZSB0aW1lIHRoYXQgcGFzc1xuICAvLyBmcm9tIHRoZSBvcGVuaW5nIG9mIHRoZSB0cmFuc3BvcnQgdG8gdGhlIGNhbGwgb2YgYF9kaXNwYXRjaE9wZW5gKSBpc1xuICAvLyBhcm91bmQgMjAwbXNlYyAodGhlIGxvd2VyIGJvdW5kIHVzZWQgaW4gdGhlIGFydGljbGUgYWJvdmUpIGFuZCB0aGlzXG4gIC8vIGNhdXNlcyBzcHVyaW91cyB0aW1lb3V0cy4gRm9yIHRoaXMgcmVhc29uIHdlIGNhbGN1bGF0ZSBhIHZhbHVlIHNsaWdodGx5XG4gIC8vIGxhcmdlciB0aGFuIHRoYXQgdXNlZCBpbiB0aGUgYXJ0aWNsZS5cbiAgaWYgKHJ0dCA+IDEwMCkge1xuICAgIHJldHVybiA0ICogcnR0OyAvLyBydG8gPiA0MDBtc2VjXG4gIH1cbiAgcmV0dXJuIDMwMCArIHJ0dDsgLy8gMzAwbXNlYyA8IHJ0byA8PSA0MDBtc2VjXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGF2YWlsYWJsZVRyYW5zcG9ydHMpIHtcbiAgdHJhbnNwb3J0cyA9IHRyYW5zcG9ydChhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmVxdWlyZSgnLi9pZnJhbWUtYm9vdHN0cmFwJykoU29ja0pTLCBhdmFpbGFibGVUcmFuc3BvcnRzKTtcbiAgcmV0dXJuIFNvY2tKUztcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vZXZlbnQvY2xvc2VcIjoyLFwiLi9ldmVudC9ldmVudFwiOjQsXCIuL2V2ZW50L2V2ZW50dGFyZ2V0XCI6NSxcIi4vZXZlbnQvdHJhbnMtbWVzc2FnZVwiOjYsXCIuL2lmcmFtZS1ib290c3RyYXBcIjo4LFwiLi9pbmZvLXJlY2VpdmVyXCI6MTIsXCIuL2xvY2F0aW9uXCI6MTMsXCIuL3NoaW1zXCI6MTUsXCIuL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4vdXRpbHMvZXNjYXBlXCI6NDUsXCIuL3V0aWxzL2V2ZW50XCI6NDYsXCIuL3V0aWxzL2xvZ1wiOjQ4LFwiLi91dGlscy9vYmplY3RcIjo0OSxcIi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuL3V0aWxzL3RyYW5zcG9ydFwiOjUxLFwiLi91dGlscy91cmxcIjo1MixcIi4vdmVyc2lvblwiOjUzLFwiZGVidWdcIjo1NSxcImluaGVyaXRzXCI6NTcsXCJqc29uM1wiOjU4LFwidXJsLXBhcnNlXCI6NjF9XSwxNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKiBlc2xpbnQtZGlzYWJsZSAqL1xuLyoganNjczogZGlzYWJsZSAqL1xuJ3VzZSBzdHJpY3QnO1xuXG4vLyBwdWxsZWQgc3BlY2lmaWMgc2hpbXMgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vZXMtc2hpbXMvZXM1LXNoaW1cblxudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xudmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG52YXIgRnVuY3Rpb25Qcm90b3R5cGUgPSBGdW5jdGlvbi5wcm90b3R5cGU7XG52YXIgU3RyaW5nUHJvdG90eXBlID0gU3RyaW5nLnByb3RvdHlwZTtcbnZhciBhcnJheV9zbGljZSA9IEFycmF5UHJvdG90eXBlLnNsaWNlO1xuXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIE9iamVjdFByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG59O1xudmFyIGlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbnZhciBpc1N0cmluZyA9IGZ1bmN0aW9uIGlzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIChmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAneCcsIHt9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkgeyAvKiB0aGlzIGlzIEVTMyAqL1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufSgpKTtcblxuLy8gRGVmaW5lIGNvbmZpZ3VyYWJsZSwgd3JpdGFibGUgYW5kIG5vbi1lbnVtZXJhYmxlIHByb3BzXG4vLyBpZiB0aGV5IGRvbid0IGV4aXN0LlxudmFyIGRlZmluZVByb3BlcnR5O1xuaWYgKHN1cHBvcnRzRGVzY3JpcHRvcnMpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgdmFsdWU6IG1ldGhvZFxuICAgICAgICB9KTtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWUsIG1ldGhvZCwgZm9yY2VBc3NpZ24pIHtcbiAgICAgICAgaWYgKCFmb3JjZUFzc2lnbiAmJiAobmFtZSBpbiBvYmplY3QpKSB7IHJldHVybjsgfVxuICAgICAgICBvYmplY3RbbmFtZV0gPSBtZXRob2Q7XG4gICAgfTtcbn1cbnZhciBkZWZpbmVQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKG9iamVjdCwgbWFwLCBmb3JjZUFzc2lnbikge1xuICAgIGZvciAodmFyIG5hbWUgaW4gbWFwKSB7XG4gICAgICAgIGlmIChPYmplY3RQcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtYXAsIG5hbWUpKSB7XG4gICAgICAgICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBuYW1lLCBtYXBbbmFtZV0sIGZvcmNlQXNzaWduKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciB0b09iamVjdCA9IGZ1bmN0aW9uIChvKSB7XG4gICAgaWYgKG8gPT0gbnVsbCkgeyAvLyB0aGlzIG1hdGNoZXMgYm90aCBudWxsIGFuZCB1bmRlZmluZWRcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbid0IGNvbnZlcnQgXCIgKyBvICsgJyB0byBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdChvKTtcbn07XG5cbi8vXG4vLyBVdGlsXG4vLyA9PT09PT1cbi8vXG5cbi8vIEVTNSA5LjRcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDkuNFxuLy8gaHR0cDovL2pzcGVyZi5jb20vdG8taW50ZWdlclxuXG5mdW5jdGlvbiB0b0ludGVnZXIobnVtKSB7XG4gICAgdmFyIG4gPSArbnVtO1xuICAgIGlmIChuICE9PSBuKSB7IC8vIGlzTmFOXG4gICAgICAgIG4gPSAwO1xuICAgIH0gZWxzZSBpZiAobiAhPT0gMCAmJiBuICE9PSAoMSAvIDApICYmIG4gIT09IC0oMSAvIDApKSB7XG4gICAgICAgIG4gPSAobiA+IDAgfHwgLTEpICogTWF0aC5mbG9vcihNYXRoLmFicyhuKSk7XG4gICAgfVxuICAgIHJldHVybiBuO1xufVxuXG5mdW5jdGlvbiBUb1VpbnQzMih4KSB7XG4gICAgcmV0dXJuIHggPj4+IDA7XG59XG5cbi8vXG4vLyBGdW5jdGlvblxuLy8gPT09PT09PT1cbi8vXG5cbi8vIEVTLTUgMTUuMy40LjVcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjMuNC41XG5cbmZ1bmN0aW9uIEVtcHR5KCkge31cblxuZGVmaW5lUHJvcGVydGllcyhGdW5jdGlvblByb3RvdHlwZSwge1xuICAgIGJpbmQ6IGZ1bmN0aW9uIGJpbmQodGhhdCkgeyAvLyAubGVuZ3RoIGlzIDFcbiAgICAgICAgLy8gMS4gTGV0IFRhcmdldCBiZSB0aGUgdGhpcyB2YWx1ZS5cbiAgICAgICAgdmFyIHRhcmdldCA9IHRoaXM7XG4gICAgICAgIC8vIDIuIElmIElzQ2FsbGFibGUoVGFyZ2V0KSBpcyBmYWxzZSwgdGhyb3cgYSBUeXBlRXJyb3IgZXhjZXB0aW9uLlxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24odGFyZ2V0KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnICsgdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyAzLiBMZXQgQSBiZSBhIG5ldyAocG9zc2libHkgZW1wdHkpIGludGVybmFsIGxpc3Qgb2YgYWxsIG9mIHRoZVxuICAgICAgICAvLyAgIGFyZ3VtZW50IHZhbHVlcyBwcm92aWRlZCBhZnRlciB0aGlzQXJnIChhcmcxLCBhcmcyIGV0YyksIGluIG9yZGVyLlxuICAgICAgICAvLyBYWFggc2xpY2VkQXJncyB3aWxsIHN0YW5kIGluIGZvciBcIkFcIiBpZiB1c2VkXG4gICAgICAgIHZhciBhcmdzID0gYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpOyAvLyBmb3Igbm9ybWFsIGNhbGxcbiAgICAgICAgLy8gNC4gTGV0IEYgYmUgYSBuZXcgbmF0aXZlIEVDTUFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAvLyAxMS4gU2V0IHRoZSBbW1Byb3RvdHlwZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdGhlIHN0YW5kYXJkXG4gICAgICAgIC8vICAgYnVpbHQtaW4gRnVuY3Rpb24gcHJvdG90eXBlIG9iamVjdCBhcyBzcGVjaWZpZWQgaW4gMTUuMy4zLjEuXG4gICAgICAgIC8vIDEyLiBTZXQgdGhlIFtbQ2FsbF1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgYXMgZGVzY3JpYmVkIGluXG4gICAgICAgIC8vICAgMTUuMy40LjUuMS5cbiAgICAgICAgLy8gMTMuIFNldCB0aGUgW1tDb25zdHJ1Y3RdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjIuXG4gICAgICAgIC8vIDE0LiBTZXQgdGhlIFtbSGFzSW5zdGFuY2VdXSBpbnRlcm5hbCBwcm9wZXJ0eSBvZiBGIGFzIGRlc2NyaWJlZCBpblxuICAgICAgICAvLyAgIDE1LjMuNC41LjMuXG4gICAgICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4yIFtbQ29uc3RydWN0XV1cbiAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCBvZiBhIGZ1bmN0aW9uIG9iamVjdCxcbiAgICAgICAgICAgICAgICAvLyBGIHRoYXQgd2FzIGNyZWF0ZWQgdXNpbmcgdGhlIGJpbmQgZnVuY3Rpb24gaXMgY2FsbGVkIHdpdGggYVxuICAgICAgICAgICAgICAgIC8vIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZyBzdGVwcyBhcmUgdGFrZW46XG4gICAgICAgICAgICAgICAgLy8gMS4gTGV0IHRhcmdldCBiZSB0aGUgdmFsdWUgb2YgRidzIFtbVGFyZ2V0RnVuY3Rpb25dXVxuICAgICAgICAgICAgICAgIC8vICAgaW50ZXJuYWwgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gSWYgdGFyZ2V0IGhhcyBubyBbW0NvbnN0cnVjdF1dIGludGVybmFsIG1ldGhvZCwgYVxuICAgICAgICAgICAgICAgIC8vICAgVHlwZUVycm9yIGV4Y2VwdGlvbiBpcyB0aHJvd24uXG4gICAgICAgICAgICAgICAgLy8gMy4gTGV0IGJvdW5kQXJncyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRBcmdzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NvbnN0cnVjdF1dIGludGVybmFsXG4gICAgICAgICAgICAgICAgLy8gICBtZXRob2Qgb2YgdGFyZ2V0IHByb3ZpZGluZyBhcmdzIGFzIHRoZSBhcmd1bWVudHMuXG5cbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChhcnJheV9zbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KHJlc3VsdCkgPT09IHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAxNS4zLjQuNS4xIFtbQ2FsbF1dXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgW1tDYWxsXV0gaW50ZXJuYWwgbWV0aG9kIG9mIGEgZnVuY3Rpb24gb2JqZWN0LCBGLFxuICAgICAgICAgICAgICAgIC8vIHdoaWNoIHdhcyBjcmVhdGVkIHVzaW5nIHRoZSBiaW5kIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIGFcbiAgICAgICAgICAgICAgICAvLyB0aGlzIHZhbHVlIGFuZCBhIGxpc3Qgb2YgYXJndW1lbnRzIEV4dHJhQXJncywgdGhlIGZvbGxvd2luZ1xuICAgICAgICAgICAgICAgIC8vIHN0ZXBzIGFyZSB0YWtlbjpcbiAgICAgICAgICAgICAgICAvLyAxLiBMZXQgYm91bmRBcmdzIGJlIHRoZSB2YWx1ZSBvZiBGJ3MgW1tCb3VuZEFyZ3NdXSBpbnRlcm5hbFxuICAgICAgICAgICAgICAgIC8vICAgcHJvcGVydHkuXG4gICAgICAgICAgICAgICAgLy8gMi4gTGV0IGJvdW5kVGhpcyBiZSB0aGUgdmFsdWUgb2YgRidzIFtbQm91bmRUaGlzXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDMuIExldCB0YXJnZXQgYmUgdGhlIHZhbHVlIG9mIEYncyBbW1RhcmdldEZ1bmN0aW9uXV0gaW50ZXJuYWxcbiAgICAgICAgICAgICAgICAvLyAgIHByb3BlcnR5LlxuICAgICAgICAgICAgICAgIC8vIDQuIExldCBhcmdzIGJlIGEgbmV3IGxpc3QgY29udGFpbmluZyB0aGUgc2FtZSB2YWx1ZXMgYXMgdGhlXG4gICAgICAgICAgICAgICAgLy8gICBsaXN0IGJvdW5kQXJncyBpbiB0aGUgc2FtZSBvcmRlciBmb2xsb3dlZCBieSB0aGUgc2FtZVxuICAgICAgICAgICAgICAgIC8vICAgdmFsdWVzIGFzIHRoZSBsaXN0IEV4dHJhQXJncyBpbiB0aGUgc2FtZSBvcmRlci5cbiAgICAgICAgICAgICAgICAvLyA1LiBSZXR1cm4gdGhlIHJlc3VsdCBvZiBjYWxsaW5nIHRoZSBbW0NhbGxdXSBpbnRlcm5hbCBtZXRob2RcbiAgICAgICAgICAgICAgICAvLyAgIG9mIHRhcmdldCBwcm92aWRpbmcgYm91bmRUaGlzIGFzIHRoZSB0aGlzIHZhbHVlIGFuZFxuICAgICAgICAgICAgICAgIC8vICAgcHJvdmlkaW5nIGFyZ3MgYXMgdGhlIGFyZ3VtZW50cy5cblxuICAgICAgICAgICAgICAgIC8vIGVxdWl2OiB0YXJnZXQuY2FsbCh0aGlzLCAuLi5ib3VuZEFyZ3MsIC4uLmFyZ3MpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5hcHBseShcbiAgICAgICAgICAgICAgICAgICAgdGhhdCxcbiAgICAgICAgICAgICAgICAgICAgYXJncy5jb25jYXQoYXJyYXlfc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIH1cblxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIDE1LiBJZiB0aGUgW1tDbGFzc11dIGludGVybmFsIHByb3BlcnR5IG9mIFRhcmdldCBpcyBcIkZ1bmN0aW9uXCIsIHRoZW5cbiAgICAgICAgLy8gICAgIGEuIExldCBMIGJlIHRoZSBsZW5ndGggcHJvcGVydHkgb2YgVGFyZ2V0IG1pbnVzIHRoZSBsZW5ndGggb2YgQS5cbiAgICAgICAgLy8gICAgIGIuIFNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIGVpdGhlciAwIG9yIEwsIHdoaWNoZXZlciBpc1xuICAgICAgICAvLyAgICAgICBsYXJnZXIuXG4gICAgICAgIC8vIDE2LiBFbHNlIHNldCB0aGUgbGVuZ3RoIG93biBwcm9wZXJ0eSBvZiBGIHRvIDAuXG5cbiAgICAgICAgdmFyIGJvdW5kTGVuZ3RoID0gTWF0aC5tYXgoMCwgdGFyZ2V0Lmxlbmd0aCAtIGFyZ3MubGVuZ3RoKTtcblxuICAgICAgICAvLyAxNy4gU2V0IHRoZSBhdHRyaWJ1dGVzIG9mIHRoZSBsZW5ndGggb3duIHByb3BlcnR5IG9mIEYgdG8gdGhlIHZhbHVlc1xuICAgICAgICAvLyAgIHNwZWNpZmllZCBpbiAxNS4zLjUuMS5cbiAgICAgICAgdmFyIGJvdW5kQXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvdW5kQXJncy5wdXNoKCckJyArIGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWFhYIEJ1aWxkIGEgZHluYW1pYyBmdW5jdGlvbiB3aXRoIGRlc2lyZWQgYW1vdW50IG9mIGFyZ3VtZW50cyBpcyB0aGUgb25seVxuICAgICAgICAvLyB3YXkgdG8gc2V0IHRoZSBsZW5ndGggcHJvcGVydHkgb2YgYSBmdW5jdGlvbi5cbiAgICAgICAgLy8gSW4gZW52aXJvbm1lbnRzIHdoZXJlIENvbnRlbnQgU2VjdXJpdHkgUG9saWNpZXMgZW5hYmxlZCAoQ2hyb21lIGV4dGVuc2lvbnMsXG4gICAgICAgIC8vIGZvciBleC4pIGFsbCB1c2Ugb2YgZXZhbCBvciBGdW5jdGlvbiBjb3N0cnVjdG9yIHRocm93cyBhbiBleGNlcHRpb24uXG4gICAgICAgIC8vIEhvd2V2ZXIgaW4gYWxsIG9mIHRoZXNlIGVudmlyb25tZW50cyBGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBleGlzdHNcbiAgICAgICAgLy8gYW5kIHNvIHRoaXMgY29kZSB3aWxsIG5ldmVyIGJlIGV4ZWN1dGVkLlxuICAgICAgICB2YXIgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgICAgICBpZiAodGFyZ2V0LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICAgICAgLy8gQ2xlYW4gdXAgZGFuZ2xpbmcgcmVmZXJlbmNlcy5cbiAgICAgICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE4LiBTZXQgdGhlIFtbRXh0ZW5zaWJsZV1dIGludGVybmFsIHByb3BlcnR5IG9mIEYgdG8gdHJ1ZS5cblxuICAgICAgICAvLyBUT0RPXG4gICAgICAgIC8vIDE5LiBMZXQgdGhyb3dlciBiZSB0aGUgW1tUaHJvd1R5cGVFcnJvcl1dIGZ1bmN0aW9uIE9iamVjdCAoMTMuMi4zKS5cbiAgICAgICAgLy8gMjAuIENhbGwgdGhlIFtbRGVmaW5lT3duUHJvcGVydHldXSBpbnRlcm5hbCBtZXRob2Qgb2YgRiB3aXRoXG4gICAgICAgIC8vICAgYXJndW1lbnRzIFwiY2FsbGVyXCIsIFByb3BlcnR5RGVzY3JpcHRvciB7W1tHZXRdXTogdGhyb3dlciwgW1tTZXRdXTpcbiAgICAgICAgLy8gICB0aHJvd2VyLCBbW0VudW1lcmFibGVdXTogZmFsc2UsIFtbQ29uZmlndXJhYmxlXV06IGZhbHNlfSwgYW5kXG4gICAgICAgIC8vICAgZmFsc2UuXG4gICAgICAgIC8vIDIxLiBDYWxsIHRoZSBbW0RlZmluZU93blByb3BlcnR5XV0gaW50ZXJuYWwgbWV0aG9kIG9mIEYgd2l0aFxuICAgICAgICAvLyAgIGFyZ3VtZW50cyBcImFyZ3VtZW50c1wiLCBQcm9wZXJ0eURlc2NyaXB0b3Ige1tbR2V0XV06IHRocm93ZXIsXG4gICAgICAgIC8vICAgW1tTZXRdXTogdGhyb3dlciwgW1tFbnVtZXJhYmxlXV06IGZhbHNlLCBbW0NvbmZpZ3VyYWJsZV1dOiBmYWxzZX0sXG4gICAgICAgIC8vICAgYW5kIGZhbHNlLlxuXG4gICAgICAgIC8vIFRPRE9cbiAgICAgICAgLy8gTk9URSBGdW5jdGlvbiBvYmplY3RzIGNyZWF0ZWQgdXNpbmcgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgZG8gbm90XG4gICAgICAgIC8vIGhhdmUgYSBwcm90b3R5cGUgcHJvcGVydHkgb3IgdGhlIFtbQ29kZV1dLCBbW0Zvcm1hbFBhcmFtZXRlcnNdXSwgYW5kXG4gICAgICAgIC8vIFtbU2NvcGVdXSBpbnRlcm5hbCBwcm9wZXJ0aWVzLlxuICAgICAgICAvLyBYWFggY2FuJ3QgZGVsZXRlIHByb3RvdHlwZSBpbiBwdXJlLWpzLlxuXG4gICAgICAgIC8vIDIyLiBSZXR1cm4gRi5cbiAgICAgICAgcmV0dXJuIGJvdW5kO1xuICAgIH1cbn0pO1xuXG4vL1xuLy8gQXJyYXlcbi8vID09PT09XG4vL1xuXG4vLyBFUzUgMTUuNC4zLjJcbi8vIGh0dHA6Ly9lczUuZ2l0aHViLmNvbS8jeDE1LjQuMy4yXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9BcnJheS9pc0FycmF5XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5LCB7IGlzQXJyYXk6IGlzQXJyYXkgfSk7XG5cblxudmFyIGJveGVkU3RyaW5nID0gT2JqZWN0KCdhJyk7XG52YXIgc3BsaXRTdHJpbmcgPSBib3hlZFN0cmluZ1swXSAhPT0gJ2EnIHx8ICEoMCBpbiBib3hlZFN0cmluZyk7XG5cbnZhciBwcm9wZXJseUJveGVzQ29udGV4dCA9IGZ1bmN0aW9uIHByb3Blcmx5Qm94ZWQobWV0aG9kKSB7XG4gICAgLy8gQ2hlY2sgbm9kZSAwLjYuMjEgYnVnIHdoZXJlIHRoaXJkIHBhcmFtZXRlciBpcyBub3QgYm94ZWRcbiAgICB2YXIgcHJvcGVybHlCb3hlc05vblN0cmljdCA9IHRydWU7XG4gICAgdmFyIHByb3Blcmx5Qm94ZXNTdHJpY3QgPSB0cnVlO1xuICAgIGlmIChtZXRob2QpIHtcbiAgICAgICAgbWV0aG9kLmNhbGwoJ2ZvbycsIGZ1bmN0aW9uIChfLCBfXywgY29udGV4dCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBjb250ZXh0ICE9PSAnb2JqZWN0JykgeyBwcm9wZXJseUJveGVzTm9uU3RyaWN0ID0gZmFsc2U7IH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgbWV0aG9kLmNhbGwoWzFdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAndXNlIHN0cmljdCc7XG4gICAgICAgICAgICBwcm9wZXJseUJveGVzU3RyaWN0ID0gdHlwZW9mIHRoaXMgPT09ICdzdHJpbmcnO1xuICAgICAgICB9LCAneCcpO1xuICAgIH1cbiAgICByZXR1cm4gISFtZXRob2QgJiYgcHJvcGVybHlCb3hlc05vblN0cmljdCAmJiBwcm9wZXJseUJveGVzU3RyaWN0O1xufTtcblxuZGVmaW5lUHJvcGVydGllcyhBcnJheVByb3RvdHlwZSwge1xuICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZnVuIC8qLCB0aGlzcCovKSB7XG4gICAgICAgIHZhciBvYmplY3QgPSB0b09iamVjdCh0aGlzKSxcbiAgICAgICAgICAgIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogb2JqZWN0LFxuICAgICAgICAgICAgdGhpc3AgPSBhcmd1bWVudHNbMV0sXG4gICAgICAgICAgICBpID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICAvLyBJZiBubyBjYWxsYmFjayBmdW5jdGlvbiBvciBpZiBjYWxsYmFjayBpcyBub3QgYSBjYWxsYWJsZSBmdW5jdGlvblxuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oZnVuKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyAvLyBUT0RPIG1lc3NhZ2VcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYpIHtcbiAgICAgICAgICAgICAgICAvLyBJbnZva2UgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHdpdGggY2FsbCwgcGFzc2luZyBhcmd1bWVudHM6XG4gICAgICAgICAgICAgICAgLy8gY29udGV4dCwgcHJvcGVydHkgdmFsdWUsIHByb3BlcnR5IGtleSwgdGhpc0FyZyBvYmplY3RcbiAgICAgICAgICAgICAgICAvLyBjb250ZXh0XG4gICAgICAgICAgICAgICAgZnVuLmNhbGwodGhpc3AsIHNlbGZbaV0sIGksIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59LCAhcHJvcGVybHlCb3hlc0NvbnRleHQoQXJyYXlQcm90b3R5cGUuZm9yRWFjaCkpO1xuXG4vLyBFUzUgMTUuNC40LjE0XG4vLyBodHRwOi8vZXM1LmdpdGh1Yi5jb20vI3gxNS40LjQuMTRcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0FycmF5L2luZGV4T2ZcbnZhciBoYXNGaXJlZm94MkluZGV4T2ZCdWcgPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZiAmJiBbMCwgMV0uaW5kZXhPZigxLCAyKSAhPT0gLTE7XG5kZWZpbmVQcm9wZXJ0aWVzKEFycmF5UHJvdG90eXBlLCB7XG4gICAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzb3VnaHQgLyosIGZyb21JbmRleCAqLyApIHtcbiAgICAgICAgdmFyIHNlbGYgPSBzcGxpdFN0cmluZyAmJiBpc1N0cmluZyh0aGlzKSA/IHRoaXMuc3BsaXQoJycpIDogdG9PYmplY3QodGhpcyksXG4gICAgICAgICAgICBsZW5ndGggPSBzZWxmLmxlbmd0aCA+Pj4gMDtcblxuICAgICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIGkgPSB0b0ludGVnZXIoYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBuZWdhdGl2ZSBpbmRpY2VzXG4gICAgICAgIGkgPSBpID49IDAgPyBpIDogTWF0aC5tYXgoMCwgbGVuZ3RoICsgaSk7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpIGluIHNlbGYgJiYgc2VsZltpXSA9PT0gc291Z2h0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH1cbn0sIGhhc0ZpcmVmb3gySW5kZXhPZkJ1Zyk7XG5cbi8vXG4vLyBTdHJpbmdcbi8vID09PT09PVxuLy9cblxuLy8gRVM1IDE1LjUuNC4xNFxuLy8gaHR0cDovL2VzNS5naXRodWIuY29tLyN4MTUuNS40LjE0XG5cbi8vIFtidWdmaXgsIElFIGx0IDksIGZpcmVmb3ggNCwgS29ucXVlcm9yLCBPcGVyYSwgb2JzY3VyZSBicm93c2Vyc11cbi8vIE1hbnkgYnJvd3NlcnMgZG8gbm90IHNwbGl0IHByb3Blcmx5IHdpdGggcmVndWxhciBleHByZXNzaW9ucyBvciB0aGV5XG4vLyBkbyBub3QgcGVyZm9ybSB0aGUgc3BsaXQgY29ycmVjdGx5IHVuZGVyIG9ic2N1cmUgY29uZGl0aW9ucy5cbi8vIFNlZSBodHRwOi8vYmxvZy5zdGV2ZW5sZXZpdGhhbi5jb20vYXJjaGl2ZXMvY3Jvc3MtYnJvd3Nlci1zcGxpdFxuLy8gSSd2ZSB0ZXN0ZWQgaW4gbWFueSBicm93c2VycyBhbmQgdGhpcyBzZWVtcyB0byBjb3ZlciB0aGUgZGV2aWFudCBvbmVzOlxuLy8gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pIHNob3VsZCBiZSBbXCJcIiwgXCJcIl0sIG5vdCBbXCJcIl1cbi8vICAgICcuJy5zcGxpdCgvKC4/KSguPykvKSBzaG91bGQgYmUgW1wiXCIsIFwiLlwiLCBcIlwiLCBcIlwiXSwgbm90IFtcIlwiLCBcIlwiXVxuLy8gICAgJ3Rlc3N0Jy5zcGxpdCgvKHMpKi8pIHNob3VsZCBiZSBbXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIFwic1wiLCBcInRcIl0sIG5vdFxuLy8gICAgICAgW3VuZGVmaW5lZCwgXCJ0XCIsIHVuZGVmaW5lZCwgXCJlXCIsIC4uLl1cbi8vICAgICcnLnNwbGl0KC8uPy8pIHNob3VsZCBiZSBbXSwgbm90IFtcIlwiXVxuLy8gICAgJy4nLnNwbGl0KC8oKSgpLykgc2hvdWxkIGJlIFtcIi5cIl0sIG5vdCBbXCJcIiwgXCJcIiwgXCIuXCJdXG5cbnZhciBzdHJpbmdfc3BsaXQgPSBTdHJpbmdQcm90b3R5cGUuc3BsaXQ7XG5pZiAoXG4gICAgJ2FiJy5zcGxpdCgvKD86YWIpKi8pLmxlbmd0aCAhPT0gMiB8fFxuICAgICcuJy5zcGxpdCgvKC4/KSguPykvKS5sZW5ndGggIT09IDQgfHxcbiAgICAndGVzc3QnLnNwbGl0KC8ocykqLylbMV0gPT09ICd0JyB8fFxuICAgICd0ZXN0Jy5zcGxpdCgvKD86KS8sIC0xKS5sZW5ndGggIT09IDQgfHxcbiAgICAnJy5zcGxpdCgvLj8vKS5sZW5ndGggfHxcbiAgICAnLicuc3BsaXQoLygpKCkvKS5sZW5ndGggPiAxXG4pIHtcbiAgICAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29tcGxpYW50RXhlY05wY2cgPSAvKCk/Py8uZXhlYygnJylbMV0gPT09IHZvaWQgMDsgLy8gTlBDRzogbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBcblxuICAgICAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xuICAgICAgICAgICAgdmFyIHN0cmluZyA9IHRoaXM7XG4gICAgICAgICAgICBpZiAoc2VwYXJhdG9yID09PSB2b2lkIDAgJiYgbGltaXQgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XG4gICAgICAgICAgICBpZiAoX3RvU3RyaW5nLmNhbGwoc2VwYXJhdG9yKSAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nX3NwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBvdXRwdXQgPSBbXSxcbiAgICAgICAgICAgICAgICBmbGFncyA9IChzZXBhcmF0b3IuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSAgPyAnbScgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5leHRlbmRlZCAgID8gJ3gnIDogJycpICsgLy8gUHJvcG9zZWQgZm9yIEVTNlxuICAgICAgICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5zdGlja3kgICAgID8gJ3knIDogJycpLCAvLyBGaXJlZm94IDMrXG4gICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IDAsXG4gICAgICAgICAgICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcbiAgICAgICAgICAgICAgICBzZXBhcmF0b3IyLCBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xuICAgICAgICAgICAgc2VwYXJhdG9yID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XG4gICAgICAgICAgICBzdHJpbmcgKz0gJyc7IC8vIFR5cGUtY29udmVydFxuICAgICAgICAgICAgaWYgKCFjb21wbGlhbnRFeGVjTnBjZykge1xuICAgICAgICAgICAgICAgIC8vIERvZXNuJ3QgbmVlZCBmbGFncyBneSwgYnV0IHRoZXkgZG9uJ3QgaHVydFxuICAgICAgICAgICAgICAgIHNlcGFyYXRvcjIgPSBuZXcgUmVnRXhwKCdeJyArIHNlcGFyYXRvci5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIGZsYWdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8qIFZhbHVlcyBmb3IgYGxpbWl0YCwgcGVyIHRoZSBzcGVjOlxuICAgICAgICAgICAgICogSWYgdW5kZWZpbmVkOiA0Mjk0OTY3Mjk1IC8vIE1hdGgucG93KDIsIDMyKSAtIDFcbiAgICAgICAgICAgICAqIElmIDAsIEluZmluaXR5LCBvciBOYU46IDBcbiAgICAgICAgICAgICAqIElmIHBvc2l0aXZlIG51bWJlcjogbGltaXQgPSBNYXRoLmZsb29yKGxpbWl0KTsgaWYgKGxpbWl0ID4gNDI5NDk2NzI5NSkgbGltaXQgLT0gNDI5NDk2NzI5NjtcbiAgICAgICAgICAgICAqIElmIG5lZ2F0aXZlIG51bWJlcjogNDI5NDk2NzI5NiAtIE1hdGguZmxvb3IoTWF0aC5hYnMobGltaXQpKVxuICAgICAgICAgICAgICogSWYgb3RoZXI6IFR5cGUtY29udmVydCwgdGhlbiB1c2UgdGhlIGFib3ZlIHJ1bGVzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGxpbWl0ID0gbGltaXQgPT09IHZvaWQgMCA/XG4gICAgICAgICAgICAgICAgLTEgPj4+IDAgOiAvLyBNYXRoLnBvdygyLCAzMikgLSAxXG4gICAgICAgICAgICAgICAgVG9VaW50MzIobGltaXQpO1xuICAgICAgICAgICAgd2hpbGUgKG1hdGNoID0gc2VwYXJhdG9yLmV4ZWMoc3RyaW5nKSkge1xuICAgICAgICAgICAgICAgIC8vIGBzZXBhcmF0b3IubGFzdEluZGV4YCBpcyBub3QgcmVsaWFibGUgY3Jvc3MtYnJvd3NlclxuICAgICAgICAgICAgICAgIGxhc3RJbmRleCA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiBsYXN0TGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYCBmb3JcbiAgICAgICAgICAgICAgICAgICAgLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXBzXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29tcGxpYW50RXhlY05wY2cgJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMF0ucmVwbGFjZShzZXBhcmF0b3IyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhcmd1bWVudHNbaV0gPT09IHZvaWQgMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbaV0gPSB2b2lkIDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaC5pbmRleCA8IHN0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5UHJvdG90eXBlLnB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgbGFzdExhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG91dHB1dC5sZW5ndGggPj0gbGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChzZXBhcmF0b3IubGFzdEluZGV4ID09PSBtYXRjaC5pbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IubGFzdEluZGV4Kys7IC8vIEF2b2lkIGFuIGluZmluaXRlIGxvb3BcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobGFzdExhc3RJbmRleCA9PT0gc3RyaW5nLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3IudGVzdCgnJykpIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQubGVuZ3RoID4gbGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgbGltaXQpIDogb3V0cHV0O1xuICAgICAgICB9O1xuICAgIH0oKSk7XG5cbi8vIFtidWdmaXgsIGNocm9tZV1cbi8vIElmIHNlcGFyYXRvciBpcyB1bmRlZmluZWQsIHRoZW4gdGhlIHJlc3VsdCBhcnJheSBjb250YWlucyBqdXN0IG9uZSBTdHJpbmcsXG4vLyB3aGljaCBpcyB0aGUgdGhpcyB2YWx1ZSAoY29udmVydGVkIHRvIGEgU3RyaW5nKS4gSWYgbGltaXQgaXMgbm90IHVuZGVmaW5lZCxcbi8vIHRoZW4gdGhlIG91dHB1dCBhcnJheSBpcyB0cnVuY2F0ZWQgc28gdGhhdCBpdCBjb250YWlucyBubyBtb3JlIHRoYW4gbGltaXRcbi8vIGVsZW1lbnRzLlxuLy8gXCIwXCIuc3BsaXQodW5kZWZpbmVkLCAwKSAtPiBbXVxufSBlbHNlIGlmICgnMCcuc3BsaXQodm9pZCAwLCAwKS5sZW5ndGgpIHtcbiAgICBTdHJpbmdQcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICAgIGlmIChzZXBhcmF0b3IgPT09IHZvaWQgMCAmJiBsaW1pdCA9PT0gMCkgeyByZXR1cm4gW107IH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ19zcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH07XG59XG5cbi8vIEVDTUEtMjYyLCAzcmQgQi4yLjNcbi8vIE5vdCBhbiBFQ01BU2NyaXB0IHN0YW5kYXJkLCBhbHRob3VnaCBFQ01BU2NyaXB0IDNyZCBFZGl0aW9uIGhhcyBhXG4vLyBub24tbm9ybWF0aXZlIHNlY3Rpb24gc3VnZ2VzdGluZyB1bmlmb3JtIHNlbWFudGljcyBhbmQgaXQgc2hvdWxkIGJlXG4vLyBub3JtYWxpemVkIGFjcm9zcyBhbGwgYnJvd3NlcnNcbi8vIFtidWdmaXgsIElFIGx0IDldIElFIDwgOSBzdWJzdHIoKSB3aXRoIG5lZ2F0aXZlIHZhbHVlIG5vdCB3b3JraW5nIGluIElFXG52YXIgc3RyaW5nX3N1YnN0ciA9IFN0cmluZ1Byb3RvdHlwZS5zdWJzdHI7XG52YXIgaGFzTmVnYXRpdmVTdWJzdHJCdWcgPSAnJy5zdWJzdHIgJiYgJzBiJy5zdWJzdHIoLTEpICE9PSAnYic7XG5kZWZpbmVQcm9wZXJ0aWVzKFN0cmluZ1Byb3RvdHlwZSwge1xuICAgIHN1YnN0cjogZnVuY3Rpb24gc3Vic3RyKHN0YXJ0LCBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ19zdWJzdHIuY2FsbChcbiAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICBzdGFydCA8IDAgPyAoKHN0YXJ0ID0gdGhpcy5sZW5ndGggKyBzdGFydCkgPCAwID8gMCA6IHN0YXJ0KSA6IHN0YXJ0LFxuICAgICAgICAgICAgbGVuZ3RoXG4gICAgICAgICk7XG4gICAgfVxufSwgaGFzTmVnYXRpdmVTdWJzdHJCdWcpO1xuXG59LHt9XSwxNjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gW1xuICAvLyBzdHJlYW1pbmcgdHJhbnNwb3J0c1xuICByZXF1aXJlKCcuL3RyYW5zcG9ydC93ZWJzb2NrZXQnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItc3RyZWFtaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQveGRyLXN0cmVhbWluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L2V2ZW50c291cmNlJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQvZXZlbnRzb3VyY2UnKSlcblxuICAvLyBwb2xsaW5nIHRyYW5zcG9ydHNcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvaHRtbGZpbGUnKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC9saWIvaWZyYW1lLXdyYXAnKShyZXF1aXJlKCcuL3RyYW5zcG9ydC9odG1sZmlsZScpKVxuLCByZXF1aXJlKCcuL3RyYW5zcG9ydC94aHItcG9sbGluZycpXG4sIHJlcXVpcmUoJy4vdHJhbnNwb3J0L3hkci1wb2xsaW5nJylcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwJykocmVxdWlyZSgnLi90cmFuc3BvcnQveGhyLXBvbGxpbmcnKSlcbiwgcmVxdWlyZSgnLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZycpXG5dO1xuXG59LHtcIi4vdHJhbnNwb3J0L2V2ZW50c291cmNlXCI6MjAsXCIuL3RyYW5zcG9ydC9odG1sZmlsZVwiOjIxLFwiLi90cmFuc3BvcnQvanNvbnAtcG9sbGluZ1wiOjIzLFwiLi90cmFuc3BvcnQvbGliL2lmcmFtZS13cmFwXCI6MjYsXCIuL3RyYW5zcG9ydC93ZWJzb2NrZXRcIjozOCxcIi4vdHJhbnNwb3J0L3hkci1wb2xsaW5nXCI6MzksXCIuL3RyYW5zcG9ydC94ZHItc3RyZWFtaW5nXCI6NDAsXCIuL3RyYW5zcG9ydC94aHItcG9sbGluZ1wiOjQxLFwiLi90cmFuc3BvcnQveGhyLXN0cmVhbWluZ1wiOjQyfV0sMTc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2V2ZW50JylcbiAgLCB1cmxVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3VybCcpXG4gICwgWEhSID0gZ2xvYmFsLlhNTEh0dHBSZXF1ZXN0XG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpicm93c2VyOnhocicpO1xufVxuXG5mdW5jdGlvbiBBYnN0cmFjdFhIUk9iamVjdChtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICBkZWJ1ZyhtZXRob2QsIHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgc2VsZi5fc3RhcnQobWV0aG9kLCB1cmwsIHBheWxvYWQsIG9wdHMpO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoQWJzdHJhY3RYSFJPYmplY3QsIEV2ZW50RW1pdHRlcik7XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5fc3RhcnQgPSBmdW5jdGlvbihtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cbiAgdHJ5IHtcbiAgICB0aGlzLnhociA9IG5ldyBYSFIoKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgfVxuXG4gIGlmICghdGhpcy54aHIpIHtcbiAgICBkZWJ1Zygnbm8geGhyJyk7XG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnbm8geGhyIHN1cHBvcnQnKTtcbiAgICB0aGlzLl9jbGVhbnVwKCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gc2V2ZXJhbCBicm93c2VycyBjYWNoZSBQT1NUc1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICd0PScgKyAoK25ldyBEYXRlKCkpKTtcblxuICAvLyBFeHBsb3JlciB0ZW5kcyB0byBrZWVwIGNvbm5lY3Rpb24gb3BlbiwgZXZlbiBhZnRlciB0aGVcbiAgLy8gdGFiIGdldHMgY2xvc2VkOiBodHRwOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC81MjgwXG4gIHRoaXMudW5sb2FkUmVmID0gdXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd1bmxvYWQgY2xlYW51cCcpO1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gIH0pO1xuICB0cnkge1xuICAgIHRoaXMueGhyLm9wZW4obWV0aG9kLCB1cmwsIHRydWUpO1xuICAgIGlmICh0aGlzLnRpbWVvdXQgJiYgJ3RpbWVvdXQnIGluIHRoaXMueGhyKSB7XG4gICAgICB0aGlzLnhoci50aW1lb3V0ID0gdGhpcy50aW1lb3V0O1xuICAgICAgdGhpcy54aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGRlYnVnKCd4aHIgdGltZW91dCcpO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDAsICcnKTtcbiAgICAgICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gICAgICB9O1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGRlYnVnKCdleGNlcHRpb24nLCBlKTtcbiAgICAvLyBJRSByYWlzZXMgYW4gZXhjZXB0aW9uIG9uIHdyb25nIHBvcnQuXG4gICAgdGhpcy5lbWl0KCdmaW5pc2gnLCAwLCAnJyk7XG4gICAgdGhpcy5fY2xlYW51cChmYWxzZSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKCghb3B0cyB8fCAhb3B0cy5ub0NyZWRlbnRpYWxzKSAmJiBBYnN0cmFjdFhIUk9iamVjdC5zdXBwb3J0c0NPUlMpIHtcbiAgICBkZWJ1Zygnd2l0aENyZWRlbnRpYWxzJyk7XG4gICAgLy8gTW96aWxsYSBkb2NzIHNheXMgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vWE1MSHR0cFJlcXVlc3QgOlxuICAgIC8vIFwiVGhpcyBuZXZlciBhZmZlY3RzIHNhbWUtc2l0ZSByZXF1ZXN0cy5cIlxuXG4gICAgdGhpcy54aHIud2l0aENyZWRlbnRpYWxzID0gJ3RydWUnO1xuICB9XG4gIGlmIChvcHRzICYmIG9wdHMuaGVhZGVycykge1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMueGhyLnNldFJlcXVlc3RIZWFkZXIoa2V5LCBvcHRzLmhlYWRlcnNba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHNlbGYueGhyKSB7XG4gICAgICB2YXIgeCA9IHNlbGYueGhyO1xuICAgICAgdmFyIHRleHQsIHN0YXR1cztcbiAgICAgIGRlYnVnKCdyZWFkeVN0YXRlJywgeC5yZWFkeVN0YXRlKTtcbiAgICAgIHN3aXRjaCAoeC5yZWFkeVN0YXRlKSB7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIC8vIElFIGRvZXNuJ3QgbGlrZSBwZWVraW5nIGludG8gcmVzcG9uc2VUZXh0IG9yIHN0YXR1c1xuICAgICAgICAvLyBvbiBNaWNyb3NvZnQuWE1MSFRUUCBhbmQgcmVhZHlzdGF0ZT0zXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RhdHVzID0geC5zdGF0dXM7XG4gICAgICAgICAgdGV4dCA9IHgucmVzcG9uc2VUZXh0O1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgICB9XG4gICAgICAgIGRlYnVnKCdzdGF0dXMnLCBzdGF0dXMpO1xuICAgICAgICAvLyBJRSByZXR1cm5zIDEyMjMgZm9yIDIwNDogaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTQ1MFxuICAgICAgICBpZiAoc3RhdHVzID09PSAxMjIzKSB7XG4gICAgICAgICAgc3RhdHVzID0gMjA0O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSUUgZG9lcyByZXR1cm4gcmVhZHlzdGF0ZSA9PSAzIGZvciA0MDQgYW5zd2Vycy5cbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMjAwICYmIHRleHQgJiYgdGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgZGVidWcoJ2NodW5rJyk7XG4gICAgICAgICAgc2VsZi5lbWl0KCdjaHVuaycsIHN0YXR1cywgdGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDQ6XG4gICAgICAgIHN0YXR1cyA9IHguc3RhdHVzO1xuICAgICAgICBkZWJ1Zygnc3RhdHVzJywgc3RhdHVzKTtcbiAgICAgICAgLy8gSUUgcmV0dXJucyAxMjIzIGZvciAyMDQ6IGh0dHA6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzE0NTBcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gMTIyMykge1xuICAgICAgICAgIHN0YXR1cyA9IDIwNDtcbiAgICAgICAgfVxuICAgICAgICAvLyBJRSByZXR1cm5zIHRoaXMgZm9yIGEgYmFkIHBvcnRcbiAgICAgICAgLy8gaHR0cDovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L3dpbmRvd3MvZGVza3RvcC9hYTM4Mzc3MCh2PXZzLjg1KS5hc3B4XG4gICAgICAgIGlmIChzdGF0dXMgPT09IDEyMDA1IHx8IHN0YXR1cyA9PT0gMTIwMjkpIHtcbiAgICAgICAgICBzdGF0dXMgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgZGVidWcoJ2ZpbmlzaCcsIHN0YXR1cywgeC5yZXNwb25zZVRleHQpO1xuICAgICAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIHN0YXR1cywgeC5yZXNwb25zZVRleHQpO1xuICAgICAgICBzZWxmLl9jbGVhbnVwKGZhbHNlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHRyeSB7XG4gICAgc2VsZi54aHIuc2VuZChwYXlsb2FkKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICAgIHNlbGYuX2NsZWFudXAoZmFsc2UpO1xuICB9XG59O1xuXG5BYnN0cmFjdFhIUk9iamVjdC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihhYm9ydCkge1xuICBkZWJ1ZygnY2xlYW51cCcpO1xuICBpZiAoIXRoaXMueGhyKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIHV0aWxzLnVubG9hZERlbCh0aGlzLnVubG9hZFJlZik7XG5cbiAgLy8gSUUgbmVlZHMgdGhpcyBmaWVsZCB0byBiZSBhIGZ1bmN0aW9uXG4gIHRoaXMueGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge307XG4gIGlmICh0aGlzLnhoci5vbnRpbWVvdXQpIHtcbiAgICB0aGlzLnhoci5vbnRpbWVvdXQgPSBudWxsO1xuICB9XG5cbiAgaWYgKGFib3J0KSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMueGhyLmFib3J0KCk7XG4gICAgfSBjYXRjaCAoeCkge1xuICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgIH1cbiAgfVxuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMueGhyID0gbnVsbDtcbn07XG5cbkFic3RyYWN0WEhST2JqZWN0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCh0cnVlKTtcbn07XG5cbkFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgPSAhIVhIUjtcbi8vIG92ZXJyaWRlIFhNTEh0dHBSZXF1ZXN0IGZvciBJRTYvN1xuLy8gb2JmdXNjYXRlIHRvIGF2b2lkIGZpcmV3YWxsc1xudmFyIGF4byA9IFsnQWN0aXZlJ10uY29uY2F0KCdPYmplY3QnKS5qb2luKCdYJyk7XG5pZiAoIUFic3RyYWN0WEhST2JqZWN0LmVuYWJsZWQgJiYgKGF4byBpbiBnbG9iYWwpKSB7XG4gIGRlYnVnKCdvdmVycmlkaW5nIHhtbGh0dHByZXF1ZXN0Jyk7XG4gIFhIUiA9IGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFtheG9dKCdNaWNyb3NvZnQuWE1MSFRUUCcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcbiAgQWJzdHJhY3RYSFJPYmplY3QuZW5hYmxlZCA9ICEhbmV3IFhIUigpO1xufVxuXG52YXIgY29ycyA9IGZhbHNlO1xudHJ5IHtcbiAgY29ycyA9ICd3aXRoQ3JlZGVudGlhbHMnIGluIG5ldyBYSFIoKTtcbn0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxufVxuXG5BYnN0cmFjdFhIUk9iamVjdC5zdXBwb3J0c0NPUlMgPSBjb3JzO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFic3RyYWN0WEhST2JqZWN0O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0sdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuLi8uLi91dGlscy9ldmVudFwiOjQ2LFwiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwxODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbC5FdmVudFNvdXJjZTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDE5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIERyaXZlciA9IGdsb2JhbC5XZWJTb2NrZXQgfHwgZ2xvYmFsLk1veldlYlNvY2tldDtcbmlmIChEcml2ZXIpIHtcblx0bW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBXZWJTb2NrZXRCcm93c2VyRHJpdmVyKHVybCkge1xuXHRcdHJldHVybiBuZXcgRHJpdmVyKHVybCk7XG5cdH07XG59IGVsc2Uge1xuXHRtb2R1bGUuZXhwb3J0cyA9IHVuZGVmaW5lZDtcbn1cblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDIwOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIEV2ZW50U291cmNlUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL2V2ZW50c291cmNlJylcbiAgLCBYSFJDb3JzT2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGhyLWNvcnMnKVxuICAsIEV2ZW50U291cmNlRHJpdmVyID0gcmVxdWlyZSgnZXZlbnRzb3VyY2UnKVxuICA7XG5cbmZ1bmN0aW9uIEV2ZW50U291cmNlVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghRXZlbnRTb3VyY2VUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cblxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9ldmVudHNvdXJjZScsIEV2ZW50U291cmNlUmVjZWl2ZXIsIFhIUkNvcnNPYmplY3QpO1xufVxuXG5pbmhlcml0cyhFdmVudFNvdXJjZVRyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuRXZlbnRTb3VyY2VUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFFdmVudFNvdXJjZURyaXZlcjtcbn07XG5cbkV2ZW50U291cmNlVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAnZXZlbnRzb3VyY2UnO1xuRXZlbnRTb3VyY2VUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRTb3VyY2VUcmFuc3BvcnQ7XG5cbn0se1wiLi9saWIvYWpheC1iYXNlZFwiOjI0LFwiLi9yZWNlaXZlci9ldmVudHNvdXJjZVwiOjI5LFwiLi9zZW5kZXIveGhyLWNvcnNcIjozNSxcImV2ZW50c291cmNlXCI6MTgsXCJpbmhlcml0c1wiOjU3fV0sMjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgSHRtbGZpbGVSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIvaHRtbGZpbGUnKVxuICAsIFhIUkxvY2FsT2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGhyLWxvY2FsJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgO1xuXG5mdW5jdGlvbiBIdG1sRmlsZVRyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIUh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL2h0bWxmaWxlJywgSHRtbGZpbGVSZWNlaXZlciwgWEhSTG9jYWxPYmplY3QpO1xufVxuXG5pbmhlcml0cyhIdG1sRmlsZVRyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuSHRtbEZpbGVUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKGluZm8pIHtcbiAgcmV0dXJuIEh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCAmJiBpbmZvLnNhbWVPcmlnaW47XG59O1xuXG5IdG1sRmlsZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2h0bWxmaWxlJztcbkh0bWxGaWxlVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEh0bWxGaWxlVHJhbnNwb3J0O1xuXG59LHtcIi4vbGliL2FqYXgtYmFzZWRcIjoyNCxcIi4vcmVjZWl2ZXIvaHRtbGZpbGVcIjozMCxcIi4vc2VuZGVyL3hoci1sb2NhbFwiOjM3LFwiaW5oZXJpdHNcIjo1N31dLDIyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbi8vIEZldyBjb29sIHRyYW5zcG9ydHMgZG8gd29yayBvbmx5IGZvciBzYW1lLW9yaWdpbi4gSW4gb3JkZXIgdG8gbWFrZVxuLy8gdGhlbSB3b3JrIGNyb3NzLWRvbWFpbiB3ZSBzaGFsbCB1c2UgaWZyYW1lLCBzZXJ2ZWQgZnJvbSB0aGVcbi8vIHJlbW90ZSBkb21haW4uIE5ldyBicm93c2VycyBoYXZlIGNhcGFiaWxpdGllcyB0byBjb21tdW5pY2F0ZSB3aXRoXG4vLyBjcm9zcyBkb21haW4gaWZyYW1lIHVzaW5nIHBvc3RNZXNzYWdlKCkuIEluIElFIGl0IHdhcyBpbXBsZW1lbnRlZFxuLy8gZnJvbSBJRSA4KywgYnV0IG9mIGNvdXJzZSwgSUUgZ290IHNvbWUgZGV0YWlscyB3cm9uZzpcbi8vICAgIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzE5NzAxNSh2PVZTLjg1KS5hc3B4XG4vLyAgICBodHRwOi8vc3RldmVzb3VkZXJzLmNvbS9taXNjL3Rlc3QtcG9zdG1lc3NhZ2UucGhwXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgLCB2ZXJzaW9uID0gcmVxdWlyZSgnLi4vdmVyc2lvbicpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91cmwnKVxuICAsIGlmcmFtZVV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvaWZyYW1lJylcbiAgLCBldmVudFV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMvZXZlbnQnKVxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uL3V0aWxzL3JhbmRvbScpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp0cmFuc3BvcnQ6aWZyYW1lJyk7XG59XG5cbmZ1bmN0aW9uIElmcmFtZVRyYW5zcG9ydCh0cmFuc3BvcnQsIHRyYW5zVXJsLCBiYXNlVXJsKSB7XG4gIGlmICghSWZyYW1lVHJhbnNwb3J0LmVuYWJsZWQoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdGhpcy5vcmlnaW4gPSB1cmxVdGlscy5nZXRPcmlnaW4oYmFzZVVybCk7XG4gIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gIHRoaXMudHJhbnNVcmwgPSB0cmFuc1VybDtcbiAgdGhpcy50cmFuc3BvcnQgPSB0cmFuc3BvcnQ7XG4gIHRoaXMud2luZG93SWQgPSByYW5kb20uc3RyaW5nKDgpO1xuXG4gIHZhciBpZnJhbWVVcmwgPSB1cmxVdGlscy5hZGRQYXRoKGJhc2VVcmwsICcvaWZyYW1lLmh0bWwnKSArICcjJyArIHRoaXMud2luZG93SWQ7XG4gIGRlYnVnKHRyYW5zcG9ydCwgdHJhbnNVcmwsIGlmcmFtZVVybCk7XG5cbiAgdGhpcy5pZnJhbWVPYmogPSBpZnJhbWVVdGlscy5jcmVhdGVJZnJhbWUoaWZyYW1lVXJsLCBmdW5jdGlvbihyKSB7XG4gICAgZGVidWcoJ2VyciBjYWxsYmFjaycpO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCAxMDA2LCAnVW5hYmxlIHRvIGxvYWQgYW4gaWZyYW1lICgnICsgciArICcpJyk7XG4gICAgc2VsZi5jbG9zZSgpO1xuICB9KTtcblxuICB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrID0gdGhpcy5fbWVzc2FnZS5iaW5kKHRoaXMpO1xuICBldmVudFV0aWxzLmF0dGFjaEV2ZW50KCdtZXNzYWdlJywgdGhpcy5vbm1lc3NhZ2VDYWxsYmFjayk7XG59XG5cbmluaGVyaXRzKElmcmFtZVRyYW5zcG9ydCwgRXZlbnRFbWl0dGVyKTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgaWYgKHRoaXMuaWZyYW1lT2JqKSB7XG4gICAgZXZlbnRVdGlscy5kZXRhY2hFdmVudCgnbWVzc2FnZScsIHRoaXMub25tZXNzYWdlQ2FsbGJhY2spO1xuICAgIHRyeSB7XG4gICAgICAvLyBXaGVuIHRoZSBpZnJhbWUgaXMgbm90IGxvYWRlZCwgSUUgcmFpc2VzIGFuIGV4Y2VwdGlvblxuICAgICAgLy8gb24gJ2NvbnRlbnRXaW5kb3cnLlxuICAgICAgdGhpcy5wb3N0TWVzc2FnZSgnYycpO1xuICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICB9XG4gICAgdGhpcy5pZnJhbWVPYmouY2xlYW51cCgpO1xuICAgIHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgICB0aGlzLm9ubWVzc2FnZUNhbGxiYWNrID0gdGhpcy5pZnJhbWVPYmogPSBudWxsO1xuICB9XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQucHJvdG90eXBlLl9tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICBkZWJ1ZygnbWVzc2FnZScsIGUuZGF0YSk7XG4gIGlmICghdXJsVXRpbHMuaXNPcmlnaW5FcXVhbChlLm9yaWdpbiwgdGhpcy5vcmlnaW4pKSB7XG4gICAgZGVidWcoJ25vdCBzYW1lIG9yaWdpbicsIGUub3JpZ2luLCB0aGlzLm9yaWdpbik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGlmcmFtZU1lc3NhZ2U7XG4gIHRyeSB7XG4gICAgaWZyYW1lTWVzc2FnZSA9IEpTT04zLnBhcnNlKGUuZGF0YSk7XG4gIH0gY2F0Y2ggKGlnbm9yZWQpIHtcbiAgICBkZWJ1ZygnYmFkIGpzb24nLCBlLmRhdGEpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpZnJhbWVNZXNzYWdlLndpbmRvd0lkICE9PSB0aGlzLndpbmRvd0lkKSB7XG4gICAgZGVidWcoJ21pc21hdGNoZWQgd2luZG93IGlkJywgaWZyYW1lTWVzc2FnZS53aW5kb3dJZCwgdGhpcy53aW5kb3dJZCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChpZnJhbWVNZXNzYWdlLnR5cGUpIHtcbiAgY2FzZSAncyc6XG4gICAgdGhpcy5pZnJhbWVPYmoubG9hZGVkKCk7XG4gICAgLy8gd2luZG93IGdsb2JhbCBkZXBlbmRlbmN5XG4gICAgdGhpcy5wb3N0TWVzc2FnZSgncycsIEpTT04zLnN0cmluZ2lmeShbXG4gICAgICB2ZXJzaW9uXG4gICAgLCB0aGlzLnRyYW5zcG9ydFxuICAgICwgdGhpcy50cmFuc1VybFxuICAgICwgdGhpcy5iYXNlVXJsXG4gICAgXSkpO1xuICAgIGJyZWFrO1xuICBjYXNlICd0JzpcbiAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgIGJyZWFrO1xuICBjYXNlICdjJzpcbiAgICB2YXIgY2RhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGNkYXRhID0gSlNPTjMucGFyc2UoaWZyYW1lTWVzc2FnZS5kYXRhKTtcbiAgICB9IGNhdGNoIChpZ25vcmVkKSB7XG4gICAgICBkZWJ1ZygnYmFkIGpzb24nLCBpZnJhbWVNZXNzYWdlLmRhdGEpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgY2RhdGFbMF0sIGNkYXRhWzFdKTtcbiAgICB0aGlzLmNsb3NlKCk7XG4gICAgYnJlYWs7XG4gIH1cbn07XG5cbklmcmFtZVRyYW5zcG9ydC5wcm90b3R5cGUucG9zdE1lc3NhZ2UgPSBmdW5jdGlvbih0eXBlLCBkYXRhKSB7XG4gIGRlYnVnKCdwb3N0TWVzc2FnZScsIHR5cGUsIGRhdGEpO1xuICB0aGlzLmlmcmFtZU9iai5wb3N0KEpTT04zLnN0cmluZ2lmeSh7XG4gICAgd2luZG93SWQ6IHRoaXMud2luZG93SWRcbiAgLCB0eXBlOiB0eXBlXG4gICwgZGF0YTogZGF0YSB8fCAnJ1xuICB9KSwgdGhpcy5vcmlnaW4pO1xufTtcblxuSWZyYW1lVHJhbnNwb3J0LnByb3RvdHlwZS5zZW5kID0gZnVuY3Rpb24obWVzc2FnZSkge1xuICBkZWJ1Zygnc2VuZCcsIG1lc3NhZ2UpO1xuICB0aGlzLnBvc3RNZXNzYWdlKCdtJywgbWVzc2FnZSk7XG59O1xuXG5JZnJhbWVUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gaWZyYW1lVXRpbHMuaWZyYW1lRW5hYmxlZDtcbn07XG5cbklmcmFtZVRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2lmcmFtZSc7XG5JZnJhbWVUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7XG5cbm1vZHVsZS5leHBvcnRzID0gSWZyYW1lVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uL3V0aWxzL2lmcmFtZVwiOjQ3LFwiLi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuLi91dGlscy91cmxcIjo1MixcIi4uL3ZlcnNpb25cIjo1MyxcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1NyxcImpzb24zXCI6NTh9XSwyMzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbi8vIFRoZSBzaW1wbGVzdCBhbmQgbW9zdCByb2J1c3QgdHJhbnNwb3J0LCB1c2luZyB0aGUgd2VsbC1rbm93IGNyb3NzXG4vLyBkb21haW4gaGFjayAtIEpTT05QLiBUaGlzIHRyYW5zcG9ydCBpcyBxdWl0ZSBpbmVmZmljaWVudCAtIG9uZVxuLy8gbWVzc2FnZSBjb3VsZCB1c2UgdXAgdG8gb25lIGh0dHAgcmVxdWVzdC4gQnV0IGF0IGxlYXN0IGl0IHdvcmtzIGFsbW9zdFxuLy8gZXZlcnl3aGVyZS5cbi8vIEtub3duIGxpbWl0YXRpb25zOlxuLy8gICBvIHlvdSB3aWxsIGdldCBhIHNwaW5uaW5nIGN1cnNvclxuLy8gICBvIGZvciBLb25xdWVyb3IgYSBkdW1iIHRpbWVyIGlzIG5lZWRlZCB0byBkZXRlY3QgZXJyb3JzXG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBTZW5kZXJSZWNlaXZlciA9IHJlcXVpcmUoJy4vbGliL3NlbmRlci1yZWNlaXZlcicpXG4gICwgSnNvbnBSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIvanNvbnAnKVxuICAsIGpzb25wU2VuZGVyID0gcmVxdWlyZSgnLi9zZW5kZXIvanNvbnAnKVxuICA7XG5cbmZ1bmN0aW9uIEpzb25QVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghSnNvblBUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgU2VuZGVyUmVjZWl2ZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy9qc29ucCcsIGpzb25wU2VuZGVyLCBKc29ucFJlY2VpdmVyKTtcbn1cblxuaW5oZXJpdHMoSnNvblBUcmFuc3BvcnQsIFNlbmRlclJlY2VpdmVyKTtcblxuSnNvblBUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gISFnbG9iYWwuZG9jdW1lbnQ7XG59O1xuXG5Kc29uUFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2pzb25wLXBvbGxpbmcnO1xuSnNvblBUcmFuc3BvcnQucm91bmRUcmlwcyA9IDE7XG5Kc29uUFRyYW5zcG9ydC5uZWVkQm9keSA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gSnNvblBUcmFuc3BvcnQ7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vbGliL3NlbmRlci1yZWNlaXZlclwiOjI4LFwiLi9yZWNlaXZlci9qc29ucFwiOjMxLFwiLi9zZW5kZXIvanNvbnBcIjozMyxcImluaGVyaXRzXCI6NTd9XSwyNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIFNlbmRlclJlY2VpdmVyID0gcmVxdWlyZSgnLi9zZW5kZXItcmVjZWl2ZXInKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6YWpheC1iYXNlZCcpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBamF4U2VuZGVyKEFqYXhPYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBkZWJ1ZygnY3JlYXRlIGFqYXggc2VuZGVyJywgdXJsLCBwYXlsb2FkKTtcbiAgICB2YXIgb3B0ID0ge307XG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnc3RyaW5nJykge1xuICAgICAgb3B0LmhlYWRlcnMgPSB7J0NvbnRlbnQtdHlwZSc6ICd0ZXh0L3BsYWluJ307XG4gICAgfVxuICAgIHZhciBhamF4VXJsID0gdXJsVXRpbHMuYWRkUGF0aCh1cmwsICcveGhyX3NlbmQnKTtcbiAgICB2YXIgeG8gPSBuZXcgQWpheE9iamVjdCgnUE9TVCcsIGFqYXhVcmwsIHBheWxvYWQsIG9wdCk7XG4gICAgeG8ub25jZSgnZmluaXNoJywgZnVuY3Rpb24oc3RhdHVzKSB7XG4gICAgICBkZWJ1ZygnZmluaXNoJywgc3RhdHVzKTtcbiAgICAgIHhvID0gbnVsbDtcblxuICAgICAgaWYgKHN0YXR1cyAhPT0gMjAwICYmIHN0YXR1cyAhPT0gMjA0KSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhuZXcgRXJyb3IoJ2h0dHAgc3RhdHVzICcgKyBzdGF0dXMpKTtcbiAgICAgIH1cbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2Fib3J0Jyk7XG4gICAgICB4by5jbG9zZSgpO1xuICAgICAgeG8gPSBudWxsO1xuXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdBYm9ydGVkJyk7XG4gICAgICBlcnIuY29kZSA9IDEwMDA7XG4gICAgICBjYWxsYmFjayhlcnIpO1xuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIEFqYXhCYXNlZFRyYW5zcG9ydCh0cmFuc1VybCwgdXJsU3VmZml4LCBSZWNlaXZlciwgQWpheE9iamVjdCkge1xuICBTZW5kZXJSZWNlaXZlci5jYWxsKHRoaXMsIHRyYW5zVXJsLCB1cmxTdWZmaXgsIGNyZWF0ZUFqYXhTZW5kZXIoQWpheE9iamVjdCksIFJlY2VpdmVyLCBBamF4T2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoQWpheEJhc2VkVHJhbnNwb3J0LCBTZW5kZXJSZWNlaXZlcik7XG5cbm1vZHVsZS5leHBvcnRzID0gQWpheEJhc2VkVHJhbnNwb3J0O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiLi4vLi4vdXRpbHMvdXJsXCI6NTIsXCIuL3NlbmRlci1yZWNlaXZlclwiOjI4LFwiZGVidWdcIjo1NSxcImluaGVyaXRzXCI6NTd9XSwyNTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpidWZmZXJlZC1zZW5kZXInKTtcbn1cblxuZnVuY3Rpb24gQnVmZmVyZWRTZW5kZXIodXJsLCBzZW5kZXIpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICB0aGlzLnNlbmRlciA9IHNlbmRlcjtcbiAgdGhpcy51cmwgPSB1cmw7XG59XG5cbmluaGVyaXRzKEJ1ZmZlcmVkU2VuZGVyLCBFdmVudEVtaXR0ZXIpO1xuXG5CdWZmZXJlZFNlbmRlci5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcbiAgZGVidWcoJ3NlbmQnLCBtZXNzYWdlKTtcbiAgdGhpcy5zZW5kQnVmZmVyLnB1c2gobWVzc2FnZSk7XG4gIGlmICghdGhpcy5zZW5kU3RvcCkge1xuICAgIHRoaXMuc2VuZFNjaGVkdWxlKCk7XG4gIH1cbn07XG5cbi8vIEZvciBwb2xsaW5nIHRyYW5zcG9ydHMgaW4gYSBzaXR1YXRpb24gd2hlbiBpbiB0aGUgbWVzc2FnZSBjYWxsYmFjayxcbi8vIG5ldyBtZXNzYWdlIGlzIGJlaW5nIHNlbmQuIElmIHRoZSBzZW5kaW5nIGNvbm5lY3Rpb24gd2FzIHN0YXJ0ZWRcbi8vIGJlZm9yZSByZWNlaXZpbmcgb25lLCBpdCBpcyBwb3NzaWJsZSB0byBzYXR1cmF0ZSB0aGUgbmV0d29yayBhbmRcbi8vIHRpbWVvdXQgZHVlIHRvIHRoZSBsYWNrIG9mIHJlY2VpdmluZyBzb2NrZXQuIFRvIGF2b2lkIHRoYXQgd2UgZGVsYXlcbi8vIHNlbmRpbmcgbWVzc2FnZXMgYnkgc29tZSBzbWFsbCB0aW1lLCBpbiBvcmRlciB0byBsZXQgcmVjZWl2aW5nXG4vLyBjb25uZWN0aW9uIGJlIHN0YXJ0ZWQgYmVmb3JlaGFuZC4gVGhpcyBpcyBvbmx5IGEgaGFsZm1lYXN1cmUgYW5kXG4vLyBkb2VzIG5vdCBmaXggdGhlIGJpZyBwcm9ibGVtLCBidXQgaXQgZG9lcyBtYWtlIHRoZSB0ZXN0cyBnbyBtb3JlXG4vLyBzdGFibGUgb24gc2xvdyBuZXR3b3Jrcy5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5zZW5kU2NoZWR1bGVXYWl0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdzZW5kU2NoZWR1bGVXYWl0Jyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHRyZWY7XG4gIHRoaXMuc2VuZFN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnc2VuZFN0b3AnKTtcbiAgICBzZWxmLnNlbmRTdG9wID0gbnVsbDtcbiAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gIH07XG4gIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd0aW1lb3V0Jyk7XG4gICAgc2VsZi5zZW5kU3RvcCA9IG51bGw7XG4gICAgc2VsZi5zZW5kU2NoZWR1bGUoKTtcbiAgfSwgMjUpO1xufTtcblxuQnVmZmVyZWRTZW5kZXIucHJvdG90eXBlLnNlbmRTY2hlZHVsZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1Zygnc2VuZFNjaGVkdWxlJywgdGhpcy5zZW5kQnVmZmVyLmxlbmd0aCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgaWYgKHRoaXMuc2VuZEJ1ZmZlci5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHBheWxvYWQgPSAnWycgKyB0aGlzLnNlbmRCdWZmZXIuam9pbignLCcpICsgJ10nO1xuICAgIHRoaXMuc2VuZFN0b3AgPSB0aGlzLnNlbmRlcih0aGlzLnVybCwgcGF5bG9hZCwgZnVuY3Rpb24oZXJyKSB7XG4gICAgICBzZWxmLnNlbmRTdG9wID0gbnVsbDtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgZGVidWcoJ2Vycm9yJywgZXJyKTtcbiAgICAgICAgc2VsZi5lbWl0KCdjbG9zZScsIGVyci5jb2RlIHx8IDEwMDYsICdTZW5kaW5nIGVycm9yOiAnICsgZXJyKTtcbiAgICAgICAgc2VsZi5jbG9zZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZi5zZW5kU2NoZWR1bGVXYWl0KCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gIH1cbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICBpZiAodGhpcy5zZW5kU3RvcCkge1xuICAgIHRoaXMuc2VuZFN0b3AoKTtcbiAgICB0aGlzLnNlbmRTdG9wID0gbnVsbDtcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBCdWZmZXJlZFNlbmRlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDI2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAoZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIElmcmFtZVRyYW5zcG9ydCA9IHJlcXVpcmUoJy4uL2lmcmFtZScpXG4gICwgb2JqZWN0VXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9vYmplY3QnKVxuICA7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odHJhbnNwb3J0KSB7XG5cbiAgZnVuY3Rpb24gSWZyYW1lV3JhcFRyYW5zcG9ydCh0cmFuc1VybCwgYmFzZVVybCkge1xuICAgIElmcmFtZVRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zcG9ydC50cmFuc3BvcnROYW1lLCB0cmFuc1VybCwgYmFzZVVybCk7XG4gIH1cblxuICBpbmhlcml0cyhJZnJhbWVXcmFwVHJhbnNwb3J0LCBJZnJhbWVUcmFuc3BvcnQpO1xuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQuZW5hYmxlZCA9IGZ1bmN0aW9uKHVybCwgaW5mbykge1xuICAgIGlmICghZ2xvYmFsLmRvY3VtZW50KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGlmcmFtZUluZm8gPSBvYmplY3RVdGlscy5leHRlbmQoe30sIGluZm8pO1xuICAgIGlmcmFtZUluZm8uc2FtZU9yaWdpbiA9IHRydWU7XG4gICAgcmV0dXJuIHRyYW5zcG9ydC5lbmFibGVkKGlmcmFtZUluZm8pICYmIElmcmFtZVRyYW5zcG9ydC5lbmFibGVkKCk7XG4gIH07XG5cbiAgSWZyYW1lV3JhcFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ2lmcmFtZS0nICsgdHJhbnNwb3J0LnRyYW5zcG9ydE5hbWU7XG4gIElmcmFtZVdyYXBUcmFuc3BvcnQubmVlZEJvZHkgPSB0cnVlO1xuICBJZnJhbWVXcmFwVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSBJZnJhbWVUcmFuc3BvcnQucm91bmRUcmlwcyArIHRyYW5zcG9ydC5yb3VuZFRyaXBzIC0gMTsgLy8gaHRtbCwgamF2YXNjcmlwdCAoMikgKyB0cmFuc3BvcnQgLSBubyBDT1JTICgxKVxuXG4gIElmcmFtZVdyYXBUcmFuc3BvcnQuZmFjYWRlVHJhbnNwb3J0ID0gdHJhbnNwb3J0O1xuXG4gIHJldHVybiBJZnJhbWVXcmFwVHJhbnNwb3J0O1xufTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvb2JqZWN0XCI6NDksXCIuLi9pZnJhbWVcIjoyMixcImluaGVyaXRzXCI6NTd9XSwyNzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpwb2xsaW5nJyk7XG59XG5cbmZ1bmN0aW9uIFBvbGxpbmcoUmVjZWl2ZXIsIHJlY2VpdmVVcmwsIEFqYXhPYmplY3QpIHtcbiAgZGVidWcocmVjZWl2ZVVybCk7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuICB0aGlzLlJlY2VpdmVyID0gUmVjZWl2ZXI7XG4gIHRoaXMucmVjZWl2ZVVybCA9IHJlY2VpdmVVcmw7XG4gIHRoaXMuQWpheE9iamVjdCA9IEFqYXhPYmplY3Q7XG4gIHRoaXMuX3NjaGVkdWxlUmVjZWl2ZXIoKTtcbn1cblxuaW5oZXJpdHMoUG9sbGluZywgRXZlbnRFbWl0dGVyKTtcblxuUG9sbGluZy5wcm90b3R5cGUuX3NjaGVkdWxlUmVjZWl2ZXIgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19zY2hlZHVsZVJlY2VpdmVyJyk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHBvbGwgPSB0aGlzLnBvbGwgPSBuZXcgdGhpcy5SZWNlaXZlcih0aGlzLnJlY2VpdmVVcmwsIHRoaXMuQWpheE9iamVjdCk7XG5cbiAgcG9sbC5vbignbWVzc2FnZScsIGZ1bmN0aW9uKG1zZykge1xuICAgIGRlYnVnKCdtZXNzYWdlJywgbXNnKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICB9KTtcblxuICBwb2xsLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gICAgZGVidWcoJ2Nsb3NlJywgY29kZSwgcmVhc29uLCBzZWxmLnBvbGxJc0Nsb3NpbmcpO1xuICAgIHNlbGYucG9sbCA9IHBvbGwgPSBudWxsO1xuXG4gICAgaWYgKCFzZWxmLnBvbGxJc0Nsb3NpbmcpIHtcbiAgICAgIGlmIChyZWFzb24gPT09ICduZXR3b3JrJykge1xuICAgICAgICBzZWxmLl9zY2hlZHVsZVJlY2VpdmVyKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZWxmLmVtaXQoJ2Nsb3NlJywgY29kZSB8fCAxMDA2LCByZWFzb24pO1xuICAgICAgICBzZWxmLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59O1xuXG5Qb2xsaW5nLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnYWJvcnQnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgdGhpcy5wb2xsSXNDbG9zaW5nID0gdHJ1ZTtcbiAgaWYgKHRoaXMucG9sbCkge1xuICAgIHRoaXMucG9sbC5hYm9ydCgpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbGxpbmc7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImluaGVyaXRzXCI6NTd9XSwyODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIEJ1ZmZlcmVkU2VuZGVyID0gcmVxdWlyZSgnLi9idWZmZXJlZC1zZW5kZXInKVxuICAsIFBvbGxpbmcgPSByZXF1aXJlKCcuL3BvbGxpbmcnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6c2VuZGVyLXJlY2VpdmVyJyk7XG59XG5cbmZ1bmN0aW9uIFNlbmRlclJlY2VpdmVyKHRyYW5zVXJsLCB1cmxTdWZmaXgsIHNlbmRlckZ1bmMsIFJlY2VpdmVyLCBBamF4T2JqZWN0KSB7XG4gIHZhciBwb2xsVXJsID0gdXJsVXRpbHMuYWRkUGF0aCh0cmFuc1VybCwgdXJsU3VmZml4KTtcbiAgZGVidWcocG9sbFVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgQnVmZmVyZWRTZW5kZXIuY2FsbCh0aGlzLCB0cmFuc1VybCwgc2VuZGVyRnVuYyk7XG5cbiAgdGhpcy5wb2xsID0gbmV3IFBvbGxpbmcoUmVjZWl2ZXIsIHBvbGxVcmwsIEFqYXhPYmplY3QpO1xuICB0aGlzLnBvbGwub24oJ21lc3NhZ2UnLCBmdW5jdGlvbihtc2cpIHtcbiAgICBkZWJ1ZygncG9sbCBtZXNzYWdlJywgbXNnKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICB9KTtcbiAgdGhpcy5wb2xsLm9uY2UoJ2Nsb3NlJywgZnVuY3Rpb24oY29kZSwgcmVhc29uKSB7XG4gICAgZGVidWcoJ3BvbGwgY2xvc2UnLCBjb2RlLCByZWFzb24pO1xuICAgIHNlbGYucG9sbCA9IG51bGw7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIGNvZGUsIHJlYXNvbik7XG4gICAgc2VsZi5jbG9zZSgpO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoU2VuZGVyUmVjZWl2ZXIsIEJ1ZmZlcmVkU2VuZGVyKTtcblxuU2VuZGVyUmVjZWl2ZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIEJ1ZmZlcmVkU2VuZGVyLnByb3RvdHlwZS5jbG9zZS5jYWxsKHRoaXMpO1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbiAgaWYgKHRoaXMucG9sbCkge1xuICAgIHRoaXMucG9sbC5hYm9ydCgpO1xuICAgIHRoaXMucG9sbCA9IG51bGw7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU2VuZGVyUmVjZWl2ZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuLi8uLi91dGlscy91cmxcIjo1MixcIi4vYnVmZmVyZWQtc2VuZGVyXCI6MjUsXCIuL3BvbGxpbmdcIjoyNyxcImRlYnVnXCI6NTUsXCJpbmhlcml0c1wiOjU3fV0sMjk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIEV2ZW50U291cmNlRHJpdmVyID0gcmVxdWlyZSgnZXZlbnRzb3VyY2UnKVxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6ZXZlbnRzb3VyY2UnKTtcbn1cblxuZnVuY3Rpb24gRXZlbnRTb3VyY2VSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgZXMgPSB0aGlzLmVzID0gbmV3IEV2ZW50U291cmNlRHJpdmVyKHVybCk7XG4gIGVzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICBkZWJ1ZygnbWVzc2FnZScsIGUuZGF0YSk7XG4gICAgc2VsZi5lbWl0KCdtZXNzYWdlJywgZGVjb2RlVVJJKGUuZGF0YSkpO1xuICB9O1xuICBlcy5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdlcnJvcicsIGVzLnJlYWR5U3RhdGUsIGUpO1xuICAgIC8vIEVTIG9uIHJlY29ubmVjdGlvbiBoYXMgcmVhZHlTdGF0ZSA9IDAgb3IgMS5cbiAgICAvLyBvbiBuZXR3b3JrIGVycm9yIGl0J3MgQ0xPU0VEID0gMlxuICAgIHZhciByZWFzb24gPSAoZXMucmVhZHlTdGF0ZSAhPT0gMiA/ICduZXR3b3JrJyA6ICdwZXJtYW5lbnQnKTtcbiAgICBzZWxmLl9jbGVhbnVwKCk7XG4gICAgc2VsZi5fY2xvc2UocmVhc29uKTtcbiAgfTtcbn1cblxuaW5oZXJpdHMoRXZlbnRTb3VyY2VSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuRXZlbnRTb3VyY2VSZWNlaXZlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIHRoaXMuX2NsZWFudXAoKTtcbiAgdGhpcy5fY2xvc2UoJ3VzZXInKTtcbn07XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbGVhbnVwJyk7XG4gIHZhciBlcyA9IHRoaXMuZXM7XG4gIGlmIChlcykge1xuICAgIGVzLm9ubWVzc2FnZSA9IGVzLm9uZXJyb3IgPSBudWxsO1xuICAgIGVzLmNsb3NlKCk7XG4gICAgdGhpcy5lcyA9IG51bGw7XG4gIH1cbn07XG5cbkV2ZW50U291cmNlUmVjZWl2ZXIucHJvdG90eXBlLl9jbG9zZSA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICBkZWJ1ZygnY2xvc2UnLCByZWFzb24pO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIC8vIFNhZmFyaSBhbmQgY2hyb21lIDwgMTUgY3Jhc2ggaWYgd2UgY2xvc2Ugd2luZG93IGJlZm9yZVxuICAvLyB3YWl0aW5nIGZvciBFUyBjbGVhbnVwLiBTZWU6XG4gIC8vIGh0dHBzOi8vY29kZS5nb29nbGUuY29tL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04OTE1NVxuICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBudWxsLCByZWFzb24pO1xuICAgIHNlbGYucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG4gIH0sIDIwMCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U291cmNlUmVjZWl2ZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1LFwiZXZlbnRzXCI6MyxcImV2ZW50c291cmNlXCI6MTgsXCJpbmhlcml0c1wiOjU3fV0sMzA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBpZnJhbWVVdGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lmcmFtZScpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIHJhbmRvbSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3JhbmRvbScpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDpyZWNlaXZlcjpodG1sZmlsZScpO1xufVxuXG5mdW5jdGlvbiBIdG1sZmlsZVJlY2VpdmVyKHVybCkge1xuICBkZWJ1Zyh1cmwpO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZnJhbWVVdGlscy5wb2xsdXRlR2xvYmFsTmFtZXNwYWNlKCk7XG5cbiAgdGhpcy5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoNik7XG4gIHVybCA9IHVybFV0aWxzLmFkZFF1ZXJ5KHVybCwgJ2M9JyArIGRlY29kZVVSSUNvbXBvbmVudChpZnJhbWVVdGlscy5XUHJlZml4ICsgJy4nICsgdGhpcy5pZCkpO1xuXG4gIGRlYnVnKCd1c2luZyBodG1sZmlsZScsIEh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkKTtcbiAgdmFyIGNvbnN0cnVjdEZ1bmMgPSBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA/XG4gICAgICBpZnJhbWVVdGlscy5jcmVhdGVIdG1sZmlsZSA6IGlmcmFtZVV0aWxzLmNyZWF0ZUlmcmFtZTtcblxuICBnbG9iYWxbaWZyYW1lVXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0gPSB7XG4gICAgc3RhcnQ6IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ3N0YXJ0Jyk7XG4gICAgICBzZWxmLmlmcmFtZU9iai5sb2FkZWQoKTtcbiAgICB9XG4gICwgbWVzc2FnZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgZGVidWcoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICAgIHNlbGYuZW1pdCgnbWVzc2FnZScsIGRhdGEpO1xuICAgIH1cbiAgLCBzdG9wOiBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdzdG9wJyk7XG4gICAgICBzZWxmLl9jbGVhbnVwKCk7XG4gICAgICBzZWxmLl9jbG9zZSgnbmV0d29yaycpO1xuICAgIH1cbiAgfTtcbiAgdGhpcy5pZnJhbWVPYmogPSBjb25zdHJ1Y3RGdW5jKHVybCwgZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2NhbGxiYWNrJyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICAgIHNlbGYuX2Nsb3NlKCdwZXJtYW5lbnQnKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEh0bWxmaWxlUmVjZWl2ZXIsIEV2ZW50RW1pdHRlcik7XG5cbkh0bWxmaWxlUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIHRoaXMuX2Nsb3NlKCd1c2VyJyk7XG59O1xuXG5IdG1sZmlsZVJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgaWYgKHRoaXMuaWZyYW1lT2JqKSB7XG4gICAgdGhpcy5pZnJhbWVPYmouY2xlYW51cCgpO1xuICAgIHRoaXMuaWZyYW1lT2JqID0gbnVsbDtcbiAgfVxuICBkZWxldGUgZ2xvYmFsW2lmcmFtZVV0aWxzLldQcmVmaXhdW3RoaXMuaWRdO1xufTtcblxuSHRtbGZpbGVSZWNlaXZlci5wcm90b3R5cGUuX2Nsb3NlID0gZnVuY3Rpb24ocmVhc29uKSB7XG4gIGRlYnVnKCdfY2xvc2UnLCByZWFzb24pO1xuICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgcmVhc29uKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkID0gZmFsc2U7XG5cbi8vIG9iZnVzY2F0ZSB0byBhdm9pZCBmaXJld2FsbHNcbnZhciBheG8gPSBbJ0FjdGl2ZSddLmNvbmNhdCgnT2JqZWN0Jykuam9pbignWCcpO1xuaWYgKGF4byBpbiBnbG9iYWwpIHtcbiAgdHJ5IHtcbiAgICBIdG1sZmlsZVJlY2VpdmVyLmh0bWxmaWxlRW5hYmxlZCA9ICEhbmV3IGdsb2JhbFtheG9dKCdodG1sZmlsZScpO1xuICB9IGNhdGNoICh4KSB7XG4gICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICB9XG59XG5cbkh0bWxmaWxlUmVjZWl2ZXIuZW5hYmxlZCA9IEh0bWxmaWxlUmVjZWl2ZXIuaHRtbGZpbGVFbmFibGVkIHx8IGlmcmFtZVV0aWxzLmlmcmFtZUVuYWJsZWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gSHRtbGZpbGVSZWNlaXZlcjtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvaWZyYW1lXCI6NDcsXCIuLi8uLi91dGlscy9yYW5kb21cIjo1MCxcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMzE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2lmcmFtZScpXG4gICwgcmFuZG9tID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcmFuZG9tJylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvYnJvd3NlcicpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy91cmwnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICA7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6cmVjZWl2ZXI6anNvbnAnKTtcbn1cblxuZnVuY3Rpb24gSnNvbnBSZWNlaXZlcih1cmwpIHtcbiAgZGVidWcodXJsKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcblxuICB1dGlscy5wb2xsdXRlR2xvYmFsTmFtZXNwYWNlKCk7XG5cbiAgdGhpcy5pZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoNik7XG4gIHZhciB1cmxXaXRoSWQgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICdjPScgKyBlbmNvZGVVUklDb21wb25lbnQodXRpbHMuV1ByZWZpeCArICcuJyArIHRoaXMuaWQpKTtcblxuICBnbG9iYWxbdXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0gPSB0aGlzLl9jYWxsYmFjay5iaW5kKHRoaXMpO1xuICB0aGlzLl9jcmVhdGVTY3JpcHQodXJsV2l0aElkKTtcblxuICAvLyBGYWxsYmFjayBtb3N0bHkgZm9yIEtvbnF1ZXJvciAtIHN0dXBpZCB0aW1lciwgMzUgc2Vjb25kcyBzaGFsbCBiZSBwbGVudHkuXG4gIHRoaXMudGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygndGltZW91dCcpO1xuICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5ICh0aW1lb3V0KScpKTtcbiAgfSwgSnNvbnBSZWNlaXZlci50aW1lb3V0KTtcbn1cblxuaW5oZXJpdHMoSnNvbnBSZWNlaXZlciwgRXZlbnRFbWl0dGVyKTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuYWJvcnQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2Fib3J0Jyk7XG4gIGlmIChnbG9iYWxbdXRpbHMuV1ByZWZpeF1bdGhpcy5pZF0pIHtcbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdKU09OUCB1c2VyIGFib3J0ZWQgcmVhZCcpO1xuICAgIGVyci5jb2RlID0gMTAwMDtcbiAgICB0aGlzLl9hYm9ydChlcnIpO1xuICB9XG59O1xuXG5Kc29ucFJlY2VpdmVyLnRpbWVvdXQgPSAzNTAwMDtcbkpzb25wUmVjZWl2ZXIuc2NyaXB0RXJyb3JUaW1lb3V0ID0gMTAwMDtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NhbGxiYWNrID0gZnVuY3Rpb24oZGF0YSkge1xuICBkZWJ1ZygnX2NhbGxiYWNrJywgZGF0YSk7XG4gIHRoaXMuX2NsZWFudXAoKTtcblxuICBpZiAodGhpcy5hYm9ydGluZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChkYXRhKSB7XG4gICAgZGVidWcoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBkYXRhKTtcbiAgfVxuICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgJ25ldHdvcmsnKTtcbiAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcbn07XG5cbkpzb25wUmVjZWl2ZXIucHJvdG90eXBlLl9hYm9ydCA9IGZ1bmN0aW9uKGVycikge1xuICBkZWJ1ZygnX2Fib3J0JywgZXJyKTtcbiAgdGhpcy5fY2xlYW51cCgpO1xuICB0aGlzLmFib3J0aW5nID0gdHJ1ZTtcbiAgdGhpcy5lbWl0KCdjbG9zZScsIGVyci5jb2RlLCBlcnIubWVzc2FnZSk7XG4gIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG59O1xuXG5Kc29ucFJlY2VpdmVyLnByb3RvdHlwZS5fY2xlYW51cCA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnX2NsZWFudXAnKTtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTtcbiAgaWYgKHRoaXMuc2NyaXB0Mikge1xuICAgIHRoaXMuc2NyaXB0Mi5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2NyaXB0Mik7XG4gICAgdGhpcy5zY3JpcHQyID0gbnVsbDtcbiAgfVxuICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICB2YXIgc2NyaXB0ID0gdGhpcy5zY3JpcHQ7XG4gICAgLy8gVW5mb3J0dW5hdGVseSwgeW91IGNhbid0IHJlYWxseSBhYm9ydCBzY3JpcHQgbG9hZGluZyBvZlxuICAgIC8vIHRoZSBzY3JpcHQuXG4gICAgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gc2NyaXB0Lm9uZXJyb3IgPVxuICAgICAgICBzY3JpcHQub25sb2FkID0gc2NyaXB0Lm9uY2xpY2sgPSBudWxsO1xuICAgIHRoaXMuc2NyaXB0ID0gbnVsbDtcbiAgfVxuICBkZWxldGUgZ2xvYmFsW3V0aWxzLldQcmVmaXhdW3RoaXMuaWRdO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX3NjcmlwdEVycm9yID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfc2NyaXB0RXJyb3InKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBpZiAodGhpcy5lcnJvclRpbWVyKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdGhpcy5lcnJvclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICBpZiAoIXNlbGYubG9hZGVkT2theSkge1xuICAgICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKG9uZXJyb3IpJykpO1xuICAgIH1cbiAgfSwgSnNvbnBSZWNlaXZlci5zY3JpcHRFcnJvclRpbWVvdXQpO1xufTtcblxuSnNvbnBSZWNlaXZlci5wcm90b3R5cGUuX2NyZWF0ZVNjcmlwdCA9IGZ1bmN0aW9uKHVybCkge1xuICBkZWJ1ZygnX2NyZWF0ZVNjcmlwdCcsIHVybCk7XG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHNjcmlwdCA9IHRoaXMuc2NyaXB0ID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICB2YXIgc2NyaXB0MjsgIC8vIE9wZXJhIHN5bmNocm9ub3VzIGxvYWQgdHJpY2suXG5cbiAgc2NyaXB0LmlkID0gJ2EnICsgcmFuZG9tLnN0cmluZyg4KTtcbiAgc2NyaXB0LnNyYyA9IHVybDtcbiAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgc2NyaXB0LmNoYXJzZXQgPSAnVVRGLTgnO1xuICBzY3JpcHQub25lcnJvciA9IHRoaXMuX3NjcmlwdEVycm9yLmJpbmQodGhpcyk7XG4gIHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25sb2FkJyk7XG4gICAgc2VsZi5fYWJvcnQobmV3IEVycm9yKCdKU09OUCBzY3JpcHQgbG9hZGVkIGFibm9ybWFsbHkgKG9ubG9hZCknKSk7XG4gIH07XG5cbiAgLy8gSUU5IGZpcmVzICdlcnJvcicgZXZlbnQgYWZ0ZXIgb25yZWFkeXN0YXRlY2hhbmdlIG9yIGJlZm9yZSwgaW4gcmFuZG9tIG9yZGVyLlxuICAvLyBVc2UgbG9hZGVkT2theSB0byBkZXRlcm1pbmUgaWYgYWN0dWFsbHkgZXJyb3JlZFxuICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIHNjcmlwdC5yZWFkeVN0YXRlKTtcbiAgICBpZiAoL2xvYWRlZHxjbG9zZWQvLnRlc3Qoc2NyaXB0LnJlYWR5U3RhdGUpKSB7XG4gICAgICBpZiAoc2NyaXB0ICYmIHNjcmlwdC5odG1sRm9yICYmIHNjcmlwdC5vbmNsaWNrKSB7XG4gICAgICAgIHNlbGYubG9hZGVkT2theSA9IHRydWU7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gSW4gSUUsIGFjdHVhbGx5IGV4ZWN1dGUgdGhlIHNjcmlwdC5cbiAgICAgICAgICBzY3JpcHQub25jbGljaygpO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc2NyaXB0KSB7XG4gICAgICAgIHNlbGYuX2Fib3J0KG5ldyBFcnJvcignSlNPTlAgc2NyaXB0IGxvYWRlZCBhYm5vcm1hbGx5IChvbnJlYWR5c3RhdGVjaGFuZ2UpJykpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gSUU6IGV2ZW50L2h0bWxGb3Ivb25jbGljayB0cmljay5cbiAgLy8gT25lIGNhbid0IHJlbHkgb24gcHJvcGVyIG9yZGVyIGZvciBvbnJlYWR5c3RhdGVjaGFuZ2UuIEluIG9yZGVyIHRvXG4gIC8vIG1ha2Ugc3VyZSwgc2V0IGEgJ2h0bWxGb3InIGFuZCAnZXZlbnQnIHByb3BlcnRpZXMsIHNvIHRoYXRcbiAgLy8gc2NyaXB0IGNvZGUgd2lsbCBiZSBpbnN0YWxsZWQgYXMgJ29uY2xpY2snIGhhbmRsZXIgZm9yIHRoZVxuICAvLyBzY3JpcHQgb2JqZWN0LiBMYXRlciwgb25yZWFkeXN0YXRlY2hhbmdlLCBtYW51YWxseSBleGVjdXRlIHRoaXNcbiAgLy8gY29kZS4gRkYgYW5kIENocm9tZSBkb2Vzbid0IHdvcmsgd2l0aCAnZXZlbnQnIGFuZCAnaHRtbEZvcidcbiAgLy8gc2V0LiBGb3IgcmVmZXJlbmNlIHNlZTpcbiAgLy8gICBodHRwOi8vamF1Ym91cmcubmV0LzIwMTAvMDcvbG9hZGluZy1zY3JpcHQtYXMtb25jbGljay1oYW5kbGVyLW9mLmh0bWxcbiAgLy8gQWxzbywgcmVhZCBvbiB0aGF0IGFib3V0IHNjcmlwdCBvcmRlcmluZzpcbiAgLy8gICBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvRHluYW1pY19TY3JpcHRfRXhlY3V0aW9uX09yZGVyXG4gIGlmICh0eXBlb2Ygc2NyaXB0LmFzeW5jID09PSAndW5kZWZpbmVkJyAmJiBnbG9iYWwuZG9jdW1lbnQuYXR0YWNoRXZlbnQpIHtcbiAgICAvLyBBY2NvcmRpbmcgdG8gbW96aWxsYSBkb2NzLCBpbiByZWNlbnQgYnJvd3NlcnMgc2NyaXB0LmFzeW5jIGRlZmF1bHRzXG4gICAgLy8gdG8gJ3RydWUnLCBzbyB3ZSBtYXkgdXNlIGl0IHRvIGRldGVjdCBhIGdvb2QgYnJvd3NlcjpcbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi9IVE1ML0VsZW1lbnQvc2NyaXB0XG4gICAgaWYgKCFicm93c2VyLmlzT3BlcmEoKSkge1xuICAgICAgLy8gTmFpdmVseSBhc3N1bWUgd2UncmUgaW4gSUVcbiAgICAgIHRyeSB7XG4gICAgICAgIHNjcmlwdC5odG1sRm9yID0gc2NyaXB0LmlkO1xuICAgICAgICBzY3JpcHQuZXZlbnQgPSAnb25jbGljayc7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgIH1cbiAgICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE9wZXJhLCBzZWNvbmQgc3luYyBzY3JpcHQgaGFja1xuICAgICAgc2NyaXB0MiA9IHRoaXMuc2NyaXB0MiA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICAgIHNjcmlwdDIudGV4dCA9IFwidHJ5e3ZhciBhID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ1wiICsgc2NyaXB0LmlkICsgXCInKTsgaWYoYSlhLm9uZXJyb3IoKTt9Y2F0Y2goeCl7fTtcIjtcbiAgICAgIHNjcmlwdC5hc3luYyA9IHNjcmlwdDIuYXN5bmMgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBzY3JpcHQuYXN5bmMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTtcbiAgfVxuXG4gIHZhciBoZWFkID0gZ2xvYmFsLmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF07XG4gIGhlYWQuaW5zZXJ0QmVmb3JlKHNjcmlwdCwgaGVhZC5maXJzdENoaWxkKTtcbiAgaWYgKHNjcmlwdDIpIHtcbiAgICBoZWFkLmluc2VydEJlZm9yZShzY3JpcHQyLCBoZWFkLmZpcnN0Q2hpbGQpO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25wUmVjZWl2ZXI7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uLy4uL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4uLy4uL3V0aWxzL2lmcmFtZVwiOjQ3LFwiLi4vLi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDMyOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBFdmVudEVtaXR0ZXIgPSByZXF1aXJlKCdldmVudHMnKS5FdmVudEVtaXR0ZXJcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnJlY2VpdmVyOnhocicpO1xufVxuXG5mdW5jdGlvbiBYaHJSZWNlaXZlcih1cmwsIEFqYXhPYmplY3QpIHtcbiAgZGVidWcodXJsKTtcbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG4gIHZhciBzZWxmID0gdGhpcztcblxuICB0aGlzLmJ1ZmZlclBvc2l0aW9uID0gMDtcblxuICB0aGlzLnhvID0gbmV3IEFqYXhPYmplY3QoJ1BPU1QnLCB1cmwsIG51bGwpO1xuICB0aGlzLnhvLm9uKCdjaHVuaycsIHRoaXMuX2NodW5rSGFuZGxlci5iaW5kKHRoaXMpKTtcbiAgdGhpcy54by5vbmNlKCdmaW5pc2gnLCBmdW5jdGlvbihzdGF0dXMsIHRleHQpIHtcbiAgICBkZWJ1ZygnZmluaXNoJywgc3RhdHVzLCB0ZXh0KTtcbiAgICBzZWxmLl9jaHVua0hhbmRsZXIoc3RhdHVzLCB0ZXh0KTtcbiAgICBzZWxmLnhvID0gbnVsbDtcbiAgICB2YXIgcmVhc29uID0gc3RhdHVzID09PSAyMDAgPyAnbmV0d29yaycgOiAncGVybWFuZW50JztcbiAgICBkZWJ1ZygnY2xvc2UnLCByZWFzb24pO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCBudWxsLCByZWFzb24pO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKFhoclJlY2VpdmVyLCBFdmVudEVtaXR0ZXIpO1xuXG5YaHJSZWNlaXZlci5wcm90b3R5cGUuX2NodW5rSGFuZGxlciA9IGZ1bmN0aW9uKHN0YXR1cywgdGV4dCkge1xuICBkZWJ1ZygnX2NodW5rSGFuZGxlcicsIHN0YXR1cyk7XG4gIGlmIChzdGF0dXMgIT09IDIwMCB8fCAhdGV4dCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGZvciAodmFyIGlkeCA9IC0xOyA7IHRoaXMuYnVmZmVyUG9zaXRpb24gKz0gaWR4ICsgMSkge1xuICAgIHZhciBidWYgPSB0ZXh0LnNsaWNlKHRoaXMuYnVmZmVyUG9zaXRpb24pO1xuICAgIGlkeCA9IGJ1Zi5pbmRleE9mKCdcXG4nKTtcbiAgICBpZiAoaWR4ID09PSAtMSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHZhciBtc2cgPSBidWYuc2xpY2UoMCwgaWR4KTtcbiAgICBpZiAobXNnKSB7XG4gICAgICBkZWJ1ZygnbWVzc2FnZScsIG1zZyk7XG4gICAgICB0aGlzLmVtaXQoJ21lc3NhZ2UnLCBtc2cpO1xuICAgIH1cbiAgfVxufTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLl9jbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdfY2xlYW51cCcpO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuWGhyUmVjZWl2ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdhYm9ydCcpO1xuICBpZiAodGhpcy54bykge1xuICAgIHRoaXMueG8uY2xvc2UoKTtcbiAgICBkZWJ1ZygnY2xvc2UnKTtcbiAgICB0aGlzLmVtaXQoJ2Nsb3NlJywgbnVsbCwgJ3VzZXInKTtcbiAgICB0aGlzLnhvID0gbnVsbDtcbiAgfVxuICB0aGlzLl9jbGVhbnVwKCk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhoclJlY2VpdmVyO1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMzM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzLGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciByYW5kb20gPSByZXF1aXJlKCcuLi8uLi91dGlscy9yYW5kb20nKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlcjpqc29ucCcpO1xufVxuXG52YXIgZm9ybSwgYXJlYTtcblxuZnVuY3Rpb24gY3JlYXRlSWZyYW1lKGlkKSB7XG4gIGRlYnVnKCdjcmVhdGVJZnJhbWUnLCBpZCk7XG4gIHRyeSB7XG4gICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgcmV0dXJuIGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCc8aWZyYW1lIG5hbWU9XCInICsgaWQgKyAnXCI+Jyk7XG4gIH0gY2F0Y2ggKHgpIHtcbiAgICB2YXIgaWZyYW1lID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5uYW1lID0gaWQ7XG4gICAgcmV0dXJuIGlmcmFtZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGb3JtKCkge1xuICBkZWJ1ZygnY3JlYXRlRm9ybScpO1xuICBmb3JtID0gZ2xvYmFsLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2Zvcm0nKTtcbiAgZm9ybS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgZm9ybS5tZXRob2QgPSAnUE9TVCc7XG4gIGZvcm0uZW5jdHlwZSA9ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnO1xuICBmb3JtLmFjY2VwdENoYXJzZXQgPSAnVVRGLTgnO1xuXG4gIGFyZWEgPSBnbG9iYWwuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGV4dGFyZWEnKTtcbiAgYXJlYS5uYW1lID0gJ2QnO1xuICBmb3JtLmFwcGVuZENoaWxkKGFyZWEpO1xuXG4gIGdsb2JhbC5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVybCwgcGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgZGVidWcodXJsLCBwYXlsb2FkKTtcbiAgaWYgKCFmb3JtKSB7XG4gICAgY3JlYXRlRm9ybSgpO1xuICB9XG4gIHZhciBpZCA9ICdhJyArIHJhbmRvbS5zdHJpbmcoOCk7XG4gIGZvcm0udGFyZ2V0ID0gaWQ7XG4gIGZvcm0uYWN0aW9uID0gdXJsVXRpbHMuYWRkUXVlcnkodXJsVXRpbHMuYWRkUGF0aCh1cmwsICcvanNvbnBfc2VuZCcpLCAnaT0nICsgaWQpO1xuXG4gIHZhciBpZnJhbWUgPSBjcmVhdGVJZnJhbWUoaWQpO1xuICBpZnJhbWUuaWQgPSBpZDtcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIGZvcm0uYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblxuICB0cnkge1xuICAgIGFyZWEudmFsdWUgPSBwYXlsb2FkO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gc2VyaW91c2x5IGJyb2tlbiBicm93c2VycyBnZXQgaGVyZVxuICB9XG4gIGZvcm0uc3VibWl0KCk7XG5cbiAgdmFyIGNvbXBsZXRlZCA9IGZ1bmN0aW9uKGVycikge1xuICAgIGRlYnVnKCdjb21wbGV0ZWQnLCBpZCwgZXJyKTtcbiAgICBpZiAoIWlmcmFtZS5vbmVycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBpZnJhbWUub25lcnJvciA9IGlmcmFtZS5vbmxvYWQgPSBudWxsO1xuICAgIC8vIE9wZXJhIG1pbmkgZG9lc24ndCBsaWtlIGlmIHdlIEdDIGlmcmFtZVxuICAgIC8vIGltbWVkaWF0ZWx5LCB0aHVzIHRoaXMgdGltZW91dC5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ2NsZWFuaW5nIHVwJywgaWQpO1xuICAgICAgaWZyYW1lLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaWZyYW1lKTtcbiAgICAgIGlmcmFtZSA9IG51bGw7XG4gICAgfSwgNTAwKTtcbiAgICBhcmVhLnZhbHVlID0gJyc7XG4gICAgLy8gSXQgaXMgbm90IHBvc3NpYmxlIHRvIGRldGVjdCBpZiB0aGUgaWZyYW1lIHN1Y2NlZWRlZCBvclxuICAgIC8vIGZhaWxlZCB0byBzdWJtaXQgb3VyIGZvcm0uXG4gICAgY2FsbGJhY2soZXJyKTtcbiAgfTtcbiAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICBkZWJ1Zygnb25lcnJvcicsIGlkKTtcbiAgICBjb21wbGV0ZWQoKTtcbiAgfTtcbiAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbmxvYWQnLCBpZCk7XG4gICAgY29tcGxldGVkKCk7XG4gIH07XG4gIGlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ29ucmVhZHlzdGF0ZWNoYW5nZScsIGlkLCBpZnJhbWUucmVhZHlTdGF0ZSwgZSk7XG4gICAgaWYgKGlmcmFtZS5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBjb21wbGV0ZWQoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBkZWJ1ZygnYWJvcnRlZCcsIGlkKTtcbiAgICBjb21wbGV0ZWQobmV3IEVycm9yKCdBYm9ydGVkJykpO1xuICB9O1xufTtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvcmFuZG9tXCI6NTAsXCIuLi8uLi91dGlscy91cmxcIjo1MixcImRlYnVnXCI6NTV9XSwzNDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy9ldmVudCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Jyb3dzZXInKVxuICAsIHVybFV0aWxzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvdXJsJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnNlbmRlcjp4ZHInKTtcbn1cblxuLy8gUmVmZXJlbmNlczpcbi8vICAgaHR0cDovL2FqYXhpYW4uY29tL2FyY2hpdmVzLzEwMC1saW5lLWFqYXgtd3JhcHBlclxuLy8gICBodHRwOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyODgwNjAodj1WUy44NSkuYXNweFxuXG5mdW5jdGlvbiBYRFJPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQpIHtcbiAgZGVidWcobWV0aG9kLCB1cmwpO1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XG4gICAgc2VsZi5fc3RhcnQobWV0aG9kLCB1cmwsIHBheWxvYWQpO1xuICB9LCAwKTtcbn1cblxuaW5oZXJpdHMoWERST2JqZWN0LCBFdmVudEVtaXR0ZXIpO1xuXG5YRFJPYmplY3QucHJvdG90eXBlLl9zdGFydCA9IGZ1bmN0aW9uKG1ldGhvZCwgdXJsLCBwYXlsb2FkKSB7XG4gIGRlYnVnKCdfc3RhcnQnKTtcbiAgdmFyIHNlbGYgPSB0aGlzO1xuICB2YXIgeGRyID0gbmV3IGdsb2JhbC5YRG9tYWluUmVxdWVzdCgpO1xuICAvLyBJRSBjYWNoZXMgZXZlbiBQT1NUc1xuICB1cmwgPSB1cmxVdGlscy5hZGRRdWVyeSh1cmwsICd0PScgKyAoK25ldyBEYXRlKCkpKTtcblxuICB4ZHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbmVycm9yJyk7XG4gICAgc2VsZi5fZXJyb3IoKTtcbiAgfTtcbiAgeGRyLm9udGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdvbnRpbWVvdXQnKTtcbiAgICBzZWxmLl9lcnJvcigpO1xuICB9O1xuICB4ZHIub25wcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCdwcm9ncmVzcycsIHhkci5yZXNwb25zZVRleHQpO1xuICAgIHNlbGYuZW1pdCgnY2h1bmsnLCAyMDAsIHhkci5yZXNwb25zZVRleHQpO1xuICB9O1xuICB4ZHIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgZGVidWcoJ2xvYWQnKTtcbiAgICBzZWxmLmVtaXQoJ2ZpbmlzaCcsIDIwMCwgeGRyLnJlc3BvbnNlVGV4dCk7XG4gICAgc2VsZi5fY2xlYW51cChmYWxzZSk7XG4gIH07XG4gIHRoaXMueGRyID0geGRyO1xuICB0aGlzLnVubG9hZFJlZiA9IGV2ZW50VXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuX2NsZWFudXAodHJ1ZSk7XG4gIH0pO1xuICB0cnkge1xuICAgIC8vIEZhaWxzIHdpdGggQWNjZXNzRGVuaWVkIGlmIHBvcnQgbnVtYmVyIGlzIGJvZ3VzXG4gICAgdGhpcy54ZHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgaWYgKHRoaXMudGltZW91dCkge1xuICAgICAgdGhpcy54ZHIudGltZW91dCA9IHRoaXMudGltZW91dDtcbiAgICB9XG4gICAgdGhpcy54ZHIuc2VuZChwYXlsb2FkKTtcbiAgfSBjYXRjaCAoeCkge1xuICAgIHRoaXMuX2Vycm9yKCk7XG4gIH1cbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZW1pdCgnZmluaXNoJywgMCwgJycpO1xuICB0aGlzLl9jbGVhbnVwKGZhbHNlKTtcbn07XG5cblhEUk9iamVjdC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbihhYm9ydCkge1xuICBkZWJ1ZygnY2xlYW51cCcsIGFib3J0KTtcbiAgaWYgKCF0aGlzLnhkcikge1xuICAgIHJldHVybjtcbiAgfVxuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xuICBldmVudFV0aWxzLnVubG9hZERlbCh0aGlzLnVubG9hZFJlZik7XG5cbiAgdGhpcy54ZHIub250aW1lb3V0ID0gdGhpcy54ZHIub25lcnJvciA9IHRoaXMueGRyLm9ucHJvZ3Jlc3MgPSB0aGlzLnhkci5vbmxvYWQgPSBudWxsO1xuICBpZiAoYWJvcnQpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy54ZHIuYWJvcnQoKTtcbiAgICB9IGNhdGNoICh4KSB7XG4gICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgfVxuICB9XG4gIHRoaXMudW5sb2FkUmVmID0gdGhpcy54ZHIgPSBudWxsO1xufTtcblxuWERST2JqZWN0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICBkZWJ1ZygnY2xvc2UnKTtcbiAgdGhpcy5fY2xlYW51cCh0cnVlKTtcbn07XG5cbi8vIElFIDgvOSBpZiB0aGUgcmVxdWVzdCB0YXJnZXQgdXNlcyB0aGUgc2FtZSBzY2hlbWUgLSAjNzlcblhEUk9iamVjdC5lbmFibGVkID0gISEoZ2xvYmFsLlhEb21haW5SZXF1ZXN0ICYmIGJyb3dzZXIuaGFzRG9tYWluKCkpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhEUk9iamVjdDtcblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9LHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se1wiLi4vLi4vdXRpbHMvYnJvd3NlclwiOjQ0LFwiLi4vLi4vdXRpbHMvZXZlbnRcIjo0NixcIi4uLy4uL3V0aWxzL3VybFwiOjUyLFwiZGVidWdcIjo1NSxcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMzU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgWGhyRHJpdmVyID0gcmVxdWlyZSgnLi4vZHJpdmVyL3hocicpXG4gIDtcblxuZnVuY3Rpb24gWEhSQ29yc09iamVjdChtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cykge1xuICBYaHJEcml2ZXIuY2FsbCh0aGlzLCBtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cyk7XG59XG5cbmluaGVyaXRzKFhIUkNvcnNPYmplY3QsIFhockRyaXZlcik7XG5cblhIUkNvcnNPYmplY3QuZW5hYmxlZCA9IFhockRyaXZlci5lbmFibGVkICYmIFhockRyaXZlci5zdXBwb3J0c0NPUlM7XG5cbm1vZHVsZS5leHBvcnRzID0gWEhSQ29yc09iamVjdDtcblxufSx7XCIuLi9kcml2ZXIveGhyXCI6MTcsXCJpbmhlcml0c1wiOjU3fV0sMzY6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZSgnZXZlbnRzJykuRXZlbnRFbWl0dGVyXG4gICwgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gIDtcblxuZnVuY3Rpb24gWEhSRmFrZSgvKiBtZXRob2QsIHVybCwgcGF5bG9hZCwgb3B0cyAqLykge1xuICB2YXIgc2VsZiA9IHRoaXM7XG4gIEV2ZW50RW1pdHRlci5jYWxsKHRoaXMpO1xuXG4gIHRoaXMudG8gPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgIHNlbGYuZW1pdCgnZmluaXNoJywgMjAwLCAne30nKTtcbiAgfSwgWEhSRmFrZS50aW1lb3V0KTtcbn1cblxuaW5oZXJpdHMoWEhSRmFrZSwgRXZlbnRFbWl0dGVyKTtcblxuWEhSRmFrZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgY2xlYXJUaW1lb3V0KHRoaXMudG8pO1xufTtcblxuWEhSRmFrZS50aW1lb3V0ID0gMjAwMDtcblxubW9kdWxlLmV4cG9ydHMgPSBYSFJGYWtlO1xuXG59LHtcImV2ZW50c1wiOjMsXCJpbmhlcml0c1wiOjU3fV0sMzc6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgWGhyRHJpdmVyID0gcmVxdWlyZSgnLi4vZHJpdmVyL3hocicpXG4gIDtcblxuZnVuY3Rpb24gWEhSTG9jYWxPYmplY3QobWV0aG9kLCB1cmwsIHBheWxvYWQgLyosIG9wdHMgKi8pIHtcbiAgWGhyRHJpdmVyLmNhbGwodGhpcywgbWV0aG9kLCB1cmwsIHBheWxvYWQsIHtcbiAgICBub0NyZWRlbnRpYWxzOiB0cnVlXG4gIH0pO1xufVxuXG5pbmhlcml0cyhYSFJMb2NhbE9iamVjdCwgWGhyRHJpdmVyKTtcblxuWEhSTG9jYWxPYmplY3QuZW5hYmxlZCA9IFhockRyaXZlci5lbmFibGVkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUkxvY2FsT2JqZWN0O1xuXG59LHtcIi4uL2RyaXZlci94aHJcIjoxNyxcImluaGVyaXRzXCI6NTd9XSwzODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3Mpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy9ldmVudCcpXG4gICwgdXJsVXRpbHMgPSByZXF1aXJlKCcuLi91dGlscy91cmwnKVxuICAsIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEV2ZW50RW1pdHRlciA9IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuICAsIFdlYnNvY2tldERyaXZlciA9IHJlcXVpcmUoJy4vZHJpdmVyL3dlYnNvY2tldCcpXG4gIDtcblxudmFyIGRlYnVnID0gZnVuY3Rpb24oKSB7fTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIGRlYnVnID0gcmVxdWlyZSgnZGVidWcnKSgnc29ja2pzLWNsaWVudDp3ZWJzb2NrZXQnKTtcbn1cblxuZnVuY3Rpb24gV2ViU29ja2V0VHJhbnNwb3J0KHRyYW5zVXJsLCBpZ25vcmUsIG9wdGlvbnMpIHtcbiAgaWYgKCFXZWJTb2NrZXRUcmFuc3BvcnQuZW5hYmxlZCgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbiAgZGVidWcoJ2NvbnN0cnVjdG9yJywgdHJhbnNVcmwpO1xuXG4gIHZhciBzZWxmID0gdGhpcztcbiAgdmFyIHVybCA9IHVybFV0aWxzLmFkZFBhdGgodHJhbnNVcmwsICcvd2Vic29ja2V0Jyk7XG4gIGlmICh1cmwuc2xpY2UoMCwgNSkgPT09ICdodHRwcycpIHtcbiAgICB1cmwgPSAnd3NzJyArIHVybC5zbGljZSg1KTtcbiAgfSBlbHNlIHtcbiAgICB1cmwgPSAnd3MnICsgdXJsLnNsaWNlKDQpO1xuICB9XG4gIHRoaXMudXJsID0gdXJsO1xuXG4gIHRoaXMud3MgPSBuZXcgV2Vic29ja2V0RHJpdmVyKHRoaXMudXJsLCBbXSwgb3B0aW9ucyk7XG4gIHRoaXMud3Mub25tZXNzYWdlID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdtZXNzYWdlIGV2ZW50JywgZS5kYXRhKTtcbiAgICBzZWxmLmVtaXQoJ21lc3NhZ2UnLCBlLmRhdGEpO1xuICB9O1xuICAvLyBGaXJlZm94IGhhcyBhbiBpbnRlcmVzdGluZyBidWcuIElmIGEgd2Vic29ja2V0IGNvbm5lY3Rpb24gaXNcbiAgLy8gY3JlYXRlZCBhZnRlciBvbnVubG9hZCwgaXQgc3RheXMgYWxpdmUgZXZlbiB3aGVuIHVzZXJcbiAgLy8gbmF2aWdhdGVzIGF3YXkgZnJvbSB0aGUgcGFnZS4gSW4gc3VjaCBzaXR1YXRpb24gbGV0J3MgbGllIC1cbiAgLy8gbGV0J3Mgbm90IG9wZW4gdGhlIHdzIGNvbm5lY3Rpb24gYXQgYWxsLiBTZWU6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zb2NranMvc29ja2pzLWNsaWVudC9pc3N1ZXMvMjhcbiAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk2MDg1XG4gIHRoaXMudW5sb2FkUmVmID0gdXRpbHMudW5sb2FkQWRkKGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnKCd1bmxvYWQnKTtcbiAgICBzZWxmLndzLmNsb3NlKCk7XG4gIH0pO1xuICB0aGlzLndzLm9uY2xvc2UgPSBmdW5jdGlvbihlKSB7XG4gICAgZGVidWcoJ2Nsb3NlIGV2ZW50JywgZS5jb2RlLCBlLnJlYXNvbik7XG4gICAgc2VsZi5lbWl0KCdjbG9zZScsIGUuY29kZSwgZS5yZWFzb24pO1xuICAgIHNlbGYuX2NsZWFudXAoKTtcbiAgfTtcbiAgdGhpcy53cy5vbmVycm9yID0gZnVuY3Rpb24oZSkge1xuICAgIGRlYnVnKCdlcnJvciBldmVudCcsIGUpO1xuICAgIHNlbGYuZW1pdCgnY2xvc2UnLCAxMDA2LCAnV2ViU29ja2V0IGNvbm5lY3Rpb24gYnJva2VuJyk7XG4gICAgc2VsZi5fY2xlYW51cCgpO1xuICB9O1xufVxuXG5pbmhlcml0cyhXZWJTb2NrZXRUcmFuc3BvcnQsIEV2ZW50RW1pdHRlcik7XG5cbldlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuc2VuZCA9IGZ1bmN0aW9uKGRhdGEpIHtcbiAgdmFyIG1zZyA9ICdbJyArIGRhdGEgKyAnXSc7XG4gIGRlYnVnKCdzZW5kJywgbXNnKTtcbiAgdGhpcy53cy5zZW5kKG1zZyk7XG59O1xuXG5XZWJTb2NrZXRUcmFuc3BvcnQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIGRlYnVnKCdjbG9zZScpO1xuICB2YXIgd3MgPSB0aGlzLndzO1xuICB0aGlzLl9jbGVhbnVwKCk7XG4gIGlmICh3cykge1xuICAgIHdzLmNsb3NlKCk7XG4gIH1cbn07XG5cbldlYlNvY2tldFRyYW5zcG9ydC5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ19jbGVhbnVwJyk7XG4gIHZhciB3cyA9IHRoaXMud3M7XG4gIGlmICh3cykge1xuICAgIHdzLm9ubWVzc2FnZSA9IHdzLm9uY2xvc2UgPSB3cy5vbmVycm9yID0gbnVsbDtcbiAgfVxuICB1dGlscy51bmxvYWREZWwodGhpcy51bmxvYWRSZWYpO1xuICB0aGlzLnVubG9hZFJlZiA9IHRoaXMud3MgPSBudWxsO1xuICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygpO1xufTtcblxuV2ViU29ja2V0VHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbigpIHtcbiAgZGVidWcoJ2VuYWJsZWQnKTtcbiAgcmV0dXJuICEhV2Vic29ja2V0RHJpdmVyO1xufTtcbldlYlNvY2tldFRyYW5zcG9ydC50cmFuc3BvcnROYW1lID0gJ3dlYnNvY2tldCc7XG5cbi8vIEluIHRoZW9yeSwgd3Mgc2hvdWxkIHJlcXVpcmUgMSByb3VuZCB0cmlwLiBCdXQgaW4gY2hyb21lLCB0aGlzIGlzXG4vLyBub3QgdmVyeSBzdGFibGUgb3ZlciBTU0wuIE1vc3QgbGlrZWx5IGEgd3MgY29ubmVjdGlvbiByZXF1aXJlcyBhXG4vLyBzZXBhcmF0ZSBTU0wgY29ubmVjdGlvbiwgaW4gd2hpY2ggY2FzZSAyIHJvdW5kIHRyaXBzIGFyZSBhblxuLy8gYWJzb2x1dGUgbWludW11bS5cbldlYlNvY2tldFRyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjtcblxubW9kdWxlLmV4cG9ydHMgPSBXZWJTb2NrZXRUcmFuc3BvcnQ7XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCIuLi91dGlscy9ldmVudFwiOjQ2LFwiLi4vdXRpbHMvdXJsXCI6NTIsXCIuL2RyaXZlci93ZWJzb2NrZXRcIjoxOSxcImRlYnVnXCI6NTUsXCJldmVudHNcIjozLFwiaW5oZXJpdHNcIjo1N31dLDM5OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGluaGVyaXRzID0gcmVxdWlyZSgnaW5oZXJpdHMnKVxuICAsIEFqYXhCYXNlZFRyYW5zcG9ydCA9IHJlcXVpcmUoJy4vbGliL2FqYXgtYmFzZWQnKVxuICAsIFhkclN0cmVhbWluZ1RyYW5zcG9ydCA9IHJlcXVpcmUoJy4veGRyLXN0cmVhbWluZycpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWERST2JqZWN0ID0gcmVxdWlyZSgnLi9zZW5kZXIveGRyJylcbiAgO1xuXG5mdW5jdGlvbiBYZHJQb2xsaW5nVHJhbnNwb3J0KHRyYW5zVXJsKSB7XG4gIGlmICghWERST2JqZWN0LmVuYWJsZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyYW5zcG9ydCBjcmVhdGVkIHdoZW4gZGlzYWJsZWQnKTtcbiAgfVxuICBBamF4QmFzZWRUcmFuc3BvcnQuY2FsbCh0aGlzLCB0cmFuc1VybCwgJy94aHInLCBYaHJSZWNlaXZlciwgWERST2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGRyUG9sbGluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGRyUG9sbGluZ1RyYW5zcG9ydC5lbmFibGVkID0gWGRyU3RyZWFtaW5nVHJhbnNwb3J0LmVuYWJsZWQ7XG5YZHJQb2xsaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGRyLXBvbGxpbmcnO1xuWGRyUG9sbGluZ1RyYW5zcG9ydC5yb3VuZFRyaXBzID0gMjsgLy8gcHJlZmxpZ2h0LCBhamF4XG5cbm1vZHVsZS5leHBvcnRzID0gWGRyUG9sbGluZ1RyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGRyXCI6MzQsXCIuL3hkci1zdHJlYW1pbmdcIjo0MCxcImluaGVyaXRzXCI6NTd9XSw0MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBpbmhlcml0cyA9IHJlcXVpcmUoJ2luaGVyaXRzJylcbiAgLCBBamF4QmFzZWRUcmFuc3BvcnQgPSByZXF1aXJlKCcuL2xpYi9hamF4LWJhc2VkJylcbiAgLCBYaHJSZWNlaXZlciA9IHJlcXVpcmUoJy4vcmVjZWl2ZXIveGhyJylcbiAgLCBYRFJPYmplY3QgPSByZXF1aXJlKCcuL3NlbmRlci94ZHInKVxuICA7XG5cbi8vIEFjY29yZGluZyB0bzpcbi8vICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNjQxNTA3L2RldGVjdC1icm93c2VyLXN1cHBvcnQtZm9yLWNyb3NzLWRvbWFpbi14bWxodHRwcmVxdWVzdHNcbi8vICAgaHR0cDovL2hhY2tzLm1vemlsbGEub3JnLzIwMDkvMDcvY3Jvc3Mtc2l0ZS14bWxodHRwcmVxdWVzdC13aXRoLWNvcnMvXG5cbmZ1bmN0aW9uIFhkclN0cmVhbWluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhEUk9iamVjdC5lbmFibGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUcmFuc3BvcnQgY3JlYXRlZCB3aGVuIGRpc2FibGVkJyk7XG4gIH1cbiAgQWpheEJhc2VkVHJhbnNwb3J0LmNhbGwodGhpcywgdHJhbnNVcmwsICcveGhyX3N0cmVhbWluZycsIFhoclJlY2VpdmVyLCBYRFJPYmplY3QpO1xufVxuXG5pbmhlcml0cyhYZHJTdHJlYW1pbmdUcmFuc3BvcnQsIEFqYXhCYXNlZFRyYW5zcG9ydCk7XG5cblhkclN0cmVhbWluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5jb29raWVfbmVlZGVkIHx8IGluZm8ubnVsbE9yaWdpbikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gWERST2JqZWN0LmVuYWJsZWQgJiYgaW5mby5zYW1lU2NoZW1lO1xufTtcblxuWGRyU3RyZWFtaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGRyLXN0cmVhbWluZyc7XG5YZHJTdHJlYW1pbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG5tb2R1bGUuZXhwb3J0cyA9IFhkclN0cmVhbWluZ1RyYW5zcG9ydDtcblxufSx7XCIuL2xpYi9hamF4LWJhc2VkXCI6MjQsXCIuL3JlY2VpdmVyL3hoclwiOjMyLFwiLi9zZW5kZXIveGRyXCI6MzQsXCJpbmhlcml0c1wiOjU3fV0sNDE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gIDtcblxuZnVuY3Rpb24gWGhyUG9sbGluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgIVhIUkNvcnNPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocicsIFhoclJlY2VpdmVyLCBYSFJDb3JzT2JqZWN0KTtcbn1cblxuaW5oZXJpdHMoWGhyUG9sbGluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGhyUG9sbGluZ1RyYW5zcG9ydC5lbmFibGVkID0gZnVuY3Rpb24oaW5mbykge1xuICBpZiAoaW5mby5udWxsT3JpZ2luKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKFhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgaW5mby5zYW1lT3JpZ2luKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIFhIUkNvcnNPYmplY3QuZW5hYmxlZDtcbn07XG5cblhoclBvbGxpbmdUcmFuc3BvcnQudHJhbnNwb3J0TmFtZSA9ICd4aHItcG9sbGluZyc7XG5YaHJQb2xsaW5nVHJhbnNwb3J0LnJvdW5kVHJpcHMgPSAyOyAvLyBwcmVmbGlnaHQsIGFqYXhcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJQb2xsaW5nVHJhbnNwb3J0O1xuXG59LHtcIi4vbGliL2FqYXgtYmFzZWRcIjoyNCxcIi4vcmVjZWl2ZXIveGhyXCI6MzIsXCIuL3NlbmRlci94aHItY29yc1wiOjM1LFwiLi9zZW5kZXIveGhyLWxvY2FsXCI6MzcsXCJpbmhlcml0c1wiOjU3fV0sNDI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgaW5oZXJpdHMgPSByZXF1aXJlKCdpbmhlcml0cycpXG4gICwgQWpheEJhc2VkVHJhbnNwb3J0ID0gcmVxdWlyZSgnLi9saWIvYWpheC1iYXNlZCcpXG4gICwgWGhyUmVjZWl2ZXIgPSByZXF1aXJlKCcuL3JlY2VpdmVyL3hocicpXG4gICwgWEhSQ29yc09iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1jb3JzJylcbiAgLCBYSFJMb2NhbE9iamVjdCA9IHJlcXVpcmUoJy4vc2VuZGVyL3hoci1sb2NhbCcpXG4gICwgYnJvd3NlciA9IHJlcXVpcmUoJy4uL3V0aWxzL2Jyb3dzZXInKVxuICA7XG5cbmZ1bmN0aW9uIFhoclN0cmVhbWluZ1RyYW5zcG9ydCh0cmFuc1VybCkge1xuICBpZiAoIVhIUkxvY2FsT2JqZWN0LmVuYWJsZWQgJiYgIVhIUkNvcnNPYmplY3QuZW5hYmxlZCkge1xuICAgIHRocm93IG5ldyBFcnJvcignVHJhbnNwb3J0IGNyZWF0ZWQgd2hlbiBkaXNhYmxlZCcpO1xuICB9XG4gIEFqYXhCYXNlZFRyYW5zcG9ydC5jYWxsKHRoaXMsIHRyYW5zVXJsLCAnL3hocl9zdHJlYW1pbmcnLCBYaHJSZWNlaXZlciwgWEhSQ29yc09iamVjdCk7XG59XG5cbmluaGVyaXRzKFhoclN0cmVhbWluZ1RyYW5zcG9ydCwgQWpheEJhc2VkVHJhbnNwb3J0KTtcblxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LmVuYWJsZWQgPSBmdW5jdGlvbihpbmZvKSB7XG4gIGlmIChpbmZvLm51bGxPcmlnaW4pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgLy8gT3BlcmEgZG9lc24ndCBzdXBwb3J0IHhoci1zdHJlYW1pbmcgIzYwXG4gIC8vIEJ1dCBpdCBtaWdodCBiZSBhYmxlIHRvICM5MlxuICBpZiAoYnJvd3Nlci5pc09wZXJhKCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gWEhSQ29yc09iamVjdC5lbmFibGVkO1xufTtcblxuWGhyU3RyZWFtaW5nVHJhbnNwb3J0LnRyYW5zcG9ydE5hbWUgPSAneGhyLXN0cmVhbWluZyc7XG5YaHJTdHJlYW1pbmdUcmFuc3BvcnQucm91bmRUcmlwcyA9IDI7IC8vIHByZWZsaWdodCwgYWpheFxuXG4vLyBTYWZhcmkgZ2V0cyBjb25mdXNlZCB3aGVuIGEgc3RyZWFtaW5nIGFqYXggcmVxdWVzdCBpcyBzdGFydGVkXG4vLyBiZWZvcmUgb25sb2FkLiBUaGlzIGNhdXNlcyB0aGUgbG9hZCBpbmRpY2F0b3IgdG8gc3BpbiBpbmRlZmluZXRlbHkuXG4vLyBPbmx5IHJlcXVpcmUgYm9keSB3aGVuIHVzZWQgaW4gYSBicm93c2VyXG5YaHJTdHJlYW1pbmdUcmFuc3BvcnQubmVlZEJvZHkgPSAhIWdsb2JhbC5kb2N1bWVudDtcblxubW9kdWxlLmV4cG9ydHMgPSBYaHJTdHJlYW1pbmdUcmFuc3BvcnQ7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4uL3V0aWxzL2Jyb3dzZXJcIjo0NCxcIi4vbGliL2FqYXgtYmFzZWRcIjoyNCxcIi4vcmVjZWl2ZXIveGhyXCI6MzIsXCIuL3NlbmRlci94aHItY29yc1wiOjM1LFwiLi9zZW5kZXIveGhyLWxvY2FsXCI6MzcsXCJpbmhlcml0c1wiOjU3fV0sNDM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG5pZiAoZ2xvYmFsLmNyeXB0byAmJiBnbG9iYWwuY3J5cHRvLmdldFJhbmRvbVZhbHVlcykge1xuICBtb2R1bGUuZXhwb3J0cy5yYW5kb21CeXRlcyA9IGZ1bmN0aW9uKGxlbmd0aCkge1xuICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KGxlbmd0aCk7XG4gICAgZ2xvYmFsLmNyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICAgIHJldHVybiBieXRlcztcbiAgfTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzLnJhbmRvbUJ5dGVzID0gZnVuY3Rpb24obGVuZ3RoKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgYnl0ZXNbaV0gPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpO1xuICAgIH1cbiAgICByZXR1cm4gYnl0ZXM7XG4gIH07XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSw0NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBpc09wZXJhOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZ2xvYmFsLm5hdmlnYXRvciAmJlxuICAgICAgL29wZXJhL2kudGVzdChnbG9iYWwubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIH1cblxuLCBpc0tvbnF1ZXJvcjogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5uYXZpZ2F0b3IgJiZcbiAgICAgIC9rb25xdWVyb3IvaS50ZXN0KGdsb2JhbC5uYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgfVxuXG4gIC8vICMxODcgd3JhcCBkb2N1bWVudC5kb21haW4gaW4gdHJ5L2NhdGNoIGJlY2F1c2Ugb2YgV1A4IGZyb20gZmlsZTovLy9cbiwgaGFzRG9tYWluOiBmdW5jdGlvbiAoKSB7XG4gICAgLy8gbm9uLWJyb3dzZXIgY2xpZW50IGFsd2F5cyBoYXMgYSBkb21haW5cbiAgICBpZiAoIWdsb2JhbC5kb2N1bWVudCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiAhIWdsb2JhbC5kb2N1bWVudC5kb21haW47XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxufTtcblxufSkuY2FsbCh0aGlzLHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pXG5cbn0se31dLDQ1OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIEpTT04zID0gcmVxdWlyZSgnanNvbjMnKTtcblxuLy8gU29tZSBleHRyYSBjaGFyYWN0ZXJzIHRoYXQgQ2hyb21lIGdldHMgd3JvbmcsIGFuZCBzdWJzdGl0dXRlcyB3aXRoXG4vLyBzb21ldGhpbmcgZWxzZSBvbiB0aGUgd2lyZS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG52YXIgZXh0cmFFc2NhcGFibGUgPSAvW1xceDAwLVxceDFmXFx1ZDgwMC1cXHVkZmZmXFx1ZmZmZVxcdWZmZmZcXHUwMzAwLVxcdTAzMzNcXHUwMzNkLVxcdTAzNDZcXHUwMzRhLVxcdTAzNGNcXHUwMzUwLVxcdTAzNTJcXHUwMzU3LVxcdTAzNThcXHUwMzVjLVxcdTAzNjJcXHUwMzc0XFx1MDM3ZVxcdTAzODdcXHUwNTkxLVxcdTA1YWZcXHUwNWM0XFx1MDYxMC1cXHUwNjE3XFx1MDY1My1cXHUwNjU0XFx1MDY1Ny1cXHUwNjViXFx1MDY1ZC1cXHUwNjVlXFx1MDZkZi1cXHUwNmUyXFx1MDZlYi1cXHUwNmVjXFx1MDczMFxcdTA3MzItXFx1MDczM1xcdTA3MzUtXFx1MDczNlxcdTA3M2FcXHUwNzNkXFx1MDczZi1cXHUwNzQxXFx1MDc0M1xcdTA3NDVcXHUwNzQ3XFx1MDdlYi1cXHUwN2YxXFx1MDk1MVxcdTA5NTgtXFx1MDk1ZlxcdTA5ZGMtXFx1MDlkZFxcdTA5ZGZcXHUwYTMzXFx1MGEzNlxcdTBhNTktXFx1MGE1YlxcdTBhNWVcXHUwYjVjLVxcdTBiNWRcXHUwZTM4LVxcdTBlMzlcXHUwZjQzXFx1MGY0ZFxcdTBmNTJcXHUwZjU3XFx1MGY1Y1xcdTBmNjlcXHUwZjcyLVxcdTBmNzZcXHUwZjc4XFx1MGY4MC1cXHUwZjgzXFx1MGY5M1xcdTBmOWRcXHUwZmEyXFx1MGZhN1xcdTBmYWNcXHUwZmI5XFx1MTkzOS1cXHUxOTNhXFx1MWExN1xcdTFiNmJcXHUxY2RhLVxcdTFjZGJcXHUxZGMwLVxcdTFkY2ZcXHUxZGZjXFx1MWRmZVxcdTFmNzFcXHUxZjczXFx1MWY3NVxcdTFmNzdcXHUxZjc5XFx1MWY3YlxcdTFmN2RcXHUxZmJiXFx1MWZiZVxcdTFmYzlcXHUxZmNiXFx1MWZkM1xcdTFmZGJcXHUxZmUzXFx1MWZlYlxcdTFmZWUtXFx1MWZlZlxcdTFmZjlcXHUxZmZiXFx1MWZmZFxcdTIwMDAtXFx1MjAwMVxcdTIwZDAtXFx1MjBkMVxcdTIwZDQtXFx1MjBkN1xcdTIwZTctXFx1MjBlOVxcdTIxMjZcXHUyMTJhLVxcdTIxMmJcXHUyMzI5LVxcdTIzMmFcXHUyYWRjXFx1MzAyYi1cXHUzMDJjXFx1YWFiMi1cXHVhYWIzXFx1ZjkwMC1cXHVmYTBkXFx1ZmExMFxcdWZhMTJcXHVmYTE1LVxcdWZhMWVcXHVmYTIwXFx1ZmEyMlxcdWZhMjUtXFx1ZmEyNlxcdWZhMmEtXFx1ZmEyZFxcdWZhMzAtXFx1ZmE2ZFxcdWZhNzAtXFx1ZmFkOVxcdWZiMWRcXHVmYjFmXFx1ZmIyYS1cXHVmYjM2XFx1ZmIzOC1cXHVmYjNjXFx1ZmIzZVxcdWZiNDAtXFx1ZmI0MVxcdWZiNDMtXFx1ZmI0NFxcdWZiNDYtXFx1ZmI0ZVxcdWZmZjAtXFx1ZmZmZl0vZ1xuICAsIGV4dHJhTG9va3VwO1xuXG4vLyBUaGlzIG1heSBiZSBxdWl0ZSBzbG93LCBzbyBsZXQncyBkZWxheSB1bnRpbCB1c2VyIGFjdHVhbGx5IHVzZXMgYmFkXG4vLyBjaGFyYWN0ZXJzLlxudmFyIHVucm9sbExvb2t1cCA9IGZ1bmN0aW9uKGVzY2FwYWJsZSkge1xuICB2YXIgaTtcbiAgdmFyIHVucm9sbGVkID0ge307XG4gIHZhciBjID0gW107XG4gIGZvciAoaSA9IDA7IGkgPCA2NTUzNjsgaSsrKSB7XG4gICAgYy5wdXNoKCBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpICk7XG4gIH1cbiAgZXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gIGMuam9pbignJykucmVwbGFjZShlc2NhcGFibGUsIGZ1bmN0aW9uKGEpIHtcbiAgICB1bnJvbGxlZFsgYSBdID0gJ1xcXFx1JyArICgnMDAwMCcgKyBhLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtNCk7XG4gICAgcmV0dXJuICcnO1xuICB9KTtcbiAgZXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gIHJldHVybiB1bnJvbGxlZDtcbn07XG5cbi8vIFF1b3RlIHN0cmluZywgYWxzbyB0YWtpbmcgY2FyZSBvZiB1bmljb2RlIGNoYXJhY3RlcnMgdGhhdCBicm93c2Vyc1xuLy8gb2Z0ZW4gYnJlYWsuIEVzcGVjaWFsbHksIHRha2UgY2FyZSBvZiB1bmljb2RlIHN1cnJvZ2F0ZXM6XG4vLyBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL01hcHBpbmdfb2ZfVW5pY29kZV9jaGFyYWN0ZXJzI1N1cnJvZ2F0ZXNcbm1vZHVsZS5leHBvcnRzID0ge1xuICBxdW90ZTogZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgdmFyIHF1b3RlZCA9IEpTT04zLnN0cmluZ2lmeShzdHJpbmcpO1xuXG4gICAgLy8gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBiZSB2ZXJ5IGZhc3QgYW5kIGdvb2QgZW5vdWdoLlxuICAgIGV4dHJhRXNjYXBhYmxlLmxhc3RJbmRleCA9IDA7XG4gICAgaWYgKCFleHRyYUVzY2FwYWJsZS50ZXN0KHF1b3RlZCkpIHtcbiAgICAgIHJldHVybiBxdW90ZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFleHRyYUxvb2t1cCkge1xuICAgICAgZXh0cmFMb29rdXAgPSB1bnJvbGxMb29rdXAoZXh0cmFFc2NhcGFibGUpO1xuICAgIH1cblxuICAgIHJldHVybiBxdW90ZWQucmVwbGFjZShleHRyYUVzY2FwYWJsZSwgZnVuY3Rpb24oYSkge1xuICAgICAgcmV0dXJuIGV4dHJhTG9va3VwW2FdO1xuICAgIH0pO1xuICB9XG59O1xuXG59LHtcImpzb24zXCI6NTh9XSw0NjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciByYW5kb20gPSByZXF1aXJlKCcuL3JhbmRvbScpO1xuXG52YXIgb25VbmxvYWQgPSB7fVxuICAsIGFmdGVyVW5sb2FkID0gZmFsc2VcbiAgICAvLyBkZXRlY3QgZ29vZ2xlIGNocm9tZSBwYWNrYWdlZCBhcHBzIGJlY2F1c2UgdGhleSBkb24ndCBhbGxvdyB0aGUgJ3VubG9hZCcgZXZlbnRcbiAgLCBpc0Nocm9tZVBhY2thZ2VkQXBwID0gZ2xvYmFsLmNocm9tZSAmJiBnbG9iYWwuY2hyb21lLmFwcCAmJiBnbG9iYWwuY2hyb21lLmFwcC5ydW50aW1lXG4gIDtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGF0dGFjaEV2ZW50OiBmdW5jdGlvbihldmVudCwgbGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSk7XG4gICAgfSBlbHNlIGlmIChnbG9iYWwuZG9jdW1lbnQgJiYgZ2xvYmFsLmF0dGFjaEV2ZW50KSB7XG4gICAgICAvLyBJRSBxdWlya3MuXG4gICAgICAvLyBBY2NvcmRpbmcgdG86IGh0dHA6Ly9zdGV2ZXNvdWRlcnMuY29tL21pc2MvdGVzdC1wb3N0bWVzc2FnZS5waHBcbiAgICAgIC8vIHRoZSBtZXNzYWdlIGdldHMgZGVsaXZlcmVkIG9ubHkgdG8gJ2RvY3VtZW50Jywgbm90ICd3aW5kb3cnLlxuICAgICAgZ2xvYmFsLmRvY3VtZW50LmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgICAgLy8gSSBnZXQgJ3dpbmRvdycgZm9yIGllOC5cbiAgICAgIGdsb2JhbC5hdHRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH1cblxuLCBkZXRhY2hFdmVudDogZnVuY3Rpb24oZXZlbnQsIGxpc3RlbmVyKSB7XG4gICAgaWYgKHR5cGVvZiBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGdsb2JhbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLmRvY3VtZW50ICYmIGdsb2JhbC5kZXRhY2hFdmVudCkge1xuICAgICAgZ2xvYmFsLmRvY3VtZW50LmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgICAgZ2xvYmFsLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxuXG4sIHVubG9hZEFkZDogZnVuY3Rpb24obGlzdGVuZXIpIHtcbiAgICBpZiAoaXNDaHJvbWVQYWNrYWdlZEFwcCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHJlZiA9IHJhbmRvbS5zdHJpbmcoOCk7XG4gICAgb25VbmxvYWRbcmVmXSA9IGxpc3RlbmVyO1xuICAgIGlmIChhZnRlclVubG9hZCkge1xuICAgICAgc2V0VGltZW91dCh0aGlzLnRyaWdnZXJVbmxvYWRDYWxsYmFja3MsIDApO1xuICAgIH1cbiAgICByZXR1cm4gcmVmO1xuICB9XG5cbiwgdW5sb2FkRGVsOiBmdW5jdGlvbihyZWYpIHtcbiAgICBpZiAocmVmIGluIG9uVW5sb2FkKSB7XG4gICAgICBkZWxldGUgb25VbmxvYWRbcmVmXTtcbiAgICB9XG4gIH1cblxuLCB0cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzOiBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciByZWYgaW4gb25VbmxvYWQpIHtcbiAgICAgIG9uVW5sb2FkW3JlZl0oKTtcbiAgICAgIGRlbGV0ZSBvblVubG9hZFtyZWZdO1xuICAgIH1cbiAgfVxufTtcblxudmFyIHVubG9hZFRyaWdnZXJlZCA9IGZ1bmN0aW9uKCkge1xuICBpZiAoYWZ0ZXJVbmxvYWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWZ0ZXJVbmxvYWQgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cy50cmlnZ2VyVW5sb2FkQ2FsbGJhY2tzKCk7XG59O1xuXG4vLyAndW5sb2FkJyBhbG9uZSBpcyBub3QgcmVsaWFibGUgaW4gb3BlcmEgd2l0aGluIGFuIGlmcmFtZSwgYnV0IHdlXG4vLyBjYW4ndCB1c2UgYGJlZm9yZXVubG9hZGAgYXMgSUUgZmlyZXMgaXQgb24gamF2YXNjcmlwdDogbGlua3MuXG5pZiAoIWlzQ2hyb21lUGFja2FnZWRBcHApIHtcbiAgbW9kdWxlLmV4cG9ydHMuYXR0YWNoRXZlbnQoJ3VubG9hZCcsIHVubG9hZFRyaWdnZXJlZCk7XG59XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vcmFuZG9tXCI6NTB9XSw0NzpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKHByb2Nlc3MsZ2xvYmFsKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIGV2ZW50VXRpbHMgPSByZXF1aXJlKCcuL2V2ZW50JylcbiAgLCBKU09OMyA9IHJlcXVpcmUoJ2pzb24zJylcbiAgLCBicm93c2VyID0gcmVxdWlyZSgnLi9icm93c2VyJylcbiAgO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnV0aWxzOmlmcmFtZScpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgV1ByZWZpeDogJ19qcCdcbiwgY3VycmVudFdpbmRvd0lkOiBudWxsXG5cbiwgcG9sbHV0ZUdsb2JhbE5hbWVzcGFjZTogZnVuY3Rpb24oKSB7XG4gICAgaWYgKCEobW9kdWxlLmV4cG9ydHMuV1ByZWZpeCBpbiBnbG9iYWwpKSB7XG4gICAgICBnbG9iYWxbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF0gPSB7fTtcbiAgICB9XG4gIH1cblxuLCBwb3N0TWVzc2FnZTogZnVuY3Rpb24odHlwZSwgZGF0YSkge1xuICAgIGlmIChnbG9iYWwucGFyZW50ICE9PSBnbG9iYWwpIHtcbiAgICAgIGdsb2JhbC5wYXJlbnQucG9zdE1lc3NhZ2UoSlNPTjMuc3RyaW5naWZ5KHtcbiAgICAgICAgd2luZG93SWQ6IG1vZHVsZS5leHBvcnRzLmN1cnJlbnRXaW5kb3dJZFxuICAgICAgLCB0eXBlOiB0eXBlXG4gICAgICAsIGRhdGE6IGRhdGEgfHwgJydcbiAgICAgIH0pLCAnKicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWJ1ZygnQ2Fubm90IHBvc3RNZXNzYWdlLCBubyBwYXJlbnQgd2luZG93LicsIHR5cGUsIGRhdGEpO1xuICAgIH1cbiAgfVxuXG4sIGNyZWF0ZUlmcmFtZTogZnVuY3Rpb24oaWZyYW1lVXJsLCBlcnJvckNhbGxiYWNrKSB7XG4gICAgdmFyIGlmcmFtZSA9IGdsb2JhbC5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgICB2YXIgdHJlZiwgdW5sb2FkUmVmO1xuICAgIHZhciB1bmF0dGFjaCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZGVidWcoJ3VuYXR0YWNoJyk7XG4gICAgICBjbGVhclRpbWVvdXQodHJlZik7XG4gICAgICAvLyBFeHBsb3JlciBoYWQgcHJvYmxlbXMgd2l0aCB0aGF0LlxuICAgICAgdHJ5IHtcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9IG51bGw7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIC8vIGludGVudGlvbmFsbHkgZW1wdHlcbiAgICAgIH1cbiAgICAgIGlmcmFtZS5vbmVycm9yID0gbnVsbDtcbiAgICB9O1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgICAgaWYgKGlmcmFtZSkge1xuICAgICAgICB1bmF0dGFjaCgpO1xuICAgICAgICAvLyBUaGlzIHRpbWVvdXQgbWFrZXMgY2hyb21lIGZpcmUgb25iZWZvcmV1bmxvYWQgZXZlbnRcbiAgICAgICAgLy8gd2l0aGluIGlmcmFtZS4gV2l0aG91dCB0aGUgdGltZW91dCBpdCBnb2VzIHN0cmFpZ2h0IHRvXG4gICAgICAgIC8vIG9udW5sb2FkLlxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmcmFtZSA9IG51bGw7XG4gICAgICAgIH0sIDApO1xuICAgICAgICBldmVudFV0aWxzLnVubG9hZERlbCh1bmxvYWRSZWYpO1xuICAgICAgfVxuICAgIH07XG4gICAgdmFyIG9uZXJyb3IgPSBmdW5jdGlvbihlcnIpIHtcbiAgICAgIGRlYnVnKCdvbmVycm9yJywgZXJyKTtcbiAgICAgIGlmIChpZnJhbWUpIHtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICBlcnJvckNhbGxiYWNrKGVycik7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgcG9zdCA9IGZ1bmN0aW9uKG1zZywgb3JpZ2luKSB7XG4gICAgICBkZWJ1ZygncG9zdCcsIG1zZywgb3JpZ2luKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICBpZnJhbWUuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZShtc2csIG9yaWdpbik7XG4gICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgLy8gaW50ZW50aW9uYWxseSBlbXB0eVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgaWZyYW1lLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ29uZXJyb3InKTtcbiAgICB9O1xuICAgIGlmcmFtZS5vbmxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgIGRlYnVnKCdvbmxvYWQnKTtcbiAgICAgIC8vIGBvbmxvYWRgIGlzIHRyaWdnZXJlZCBiZWZvcmUgc2NyaXB0cyBvbiB0aGUgaWZyYW1lIGFyZVxuICAgICAgLy8gZXhlY3V0ZWQuIEdpdmUgaXQgZmV3IHNlY29uZHMgdG8gYWN0dWFsbHkgbG9hZCBzdHVmZi5cbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICBvbmVycm9yKCdvbmxvYWQgdGltZW91dCcpO1xuICAgICAgfSwgMjAwMCk7XG4gICAgfTtcbiAgICBnbG9iYWwuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgIHRyZWYgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgb25lcnJvcigndGltZW91dCcpO1xuICAgIH0sIDE1MDAwKTtcbiAgICB1bmxvYWRSZWYgPSBldmVudFV0aWxzLnVubG9hZEFkZChjbGVhbnVwKTtcbiAgICByZXR1cm4ge1xuICAgICAgcG9zdDogcG9zdFxuICAgICwgY2xlYW51cDogY2xlYW51cFxuICAgICwgbG9hZGVkOiB1bmF0dGFjaFxuICAgIH07XG4gIH1cblxuLyogZXNsaW50IG5vLXVuZGVmOiBcIm9mZlwiLCBuZXctY2FwOiBcIm9mZlwiICovXG4sIGNyZWF0ZUh0bWxmaWxlOiBmdW5jdGlvbihpZnJhbWVVcmwsIGVycm9yQ2FsbGJhY2spIHtcbiAgICB2YXIgYXhvID0gWydBY3RpdmUnXS5jb25jYXQoJ09iamVjdCcpLmpvaW4oJ1gnKTtcbiAgICB2YXIgZG9jID0gbmV3IGdsb2JhbFtheG9dKCdodG1sZmlsZScpO1xuICAgIHZhciB0cmVmLCB1bmxvYWRSZWY7XG4gICAgdmFyIGlmcmFtZTtcbiAgICB2YXIgdW5hdHRhY2ggPSBmdW5jdGlvbigpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0cmVmKTtcbiAgICAgIGlmcmFtZS5vbmVycm9yID0gbnVsbDtcbiAgICB9O1xuICAgIHZhciBjbGVhbnVwID0gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIHVuYXR0YWNoKCk7XG4gICAgICAgIGV2ZW50VXRpbHMudW5sb2FkRGVsKHVubG9hZFJlZik7XG4gICAgICAgIGlmcmFtZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICAgIGlmcmFtZSA9IGRvYyA9IG51bGw7XG4gICAgICAgIENvbGxlY3RHYXJiYWdlKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgb25lcnJvciA9IGZ1bmN0aW9uKHIpIHtcbiAgICAgIGRlYnVnKCdvbmVycm9yJywgcik7XG4gICAgICBpZiAoZG9jKSB7XG4gICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgZXJyb3JDYWxsYmFjayhyKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBwb3N0ID0gZnVuY3Rpb24obXNnLCBvcmlnaW4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFdoZW4gdGhlIGlmcmFtZSBpcyBub3QgbG9hZGVkLCBJRSByYWlzZXMgYW4gZXhjZXB0aW9uXG4gICAgICAgIC8vIG9uICdjb250ZW50V2luZG93Jy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICBpZiAoaWZyYW1lICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICAgIGlmcmFtZS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKG1zZywgb3JpZ2luKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIDApO1xuICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IGVtcHR5XG4gICAgICB9XG4gICAgfTtcblxuICAgIGRvYy5vcGVuKCk7XG4gICAgZG9jLndyaXRlKCc8aHRtbD48cycgKyAnY3JpcHQ+JyArXG4gICAgICAgICAgICAgICdkb2N1bWVudC5kb21haW49XCInICsgZ2xvYmFsLmRvY3VtZW50LmRvbWFpbiArICdcIjsnICtcbiAgICAgICAgICAgICAgJzwvcycgKyAnY3JpcHQ+PC9odG1sPicpO1xuICAgIGRvYy5jbG9zZSgpO1xuICAgIGRvYy5wYXJlbnRXaW5kb3dbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF0gPSBnbG9iYWxbbW9kdWxlLmV4cG9ydHMuV1ByZWZpeF07XG4gICAgdmFyIGMgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYyk7XG4gICAgaWZyYW1lID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGMuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgICBpZnJhbWUuc3JjID0gaWZyYW1lVXJsO1xuICAgIGlmcmFtZS5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICBvbmVycm9yKCdvbmVycm9yJyk7XG4gICAgfTtcbiAgICB0cmVmID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgIG9uZXJyb3IoJ3RpbWVvdXQnKTtcbiAgICB9LCAxNTAwMCk7XG4gICAgdW5sb2FkUmVmID0gZXZlbnRVdGlscy51bmxvYWRBZGQoY2xlYW51cCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBvc3Q6IHBvc3RcbiAgICAsIGNsZWFudXA6IGNsZWFudXBcbiAgICAsIGxvYWRlZDogdW5hdHRhY2hcbiAgICB9O1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gZmFsc2U7XG5pZiAoZ2xvYmFsLmRvY3VtZW50KSB7XG4gIC8vIHBvc3RNZXNzYWdlIG1pc2JlaGF2ZXMgaW4ga29ucXVlcm9yIDQuNi41IC0gdGhlIG1lc3NhZ2VzIGFyZSBkZWxpdmVyZWQgd2l0aFxuICAvLyBodWdlIGRlbGF5LCBvciBub3QgYXQgYWxsLlxuICBtb2R1bGUuZXhwb3J0cy5pZnJhbWVFbmFibGVkID0gKHR5cGVvZiBnbG9iYWwucG9zdE1lc3NhZ2UgPT09ICdmdW5jdGlvbicgfHxcbiAgICB0eXBlb2YgZ2xvYmFsLnBvc3RNZXNzYWdlID09PSAnb2JqZWN0JykgJiYgKCFicm93c2VyLmlzS29ucXVlcm9yKCkpO1xufVxuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0sdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7XCIuL2Jyb3dzZXJcIjo0NCxcIi4vZXZlbnRcIjo0NixcImRlYnVnXCI6NTUsXCJqc29uM1wiOjU4fV0sNDg6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChnbG9iYWwpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgbG9nT2JqZWN0ID0ge307XG5bJ2xvZycsICdkZWJ1ZycsICd3YXJuJ10uZm9yRWFjaChmdW5jdGlvbiAobGV2ZWwpIHtcbiAgdmFyIGxldmVsRXhpc3RzO1xuXG4gIHRyeSB7XG4gICAgbGV2ZWxFeGlzdHMgPSBnbG9iYWwuY29uc29sZSAmJiBnbG9iYWwuY29uc29sZVtsZXZlbF0gJiYgZ2xvYmFsLmNvbnNvbGVbbGV2ZWxdLmFwcGx5O1xuICB9IGNhdGNoKGUpIHtcbiAgICAvLyBkbyBub3RoaW5nXG4gIH1cblxuICBsb2dPYmplY3RbbGV2ZWxdID0gbGV2ZWxFeGlzdHMgPyBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGdsb2JhbC5jb25zb2xlW2xldmVsXS5hcHBseShnbG9iYWwuY29uc29sZSwgYXJndW1lbnRzKTtcbiAgfSA6IChsZXZlbCA9PT0gJ2xvZycgPyBmdW5jdGlvbiAoKSB7fSA6IGxvZ09iamVjdC5sb2cpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gbG9nT2JqZWN0O1xuXG59KS5jYWxsKHRoaXMsdHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB7fSlcblxufSx7fV0sNDk6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNPYmplY3Q6IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciB0eXBlID0gdHlwZW9mIG9iajtcbiAgICByZXR1cm4gdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlID09PSAnb2JqZWN0JyAmJiAhIW9iajtcbiAgfVxuXG4sIGV4dGVuZDogZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCF0aGlzLmlzT2JqZWN0KG9iaikpIHtcbiAgICAgIHJldHVybiBvYmo7XG4gICAgfVxuICAgIHZhciBzb3VyY2UsIHByb3A7XG4gICAgZm9yICh2YXIgaSA9IDEsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yIChwcm9wIGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iajtcbiAgfVxufTtcblxufSx7fV0sNTA6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG4vKiBnbG9iYWwgY3J5cHRvOnRydWUgKi9cbnZhciBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcblxuLy8gVGhpcyBzdHJpbmcgaGFzIGxlbmd0aCAzMiwgYSBwb3dlciBvZiAyLCBzbyB0aGUgbW9kdWx1cyBkb2Vzbid0IGludHJvZHVjZSBhXG4vLyBiaWFzLlxudmFyIF9yYW5kb21TdHJpbmdDaGFycyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NSc7XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc3RyaW5nOiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgbWF4ID0gX3JhbmRvbVN0cmluZ0NoYXJzLmxlbmd0aDtcbiAgICB2YXIgYnl0ZXMgPSBjcnlwdG8ucmFuZG9tQnl0ZXMobGVuZ3RoKTtcbiAgICB2YXIgcmV0ID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgcmV0LnB1c2goX3JhbmRvbVN0cmluZ0NoYXJzLnN1YnN0cihieXRlc1tpXSAlIG1heCwgMSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0LmpvaW4oJycpO1xuICB9XG5cbiwgbnVtYmVyOiBmdW5jdGlvbihtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgfVxuXG4sIG51bWJlclN0cmluZzogZnVuY3Rpb24obWF4KSB7XG4gICAgdmFyIHQgPSAoJycgKyAobWF4IC0gMSkpLmxlbmd0aDtcbiAgICB2YXIgcCA9IG5ldyBBcnJheSh0ICsgMSkuam9pbignMCcpO1xuICAgIHJldHVybiAocCArIHRoaXMubnVtYmVyKG1heCkpLnNsaWNlKC10KTtcbiAgfVxufTtcblxufSx7XCJjcnlwdG9cIjo0M31dLDUxOltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbihmdW5jdGlvbiAocHJvY2Vzcyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWJ1ZyA9IGZ1bmN0aW9uKCkge307XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ3NvY2tqcy1jbGllbnQ6dXRpbHM6dHJhbnNwb3J0Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oYXZhaWxhYmxlVHJhbnNwb3J0cykge1xuICByZXR1cm4ge1xuICAgIGZpbHRlclRvRW5hYmxlZDogZnVuY3Rpb24odHJhbnNwb3J0c1doaXRlbGlzdCwgaW5mbykge1xuICAgICAgdmFyIHRyYW5zcG9ydHMgPSB7XG4gICAgICAgIG1haW46IFtdXG4gICAgICAsIGZhY2FkZTogW11cbiAgICAgIH07XG4gICAgICBpZiAoIXRyYW5zcG9ydHNXaGl0ZWxpc3QpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFtdO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdHJhbnNwb3J0c1doaXRlbGlzdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdCA9IFt0cmFuc3BvcnRzV2hpdGVsaXN0XTtcbiAgICAgIH1cblxuICAgICAgYXZhaWxhYmxlVHJhbnNwb3J0cy5mb3JFYWNoKGZ1bmN0aW9uKHRyYW5zKSB7XG4gICAgICAgIGlmICghdHJhbnMpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHJhbnMudHJhbnNwb3J0TmFtZSA9PT0gJ3dlYnNvY2tldCcgJiYgaW5mby53ZWJzb2NrZXQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZGVidWcoJ2Rpc2FibGVkIGZyb20gc2VydmVyJywgJ3dlYnNvY2tldCcpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFuc3BvcnRzV2hpdGVsaXN0Lmxlbmd0aCAmJlxuICAgICAgICAgICAgdHJhbnNwb3J0c1doaXRlbGlzdC5pbmRleE9mKHRyYW5zLnRyYW5zcG9ydE5hbWUpID09PSAtMSkge1xuICAgICAgICAgIGRlYnVnKCdub3QgaW4gd2hpdGVsaXN0JywgdHJhbnMudHJhbnNwb3J0TmFtZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRyYW5zLmVuYWJsZWQoaW5mbykpIHtcbiAgICAgICAgICBkZWJ1ZygnZW5hYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICAgIHRyYW5zcG9ydHMubWFpbi5wdXNoKHRyYW5zKTtcbiAgICAgICAgICBpZiAodHJhbnMuZmFjYWRlVHJhbnNwb3J0KSB7XG4gICAgICAgICAgICB0cmFuc3BvcnRzLmZhY2FkZS5wdXNoKHRyYW5zLmZhY2FkZVRyYW5zcG9ydCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlYnVnKCdkaXNhYmxlZCcsIHRyYW5zLnRyYW5zcG9ydE5hbWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc3BvcnRzO1xuICAgIH1cbiAgfTtcbn07XG5cbn0pLmNhbGwodGhpcyx7IGVudjoge30gfSlcblxufSx7XCJkZWJ1Z1wiOjU1fV0sNTI6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbid1c2Ugc3RyaWN0JztcblxudmFyIFVSTCA9IHJlcXVpcmUoJ3VybC1wYXJzZScpO1xuXG52YXIgZGVidWcgPSBmdW5jdGlvbigpIHt9O1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgZGVidWcgPSByZXF1aXJlKCdkZWJ1ZycpKCdzb2NranMtY2xpZW50OnV0aWxzOnVybCcpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0T3JpZ2luOiBmdW5jdGlvbih1cmwpIHtcbiAgICBpZiAoIXVybCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHAgPSBuZXcgVVJMKHVybCk7XG4gICAgaWYgKHAucHJvdG9jb2wgPT09ICdmaWxlOicpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHZhciBwb3J0ID0gcC5wb3J0O1xuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IChwLnByb3RvY29sID09PSAnaHR0cHM6JykgPyAnNDQzJyA6ICc4MCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHAucHJvdG9jb2wgKyAnLy8nICsgcC5ob3N0bmFtZSArICc6JyArIHBvcnQ7XG4gIH1cblxuLCBpc09yaWdpbkVxdWFsOiBmdW5jdGlvbihhLCBiKSB7XG4gICAgdmFyIHJlcyA9IHRoaXMuZ2V0T3JpZ2luKGEpID09PSB0aGlzLmdldE9yaWdpbihiKTtcbiAgICBkZWJ1Zygnc2FtZScsIGEsIGIsIHJlcyk7XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuXG4sIGlzU2NoZW1lRXF1YWw6IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICByZXR1cm4gKGEuc3BsaXQoJzonKVswXSA9PT0gYi5zcGxpdCgnOicpWzBdKTtcbiAgfVxuXG4sIGFkZFBhdGg6IGZ1bmN0aW9uICh1cmwsIHBhdGgpIHtcbiAgICB2YXIgcXMgPSB1cmwuc3BsaXQoJz8nKTtcbiAgICByZXR1cm4gcXNbMF0gKyBwYXRoICsgKHFzWzFdID8gJz8nICsgcXNbMV0gOiAnJyk7XG4gIH1cblxuLCBhZGRRdWVyeTogZnVuY3Rpb24gKHVybCwgcSkge1xuICAgIHJldHVybiB1cmwgKyAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAoJz8nICsgcSkgOiAoJyYnICsgcSkpO1xuICB9XG59O1xuXG59KS5jYWxsKHRoaXMseyBlbnY6IHt9IH0pXG5cbn0se1wiZGVidWdcIjo1NSxcInVybC1wYXJzZVwiOjYxfV0sNTM6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xubW9kdWxlLmV4cG9ydHMgPSAnMS4xLjQnO1xuXG59LHt9XSw1NDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4vKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwXG52YXIgbSA9IHMgKiA2MFxudmFyIGggPSBtICogNjBcbnZhciBkID0gaCAqIDI0XG52YXIgeSA9IGQgKiAzNjUuMjVcblxuLyoqXG4gKiBQYXJzZSBvciBmb3JtYXQgdGhlIGdpdmVuIGB2YWxgLlxuICpcbiAqIE9wdGlvbnM6XG4gKlxuICogIC0gYGxvbmdgIHZlcmJvc2UgZm9ybWF0dGluZyBbZmFsc2VdXG4gKlxuICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSB2YWxcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEB0aHJvd3Mge0Vycm9yfSB0aHJvdyBhbiBlcnJvciBpZiB2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIG51bWJlclxuICogQHJldHVybiB7U3RyaW5nfE51bWJlcn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbFxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzTmFOKHZhbCkgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/XG5cdFx0XHRmbXRMb25nKHZhbCkgOlxuXHRcdFx0Zm10U2hvcnQodmFsKVxuICB9XG4gIHRocm93IG5ldyBFcnJvcigndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICsgSlNPTi5zdHJpbmdpZnkodmFsKSlcbn1cblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpXG4gIGlmIChzdHIubGVuZ3RoID4gMTAwMDApIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigoPzpcXGQrKT9cXC4/XFxkKykgKihtaWxsaXNlY29uZHM/fG1zZWNzP3xtc3xzZWNvbmRzP3xzZWNzP3xzfG1pbnV0ZXM/fG1pbnM/fG18aG91cnM/fGhycz98aHxkYXlzP3xkfHllYXJzP3x5cnM/fHkpPyQvaS5leGVjKHN0cilcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBuID0gcGFyc2VGbG9hdChtYXRjaFsxXSlcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKVxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHlcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkXG4gICAgY2FzZSAnaG91cnMnOlxuICAgIGNhc2UgJ2hvdXInOlxuICAgIGNhc2UgJ2hycyc6XG4gICAgY2FzZSAnaHInOlxuICAgIGNhc2UgJ2gnOlxuICAgICAgcmV0dXJuIG4gKiBoXG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtXG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzXG4gICAgY2FzZSAnbWlsbGlzZWNvbmRzJzpcbiAgICBjYXNlICdtaWxsaXNlY29uZCc6XG4gICAgY2FzZSAnbXNlY3MnOlxuICAgIGNhc2UgJ21zZWMnOlxuICAgIGNhc2UgJ21zJzpcbiAgICAgIHJldHVybiBuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIGlmIChtcyA+PSBkKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBkKSArICdkJ1xuICB9XG4gIGlmIChtcyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJ1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJ1xuICB9XG4gIGlmIChtcyA+PSBzKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBzKSArICdzJ1xuICB9XG4gIHJldHVybiBtcyArICdtcydcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcydcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG4sIG5hbWUpIHtcbiAgaWYgKG1zIDwgbikge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChtcyA8IG4gKiAxLjUpIHtcbiAgICByZXR1cm4gTWF0aC5mbG9vcihtcyAvIG4pICsgJyAnICsgbmFtZVxuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncydcbn1cblxufSx7fV0sNTU6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuKGZ1bmN0aW9uIChwcm9jZXNzKXtcbi8qKlxuICogVGhpcyBpcyB0aGUgd2ViIGJyb3dzZXIgaW1wbGVtZW50YXRpb24gb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2RlYnVnJyk7XG5leHBvcnRzLmxvZyA9IGxvZztcbmV4cG9ydHMuZm9ybWF0QXJncyA9IGZvcm1hdEFyZ3M7XG5leHBvcnRzLnNhdmUgPSBzYXZlO1xuZXhwb3J0cy5sb2FkID0gbG9hZDtcbmV4cG9ydHMudXNlQ29sb3JzID0gdXNlQ29sb3JzO1xuZXhwb3J0cy5zdG9yYWdlID0gJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZVxuICAgICAgICAgICAgICAgJiYgJ3VuZGVmaW5lZCcgIT0gdHlwZW9mIGNocm9tZS5zdG9yYWdlXG4gICAgICAgICAgICAgICAgICA/IGNocm9tZS5zdG9yYWdlLmxvY2FsXG4gICAgICAgICAgICAgICAgICA6IGxvY2Fsc3RvcmFnZSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAnZm9yZXN0Z3JlZW4nLFxuICAnZ29sZGVucm9kJyxcbiAgJ2RvZGdlcmJsdWUnLFxuICAnZGFya29yY2hpZCcsXG4gICdjcmltc29uJ1xuXTtcblxuLyoqXG4gKiBDdXJyZW50bHkgb25seSBXZWJLaXQtYmFzZWQgV2ViIEluc3BlY3RvcnMsIEZpcmVmb3ggPj0gdjMxLFxuICogYW5kIHRoZSBGaXJlYnVnIGV4dGVuc2lvbiAoYW55IEZpcmVmb3ggdmVyc2lvbikgYXJlIGtub3duXG4gKiB0byBzdXBwb3J0IFwiJWNcIiBDU1MgY3VzdG9taXphdGlvbnMuXG4gKlxuICogVE9ETzogYWRkIGEgYGxvY2FsU3RvcmFnZWAgdmFyaWFibGUgdG8gZXhwbGljaXRseSBlbmFibGUvZGlzYWJsZSBjb2xvcnNcbiAqL1xuXG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG4gIC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcbiAgLy8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2VcbiAgLy8gZXhwbGljaXRseVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgd2luZG93LnByb2Nlc3MudHlwZSA9PT0gJ3JlbmRlcmVyJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gaXMgd2Via2l0PyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNjQ1OTYwNi8zNzY3NzNcbiAgLy8gZG9jdW1lbnQgaXMgdW5kZWZpbmVkIGluIHJlYWN0LW5hdGl2ZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0LW5hdGl2ZS9wdWxsLzE2MzJcbiAgcmV0dXJuICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLldlYmtpdEFwcGVhcmFuY2UpIHx8XG4gICAgLy8gaXMgZmlyZWJ1Zz8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk4MTIwLzM3Njc3M1xuICAgICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cgJiYgd2luZG93LmNvbnNvbGUgJiYgKHdpbmRvdy5jb25zb2xlLmZpcmVidWcgfHwgKHdpbmRvdy5jb25zb2xlLmV4Y2VwdGlvbiAmJiB3aW5kb3cuY29uc29sZS50YWJsZSkpKSB8fFxuICAgIC8vIGlzIGZpcmVmb3ggPj0gdjMxP1xuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvVG9vbHMvV2ViX0NvbnNvbGUjU3R5bGluZ19tZXNzYWdlc1xuICAgICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvciAmJiBuYXZpZ2F0b3IudXNlckFnZW50ICYmIG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKS5tYXRjaCgvYXBwbGV3ZWJraXRcXC8oXFxkKykvKSk7XG59XG5cbi8qKlxuICogTWFwICVqIHRvIGBKU09OLnN0cmluZ2lmeSgpYCwgc2luY2Ugbm8gV2ViIEluc3BlY3RvcnMgZG8gdGhhdCBieSBkZWZhdWx0LlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24odikge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2KTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgcmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVyci5tZXNzYWdlO1xuICB9XG59O1xuXG5cbi8qKlxuICogQ29sb3JpemUgbG9nIGFyZ3VtZW50cyBpZiBlbmFibGVkLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZm9ybWF0QXJncyhhcmdzKSB7XG4gIHZhciB1c2VDb2xvcnMgPSB0aGlzLnVzZUNvbG9ycztcblxuICBhcmdzWzBdID0gKHVzZUNvbG9ycyA/ICclYycgOiAnJylcbiAgICArIHRoaXMubmFtZXNwYWNlXG4gICAgKyAodXNlQ29sb3JzID8gJyAlYycgOiAnICcpXG4gICAgKyBhcmdzWzBdXG4gICAgKyAodXNlQ29sb3JzID8gJyVjICcgOiAnICcpXG4gICAgKyAnKycgKyBleHBvcnRzLmh1bWFuaXplKHRoaXMuZGlmZik7XG5cbiAgaWYgKCF1c2VDb2xvcnMpIHJldHVybjtcblxuICB2YXIgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG4gIGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpXG5cbiAgLy8gdGhlIGZpbmFsIFwiJWNcIiBpcyBzb21ld2hhdCB0cmlja3ksIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgb3RoZXJcbiAgLy8gYXJndW1lbnRzIHBhc3NlZCBlaXRoZXIgYmVmb3JlIG9yIGFmdGVyIHRoZSAlYywgc28gd2UgbmVlZCB0b1xuICAvLyBmaWd1cmUgb3V0IHRoZSBjb3JyZWN0IGluZGV4IHRvIGluc2VydCB0aGUgQ1NTIGludG9cbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxhc3RDID0gMDtcbiAgYXJnc1swXS5yZXBsYWNlKC8lW2EtekEtWiVdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgaWYgKCclJScgPT09IG1hdGNoKSByZXR1cm47XG4gICAgaW5kZXgrKztcbiAgICBpZiAoJyVjJyA9PT0gbWF0Y2gpIHtcbiAgICAgIC8vIHdlIG9ubHkgYXJlIGludGVyZXN0ZWQgaW4gdGhlICpsYXN0KiAlY1xuICAgICAgLy8gKHRoZSB1c2VyIG1heSBoYXZlIHByb3ZpZGVkIHRoZWlyIG93bilcbiAgICAgIGxhc3RDID0gaW5kZXg7XG4gICAgfVxuICB9KTtcblxuICBhcmdzLnNwbGljZShsYXN0QywgMCwgYyk7XG59XG5cbi8qKlxuICogSW52b2tlcyBgY29uc29sZS5sb2coKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmxvZ2AgaXMgbm90IGEgXCJmdW5jdGlvblwiLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gbG9nKCkge1xuICAvLyB0aGlzIGhhY2tlcnkgaXMgcmVxdWlyZWQgZm9yIElFOC85LCB3aGVyZVxuICAvLyB0aGUgYGNvbnNvbGUubG9nYCBmdW5jdGlvbiBkb2Vzbid0IGhhdmUgJ2FwcGx5J1xuICByZXR1cm4gJ29iamVjdCcgPT09IHR5cGVvZiBjb25zb2xlXG4gICAgJiYgY29uc29sZS5sb2dcbiAgICAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlLmxvZywgY29uc29sZSwgYXJndW1lbnRzKTtcbn1cblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2F2ZShuYW1lc3BhY2VzKSB7XG4gIHRyeSB7XG4gICAgaWYgKG51bGwgPT0gbmFtZXNwYWNlcykge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZyA9IG5hbWVzcGFjZXM7XG4gICAgfVxuICB9IGNhdGNoKGUpIHt9XG59XG5cbi8qKlxuICogTG9hZCBgbmFtZXNwYWNlc2AuXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSByZXR1cm5zIHRoZSBwcmV2aW91c2x5IHBlcnNpc3RlZCBkZWJ1ZyBtb2Rlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9hZCgpIHtcbiAgdmFyIHI7XG4gIHRyeSB7XG4gICAgciA9IGV4cG9ydHMuc3RvcmFnZS5kZWJ1ZztcbiAgfSBjYXRjaChlKSB7fVxuXG4gIC8vIElmIGRlYnVnIGlzbid0IHNldCBpbiBMUywgYW5kIHdlJ3JlIGluIEVsZWN0cm9uLCB0cnkgdG8gbG9hZCAkREVCVUdcbiAgaWYgKCFyICYmIHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJyAmJiAnZW52JyBpbiBwcm9jZXNzKSB7XG4gICAgciA9IHByb2Nlc3MuZW52LkRFQlVHO1xuICB9XG5cbiAgcmV0dXJuIHI7XG59XG5cbi8qKlxuICogRW5hYmxlIG5hbWVzcGFjZXMgbGlzdGVkIGluIGBsb2NhbFN0b3JhZ2UuZGVidWdgIGluaXRpYWxseS5cbiAqL1xuXG5leHBvcnRzLmVuYWJsZShsb2FkKCkpO1xuXG4vKipcbiAqIExvY2Fsc3RvcmFnZSBhdHRlbXB0cyB0byByZXR1cm4gdGhlIGxvY2Fsc3RvcmFnZS5cbiAqXG4gKiBUaGlzIGlzIG5lY2Vzc2FyeSBiZWNhdXNlIHNhZmFyaSB0aHJvd3NcbiAqIHdoZW4gYSB1c2VyIGRpc2FibGVzIGNvb2tpZXMvbG9jYWxzdG9yYWdlXG4gKiBhbmQgeW91IGF0dGVtcHQgdG8gYWNjZXNzIGl0LlxuICpcbiAqIEByZXR1cm4ge0xvY2FsU3RvcmFnZX1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGxvY2Fsc3RvcmFnZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93LmxvY2FsU3RvcmFnZTtcbiAgfSBjYXRjaCAoZSkge31cbn1cblxufSkuY2FsbCh0aGlzLHsgZW52OiB7fSB9KVxuXG59LHtcIi4vZGVidWdcIjo1Nn1dLDU2OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcblxuLyoqXG4gKiBUaGlzIGlzIHRoZSBjb21tb24gbG9naWMgZm9yIGJvdGggdGhlIE5vZGUuanMgYW5kIHdlYiBicm93c2VyXG4gKiBpbXBsZW1lbnRhdGlvbnMgb2YgYGRlYnVnKClgLlxuICpcbiAqIEV4cG9zZSBgZGVidWcoKWAgYXMgdGhlIG1vZHVsZS5cbiAqL1xuXG5leHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBjcmVhdGVEZWJ1Zy5kZWJ1ZyA9IGNyZWF0ZURlYnVnWydkZWZhdWx0J10gPSBjcmVhdGVEZWJ1ZztcbmV4cG9ydHMuY29lcmNlID0gY29lcmNlO1xuZXhwb3J0cy5kaXNhYmxlID0gZGlzYWJsZTtcbmV4cG9ydHMuZW5hYmxlID0gZW5hYmxlO1xuZXhwb3J0cy5lbmFibGVkID0gZW5hYmxlZDtcbmV4cG9ydHMuaHVtYW5pemUgPSByZXF1aXJlKCdtcycpO1xuXG4vKipcbiAqIFRoZSBjdXJyZW50bHkgYWN0aXZlIGRlYnVnIG1vZGUgbmFtZXMsIGFuZCBuYW1lcyB0byBza2lwLlxuICovXG5cbmV4cG9ydHMubmFtZXMgPSBbXTtcbmV4cG9ydHMuc2tpcHMgPSBbXTtcblxuLyoqXG4gKiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG4gKlxuICogVmFsaWQga2V5IG5hbWVzIGFyZSBhIHNpbmdsZSwgbG93ZXIgb3IgdXBwZXItY2FzZSBsZXR0ZXIsIGkuZS4gXCJuXCIgYW5kIFwiTlwiLlxuICovXG5cbmV4cG9ydHMuZm9ybWF0dGVycyA9IHt9O1xuXG4vKipcbiAqIFByZXZpb3VzIGxvZyB0aW1lc3RhbXAuXG4gKi9cblxudmFyIHByZXZUaW1lO1xuXG4vKipcbiAqIFNlbGVjdCBhIGNvbG9yLlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gc2VsZWN0Q29sb3IobmFtZXNwYWNlKSB7XG4gIHZhciBoYXNoID0gMCwgaTtcblxuICBmb3IgKGkgaW4gbmFtZXNwYWNlKSB7XG4gICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIG5hbWVzcGFjZS5jaGFyQ29kZUF0KGkpO1xuICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXG4gIH1cblxuICByZXR1cm4gZXhwb3J0cy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBleHBvcnRzLmNvbG9ycy5sZW5ndGhdO1xufVxuXG4vKipcbiAqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBjcmVhdGVEZWJ1ZyhuYW1lc3BhY2UpIHtcblxuICBmdW5jdGlvbiBkZWJ1ZygpIHtcbiAgICAvLyBkaXNhYmxlZD9cbiAgICBpZiAoIWRlYnVnLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHZhciBzZWxmID0gZGVidWc7XG5cbiAgICAvLyBzZXQgYGRpZmZgIHRpbWVzdGFtcFxuICAgIHZhciBjdXJyID0gK25ldyBEYXRlKCk7XG4gICAgdmFyIG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcbiAgICBzZWxmLmRpZmYgPSBtcztcbiAgICBzZWxmLnByZXYgPSBwcmV2VGltZTtcbiAgICBzZWxmLmN1cnIgPSBjdXJyO1xuICAgIHByZXZUaW1lID0gY3VycjtcblxuICAgIC8vIHR1cm4gdGhlIGBhcmd1bWVudHNgIGludG8gYSBwcm9wZXIgQXJyYXlcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuXG4gICAgYXJnc1swXSA9IGV4cG9ydHMuY29lcmNlKGFyZ3NbMF0pO1xuXG4gICAgaWYgKCdzdHJpbmcnICE9PSB0eXBlb2YgYXJnc1swXSkge1xuICAgICAgLy8gYW55dGhpbmcgZWxzZSBsZXQncyBpbnNwZWN0IHdpdGggJU9cbiAgICAgIGFyZ3MudW5zaGlmdCgnJU8nKTtcbiAgICB9XG5cbiAgICAvLyBhcHBseSBhbnkgYGZvcm1hdHRlcnNgIHRyYW5zZm9ybWF0aW9uc1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgYXJnc1swXSA9IGFyZ3NbMF0ucmVwbGFjZSgvJShbYS16QS1aJV0pL2csIGZ1bmN0aW9uKG1hdGNoLCBmb3JtYXQpIHtcbiAgICAgIC8vIGlmIHdlIGVuY291bnRlciBhbiBlc2NhcGVkICUgdGhlbiBkb24ndCBpbmNyZWFzZSB0aGUgYXJyYXkgaW5kZXhcbiAgICAgIGlmIChtYXRjaCA9PT0gJyUlJykgcmV0dXJuIG1hdGNoO1xuICAgICAgaW5kZXgrKztcbiAgICAgIHZhciBmb3JtYXR0ZXIgPSBleHBvcnRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcbiAgICAgIGlmICgnZnVuY3Rpb24nID09PSB0eXBlb2YgZm9ybWF0dGVyKSB7XG4gICAgICAgIHZhciB2YWwgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgbWF0Y2ggPSBmb3JtYXR0ZXIuY2FsbChzZWxmLCB2YWwpO1xuXG4gICAgICAgIC8vIG5vdyB3ZSBuZWVkIHRvIHJlbW92ZSBgYXJnc1tpbmRleF1gIHNpbmNlIGl0J3MgaW5saW5lZCBpbiB0aGUgYGZvcm1hdGBcbiAgICAgICAgYXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICBpbmRleC0tO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1hdGNoO1xuICAgIH0pO1xuXG4gICAgLy8gYXBwbHkgZW52LXNwZWNpZmljIGZvcm1hdHRpbmcgKGNvbG9ycywgZXRjLilcbiAgICBleHBvcnRzLmZvcm1hdEFyZ3MuY2FsbChzZWxmLCBhcmdzKTtcblxuICAgIHZhciBsb2dGbiA9IGRlYnVnLmxvZyB8fCBleHBvcnRzLmxvZyB8fCBjb25zb2xlLmxvZy5iaW5kKGNvbnNvbGUpO1xuICAgIGxvZ0ZuLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG5cbiAgZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuICBkZWJ1Zy5lbmFibGVkID0gZXhwb3J0cy5lbmFibGVkKG5hbWVzcGFjZSk7XG4gIGRlYnVnLnVzZUNvbG9ycyA9IGV4cG9ydHMudXNlQ29sb3JzKCk7XG4gIGRlYnVnLmNvbG9yID0gc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblxuICAvLyBlbnYtc3BlY2lmaWMgaW5pdGlhbGl6YXRpb24gbG9naWMgZm9yIGRlYnVnIGluc3RhbmNlc1xuICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGV4cG9ydHMuaW5pdCkge1xuICAgIGV4cG9ydHMuaW5pdChkZWJ1Zyk7XG4gIH1cblxuICByZXR1cm4gZGVidWc7XG59XG5cbi8qKlxuICogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuICogc2VwYXJhdGVkIGJ5IGEgY29sb24gYW5kIHdpbGRjYXJkcy5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBlbmFibGUobmFtZXNwYWNlcykge1xuICBleHBvcnRzLnNhdmUobmFtZXNwYWNlcyk7XG5cbiAgZXhwb3J0cy5uYW1lcyA9IFtdO1xuICBleHBvcnRzLnNraXBzID0gW107XG5cbiAgdmFyIHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcbiAgdmFyIGxlbiA9IHNwbGl0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKCFzcGxpdFtpXSkgY29udGludWU7IC8vIGlnbm9yZSBlbXB0eSBzdHJpbmdzXG4gICAgbmFtZXNwYWNlcyA9IHNwbGl0W2ldLnJlcGxhY2UoL1xcKi9nLCAnLio/Jyk7XG4gICAgaWYgKG5hbWVzcGFjZXNbMF0gPT09ICctJykge1xuICAgICAgZXhwb3J0cy5za2lwcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcy5zdWJzdHIoMSkgKyAnJCcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5uYW1lcy5wdXNoKG5ldyBSZWdFeHAoJ14nICsgbmFtZXNwYWNlcyArICckJykpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIERpc2FibGUgZGVidWcgb3V0cHV0LlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgZXhwb3J0cy5lbmFibGUoJycpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gbW9kZSBuYW1lIGlzIGVuYWJsZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuICogQHJldHVybiB7Qm9vbGVhbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG4gIHZhciBpLCBsZW47XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIGZvciAoaSA9IDAsIGxlbiA9IGV4cG9ydHMubmFtZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBpZiAoZXhwb3J0cy5uYW1lc1tpXS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENvZXJjZSBgdmFsYC5cbiAqXG4gKiBAcGFyYW0ge01peGVkfSB2YWxcbiAqIEByZXR1cm4ge01peGVkfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuICBpZiAodmFsIGluc3RhbmNlb2YgRXJyb3IpIHJldHVybiB2YWwuc3RhY2sgfHwgdmFsLm1lc3NhZ2U7XG4gIHJldHVybiB2YWw7XG59XG5cbn0se1wibXNcIjo1NH1dLDU3OltmdW5jdGlvbihyZXF1aXJlLG1vZHVsZSxleHBvcnRzKXtcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAvLyBpbXBsZW1lbnRhdGlvbiBmcm9tIHN0YW5kYXJkIG5vZGUuanMgJ3V0aWwnIG1vZHVsZVxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvcikge1xuICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yXG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gb2xkIHNjaG9vbCBzaGltIGZvciBvbGQgYnJvd3NlcnNcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHtcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIHZhciBUZW1wQ3RvciA9IGZ1bmN0aW9uICgpIHt9XG4gICAgVGVtcEN0b3IucHJvdG90eXBlID0gc3VwZXJDdG9yLnByb3RvdHlwZVxuICAgIGN0b3IucHJvdG90eXBlID0gbmV3IFRlbXBDdG9yKClcbiAgICBjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JcbiAgfVxufVxuXG59LHt9XSw1ODpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4vKiEgSlNPTiB2My4zLjIgfCBodHRwOi8vYmVzdGllanMuZ2l0aHViLmlvL2pzb24zIHwgQ29weXJpZ2h0IDIwMTItMjAxNCwgS2l0IENhbWJyaWRnZSB8IGh0dHA6Ly9raXQubWl0LWxpY2Vuc2Uub3JnICovXG47KGZ1bmN0aW9uICgpIHtcbiAgLy8gRGV0ZWN0IHRoZSBgZGVmaW5lYCBmdW5jdGlvbiBleHBvc2VkIGJ5IGFzeW5jaHJvbm91cyBtb2R1bGUgbG9hZGVycy4gVGhlXG4gIC8vIHN0cmljdCBgZGVmaW5lYCBjaGVjayBpcyBuZWNlc3NhcnkgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBgci5qc2AuXG4gIHZhciBpc0xvYWRlciA9IHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kO1xuXG4gIC8vIEEgc2V0IG9mIHR5cGVzIHVzZWQgdG8gZGlzdGluZ3Vpc2ggb2JqZWN0cyBmcm9tIHByaW1pdGl2ZXMuXG4gIHZhciBvYmplY3RUeXBlcyA9IHtcbiAgICBcImZ1bmN0aW9uXCI6IHRydWUsXG4gICAgXCJvYmplY3RcIjogdHJ1ZVxuICB9O1xuXG4gIC8vIERldGVjdCB0aGUgYGV4cG9ydHNgIG9iamVjdCBleHBvc2VkIGJ5IENvbW1vbkpTIGltcGxlbWVudGF0aW9ucy5cbiAgdmFyIGZyZWVFeHBvcnRzID0gb2JqZWN0VHlwZXNbdHlwZW9mIGV4cG9ydHNdICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuICAvLyBVc2UgdGhlIGBnbG9iYWxgIG9iamVjdCBleHBvc2VkIGJ5IE5vZGUgKGluY2x1ZGluZyBCcm93c2VyaWZ5IHZpYVxuICAvLyBgaW5zZXJ0LW1vZHVsZS1nbG9iYWxzYCksIE5hcndoYWwsIGFuZCBSaW5nbyBhcyB0aGUgZGVmYXVsdCBjb250ZXh0LFxuICAvLyBhbmQgdGhlIGB3aW5kb3dgIG9iamVjdCBpbiBicm93c2Vycy4gUmhpbm8gZXhwb3J0cyBhIGBnbG9iYWxgIGZ1bmN0aW9uXG4gIC8vIGluc3RlYWQuXG4gIHZhciByb290ID0gb2JqZWN0VHlwZXNbdHlwZW9mIHdpbmRvd10gJiYgd2luZG93IHx8IHRoaXMsXG4gICAgICBmcmVlR2xvYmFsID0gZnJlZUV4cG9ydHMgJiYgb2JqZWN0VHlwZXNbdHlwZW9mIG1vZHVsZV0gJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgdHlwZW9mIGdsb2JhbCA9PSBcIm9iamVjdFwiICYmIGdsb2JhbDtcblxuICBpZiAoZnJlZUdsb2JhbCAmJiAoZnJlZUdsb2JhbFtcImdsb2JhbFwiXSA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsW1wid2luZG93XCJdID09PSBmcmVlR2xvYmFsIHx8IGZyZWVHbG9iYWxbXCJzZWxmXCJdID09PSBmcmVlR2xvYmFsKSkge1xuICAgIHJvb3QgPSBmcmVlR2xvYmFsO1xuICB9XG5cbiAgLy8gUHVibGljOiBJbml0aWFsaXplcyBKU09OIDMgdXNpbmcgdGhlIGdpdmVuIGBjb250ZXh0YCBvYmplY3QsIGF0dGFjaGluZyB0aGVcbiAgLy8gYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgZnVuY3Rpb25zIHRvIHRoZSBzcGVjaWZpZWQgYGV4cG9ydHNgIG9iamVjdC5cbiAgZnVuY3Rpb24gcnVuSW5Db250ZXh0KGNvbnRleHQsIGV4cG9ydHMpIHtcbiAgICBjb250ZXh0IHx8IChjb250ZXh0ID0gcm9vdFtcIk9iamVjdFwiXSgpKTtcbiAgICBleHBvcnRzIHx8IChleHBvcnRzID0gcm9vdFtcIk9iamVjdFwiXSgpKTtcblxuICAgIC8vIE5hdGl2ZSBjb25zdHJ1Y3RvciBhbGlhc2VzLlxuICAgIHZhciBOdW1iZXIgPSBjb250ZXh0W1wiTnVtYmVyXCJdIHx8IHJvb3RbXCJOdW1iZXJcIl0sXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHRbXCJTdHJpbmdcIl0gfHwgcm9vdFtcIlN0cmluZ1wiXSxcbiAgICAgICAgT2JqZWN0ID0gY29udGV4dFtcIk9iamVjdFwiXSB8fCByb290W1wiT2JqZWN0XCJdLFxuICAgICAgICBEYXRlID0gY29udGV4dFtcIkRhdGVcIl0gfHwgcm9vdFtcIkRhdGVcIl0sXG4gICAgICAgIFN5bnRheEVycm9yID0gY29udGV4dFtcIlN5bnRheEVycm9yXCJdIHx8IHJvb3RbXCJTeW50YXhFcnJvclwiXSxcbiAgICAgICAgVHlwZUVycm9yID0gY29udGV4dFtcIlR5cGVFcnJvclwiXSB8fCByb290W1wiVHlwZUVycm9yXCJdLFxuICAgICAgICBNYXRoID0gY29udGV4dFtcIk1hdGhcIl0gfHwgcm9vdFtcIk1hdGhcIl0sXG4gICAgICAgIG5hdGl2ZUpTT04gPSBjb250ZXh0W1wiSlNPTlwiXSB8fCByb290W1wiSlNPTlwiXTtcblxuICAgIC8vIERlbGVnYXRlIHRvIHRoZSBuYXRpdmUgYHN0cmluZ2lmeWAgYW5kIGBwYXJzZWAgaW1wbGVtZW50YXRpb25zLlxuICAgIGlmICh0eXBlb2YgbmF0aXZlSlNPTiA9PSBcIm9iamVjdFwiICYmIG5hdGl2ZUpTT04pIHtcbiAgICAgIGV4cG9ydHMuc3RyaW5naWZ5ID0gbmF0aXZlSlNPTi5zdHJpbmdpZnk7XG4gICAgICBleHBvcnRzLnBhcnNlID0gbmF0aXZlSlNPTi5wYXJzZTtcbiAgICB9XG5cbiAgICAvLyBDb252ZW5pZW5jZSBhbGlhc2VzLlxuICAgIHZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGUsXG4gICAgICAgIGdldENsYXNzID0gb2JqZWN0UHJvdG8udG9TdHJpbmcsXG4gICAgICAgIGlzUHJvcGVydHksIGZvckVhY2gsIHVuZGVmO1xuXG4gICAgLy8gVGVzdCB0aGUgYERhdGUjZ2V0VVRDKmAgbWV0aG9kcy4gQmFzZWQgb24gd29yayBieSBAWWFmZmxlLlxuICAgIHZhciBpc0V4dGVuZGVkID0gbmV3IERhdGUoLTM1MDk4MjczMzQ1NzMyOTIpO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGUgYGdldFVUQ0Z1bGxZZWFyYCwgYE1vbnRoYCwgYW5kIGBEYXRlYCBtZXRob2RzIHJldHVybiBub25zZW5zaWNhbFxuICAgICAgLy8gcmVzdWx0cyBmb3IgY2VydGFpbiBkYXRlcyBpbiBPcGVyYSA+PSAxMC41My5cbiAgICAgIGlzRXh0ZW5kZWQgPSBpc0V4dGVuZGVkLmdldFVUQ0Z1bGxZZWFyKCkgPT0gLTEwOTI1MiAmJiBpc0V4dGVuZGVkLmdldFVUQ01vbnRoKCkgPT09IDAgJiYgaXNFeHRlbmRlZC5nZXRVVENEYXRlKCkgPT09IDEgJiZcbiAgICAgICAgLy8gU2FmYXJpIDwgMi4wLjIgc3RvcmVzIHRoZSBpbnRlcm5hbCBtaWxsaXNlY29uZCB0aW1lIHZhbHVlIGNvcnJlY3RseSxcbiAgICAgICAgLy8gYnV0IGNsaXBzIHRoZSB2YWx1ZXMgcmV0dXJuZWQgYnkgdGhlIGRhdGUgbWV0aG9kcyB0byB0aGUgcmFuZ2Ugb2ZcbiAgICAgICAgLy8gc2lnbmVkIDMyLWJpdCBpbnRlZ2VycyAoWy0yICoqIDMxLCAyICoqIDMxIC0gMV0pLlxuICAgICAgICBpc0V4dGVuZGVkLmdldFVUQ0hvdXJzKCkgPT0gMTAgJiYgaXNFeHRlbmRlZC5nZXRVVENNaW51dGVzKCkgPT0gMzcgJiYgaXNFeHRlbmRlZC5nZXRVVENTZWNvbmRzKCkgPT0gNiAmJiBpc0V4dGVuZGVkLmdldFVUQ01pbGxpc2Vjb25kcygpID09IDcwODtcbiAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG5cbiAgICAvLyBJbnRlcm5hbDogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBuYXRpdmUgYEpTT04uc3RyaW5naWZ5YCBhbmQgYHBhcnNlYFxuICAgIC8vIGltcGxlbWVudGF0aW9ucyBhcmUgc3BlYy1jb21wbGlhbnQuIEJhc2VkIG9uIHdvcmsgYnkgS2VuIFNueWRlci5cbiAgICBmdW5jdGlvbiBoYXMobmFtZSkge1xuICAgICAgaWYgKGhhc1tuYW1lXSAhPT0gdW5kZWYpIHtcbiAgICAgICAgLy8gUmV0dXJuIGNhY2hlZCBmZWF0dXJlIHRlc3QgcmVzdWx0LlxuICAgICAgICByZXR1cm4gaGFzW25hbWVdO1xuICAgICAgfVxuICAgICAgdmFyIGlzU3VwcG9ydGVkO1xuICAgICAgaWYgKG5hbWUgPT0gXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIikge1xuICAgICAgICAvLyBJRSA8PSA3IGRvZXNuJ3Qgc3VwcG9ydCBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgdXNpbmcgc3F1YXJlXG4gICAgICAgIC8vIGJyYWNrZXQgbm90YXRpb24uIElFIDggb25seSBzdXBwb3J0cyB0aGlzIGZvciBwcmltaXRpdmVzLlxuICAgICAgICBpc1N1cHBvcnRlZCA9IFwiYVwiWzBdICE9IFwiYVwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09IFwianNvblwiKSB7XG4gICAgICAgIC8vIEluZGljYXRlcyB3aGV0aGVyIGJvdGggYEpTT04uc3RyaW5naWZ5YCBhbmQgYEpTT04ucGFyc2VgIGFyZVxuICAgICAgICAvLyBzdXBwb3J0ZWQuXG4gICAgICAgIGlzU3VwcG9ydGVkID0gaGFzKFwianNvbi1zdHJpbmdpZnlcIikgJiYgaGFzKFwianNvbi1wYXJzZVwiKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB2YWx1ZSwgc2VyaWFsaXplZCA9ICd7XCJhXCI6WzEsdHJ1ZSxmYWxzZSxudWxsLFwiXFxcXHUwMDAwXFxcXGJcXFxcblxcXFxmXFxcXHJcXFxcdFwiXX0nO1xuICAgICAgICAvLyBUZXN0IGBKU09OLnN0cmluZ2lmeWAuXG4gICAgICAgIGlmIChuYW1lID09IFwianNvbi1zdHJpbmdpZnlcIikge1xuICAgICAgICAgIHZhciBzdHJpbmdpZnkgPSBleHBvcnRzLnN0cmluZ2lmeSwgc3RyaW5naWZ5U3VwcG9ydGVkID0gdHlwZW9mIHN0cmluZ2lmeSA9PSBcImZ1bmN0aW9uXCIgJiYgaXNFeHRlbmRlZDtcbiAgICAgICAgICBpZiAoc3RyaW5naWZ5U3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAvLyBBIHRlc3QgZnVuY3Rpb24gb2JqZWN0IHdpdGggYSBjdXN0b20gYHRvSlNPTmAgbWV0aG9kLlxuICAgICAgICAgICAgKHZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgICAgIH0pLnRvSlNPTiA9IHZhbHVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID1cbiAgICAgICAgICAgICAgICAvLyBGaXJlZm94IDMuMWIxIGFuZCBiMiBzZXJpYWxpemUgc3RyaW5nLCBudW1iZXIsIGFuZCBib29sZWFuXG4gICAgICAgICAgICAgICAgLy8gcHJpbWl0aXZlcyBhcyBvYmplY3QgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KDApID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiwgYW5kIEpTT04gMiBzZXJpYWxpemUgd3JhcHBlZCBwcmltaXRpdmVzIGFzIG9iamVjdFxuICAgICAgICAgICAgICAgIC8vIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgTnVtYmVyKCkpID09PSBcIjBcIiAmJlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgU3RyaW5nKCkpID09ICdcIlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAsIGB1bmRlZmluZWRgLCBvclxuICAgICAgICAgICAgICAgIC8vIGRvZXMgbm90IGRlZmluZSBhIGNhbm9uaWNhbCBKU09OIHJlcHJlc2VudGF0aW9uICh0aGlzIGFwcGxpZXMgdG9cbiAgICAgICAgICAgICAgICAvLyBvYmplY3RzIHdpdGggYHRvSlNPTmAgcHJvcGVydGllcyBhcyB3ZWxsLCAqdW5sZXNzKiB0aGV5IGFyZSBuZXN0ZWRcbiAgICAgICAgICAgICAgICAvLyB3aXRoaW4gYW4gb2JqZWN0IG9yIGFycmF5KS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoZ2V0Q2xhc3MpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIElFIDggc2VyaWFsaXplcyBgdW5kZWZpbmVkYCBhcyBgXCJ1bmRlZmluZWRcImAuIFNhZmFyaSA8PSA1LjEuNyBhbmRcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMyBwYXNzIHRoaXMgdGVzdC5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkodW5kZWYpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIFNhZmFyaSA8PSA1LjEuNyBhbmQgRkYgMy4xYjMgdGhyb3cgYEVycm9yYHMgYW5kIGBUeXBlRXJyb3JgcyxcbiAgICAgICAgICAgICAgICAvLyByZXNwZWN0aXZlbHksIGlmIHRoZSB2YWx1ZSBpcyBvbWl0dGVkIGVudGlyZWx5LlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSgpID09PSB1bmRlZiAmJlxuICAgICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCAyIHRocm93IGFuIGVycm9yIGlmIHRoZSBnaXZlbiB2YWx1ZSBpcyBub3QgYSBudW1iZXIsXG4gICAgICAgICAgICAgICAgLy8gc3RyaW5nLCBhcnJheSwgb2JqZWN0LCBCb29sZWFuLCBvciBgbnVsbGAgbGl0ZXJhbC4gVGhpcyBhcHBsaWVzIHRvXG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0cyB3aXRoIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzIGFzIHdlbGwsIHVubGVzcyB0aGV5IGFyZSBuZXN0ZWRcbiAgICAgICAgICAgICAgICAvLyBpbnNpZGUgb2JqZWN0IG9yIGFycmF5IGxpdGVyYWxzLiBZVUkgMy4wLjBiMSBpZ25vcmVzIGN1c3RvbSBgdG9KU09OYFxuICAgICAgICAgICAgICAgIC8vIG1ldGhvZHMgZW50aXJlbHkuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KHZhbHVlKSA9PT0gXCIxXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3ZhbHVlXSkgPT0gXCJbMV1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFByb3RvdHlwZSA8PSAxLjYuMSBzZXJpYWxpemVzIGBbdW5kZWZpbmVkXWAgYXMgYFwiW11cImAgaW5zdGVhZCBvZlxuICAgICAgICAgICAgICAgIC8vIGBcIltudWxsXVwiYC5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoW3VuZGVmXSkgPT0gXCJbbnVsbF1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIFlVSSAzLjAuMGIxIGZhaWxzIHRvIHNlcmlhbGl6ZSBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwpID09IFwibnVsbFwiICYmXG4gICAgICAgICAgICAgICAgLy8gRkYgMy4xYjEsIDIgaGFsdHMgc2VyaWFsaXphdGlvbiBpZiBhbiBhcnJheSBjb250YWlucyBhIGZ1bmN0aW9uOlxuICAgICAgICAgICAgICAgIC8vIGBbMSwgdHJ1ZSwgZ2V0Q2xhc3MsIDFdYCBzZXJpYWxpemVzIGFzIFwiWzEsdHJ1ZSxdLFwiLiBGRiAzLjFiM1xuICAgICAgICAgICAgICAgIC8vIGVsaWRlcyBub24tSlNPTiB2YWx1ZXMgZnJvbSBvYmplY3RzIGFuZCBhcnJheXMsIHVubGVzcyB0aGV5XG4gICAgICAgICAgICAgICAgLy8gZGVmaW5lIGN1c3RvbSBgdG9KU09OYCBtZXRob2RzLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShbdW5kZWYsIGdldENsYXNzLCBudWxsXSkgPT0gXCJbbnVsbCxudWxsLG51bGxdXCIgJiZcbiAgICAgICAgICAgICAgICAvLyBTaW1wbGUgc2VyaWFsaXphdGlvbiB0ZXN0LiBGRiAzLjFiMSB1c2VzIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlc1xuICAgICAgICAgICAgICAgIC8vIHdoZXJlIGNoYXJhY3RlciBlc2NhcGUgY29kZXMgYXJlIGV4cGVjdGVkIChlLmcuLCBgXFxiYCA9PiBgXFx1MDAwOGApLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeSh7IFwiYVwiOiBbdmFsdWUsIHRydWUsIGZhbHNlLCBudWxsLCBcIlxceDAwXFxiXFxuXFxmXFxyXFx0XCJdIH0pID09IHNlcmlhbGl6ZWQgJiZcbiAgICAgICAgICAgICAgICAvLyBGRiAzLjFiMSBhbmQgYjIgaWdub3JlIHRoZSBgZmlsdGVyYCBhbmQgYHdpZHRoYCBhcmd1bWVudHMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG51bGwsIHZhbHVlKSA9PT0gXCIxXCIgJiZcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkoWzEsIDJdLCBudWxsLCAxKSA9PSBcIltcXG4gMSxcXG4gMlxcbl1cIiAmJlxuICAgICAgICAgICAgICAgIC8vIEpTT04gMiwgUHJvdG90eXBlIDw9IDEuNywgYW5kIG9sZGVyIFdlYktpdCBidWlsZHMgaW5jb3JyZWN0bHlcbiAgICAgICAgICAgICAgICAvLyBzZXJpYWxpemUgZXh0ZW5kZWQgeWVhcnMuXG4gICAgICAgICAgICAgICAgc3RyaW5naWZ5KG5ldyBEYXRlKC04LjY0ZTE1KSkgPT0gJ1wiLTI3MTgyMS0wNC0yMFQwMDowMDowMC4wMDBaXCInICYmXG4gICAgICAgICAgICAgICAgLy8gVGhlIG1pbGxpc2Vjb25kcyBhcmUgb3B0aW9uYWwgaW4gRVMgNSwgYnV0IHJlcXVpcmVkIGluIDUuMS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoOC42NGUxNSkpID09ICdcIisyNzU3NjAtMDktMTNUMDA6MDA6MDAuMDAwWlwiJyAmJlxuICAgICAgICAgICAgICAgIC8vIEZpcmVmb3ggPD0gMTEuMCBpbmNvcnJlY3RseSBzZXJpYWxpemVzIHllYXJzIHByaW9yIHRvIDAgYXMgbmVnYXRpdmVcbiAgICAgICAgICAgICAgICAvLyBmb3VyLWRpZ2l0IHllYXJzIGluc3RlYWQgb2Ygc2l4LWRpZ2l0IHllYXJzLiBDcmVkaXRzOiBAWWFmZmxlLlxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeShuZXcgRGF0ZSgtNjIxOTg3NTUyZTUpKSA9PSAnXCItMDAwMDAxLTAxLTAxVDAwOjAwOjAwLjAwMFpcIicgJiZcbiAgICAgICAgICAgICAgICAvLyBTYWZhcmkgPD0gNS4xLjUgYW5kIE9wZXJhID49IDEwLjUzIGluY29ycmVjdGx5IHNlcmlhbGl6ZSBtaWxsaXNlY29uZFxuICAgICAgICAgICAgICAgIC8vIHZhbHVlcyBsZXNzIHRoYW4gMTAwMC4gQ3JlZGl0czogQFlhZmZsZS5cbiAgICAgICAgICAgICAgICBzdHJpbmdpZnkobmV3IERhdGUoLTEpKSA9PSAnXCIxOTY5LTEyLTMxVDIzOjU5OjU5Ljk5OVpcIic7XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgc3RyaW5naWZ5U3VwcG9ydGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlzU3VwcG9ydGVkID0gc3RyaW5naWZ5U3VwcG9ydGVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRlc3QgYEpTT04ucGFyc2VgLlxuICAgICAgICBpZiAobmFtZSA9PSBcImpzb24tcGFyc2VcIikge1xuICAgICAgICAgIHZhciBwYXJzZSA9IGV4cG9ydHMucGFyc2U7XG4gICAgICAgICAgaWYgKHR5cGVvZiBwYXJzZSA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIEZGIDMuMWIxLCBiMiB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhIGJhcmUgbGl0ZXJhbCBpcyBwcm92aWRlZC5cbiAgICAgICAgICAgICAgLy8gQ29uZm9ybWluZyBpbXBsZW1lbnRhdGlvbnMgc2hvdWxkIGFsc28gY29lcmNlIHRoZSBpbml0aWFsIGFyZ3VtZW50IHRvXG4gICAgICAgICAgICAgIC8vIGEgc3RyaW5nIHByaW9yIHRvIHBhcnNpbmcuXG4gICAgICAgICAgICAgIGlmIChwYXJzZShcIjBcIikgPT09IDAgJiYgIXBhcnNlKGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIC8vIFNpbXBsZSBwYXJzaW5nIHRlc3QuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZShzZXJpYWxpemVkKTtcbiAgICAgICAgICAgICAgICB2YXIgcGFyc2VTdXBwb3J0ZWQgPSB2YWx1ZVtcImFcIl0ubGVuZ3RoID09IDUgJiYgdmFsdWVbXCJhXCJdWzBdID09PSAxO1xuICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDUuMS4yIGFuZCBGRiAzLjFiMSBhbGxvdyB1bmVzY2FwZWQgdGFicyBpbiBzdHJpbmdzLlxuICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9ICFwYXJzZSgnXCJcXHRcIicpO1xuICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXhjZXB0aW9uKSB7fVxuICAgICAgICAgICAgICAgICAgaWYgKHBhcnNlU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gRkYgNC4wIGFuZCA0LjAuMSBhbGxvdyBsZWFkaW5nIGArYCBzaWducyBhbmQgbGVhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgIC8vIGRlY2ltYWwgcG9pbnRzLiBGRiA0LjAsIDQuMC4xLCBhbmQgSUUgOS0xMCBhbHNvIGFsbG93XG4gICAgICAgICAgICAgICAgICAgICAgLy8gY2VydGFpbiBvY3RhbCBsaXRlcmFscy5cbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVN1cHBvcnRlZCA9IHBhcnNlKFwiMDFcIikgIT09IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4Y2VwdGlvbikge31cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChwYXJzZVN1cHBvcnRlZCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEZGIDQuMCwgNC4wLjEsIGFuZCBSaGlubyAxLjdSMy1SNCBhbGxvdyB0cmFpbGluZyBkZWNpbWFsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnRzLiBUaGVzZSBlbnZpcm9ubWVudHMsIGFsb25nIHdpdGggRkYgMy4xYjEgYW5kIDIsXG4gICAgICAgICAgICAgICAgICAgICAgLy8gYWxzbyBhbGxvdyB0cmFpbGluZyBjb21tYXMgaW4gSlNPTiBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBwYXJzZShcIjEuXCIpICE9PSAxO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHtcbiAgICAgICAgICAgICAgcGFyc2VTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaXNTdXBwb3J0ZWQgPSBwYXJzZVN1cHBvcnRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc1tuYW1lXSA9ICEhaXNTdXBwb3J0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKCFoYXMoXCJqc29uXCIpKSB7XG4gICAgICAvLyBDb21tb24gYFtbQ2xhc3NdXWAgbmFtZSBhbGlhc2VzLlxuICAgICAgdmFyIGZ1bmN0aW9uQ2xhc3MgPSBcIltvYmplY3QgRnVuY3Rpb25dXCIsXG4gICAgICAgICAgZGF0ZUNsYXNzID0gXCJbb2JqZWN0IERhdGVdXCIsXG4gICAgICAgICAgbnVtYmVyQ2xhc3MgPSBcIltvYmplY3QgTnVtYmVyXVwiLFxuICAgICAgICAgIHN0cmluZ0NsYXNzID0gXCJbb2JqZWN0IFN0cmluZ11cIixcbiAgICAgICAgICBhcnJheUNsYXNzID0gXCJbb2JqZWN0IEFycmF5XVwiLFxuICAgICAgICAgIGJvb2xlYW5DbGFzcyA9IFwiW29iamVjdCBCb29sZWFuXVwiO1xuXG4gICAgICAvLyBEZXRlY3QgaW5jb21wbGV0ZSBzdXBwb3J0IGZvciBhY2Nlc3Npbmcgc3RyaW5nIGNoYXJhY3RlcnMgYnkgaW5kZXguXG4gICAgICB2YXIgY2hhckluZGV4QnVnZ3kgPSBoYXMoXCJidWctc3RyaW5nLWNoYXItaW5kZXhcIik7XG5cbiAgICAgIC8vIERlZmluZSBhZGRpdGlvbmFsIHV0aWxpdHkgbWV0aG9kcyBpZiB0aGUgYERhdGVgIG1ldGhvZHMgYXJlIGJ1Z2d5LlxuICAgICAgaWYgKCFpc0V4dGVuZGVkKSB7XG4gICAgICAgIHZhciBmbG9vciA9IE1hdGguZmxvb3I7XG4gICAgICAgIC8vIEEgbWFwcGluZyBiZXR3ZWVuIHRoZSBtb250aHMgb2YgdGhlIHllYXIgYW5kIHRoZSBudW1iZXIgb2YgZGF5cyBiZXR3ZWVuXG4gICAgICAgIC8vIEphbnVhcnkgMXN0IGFuZCB0aGUgZmlyc3Qgb2YgdGhlIHJlc3BlY3RpdmUgbW9udGguXG4gICAgICAgIHZhciBNb250aHMgPSBbMCwgMzEsIDU5LCA5MCwgMTIwLCAxNTEsIDE4MSwgMjEyLCAyNDMsIDI3MywgMzA0LCAzMzRdO1xuICAgICAgICAvLyBJbnRlcm5hbDogQ2FsY3VsYXRlcyB0aGUgbnVtYmVyIG9mIGRheXMgYmV0d2VlbiB0aGUgVW5peCBlcG9jaCBhbmQgdGhlXG4gICAgICAgIC8vIGZpcnN0IGRheSBvZiB0aGUgZ2l2ZW4gbW9udGguXG4gICAgICAgIHZhciBnZXREYXkgPSBmdW5jdGlvbiAoeWVhciwgbW9udGgpIHtcbiAgICAgICAgICByZXR1cm4gTW9udGhzW21vbnRoXSArIDM2NSAqICh5ZWFyIC0gMTk3MCkgKyBmbG9vcigoeWVhciAtIDE5NjkgKyAobW9udGggPSArKG1vbnRoID4gMSkpKSAvIDQpIC0gZmxvb3IoKHllYXIgLSAxOTAxICsgbW9udGgpIC8gMTAwKSArIGZsb29yKCh5ZWFyIC0gMTYwMSArIG1vbnRoKSAvIDQwMCk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIEludGVybmFsOiBEZXRlcm1pbmVzIGlmIGEgcHJvcGVydHkgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgdGhlIGdpdmVuXG4gICAgICAvLyBvYmplY3QuIERlbGVnYXRlcyB0byB0aGUgbmF0aXZlIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIG1ldGhvZC5cbiAgICAgIGlmICghKGlzUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eSkpIHtcbiAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgIHZhciBtZW1iZXJzID0ge30sIGNvbnN0cnVjdG9yO1xuICAgICAgICAgIGlmICgobWVtYmVycy5fX3Byb3RvX18gPSBudWxsLCBtZW1iZXJzLl9fcHJvdG9fXyA9IHtcbiAgICAgICAgICAgIC8vIFRoZSAqcHJvdG8qIHByb3BlcnR5IGNhbm5vdCBiZSBzZXQgbXVsdGlwbGUgdGltZXMgaW4gcmVjZW50XG4gICAgICAgICAgICAvLyB2ZXJzaW9ucyBvZiBGaXJlZm94IGFuZCBTZWFNb25rZXkuXG4gICAgICAgICAgICBcInRvU3RyaW5nXCI6IDFcbiAgICAgICAgICB9LCBtZW1iZXJzKS50b1N0cmluZyAhPSBnZXRDbGFzcykge1xuICAgICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC4zIGRvZXNuJ3QgaW1wbGVtZW50IGBPYmplY3QjaGFzT3duUHJvcGVydHlgLCBidXRcbiAgICAgICAgICAgIC8vIHN1cHBvcnRzIHRoZSBtdXRhYmxlICpwcm90byogcHJvcGVydHkuXG4gICAgICAgICAgICBpc1Byb3BlcnR5ID0gZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgIC8vIENhcHR1cmUgYW5kIGJyZWFrIHRoZSBvYmplY3QncyBwcm90b3R5cGUgY2hhaW4gKHNlZSBzZWN0aW9uIDguNi4yXG4gICAgICAgICAgICAgIC8vIG9mIHRoZSBFUyA1LjEgc3BlYykuIFRoZSBwYXJlbnRoZXNpemVkIGV4cHJlc3Npb24gcHJldmVudHMgYW5cbiAgICAgICAgICAgICAgLy8gdW5zYWZlIHRyYW5zZm9ybWF0aW9uIGJ5IHRoZSBDbG9zdXJlIENvbXBpbGVyLlxuICAgICAgICAgICAgICB2YXIgb3JpZ2luYWwgPSB0aGlzLl9fcHJvdG9fXywgcmVzdWx0ID0gcHJvcGVydHkgaW4gKHRoaXMuX19wcm90b19fID0gbnVsbCwgdGhpcyk7XG4gICAgICAgICAgICAgIC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIHByb3RvdHlwZSBjaGFpbi5cbiAgICAgICAgICAgICAgdGhpcy5fX3Byb3RvX18gPSBvcmlnaW5hbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIENhcHR1cmUgYSByZWZlcmVuY2UgdG8gdGhlIHRvcC1sZXZlbCBgT2JqZWN0YCBjb25zdHJ1Y3Rvci5cbiAgICAgICAgICAgIGNvbnN0cnVjdG9yID0gbWVtYmVycy5jb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSB0byBzaW11bGF0ZSBgT2JqZWN0I2hhc093blByb3BlcnR5YCBpblxuICAgICAgICAgICAgLy8gb3RoZXIgZW52aXJvbm1lbnRzLlxuICAgICAgICAgICAgaXNQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gKHRoaXMuY29uc3RydWN0b3IgfHwgY29uc3RydWN0b3IpLnByb3RvdHlwZTtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5IGluIHRoaXMgJiYgIShwcm9wZXJ0eSBpbiBwYXJlbnQgJiYgdGhpc1twcm9wZXJ0eV0gPT09IHBhcmVudFtwcm9wZXJ0eV0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbWVtYmVycyA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIGlzUHJvcGVydHkuY2FsbCh0aGlzLCBwcm9wZXJ0eSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIC8vIEludGVybmFsOiBOb3JtYWxpemVzIHRoZSBgZm9yLi4uaW5gIGl0ZXJhdGlvbiBhbGdvcml0aG0gYWNyb3NzXG4gICAgICAvLyBlbnZpcm9ubWVudHMuIEVhY2ggZW51bWVyYXRlZCBrZXkgaXMgeWllbGRlZCB0byBhIGBjYWxsYmFja2AgZnVuY3Rpb24uXG4gICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIHNpemUgPSAwLCBQcm9wZXJ0aWVzLCBtZW1iZXJzLCBwcm9wZXJ0eTtcblxuICAgICAgICAvLyBUZXN0cyBmb3IgYnVncyBpbiB0aGUgY3VycmVudCBlbnZpcm9ubWVudCdzIGBmb3IuLi5pbmAgYWxnb3JpdGhtLiBUaGVcbiAgICAgICAgLy8gYHZhbHVlT2ZgIHByb3BlcnR5IGluaGVyaXRzIHRoZSBub24tZW51bWVyYWJsZSBmbGFnIGZyb21cbiAgICAgICAgLy8gYE9iamVjdC5wcm90b3R5cGVgIGluIG9sZGVyIHZlcnNpb25zIG9mIElFLCBOZXRzY2FwZSwgYW5kIE1vemlsbGEuXG4gICAgICAgIChQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRoaXMudmFsdWVPZiA9IDA7XG4gICAgICAgIH0pLnByb3RvdHlwZS52YWx1ZU9mID0gMDtcblxuICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIGBQcm9wZXJ0aWVzYCBjbGFzcy5cbiAgICAgICAgbWVtYmVycyA9IG5ldyBQcm9wZXJ0aWVzKCk7XG4gICAgICAgIGZvciAocHJvcGVydHkgaW4gbWVtYmVycykge1xuICAgICAgICAgIC8vIElnbm9yZSBhbGwgcHJvcGVydGllcyBpbmhlcml0ZWQgZnJvbSBgT2JqZWN0LnByb3RvdHlwZWAuXG4gICAgICAgICAgaWYgKGlzUHJvcGVydHkuY2FsbChtZW1iZXJzLCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHNpemUrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgUHJvcGVydGllcyA9IG1lbWJlcnMgPSBudWxsO1xuXG4gICAgICAgIC8vIE5vcm1hbGl6ZSB0aGUgaXRlcmF0aW9uIGFsZ29yaXRobS5cbiAgICAgICAgaWYgKCFzaXplKSB7XG4gICAgICAgICAgLy8gQSBsaXN0IG9mIG5vbi1lbnVtZXJhYmxlIHByb3BlcnRpZXMgaW5oZXJpdGVkIGZyb20gYE9iamVjdC5wcm90b3R5cGVgLlxuICAgICAgICAgIG1lbWJlcnMgPSBbXCJ2YWx1ZU9mXCIsIFwidG9TdHJpbmdcIiwgXCJ0b0xvY2FsZVN0cmluZ1wiLCBcInByb3BlcnR5SXNFbnVtZXJhYmxlXCIsIFwiaXNQcm90b3R5cGVPZlwiLCBcImhhc093blByb3BlcnR5XCIsIFwiY29uc3RydWN0b3JcIl07XG4gICAgICAgICAgLy8gSUUgPD0gOCwgTW96aWxsYSAxLjAsIGFuZCBOZXRzY2FwZSA2LjIgaWdub3JlIHNoYWRvd2VkIG5vbi1lbnVtZXJhYmxlXG4gICAgICAgICAgLy8gcHJvcGVydGllcy5cbiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIHZhciBpc0Z1bmN0aW9uID0gZ2V0Q2xhc3MuY2FsbChvYmplY3QpID09IGZ1bmN0aW9uQ2xhc3MsIHByb3BlcnR5LCBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgaGFzUHJvcGVydHkgPSAhaXNGdW5jdGlvbiAmJiB0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yICE9IFwiZnVuY3Rpb25cIiAmJiBvYmplY3RUeXBlc1t0eXBlb2Ygb2JqZWN0Lmhhc093blByb3BlcnR5XSAmJiBvYmplY3QuaGFzT3duUHJvcGVydHkgfHwgaXNQcm9wZXJ0eTtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIEdlY2tvIDw9IDEuMCBlbnVtZXJhdGVzIHRoZSBgcHJvdG90eXBlYCBwcm9wZXJ0eSBvZiBmdW5jdGlvbnMgdW5kZXJcbiAgICAgICAgICAgICAgLy8gY2VydGFpbiBjb25kaXRpb25zOyBJRSBkb2VzIG5vdC5cbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiBoYXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciBlYWNoIG5vbi1lbnVtZXJhYmxlIHByb3BlcnR5LlxuICAgICAgICAgICAgZm9yIChsZW5ndGggPSBtZW1iZXJzLmxlbmd0aDsgcHJvcGVydHkgPSBtZW1iZXJzWy0tbGVuZ3RoXTsgaGFzUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSAmJiBjYWxsYmFjayhwcm9wZXJ0eSkpO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoc2l6ZSA9PSAyKSB7XG4gICAgICAgICAgLy8gU2FmYXJpIDw9IDIuMC40IGVudW1lcmF0ZXMgc2hhZG93ZWQgcHJvcGVydGllcyB0d2ljZS5cbiAgICAgICAgICBmb3JFYWNoID0gZnVuY3Rpb24gKG9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIHNldCBvZiBpdGVyYXRlZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgdmFyIG1lbWJlcnMgPSB7fSwgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIC8vIFN0b3JlIGVhY2ggcHJvcGVydHkgbmFtZSB0byBwcmV2ZW50IGRvdWJsZSBlbnVtZXJhdGlvbi4gVGhlXG4gICAgICAgICAgICAgIC8vIGBwcm90b3R5cGVgIHByb3BlcnR5IG9mIGZ1bmN0aW9ucyBpcyBub3QgZW51bWVyYXRlZCBkdWUgdG8gY3Jvc3MtXG4gICAgICAgICAgICAgIC8vIGVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy5cbiAgICAgICAgICAgICAgaWYgKCEoaXNGdW5jdGlvbiAmJiBwcm9wZXJ0eSA9PSBcInByb3RvdHlwZVwiKSAmJiAhaXNQcm9wZXJ0eS5jYWxsKG1lbWJlcnMsIHByb3BlcnR5KSAmJiAobWVtYmVyc1twcm9wZXJ0eV0gPSAxKSAmJiBpc1Byb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhwcm9wZXJ0eSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE5vIGJ1Z3MgZGV0ZWN0ZWQ7IHVzZSB0aGUgc3RhbmRhcmQgYGZvci4uLmluYCBhbGdvcml0aG0uXG4gICAgICAgICAgZm9yRWFjaCA9IGZ1bmN0aW9uIChvYmplY3QsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB2YXIgaXNGdW5jdGlvbiA9IGdldENsYXNzLmNhbGwob2JqZWN0KSA9PSBmdW5jdGlvbkNsYXNzLCBwcm9wZXJ0eSwgaXNDb25zdHJ1Y3RvcjtcbiAgICAgICAgICAgIGZvciAocHJvcGVydHkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgICAgIGlmICghKGlzRnVuY3Rpb24gJiYgcHJvcGVydHkgPT0gXCJwcm90b3R5cGVcIikgJiYgaXNQcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpICYmICEoaXNDb25zdHJ1Y3RvciA9IHByb3BlcnR5ID09PSBcImNvbnN0cnVjdG9yXCIpKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2socHJvcGVydHkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNYW51YWxseSBpbnZva2UgdGhlIGNhbGxiYWNrIGZvciB0aGUgYGNvbnN0cnVjdG9yYCBwcm9wZXJ0eSBkdWUgdG9cbiAgICAgICAgICAgIC8vIGNyb3NzLWVudmlyb25tZW50IGluY29uc2lzdGVuY2llcy5cbiAgICAgICAgICAgIGlmIChpc0NvbnN0cnVjdG9yIHx8IGlzUHJvcGVydHkuY2FsbChvYmplY3QsIChwcm9wZXJ0eSA9IFwiY29uc3RydWN0b3JcIikpKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JFYWNoKG9iamVjdCwgY2FsbGJhY2spO1xuICAgICAgfTtcblxuICAgICAgLy8gUHVibGljOiBTZXJpYWxpemVzIGEgSmF2YVNjcmlwdCBgdmFsdWVgIGFzIGEgSlNPTiBzdHJpbmcuIFRoZSBvcHRpb25hbFxuICAgICAgLy8gYGZpbHRlcmAgYXJndW1lbnQgbWF5IHNwZWNpZnkgZWl0aGVyIGEgZnVuY3Rpb24gdGhhdCBhbHRlcnMgaG93IG9iamVjdCBhbmRcbiAgICAgIC8vIGFycmF5IG1lbWJlcnMgYXJlIHNlcmlhbGl6ZWQsIG9yIGFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIG51bWJlcnMgdGhhdFxuICAgICAgLy8gaW5kaWNhdGVzIHdoaWNoIHByb3BlcnRpZXMgc2hvdWxkIGJlIHNlcmlhbGl6ZWQuIFRoZSBvcHRpb25hbCBgd2lkdGhgXG4gICAgICAvLyBhcmd1bWVudCBtYXkgYmUgZWl0aGVyIGEgc3RyaW5nIG9yIG51bWJlciB0aGF0IHNwZWNpZmllcyB0aGUgaW5kZW50YXRpb25cbiAgICAgIC8vIGxldmVsIG9mIHRoZSBvdXRwdXQuXG4gICAgICBpZiAoIWhhcyhcImpzb24tc3RyaW5naWZ5XCIpKSB7XG4gICAgICAgIC8vIEludGVybmFsOiBBIG1hcCBvZiBjb250cm9sIGNoYXJhY3RlcnMgYW5kIHRoZWlyIGVzY2FwZWQgZXF1aXZhbGVudHMuXG4gICAgICAgIHZhciBFc2NhcGVzID0ge1xuICAgICAgICAgIDkyOiBcIlxcXFxcXFxcXCIsXG4gICAgICAgICAgMzQ6ICdcXFxcXCInLFxuICAgICAgICAgIDg6IFwiXFxcXGJcIixcbiAgICAgICAgICAxMjogXCJcXFxcZlwiLFxuICAgICAgICAgIDEwOiBcIlxcXFxuXCIsXG4gICAgICAgICAgMTM6IFwiXFxcXHJcIixcbiAgICAgICAgICA5OiBcIlxcXFx0XCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogQ29udmVydHMgYHZhbHVlYCBpbnRvIGEgemVyby1wYWRkZWQgc3RyaW5nIHN1Y2ggdGhhdCBpdHNcbiAgICAgICAgLy8gbGVuZ3RoIGlzIGF0IGxlYXN0IGVxdWFsIHRvIGB3aWR0aGAuIFRoZSBgd2lkdGhgIG11c3QgYmUgPD0gNi5cbiAgICAgICAgdmFyIGxlYWRpbmdaZXJvZXMgPSBcIjAwMDAwMFwiO1xuICAgICAgICB2YXIgdG9QYWRkZWRTdHJpbmcgPSBmdW5jdGlvbiAod2lkdGgsIHZhbHVlKSB7XG4gICAgICAgICAgLy8gVGhlIGB8fCAwYCBleHByZXNzaW9uIGlzIG5lY2Vzc2FyeSB0byB3b3JrIGFyb3VuZCBhIGJ1ZyBpblxuICAgICAgICAgIC8vIE9wZXJhIDw9IDcuNTR1MiB3aGVyZSBgMCA9PSAtMGAsIGJ1dCBgU3RyaW5nKC0wKSAhPT0gXCIwXCJgLlxuICAgICAgICAgIHJldHVybiAobGVhZGluZ1plcm9lcyArICh2YWx1ZSB8fCAwKSkuc2xpY2UoLXdpZHRoKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogRG91YmxlLXF1b3RlcyBhIHN0cmluZyBgdmFsdWVgLCByZXBsYWNpbmcgYWxsIEFTQ0lJIGNvbnRyb2xcbiAgICAgICAgLy8gY2hhcmFjdGVycyAoY2hhcmFjdGVycyB3aXRoIGNvZGUgdW5pdCB2YWx1ZXMgYmV0d2VlbiAwIGFuZCAzMSkgd2l0aFxuICAgICAgICAvLyB0aGVpciBlc2NhcGVkIGVxdWl2YWxlbnRzLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBgUXVvdGUodmFsdWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICB2YXIgdW5pY29kZVByZWZpeCA9IFwiXFxcXHUwMFwiO1xuICAgICAgICB2YXIgcXVvdGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gJ1wiJywgaW5kZXggPSAwLCBsZW5ndGggPSB2YWx1ZS5sZW5ndGgsIHVzZUNoYXJJbmRleCA9ICFjaGFySW5kZXhCdWdneSB8fCBsZW5ndGggPiAxMDtcbiAgICAgICAgICB2YXIgc3ltYm9scyA9IHVzZUNoYXJJbmRleCAmJiAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5zcGxpdChcIlwiKSA6IHZhbHVlKTtcbiAgICAgICAgICBmb3IgKDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBjaGFyQ29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlciBpcyBhIGNvbnRyb2wgY2hhcmFjdGVyLCBhcHBlbmQgaXRzIFVuaWNvZGUgb3JcbiAgICAgICAgICAgIC8vIHNob3J0aGFuZCBlc2NhcGUgc2VxdWVuY2U7IG90aGVyd2lzZSwgYXBwZW5kIHRoZSBjaGFyYWN0ZXIgYXMtaXMuXG4gICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgIGNhc2UgODogY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEyOiBjYXNlIDEzOiBjYXNlIDM0OiBjYXNlIDkyOlxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBFc2NhcGVzW2NoYXJDb2RlXTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPCAzMikge1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IHVuaWNvZGVQcmVmaXggKyB0b1BhZGRlZFN0cmluZygyLCBjaGFyQ29kZS50b1N0cmluZygxNikpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSB1c2VDaGFySW5kZXggPyBzeW1ib2xzW2luZGV4XSA6IHZhbHVlLmNoYXJBdChpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQgKyAnXCInO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSBzZXJpYWxpemVzIGFuIG9iamVjdC4gSW1wbGVtZW50cyB0aGVcbiAgICAgICAgLy8gYFN0cihrZXksIGhvbGRlcilgLCBgSk8odmFsdWUpYCwgYW5kIGBKQSh2YWx1ZSlgIG9wZXJhdGlvbnMuXG4gICAgICAgIHZhciBzZXJpYWxpemUgPSBmdW5jdGlvbiAocHJvcGVydHksIG9iamVjdCwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIGluZGVudGF0aW9uLCBzdGFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSwgY2xhc3NOYW1lLCB5ZWFyLCBtb250aCwgZGF0ZSwgdGltZSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIG1pbGxpc2Vjb25kcywgcmVzdWx0cywgZWxlbWVudCwgaW5kZXgsIGxlbmd0aCwgcHJlZml4LCByZXN1bHQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIE5lY2Vzc2FyeSBmb3IgaG9zdCBvYmplY3Qgc3VwcG9ydC5cbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W3Byb3BlcnR5XTtcbiAgICAgICAgICB9IGNhdGNoIChleGNlcHRpb24pIHt9XG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiICYmIHZhbHVlKSB7XG4gICAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICAgIGlmIChjbGFzc05hbWUgPT0gZGF0ZUNsYXNzICYmICFpc1Byb3BlcnR5LmNhbGwodmFsdWUsIFwidG9KU09OXCIpKSB7XG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA+IC0xIC8gMCAmJiB2YWx1ZSA8IDEgLyAwKSB7XG4gICAgICAgICAgICAgICAgLy8gRGF0ZXMgYXJlIHNlcmlhbGl6ZWQgYWNjb3JkaW5nIHRvIHRoZSBgRGF0ZSN0b0pTT05gIG1ldGhvZFxuICAgICAgICAgICAgICAgIC8vIHNwZWNpZmllZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS45LjUuNDQuIFNlZSBzZWN0aW9uIDE1LjkuMS4xNVxuICAgICAgICAgICAgICAgIC8vIGZvciB0aGUgSVNPIDg2MDEgZGF0ZSB0aW1lIHN0cmluZyBmb3JtYXQuXG4gICAgICAgICAgICAgICAgaWYgKGdldERheSkge1xuICAgICAgICAgICAgICAgICAgLy8gTWFudWFsbHkgY29tcHV0ZSB0aGUgeWVhciwgbW9udGgsIGRhdGUsIGhvdXJzLCBtaW51dGVzLFxuICAgICAgICAgICAgICAgICAgLy8gc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBpZiB0aGUgYGdldFVUQypgIG1ldGhvZHMgYXJlXG4gICAgICAgICAgICAgICAgICAvLyBidWdneS4gQWRhcHRlZCBmcm9tIEBZYWZmbGUncyBgZGF0ZS1zaGltYCBwcm9qZWN0LlxuICAgICAgICAgICAgICAgICAgZGF0ZSA9IGZsb29yKHZhbHVlIC8gODY0ZTUpO1xuICAgICAgICAgICAgICAgICAgZm9yICh5ZWFyID0gZmxvb3IoZGF0ZSAvIDM2NS4yNDI1KSArIDE5NzAgLSAxOyBnZXREYXkoeWVhciArIDEsIDApIDw9IGRhdGU7IHllYXIrKyk7XG4gICAgICAgICAgICAgICAgICBmb3IgKG1vbnRoID0gZmxvb3IoKGRhdGUgLSBnZXREYXkoeWVhciwgMCkpIC8gMzAuNDIpOyBnZXREYXkoeWVhciwgbW9udGggKyAxKSA8PSBkYXRlOyBtb250aCsrKTtcbiAgICAgICAgICAgICAgICAgIGRhdGUgPSAxICsgZGF0ZSAtIGdldERheSh5ZWFyLCBtb250aCk7XG4gICAgICAgICAgICAgICAgICAvLyBUaGUgYHRpbWVgIHZhbHVlIHNwZWNpZmllcyB0aGUgdGltZSB3aXRoaW4gdGhlIGRheSAoc2VlIEVTXG4gICAgICAgICAgICAgICAgICAvLyA1LjEgc2VjdGlvbiAxNS45LjEuMikuIFRoZSBmb3JtdWxhIGAoQSAlIEIgKyBCKSAlIEJgIGlzIHVzZWRcbiAgICAgICAgICAgICAgICAgIC8vIHRvIGNvbXB1dGUgYEEgbW9kdWxvIEJgLCBhcyB0aGUgYCVgIG9wZXJhdG9yIGRvZXMgbm90XG4gICAgICAgICAgICAgICAgICAvLyBjb3JyZXNwb25kIHRvIHRoZSBgbW9kdWxvYCBvcGVyYXRpb24gZm9yIG5lZ2F0aXZlIG51bWJlcnMuXG4gICAgICAgICAgICAgICAgICB0aW1lID0gKHZhbHVlICUgODY0ZTUgKyA4NjRlNSkgJSA4NjRlNTtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSBob3VycywgbWludXRlcywgc2Vjb25kcywgYW5kIG1pbGxpc2Vjb25kcyBhcmUgb2J0YWluZWQgYnlcbiAgICAgICAgICAgICAgICAgIC8vIGRlY29tcG9zaW5nIHRoZSB0aW1lIHdpdGhpbiB0aGUgZGF5LiBTZWUgc2VjdGlvbiAxNS45LjEuMTAuXG4gICAgICAgICAgICAgICAgICBob3VycyA9IGZsb29yKHRpbWUgLyAzNmU1KSAlIDI0O1xuICAgICAgICAgICAgICAgICAgbWludXRlcyA9IGZsb29yKHRpbWUgLyA2ZTQpICUgNjA7XG4gICAgICAgICAgICAgICAgICBzZWNvbmRzID0gZmxvb3IodGltZSAvIDFlMykgJSA2MDtcbiAgICAgICAgICAgICAgICAgIG1pbGxpc2Vjb25kcyA9IHRpbWUgJSAxZTM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHllYXIgPSB2YWx1ZS5nZXRVVENGdWxsWWVhcigpO1xuICAgICAgICAgICAgICAgICAgbW9udGggPSB2YWx1ZS5nZXRVVENNb250aCgpO1xuICAgICAgICAgICAgICAgICAgZGF0ZSA9IHZhbHVlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgICAgICAgICAgIGhvdXJzID0gdmFsdWUuZ2V0VVRDSG91cnMoKTtcbiAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB2YWx1ZS5nZXRVVENNaW51dGVzKCk7XG4gICAgICAgICAgICAgICAgICBzZWNvbmRzID0gdmFsdWUuZ2V0VVRDU2Vjb25kcygpO1xuICAgICAgICAgICAgICAgICAgbWlsbGlzZWNvbmRzID0gdmFsdWUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBleHRlbmRlZCB5ZWFycyBjb3JyZWN0bHkuXG4gICAgICAgICAgICAgICAgdmFsdWUgPSAoeWVhciA8PSAwIHx8IHllYXIgPj0gMWU0ID8gKHllYXIgPCAwID8gXCItXCIgOiBcIitcIikgKyB0b1BhZGRlZFN0cmluZyg2LCB5ZWFyIDwgMCA/IC15ZWFyIDogeWVhcikgOiB0b1BhZGRlZFN0cmluZyg0LCB5ZWFyKSkgK1xuICAgICAgICAgICAgICAgICAgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBtb250aCArIDEpICsgXCItXCIgKyB0b1BhZGRlZFN0cmluZygyLCBkYXRlKSArXG4gICAgICAgICAgICAgICAgICAvLyBNb250aHMsIGRhdGVzLCBob3VycywgbWludXRlcywgYW5kIHNlY29uZHMgc2hvdWxkIGhhdmUgdHdvXG4gICAgICAgICAgICAgICAgICAvLyBkaWdpdHM7IG1pbGxpc2Vjb25kcyBzaG91bGQgaGF2ZSB0aHJlZS5cbiAgICAgICAgICAgICAgICAgIFwiVFwiICsgdG9QYWRkZWRTdHJpbmcoMiwgaG91cnMpICsgXCI6XCIgKyB0b1BhZGRlZFN0cmluZygyLCBtaW51dGVzKSArIFwiOlwiICsgdG9QYWRkZWRTdHJpbmcoMiwgc2Vjb25kcykgK1xuICAgICAgICAgICAgICAgICAgLy8gTWlsbGlzZWNvbmRzIGFyZSBvcHRpb25hbCBpbiBFUyA1LjAsIGJ1dCByZXF1aXJlZCBpbiA1LjEuXG4gICAgICAgICAgICAgICAgICBcIi5cIiArIHRvUGFkZGVkU3RyaW5nKDMsIG1pbGxpc2Vjb25kcykgKyBcIlpcIjtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlLnRvSlNPTiA9PSBcImZ1bmN0aW9uXCIgJiYgKChjbGFzc05hbWUgIT0gbnVtYmVyQ2xhc3MgJiYgY2xhc3NOYW1lICE9IHN0cmluZ0NsYXNzICYmIGNsYXNzTmFtZSAhPSBhcnJheUNsYXNzKSB8fCBpc1Byb3BlcnR5LmNhbGwodmFsdWUsIFwidG9KU09OXCIpKSkge1xuICAgICAgICAgICAgICAvLyBQcm90b3R5cGUgPD0gMS42LjEgYWRkcyBub24tc3RhbmRhcmQgYHRvSlNPTmAgbWV0aG9kcyB0byB0aGVcbiAgICAgICAgICAgICAgLy8gYE51bWJlcmAsIGBTdHJpbmdgLCBgRGF0ZWAsIGFuZCBgQXJyYXlgIHByb3RvdHlwZXMuIEpTT04gM1xuICAgICAgICAgICAgICAvLyBpZ25vcmVzIGFsbCBgdG9KU09OYCBtZXRob2RzIG9uIHRoZXNlIG9iamVjdHMgdW5sZXNzIHRoZXkgYXJlXG4gICAgICAgICAgICAgIC8vIGRlZmluZWQgZGlyZWN0bHkgb24gYW4gaW5zdGFuY2UuXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUudG9KU09OKHByb3BlcnR5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBJZiBhIHJlcGxhY2VtZW50IGZ1bmN0aW9uIHdhcyBwcm92aWRlZCwgY2FsbCBpdCB0byBvYnRhaW4gdGhlIHZhbHVlXG4gICAgICAgICAgICAvLyBmb3Igc2VyaWFsaXphdGlvbi5cbiAgICAgICAgICAgIHZhbHVlID0gY2FsbGJhY2suY2FsbChvYmplY3QsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIFwibnVsbFwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjbGFzc05hbWUgPSBnZXRDbGFzcy5jYWxsKHZhbHVlKTtcbiAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGJvb2xlYW5DbGFzcykge1xuICAgICAgICAgICAgLy8gQm9vbGVhbnMgYXJlIHJlcHJlc2VudGVkIGxpdGVyYWxseS5cbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgdmFsdWU7XG4gICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gbnVtYmVyQ2xhc3MpIHtcbiAgICAgICAgICAgIC8vIEpTT04gbnVtYmVycyBtdXN0IGJlIGZpbml0ZS4gYEluZmluaXR5YCBhbmQgYE5hTmAgYXJlIHNlcmlhbGl6ZWQgYXNcbiAgICAgICAgICAgIC8vIGBcIm51bGxcImAuXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgPiAtMSAvIDAgJiYgdmFsdWUgPCAxIC8gMCA/IFwiXCIgKyB2YWx1ZSA6IFwibnVsbFwiO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzKSB7XG4gICAgICAgICAgICAvLyBTdHJpbmdzIGFyZSBkb3VibGUtcXVvdGVkIGFuZCBlc2NhcGVkLlxuICAgICAgICAgICAgcmV0dXJuIHF1b3RlKFwiXCIgKyB2YWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IHNlcmlhbGl6ZSBvYmplY3RzIGFuZCBhcnJheXMuXG4gICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgY3ljbGljIHN0cnVjdHVyZXMuIFRoaXMgaXMgYSBsaW5lYXIgc2VhcmNoOyBwZXJmb3JtYW5jZVxuICAgICAgICAgICAgLy8gaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mIHVuaXF1ZSBuZXN0ZWQgb2JqZWN0cy5cbiAgICAgICAgICAgIGZvciAobGVuZ3RoID0gc3RhY2subGVuZ3RoOyBsZW5ndGgtLTspIHtcbiAgICAgICAgICAgICAgaWYgKHN0YWNrW2xlbmd0aF0gPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ3ljbGljIHN0cnVjdHVyZXMgY2Fubm90IGJlIHNlcmlhbGl6ZWQgYnkgYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQWRkIHRoZSBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgICAgICAgICAgc3RhY2sucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgICAgICAvLyBTYXZlIHRoZSBjdXJyZW50IGluZGVudGF0aW9uIGxldmVsIGFuZCBpbmRlbnQgb25lIGFkZGl0aW9uYWwgbGV2ZWwuXG4gICAgICAgICAgICBwcmVmaXggPSBpbmRlbnRhdGlvbjtcbiAgICAgICAgICAgIGluZGVudGF0aW9uICs9IHdoaXRlc3BhY2U7XG4gICAgICAgICAgICBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgLy8gUmVjdXJzaXZlbHkgc2VyaWFsaXplIGFycmF5IGVsZW1lbnRzLlxuICAgICAgICAgICAgICBmb3IgKGluZGV4ID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQgPSBzZXJpYWxpemUoaW5kZXgsIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2goZWxlbWVudCA9PT0gdW5kZWYgPyBcIm51bGxcIiA6IGVsZW1lbnQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyBcIltcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwiXVwiIDogKFwiW1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwiXVwiKSkgOiBcIltdXCI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBzZXJpYWxpemUgb2JqZWN0IG1lbWJlcnMuIE1lbWJlcnMgYXJlIHNlbGVjdGVkIGZyb21cbiAgICAgICAgICAgICAgLy8gZWl0aGVyIGEgdXNlci1zcGVjaWZpZWQgbGlzdCBvZiBwcm9wZXJ0eSBuYW1lcywgb3IgdGhlIG9iamVjdFxuICAgICAgICAgICAgICAvLyBpdHNlbGYuXG4gICAgICAgICAgICAgIGZvckVhY2gocHJvcGVydGllcyB8fCB2YWx1ZSwgZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBzZXJpYWxpemUocHJvcGVydHksIHZhbHVlLCBjYWxsYmFjaywgcHJvcGVydGllcywgd2hpdGVzcGFjZSwgaW5kZW50YXRpb24sIHN0YWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCAhPT0gdW5kZWYpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEFjY29yZGluZyB0byBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zOiBcIklmIGBnYXBgIHt3aGl0ZXNwYWNlfVxuICAgICAgICAgICAgICAgICAgLy8gaXMgbm90IHRoZSBlbXB0eSBzdHJpbmcsIGxldCBgbWVtYmVyYCB7cXVvdGUocHJvcGVydHkpICsgXCI6XCJ9XG4gICAgICAgICAgICAgICAgICAvLyBiZSB0aGUgY29uY2F0ZW5hdGlvbiBvZiBgbWVtYmVyYCBhbmQgdGhlIGBzcGFjZWAgY2hhcmFjdGVyLlwiXG4gICAgICAgICAgICAgICAgICAvLyBUaGUgXCJgc3BhY2VgIGNoYXJhY3RlclwiIHJlZmVycyB0byB0aGUgbGl0ZXJhbCBzcGFjZVxuICAgICAgICAgICAgICAgICAgLy8gY2hhcmFjdGVyLCBub3QgdGhlIGBzcGFjZWAge3dpZHRofSBhcmd1bWVudCBwcm92aWRlZCB0b1xuICAgICAgICAgICAgICAgICAgLy8gYEpTT04uc3RyaW5naWZ5YC5cbiAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChxdW90ZShwcm9wZXJ0eSkgKyBcIjpcIiArICh3aGl0ZXNwYWNlID8gXCIgXCIgOiBcIlwiKSArIGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdHMubGVuZ3RoID8gKHdoaXRlc3BhY2UgPyBcIntcXG5cIiArIGluZGVudGF0aW9uICsgcmVzdWx0cy5qb2luKFwiLFxcblwiICsgaW5kZW50YXRpb24pICsgXCJcXG5cIiArIHByZWZpeCArIFwifVwiIDogKFwie1wiICsgcmVzdWx0cy5qb2luKFwiLFwiKSArIFwifVwiKSkgOiBcInt9XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG9iamVjdCBmcm9tIHRoZSB0cmF2ZXJzZWQgb2JqZWN0IHN0YWNrLlxuICAgICAgICAgICAgc3RhY2sucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQdWJsaWM6IGBKU09OLnN0cmluZ2lmeWAuIFNlZSBFUyA1LjEgc2VjdGlvbiAxNS4xMi4zLlxuICAgICAgICBleHBvcnRzLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIChzb3VyY2UsIGZpbHRlciwgd2lkdGgpIHtcbiAgICAgICAgICB2YXIgd2hpdGVzcGFjZSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIGNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAob2JqZWN0VHlwZXNbdHlwZW9mIGZpbHRlcl0gJiYgZmlsdGVyKSB7XG4gICAgICAgICAgICBpZiAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwoZmlsdGVyKSkgPT0gZnVuY3Rpb25DbGFzcykge1xuICAgICAgICAgICAgICBjYWxsYmFjayA9IGZpbHRlcjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY2xhc3NOYW1lID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgcHJvcGVydHkgbmFtZXMgYXJyYXkgaW50byBhIG1ha2VzaGlmdCBzZXQuXG4gICAgICAgICAgICAgIHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwLCBsZW5ndGggPSBmaWx0ZXIubGVuZ3RoLCB2YWx1ZTsgaW5kZXggPCBsZW5ndGg7IHZhbHVlID0gZmlsdGVyW2luZGV4KytdLCAoKGNsYXNzTmFtZSA9IGdldENsYXNzLmNhbGwodmFsdWUpKSwgY2xhc3NOYW1lID09IHN0cmluZ0NsYXNzIHx8IGNsYXNzTmFtZSA9PSBudW1iZXJDbGFzcykgJiYgKHByb3BlcnRpZXNbdmFsdWVdID0gMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAod2lkdGgpIHtcbiAgICAgICAgICAgIGlmICgoY2xhc3NOYW1lID0gZ2V0Q2xhc3MuY2FsbCh3aWR0aCkpID09IG51bWJlckNsYXNzKSB7XG4gICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGB3aWR0aGAgdG8gYW4gaW50ZWdlciBhbmQgY3JlYXRlIGEgc3RyaW5nIGNvbnRhaW5pbmdcbiAgICAgICAgICAgICAgLy8gYHdpZHRoYCBudW1iZXIgb2Ygc3BhY2UgY2hhcmFjdGVycy5cbiAgICAgICAgICAgICAgaWYgKCh3aWR0aCAtPSB3aWR0aCAlIDEpID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAod2hpdGVzcGFjZSA9IFwiXCIsIHdpZHRoID4gMTAgJiYgKHdpZHRoID0gMTApOyB3aGl0ZXNwYWNlLmxlbmd0aCA8IHdpZHRoOyB3aGl0ZXNwYWNlICs9IFwiIFwiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmIChjbGFzc05hbWUgPT0gc3RyaW5nQ2xhc3MpIHtcbiAgICAgICAgICAgICAgd2hpdGVzcGFjZSA9IHdpZHRoLmxlbmd0aCA8PSAxMCA/IHdpZHRoIDogd2lkdGguc2xpY2UoMCwgMTApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBPcGVyYSA8PSA3LjU0dTIgZGlzY2FyZHMgdGhlIHZhbHVlcyBhc3NvY2lhdGVkIHdpdGggZW1wdHkgc3RyaW5nIGtleXNcbiAgICAgICAgICAvLyAoYFwiXCJgKSBvbmx5IGlmIHRoZXkgYXJlIHVzZWQgZGlyZWN0bHkgd2l0aGluIGFuIG9iamVjdCBtZW1iZXIgbGlzdFxuICAgICAgICAgIC8vIChlLmcuLCBgIShcIlwiIGluIHsgXCJcIjogMX0pYCkuXG4gICAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZShcIlwiLCAodmFsdWUgPSB7fSwgdmFsdWVbXCJcIl0gPSBzb3VyY2UsIHZhbHVlKSwgY2FsbGJhY2ssIHByb3BlcnRpZXMsIHdoaXRlc3BhY2UsIFwiXCIsIFtdKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgLy8gUHVibGljOiBQYXJzZXMgYSBKU09OIHNvdXJjZSBzdHJpbmcuXG4gICAgICBpZiAoIWhhcyhcImpzb24tcGFyc2VcIikpIHtcbiAgICAgICAgdmFyIGZyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IEEgbWFwIG9mIGVzY2FwZWQgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCB0aGVpciB1bmVzY2FwZWRcbiAgICAgICAgLy8gZXF1aXZhbGVudHMuXG4gICAgICAgIHZhciBVbmVzY2FwZXMgPSB7XG4gICAgICAgICAgOTI6IFwiXFxcXFwiLFxuICAgICAgICAgIDM0OiAnXCInLFxuICAgICAgICAgIDQ3OiBcIi9cIixcbiAgICAgICAgICA5ODogXCJcXGJcIixcbiAgICAgICAgICAxMTY6IFwiXFx0XCIsXG4gICAgICAgICAgMTEwOiBcIlxcblwiLFxuICAgICAgICAgIDEwMjogXCJcXGZcIixcbiAgICAgICAgICAxMTQ6IFwiXFxyXCJcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogU3RvcmVzIHRoZSBwYXJzZXIgc3RhdGUuXG4gICAgICAgIHZhciBJbmRleCwgU291cmNlO1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZXNldHMgdGhlIHBhcnNlciBzdGF0ZSBhbmQgdGhyb3dzIGEgYFN5bnRheEVycm9yYC5cbiAgICAgICAgdmFyIGFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDtcbiAgICAgICAgICB0aHJvdyBTeW50YXhFcnJvcigpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZXR1cm5zIHRoZSBuZXh0IHRva2VuLCBvciBgXCIkXCJgIGlmIHRoZSBwYXJzZXIgaGFzIHJlYWNoZWRcbiAgICAgICAgLy8gdGhlIGVuZCBvZiB0aGUgc291cmNlIHN0cmluZy4gQSB0b2tlbiBtYXkgYmUgYSBzdHJpbmcsIG51bWJlciwgYG51bGxgXG4gICAgICAgIC8vIGxpdGVyYWwsIG9yIEJvb2xlYW4gbGl0ZXJhbC5cbiAgICAgICAgdmFyIGxleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc291cmNlID0gU291cmNlLCBsZW5ndGggPSBzb3VyY2UubGVuZ3RoLCB2YWx1ZSwgYmVnaW4sIHBvc2l0aW9uLCBpc1NpZ25lZCwgY2hhckNvZGU7XG4gICAgICAgICAgd2hpbGUgKEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KTtcbiAgICAgICAgICAgIHN3aXRjaCAoY2hhckNvZGUpIHtcbiAgICAgICAgICAgICAgY2FzZSA5OiBjYXNlIDEwOiBjYXNlIDEzOiBjYXNlIDMyOlxuICAgICAgICAgICAgICAgIC8vIFNraXAgd2hpdGVzcGFjZSB0b2tlbnMsIGluY2x1ZGluZyB0YWJzLCBjYXJyaWFnZSByZXR1cm5zLCBsaW5lXG4gICAgICAgICAgICAgICAgLy8gZmVlZHMsIGFuZCBzcGFjZSBjaGFyYWN0ZXJzLlxuICAgICAgICAgICAgICAgIEluZGV4Kys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgMTIzOiBjYXNlIDEyNTogY2FzZSA5MTogY2FzZSA5MzogY2FzZSA1ODogY2FzZSA0NDpcbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBhIHB1bmN0dWF0b3IgdG9rZW4gKGB7YCwgYH1gLCBgW2AsIGBdYCwgYDpgLCBvciBgLGApIGF0XG4gICAgICAgICAgICAgICAgLy8gdGhlIGN1cnJlbnQgcG9zaXRpb24uXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBjaGFySW5kZXhCdWdneSA/IHNvdXJjZS5jaGFyQXQoSW5kZXgpIDogc291cmNlW0luZGV4XTtcbiAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgY2FzZSAzNDpcbiAgICAgICAgICAgICAgICAvLyBgXCJgIGRlbGltaXRzIGEgSlNPTiBzdHJpbmc7IGFkdmFuY2UgdG8gdGhlIG5leHQgY2hhcmFjdGVyIGFuZFxuICAgICAgICAgICAgICAgIC8vIGJlZ2luIHBhcnNpbmcgdGhlIHN0cmluZy4gU3RyaW5nIHRva2VucyBhcmUgcHJlZml4ZWQgd2l0aCB0aGVcbiAgICAgICAgICAgICAgICAvLyBzZW50aW5lbCBgQGAgY2hhcmFjdGVyIHRvIGRpc3Rpbmd1aXNoIHRoZW0gZnJvbSBwdW5jdHVhdG9ycyBhbmRcbiAgICAgICAgICAgICAgICAvLyBlbmQtb2Ytc3RyaW5nIHRva2Vucy5cbiAgICAgICAgICAgICAgICBmb3IgKHZhbHVlID0gXCJAXCIsIEluZGV4Kys7IEluZGV4IDwgbGVuZ3RoOykge1xuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPCAzMikge1xuICAgICAgICAgICAgICAgICAgICAvLyBVbmVzY2FwZWQgQVNDSUkgY29udHJvbCBjaGFyYWN0ZXJzICh0aG9zZSB3aXRoIGEgY29kZSB1bml0XG4gICAgICAgICAgICAgICAgICAgIC8vIGxlc3MgdGhhbiB0aGUgc3BhY2UgY2hhcmFjdGVyKSBhcmUgbm90IHBlcm1pdHRlZC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPT0gOTIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSByZXZlcnNlIHNvbGlkdXMgKGBcXGApIG1hcmtzIHRoZSBiZWdpbm5pbmcgb2YgYW4gZXNjYXBlZFxuICAgICAgICAgICAgICAgICAgICAvLyBjb250cm9sIGNoYXJhY3RlciAoaW5jbHVkaW5nIGBcImAsIGBcXGAsIGFuZCBgL2ApIG9yIFVuaWNvZGVcbiAgICAgICAgICAgICAgICAgICAgLy8gZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGNoYXJDb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSA5MjogY2FzZSAzNDogY2FzZSA0NzogY2FzZSA5ODogY2FzZSAxMTY6IGNhc2UgMTEwOiBjYXNlIDEwMjogY2FzZSAxMTQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXZpdmUgZXNjYXBlZCBjb250cm9sIGNoYXJhY3RlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBVbmVzY2FwZXNbY2hhckNvZGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgSW5kZXgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTE3OlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYFxcdWAgbWFya3MgdGhlIGJlZ2lubmluZyBvZiBhIFVuaWNvZGUgZXNjYXBlIHNlcXVlbmNlLlxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0byB0aGUgZmlyc3QgY2hhcmFjdGVyIGFuZCB2YWxpZGF0ZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvdXItZGlnaXQgY29kZSBwb2ludC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJlZ2luID0gKytJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleCArIDQ7IEluZGV4IDwgcG9zaXRpb247IEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEEgdmFsaWQgc2VxdWVuY2UgY29tcHJpc2VzIGZvdXIgaGV4ZGlnaXRzIChjYXNlLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNlbnNpdGl2ZSkgdGhhdCBmb3JtIGEgc2luZ2xlIGhleGFkZWNpbWFsIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1NyB8fCBjaGFyQ29kZSA+PSA5NyAmJiBjaGFyQ29kZSA8PSAxMDIgfHwgY2hhckNvZGUgPj0gNjUgJiYgY2hhckNvZGUgPD0gNzApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSW52YWxpZCBVbmljb2RlIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXZpdmUgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gZnJvbUNoYXJDb2RlKFwiMHhcIiArIHNvdXJjZS5zbGljZShiZWdpbiwgSW5kZXgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJbnZhbGlkIGVzY2FwZSBzZXF1ZW5jZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIEFuIHVuZXNjYXBlZCBkb3VibGUtcXVvdGUgY2hhcmFjdGVyIG1hcmtzIHRoZSBlbmQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgLy8gc3RyaW5nLlxuICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBiZWdpbiA9IEluZGV4O1xuICAgICAgICAgICAgICAgICAgICAvLyBPcHRpbWl6ZSBmb3IgdGhlIGNvbW1vbiBjYXNlIHdoZXJlIGEgc3RyaW5nIGlzIHZhbGlkLlxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoY2hhckNvZGUgPj0gMzIgJiYgY2hhckNvZGUgIT0gOTIgJiYgY2hhckNvZGUgIT0gMzQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgc3RyaW5nIGFzLWlzLlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSArPSBzb3VyY2Uuc2xpY2UoYmVnaW4sIEluZGV4KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSA9PSAzNCkge1xuICAgICAgICAgICAgICAgICAgLy8gQWR2YW5jZSB0byB0aGUgbmV4dCBjaGFyYWN0ZXIgYW5kIHJldHVybiB0aGUgcmV2aXZlZCBzdHJpbmcuXG4gICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVbnRlcm1pbmF0ZWQgc3RyaW5nLlxuICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgLy8gUGFyc2UgbnVtYmVycyBhbmQgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgYmVnaW4gPSBJbmRleDtcbiAgICAgICAgICAgICAgICAvLyBBZHZhbmNlIHBhc3QgdGhlIG5lZ2F0aXZlIHNpZ24sIGlmIG9uZSBpcyBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQ1KSB7XG4gICAgICAgICAgICAgICAgICBpc1NpZ25lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KCsrSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBQYXJzZSBhbiBpbnRlZ2VyIG9yIGZsb2F0aW5nLXBvaW50IHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmIChjaGFyQ29kZSA+PSA0OCAmJiBjaGFyQ29kZSA8PSA1Nykge1xuICAgICAgICAgICAgICAgICAgLy8gTGVhZGluZyB6ZXJvZXMgYXJlIGludGVycHJldGVkIGFzIG9jdGFsIGxpdGVyYWxzLlxuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJDb2RlID09IDQ4ICYmICgoY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCArIDEpKSwgY2hhckNvZGUgPj0gNDggJiYgY2hhckNvZGUgPD0gNTcpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgb2N0YWwgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlzU2lnbmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAvLyBQYXJzZSB0aGUgaW50ZWdlciBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICBmb3IgKDsgSW5kZXggPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KEluZGV4KSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgSW5kZXgrKyk7XG4gICAgICAgICAgICAgICAgICAvLyBGbG9hdHMgY2Fubm90IGNvbnRhaW4gYSBsZWFkaW5nIGRlY2ltYWwgcG9pbnQ7IGhvd2V2ZXIsIHRoaXNcbiAgICAgICAgICAgICAgICAgIC8vIGNhc2UgaXMgYWxyZWFkeSBhY2NvdW50ZWQgZm9yIGJ5IHRoZSBwYXJzZXIuXG4gICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmNoYXJDb2RlQXQoSW5kZXgpID09IDQ2KSB7XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gKytJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgLy8gUGFyc2UgdGhlIGRlY2ltYWwgY29tcG9uZW50LlxuICAgICAgICAgICAgICAgICAgICBmb3IgKDsgcG9zaXRpb24gPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KHBvc2l0aW9uKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgcG9zaXRpb24rKyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgdHJhaWxpbmcgZGVjaW1hbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIEluZGV4ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAvLyBQYXJzZSBleHBvbmVudHMuIFRoZSBgZWAgZGVub3RpbmcgdGhlIGV4cG9uZW50IGlzXG4gICAgICAgICAgICAgICAgICAvLyBjYXNlLWluc2Vuc2l0aXZlLlxuICAgICAgICAgICAgICAgICAgY2hhckNvZGUgPSBzb3VyY2UuY2hhckNvZGVBdChJbmRleCk7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gMTAxIHx8IGNoYXJDb2RlID09IDY5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlID0gc291cmNlLmNoYXJDb2RlQXQoKytJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNraXAgcGFzdCB0aGUgc2lnbiBmb2xsb3dpbmcgdGhlIGV4cG9uZW50LCBpZiBvbmUgaXNcbiAgICAgICAgICAgICAgICAgICAgLy8gc3BlY2lmaWVkLlxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hhckNvZGUgPT0gNDMgfHwgY2hhckNvZGUgPT0gNDUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBJbmRleCsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBleHBvbmVudGlhbCBjb21wb25lbnQuXG4gICAgICAgICAgICAgICAgICAgIGZvciAocG9zaXRpb24gPSBJbmRleDsgcG9zaXRpb24gPCBsZW5ndGggJiYgKChjaGFyQ29kZSA9IHNvdXJjZS5jaGFyQ29kZUF0KHBvc2l0aW9uKSksIGNoYXJDb2RlID49IDQ4ICYmIGNoYXJDb2RlIDw9IDU3KTsgcG9zaXRpb24rKyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3NpdGlvbiA9PSBJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgIC8vIElsbGVnYWwgZW1wdHkgZXhwb25lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBJbmRleCA9IHBvc2l0aW9uO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgLy8gQ29lcmNlIHRoZSBwYXJzZWQgdmFsdWUgdG8gYSBKYXZhU2NyaXB0IG51bWJlci5cbiAgICAgICAgICAgICAgICAgIHJldHVybiArc291cmNlLnNsaWNlKGJlZ2luLCBJbmRleCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIEEgbmVnYXRpdmUgc2lnbiBtYXkgb25seSBwcmVjZWRlIG51bWJlcnMuXG4gICAgICAgICAgICAgICAgaWYgKGlzU2lnbmVkKSB7XG4gICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBgdHJ1ZWAsIGBmYWxzZWAsIGFuZCBgbnVsbGAgbGl0ZXJhbHMuXG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc291cmNlLnNsaWNlKEluZGV4LCBJbmRleCArIDUpID09IFwiZmFsc2VcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZS5zbGljZShJbmRleCwgSW5kZXggKyA0KSA9PSBcIm51bGxcIikge1xuICAgICAgICAgICAgICAgICAgSW5kZXggKz0gNDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBVbnJlY29nbml6ZWQgdG9rZW4uXG4gICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gUmV0dXJuIHRoZSBzZW50aW5lbCBgJGAgY2hhcmFjdGVyIGlmIHRoZSBwYXJzZXIgaGFzIHJlYWNoZWQgdGhlIGVuZFxuICAgICAgICAgIC8vIG9mIHRoZSBzb3VyY2Ugc3RyaW5nLlxuICAgICAgICAgIHJldHVybiBcIiRcIjtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBJbnRlcm5hbDogUGFyc2VzIGEgSlNPTiBgdmFsdWVgIHRva2VuLlxuICAgICAgICB2YXIgZ2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgdmFyIHJlc3VsdHMsIGhhc01lbWJlcnM7XG4gICAgICAgICAgaWYgKHZhbHVlID09IFwiJFwiKSB7XG4gICAgICAgICAgICAvLyBVbmV4cGVjdGVkIGVuZCBvZiBpbnB1dC5cbiAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgaWYgKChjaGFySW5kZXhCdWdneSA/IHZhbHVlLmNoYXJBdCgwKSA6IHZhbHVlWzBdKSA9PSBcIkBcIikge1xuICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIHNlbnRpbmVsIGBAYCBjaGFyYWN0ZXIuXG4gICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFBhcnNlIG9iamVjdCBhbmQgYXJyYXkgbGl0ZXJhbHMuXG4gICAgICAgICAgICBpZiAodmFsdWUgPT0gXCJbXCIpIHtcbiAgICAgICAgICAgICAgLy8gUGFyc2VzIGEgSlNPTiBhcnJheSwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgYXJyYXkuXG4gICAgICAgICAgICAgIHJlc3VsdHMgPSBbXTtcbiAgICAgICAgICAgICAgZm9yICg7OyBoYXNNZW1iZXJzIHx8IChoYXNNZW1iZXJzID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IGxleCgpO1xuICAgICAgICAgICAgICAgIC8vIEEgY2xvc2luZyBzcXVhcmUgYnJhY2tldCBtYXJrcyB0aGUgZW5kIG9mIHRoZSBhcnJheSBsaXRlcmFsLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIl1cIikge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhcnJheSBsaXRlcmFsIGNvbnRhaW5zIGVsZW1lbnRzLCB0aGUgY3VycmVudCB0b2tlblxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhIGNvbW1hIHNlcGFyYXRpbmcgdGhlIHByZXZpb3VzIGVsZW1lbnQgZnJvbSB0aGVcbiAgICAgICAgICAgICAgICAvLyBuZXh0LlxuICAgICAgICAgICAgICAgIGlmIChoYXNNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwiXVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0cmFpbGluZyBgLGAgaW4gYXJyYXkgbGl0ZXJhbC5cbiAgICAgICAgICAgICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBBIGAsYCBtdXN0IHNlcGFyYXRlIGVhY2ggYXJyYXkgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gRWxpc2lvbnMgYW5kIGxlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIikge1xuICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmVzdWx0cy5wdXNoKGdldCh2YWx1ZSkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiByZXN1bHRzO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PSBcIntcIikge1xuICAgICAgICAgICAgICAvLyBQYXJzZXMgYSBKU09OIG9iamVjdCwgcmV0dXJuaW5nIGEgbmV3IEphdmFTY3JpcHQgb2JqZWN0LlxuICAgICAgICAgICAgICByZXN1bHRzID0ge307XG4gICAgICAgICAgICAgIGZvciAoOzsgaGFzTWVtYmVycyB8fCAoaGFzTWVtYmVycyA9IHRydWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAvLyBBIGNsb3NpbmcgY3VybHkgYnJhY2UgbWFya3MgdGhlIGVuZCBvZiB0aGUgb2JqZWN0IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIG9iamVjdCBsaXRlcmFsIGNvbnRhaW5zIG1lbWJlcnMsIHRoZSBjdXJyZW50IHRva2VuXG4gICAgICAgICAgICAgICAgLy8gc2hvdWxkIGJlIGEgY29tbWEgc2VwYXJhdG9yLlxuICAgICAgICAgICAgICAgIGlmIChoYXNNZW1iZXJzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPT0gXCIsXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBsZXgoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09IFwifVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgLy8gVW5leHBlY3RlZCB0cmFpbGluZyBgLGAgaW4gb2JqZWN0IGxpdGVyYWwuXG4gICAgICAgICAgICAgICAgICAgICAgYWJvcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQSBgLGAgbXVzdCBzZXBhcmF0ZSBlYWNoIG9iamVjdCBtZW1iZXIuXG4gICAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIExlYWRpbmcgY29tbWFzIGFyZSBub3QgcGVybWl0dGVkLCBvYmplY3QgcHJvcGVydHkgbmFtZXMgbXVzdCBiZVxuICAgICAgICAgICAgICAgIC8vIGRvdWJsZS1xdW90ZWQgc3RyaW5ncywgYW5kIGEgYDpgIG11c3Qgc2VwYXJhdGUgZWFjaCBwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIC8vIG5hbWUgYW5kIHZhbHVlLlxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBcIixcIiB8fCB0eXBlb2YgdmFsdWUgIT0gXCJzdHJpbmdcIiB8fCAoY2hhckluZGV4QnVnZ3kgPyB2YWx1ZS5jaGFyQXQoMCkgOiB2YWx1ZVswXSkgIT0gXCJAXCIgfHwgbGV4KCkgIT0gXCI6XCIpIHtcbiAgICAgICAgICAgICAgICAgIGFib3J0KCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlc3VsdHNbdmFsdWUuc2xpY2UoMSldID0gZ2V0KGxleCgpKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFVuZXhwZWN0ZWQgdG9rZW4gZW5jb3VudGVyZWQuXG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gSW50ZXJuYWw6IFVwZGF0ZXMgYSB0cmF2ZXJzZWQgb2JqZWN0IG1lbWJlci5cbiAgICAgICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciBlbGVtZW50ID0gd2Fsayhzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjayk7XG4gICAgICAgICAgaWYgKGVsZW1lbnQgPT09IHVuZGVmKSB7XG4gICAgICAgICAgICBkZWxldGUgc291cmNlW3Byb3BlcnR5XTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc291cmNlW3Byb3BlcnR5XSA9IGVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIEludGVybmFsOiBSZWN1cnNpdmVseSB0cmF2ZXJzZXMgYSBwYXJzZWQgSlNPTiBvYmplY3QsIGludm9raW5nIHRoZVxuICAgICAgICAvLyBgY2FsbGJhY2tgIGZ1bmN0aW9uIGZvciBlYWNoIHZhbHVlLiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBgV2Fsayhob2xkZXIsIG5hbWUpYCBvcGVyYXRpb24gZGVmaW5lZCBpbiBFUyA1LjEgc2VjdGlvbiAxNS4xMi4yLlxuICAgICAgICB2YXIgd2FsayA9IGZ1bmN0aW9uIChzb3VyY2UsIHByb3BlcnR5LCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciB2YWx1ZSA9IHNvdXJjZVtwcm9wZXJ0eV0sIGxlbmd0aDtcbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09IFwib2JqZWN0XCIgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIC8vIGBmb3JFYWNoYCBjYW4ndCBiZSB1c2VkIHRvIHRyYXZlcnNlIGFuIGFycmF5IGluIE9wZXJhIDw9IDguNTRcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgaXRzIGBPYmplY3QjaGFzT3duUHJvcGVydHlgIGltcGxlbWVudGF0aW9uIHJldHVybnMgYGZhbHNlYFxuICAgICAgICAgICAgLy8gZm9yIGFycmF5IGluZGljZXMgKGUuZy4sIGAhWzEsIDIsIDNdLmhhc093blByb3BlcnR5KFwiMFwiKWApLlxuICAgICAgICAgICAgaWYgKGdldENsYXNzLmNhbGwodmFsdWUpID09IGFycmF5Q2xhc3MpIHtcbiAgICAgICAgICAgICAgZm9yIChsZW5ndGggPSB2YWx1ZS5sZW5ndGg7IGxlbmd0aC0tOykge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSwgbGVuZ3RoLCBjYWxsYmFjayk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZvckVhY2godmFsdWUsIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIHVwZGF0ZSh2YWx1ZSwgcHJvcGVydHksIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjYWxsYmFjay5jYWxsKHNvdXJjZSwgcHJvcGVydHksIHZhbHVlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBQdWJsaWM6IGBKU09OLnBhcnNlYC4gU2VlIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjIuXG4gICAgICAgIGV4cG9ydHMucGFyc2UgPSBmdW5jdGlvbiAoc291cmNlLCBjYWxsYmFjaykge1xuICAgICAgICAgIHZhciByZXN1bHQsIHZhbHVlO1xuICAgICAgICAgIEluZGV4ID0gMDtcbiAgICAgICAgICBTb3VyY2UgPSBcIlwiICsgc291cmNlO1xuICAgICAgICAgIHJlc3VsdCA9IGdldChsZXgoKSk7XG4gICAgICAgICAgLy8gSWYgYSBKU09OIHN0cmluZyBjb250YWlucyBtdWx0aXBsZSB0b2tlbnMsIGl0IGlzIGludmFsaWQuXG4gICAgICAgICAgaWYgKGxleCgpICE9IFwiJFwiKSB7XG4gICAgICAgICAgICBhYm9ydCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBSZXNldCB0aGUgcGFyc2VyIHN0YXRlLlxuICAgICAgICAgIEluZGV4ID0gU291cmNlID0gbnVsbDtcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2sgJiYgZ2V0Q2xhc3MuY2FsbChjYWxsYmFjaykgPT0gZnVuY3Rpb25DbGFzcyA/IHdhbGsoKHZhbHVlID0ge30sIHZhbHVlW1wiXCJdID0gcmVzdWx0LCB2YWx1ZSksIFwiXCIsIGNhbGxiYWNrKSA6IHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBleHBvcnRzW1wicnVuSW5Db250ZXh0XCJdID0gcnVuSW5Db250ZXh0O1xuICAgIHJldHVybiBleHBvcnRzO1xuICB9XG5cbiAgaWYgKGZyZWVFeHBvcnRzICYmICFpc0xvYWRlcikge1xuICAgIC8vIEV4cG9ydCBmb3IgQ29tbW9uSlMgZW52aXJvbm1lbnRzLlxuICAgIHJ1bkluQ29udGV4dChyb290LCBmcmVlRXhwb3J0cyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gRXhwb3J0IGZvciB3ZWIgYnJvd3NlcnMgYW5kIEphdmFTY3JpcHQgZW5naW5lcy5cbiAgICB2YXIgbmF0aXZlSlNPTiA9IHJvb3QuSlNPTixcbiAgICAgICAgcHJldmlvdXNKU09OID0gcm9vdFtcIkpTT04zXCJdLFxuICAgICAgICBpc1Jlc3RvcmVkID0gZmFsc2U7XG5cbiAgICB2YXIgSlNPTjMgPSBydW5JbkNvbnRleHQocm9vdCwgKHJvb3RbXCJKU09OM1wiXSA9IHtcbiAgICAgIC8vIFB1YmxpYzogUmVzdG9yZXMgdGhlIG9yaWdpbmFsIHZhbHVlIG9mIHRoZSBnbG9iYWwgYEpTT05gIG9iamVjdCBhbmRcbiAgICAgIC8vIHJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIGBKU09OM2Agb2JqZWN0LlxuICAgICAgXCJub0NvbmZsaWN0XCI6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCFpc1Jlc3RvcmVkKSB7XG4gICAgICAgICAgaXNSZXN0b3JlZCA9IHRydWU7XG4gICAgICAgICAgcm9vdC5KU09OID0gbmF0aXZlSlNPTjtcbiAgICAgICAgICByb290W1wiSlNPTjNcIl0gPSBwcmV2aW91c0pTT047XG4gICAgICAgICAgbmF0aXZlSlNPTiA9IHByZXZpb3VzSlNPTiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEpTT04zO1xuICAgICAgfVxuICAgIH0pKTtcblxuICAgIHJvb3QuSlNPTiA9IHtcbiAgICAgIFwicGFyc2VcIjogSlNPTjMucGFyc2UsXG4gICAgICBcInN0cmluZ2lmeVwiOiBKU09OMy5zdHJpbmdpZnlcbiAgICB9O1xuICB9XG5cbiAgLy8gRXhwb3J0IGZvciBhc3luY2hyb25vdXMgbW9kdWxlIGxvYWRlcnMuXG4gIGlmIChpc0xvYWRlcikge1xuICAgIGRlZmluZShmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gSlNPTjM7XG4gICAgfSk7XG4gIH1cbn0pLmNhbGwodGhpcyk7XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHt9XSw1OTpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFNpbXBsZSBxdWVyeSBzdHJpbmcgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBxdWVyeSBUaGUgcXVlcnkgc3RyaW5nIHRoYXQgbmVlZHMgdG8gYmUgcGFyc2VkLlxuICogQHJldHVybnMge09iamVjdH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5nKHF1ZXJ5KSB7XG4gIHZhciBwYXJzZXIgPSAvKFtePT8mXSspPT8oW14mXSopL2dcbiAgICAsIHJlc3VsdCA9IHt9XG4gICAgLCBwYXJ0O1xuXG4gIC8vXG4gIC8vIExpdHRsZSBuaWZ0eSBwYXJzaW5nIGhhY2ssIGxldmVyYWdlIHRoZSBmYWN0IHRoYXQgUmVnRXhwLmV4ZWMgaW5jcmVtZW50c1xuICAvLyB0aGUgbGFzdEluZGV4IHByb3BlcnR5IHNvIHdlIGNhbiBjb250aW51ZSBleGVjdXRpbmcgdGhpcyBsb29wIHVudGlsIHdlJ3ZlXG4gIC8vIHBhcnNlZCBhbGwgcmVzdWx0cy5cbiAgLy9cbiAgZm9yICg7XG4gICAgcGFydCA9IHBhcnNlci5leGVjKHF1ZXJ5KTtcbiAgICByZXN1bHRbZGVjb2RlVVJJQ29tcG9uZW50KHBhcnRbMV0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYXJ0WzJdKVxuICApO1xuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGEgcXVlcnkgc3RyaW5nIHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIE9iamVjdCB0aGF0IHNob3VsZCBiZSB0cmFuc2Zvcm1lZC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXggT3B0aW9uYWwgcHJlZml4LlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHF1ZXJ5c3RyaW5naWZ5KG9iaiwgcHJlZml4KSB7XG4gIHByZWZpeCA9IHByZWZpeCB8fCAnJztcblxuICB2YXIgcGFpcnMgPSBbXTtcblxuICAvL1xuICAvLyBPcHRpb25hbGx5IHByZWZpeCB3aXRoIGEgJz8nIGlmIG5lZWRlZFxuICAvL1xuICBpZiAoJ3N0cmluZycgIT09IHR5cGVvZiBwcmVmaXgpIHByZWZpeCA9ICc/JztcblxuICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKGhhcy5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgcGFpcnMucHVzaChlbmNvZGVVUklDb21wb25lbnQoa2V5KSArJz0nKyBlbmNvZGVVUklDb21wb25lbnQob2JqW2tleV0pKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFpcnMubGVuZ3RoID8gcHJlZml4ICsgcGFpcnMuam9pbignJicpIDogJyc7XG59XG5cbi8vXG4vLyBFeHBvc2UgdGhlIG1vZHVsZS5cbi8vXG5leHBvcnRzLnN0cmluZ2lmeSA9IHF1ZXJ5c3RyaW5naWZ5O1xuZXhwb3J0cy5wYXJzZSA9IHF1ZXJ5c3RyaW5nO1xuXG59LHt9XSw2MDpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgd2UncmUgcmVxdWlyZWQgdG8gYWRkIGEgcG9ydCBudW1iZXIuXG4gKlxuICogQHNlZSBodHRwczovL3VybC5zcGVjLndoYXR3Zy5vcmcvI2RlZmF1bHQtcG9ydFxuICogQHBhcmFtIHtOdW1iZXJ8U3RyaW5nfSBwb3J0IFBvcnQgbnVtYmVyIHdlIG5lZWQgdG8gY2hlY2tcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCB3ZSBuZWVkIHRvIGNoZWNrIGFnYWluc3QuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gSXMgaXQgYSBkZWZhdWx0IHBvcnQgZm9yIHRoZSBnaXZlbiBwcm90b2NvbFxuICogQGFwaSBwcml2YXRlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVxdWlyZWQocG9ydCwgcHJvdG9jb2wpIHtcbiAgcHJvdG9jb2wgPSBwcm90b2NvbC5zcGxpdCgnOicpWzBdO1xuICBwb3J0ID0gK3BvcnQ7XG5cbiAgaWYgKCFwb3J0KSByZXR1cm4gZmFsc2U7XG5cbiAgc3dpdGNoIChwcm90b2NvbCkge1xuICAgIGNhc2UgJ2h0dHAnOlxuICAgIGNhc2UgJ3dzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gODA7XG5cbiAgICBjYXNlICdodHRwcyc6XG4gICAgY2FzZSAnd3NzJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gNDQzO1xuXG4gICAgY2FzZSAnZnRwJzpcbiAgICByZXR1cm4gcG9ydCAhPT0gMjE7XG5cbiAgICBjYXNlICdnb3BoZXInOlxuICAgIHJldHVybiBwb3J0ICE9PSA3MDtcblxuICAgIGNhc2UgJ2ZpbGUnOlxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiBwb3J0ICE9PSAwO1xufTtcblxufSx7fV0sNjE6W2Z1bmN0aW9uKHJlcXVpcmUsbW9kdWxlLGV4cG9ydHMpe1xuJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVxdWlyZWQgPSByZXF1aXJlKCdyZXF1aXJlcy1wb3J0JylcbiAgLCBsb2xjYXRpb24gPSByZXF1aXJlKCcuL2xvbGNhdGlvbicpXG4gICwgcXMgPSByZXF1aXJlKCdxdWVyeXN0cmluZ2lmeScpXG4gICwgcHJvdG9jb2xyZSA9IC9eKFthLXpdW2EtejAtOS4rLV0qOik/KFxcL1xcLyk/KFtcXFNcXHNdKikvaTtcblxuLyoqXG4gKiBUaGVzZSBhcmUgdGhlIHBhcnNlIHJ1bGVzIGZvciB0aGUgVVJMIHBhcnNlciwgaXQgaW5mb3JtcyB0aGUgcGFyc2VyXG4gKiBhYm91dDpcbiAqXG4gKiAwLiBUaGUgY2hhciBpdCBOZWVkcyB0byBwYXJzZSwgaWYgaXQncyBhIHN0cmluZyBpdCBzaG91bGQgYmUgZG9uZSB1c2luZ1xuICogICAgaW5kZXhPZiwgUmVnRXhwIHVzaW5nIGV4ZWMgYW5kIE5hTiBtZWFucyBzZXQgYXMgY3VycmVudCB2YWx1ZS5cbiAqIDEuIFRoZSBwcm9wZXJ0eSB3ZSBzaG91bGQgc2V0IHdoZW4gcGFyc2luZyB0aGlzIHZhbHVlLlxuICogMi4gSW5kaWNhdGlvbiBpZiBpdCdzIGJhY2t3YXJkcyBvciBmb3J3YXJkIHBhcnNpbmcsIHdoZW4gc2V0IGFzIG51bWJlciBpdCdzXG4gKiAgICB0aGUgdmFsdWUgb2YgZXh0cmEgY2hhcnMgdGhhdCBzaG91bGQgYmUgc3BsaXQgb2ZmLlxuICogMy4gSW5oZXJpdCBmcm9tIGxvY2F0aW9uIGlmIG5vbiBleGlzdGluZyBpbiB0aGUgcGFyc2VyLlxuICogNC4gYHRvTG93ZXJDYXNlYCB0aGUgcmVzdWx0aW5nIHZhbHVlLlxuICovXG52YXIgcnVsZXMgPSBbXG4gIFsnIycsICdoYXNoJ10sICAgICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBiYWNrLlxuICBbJz8nLCAncXVlcnknXSwgICAgICAgICAgICAgICAgICAgICAgIC8vIEV4dHJhY3QgZnJvbSB0aGUgYmFjay5cbiAgWycvJywgJ3BhdGhuYW1lJ10sICAgICAgICAgICAgICAgICAgICAvLyBFeHRyYWN0IGZyb20gdGhlIGJhY2suXG4gIFsnQCcsICdhdXRoJywgMV0sICAgICAgICAgICAgICAgICAgICAgLy8gRXh0cmFjdCBmcm9tIHRoZSBmcm9udC5cbiAgW05hTiwgJ2hvc3QnLCB1bmRlZmluZWQsIDEsIDFdLCAgICAgICAvLyBTZXQgbGVmdCBvdmVyIHZhbHVlLlxuICBbLzooXFxkKykkLywgJ3BvcnQnLCB1bmRlZmluZWQsIDFdLCAgICAvLyBSZWdFeHAgdGhlIGJhY2suXG4gIFtOYU4sICdob3N0bmFtZScsIHVuZGVmaW5lZCwgMSwgMV0gICAgLy8gU2V0IGxlZnQgb3Zlci5cbl07XG5cbi8qKlxuICogQHR5cGVkZWYgUHJvdG9jb2xFeHRyYWN0XG4gKiBAdHlwZSBPYmplY3RcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSBwcm90b2NvbCBQcm90b2NvbCBtYXRjaGVkIGluIHRoZSBVUkwsIGluIGxvd2VyY2FzZS5cbiAqIEBwcm9wZXJ0eSB7Qm9vbGVhbn0gc2xhc2hlcyBgdHJ1ZWAgaWYgcHJvdG9jb2wgaXMgZm9sbG93ZWQgYnkgXCIvL1wiLCBlbHNlIGBmYWxzZWAuXG4gKiBAcHJvcGVydHkge1N0cmluZ30gcmVzdCBSZXN0IG9mIHRoZSBVUkwgdGhhdCBpcyBub3QgcGFydCBvZiB0aGUgcHJvdG9jb2wuXG4gKi9cblxuLyoqXG4gKiBFeHRyYWN0IHByb3RvY29sIGluZm9ybWF0aW9uIGZyb20gYSBVUkwgd2l0aC93aXRob3V0IGRvdWJsZSBzbGFzaCAoXCIvL1wiKS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBleHRyYWN0IGZyb20uXG4gKiBAcmV0dXJuIHtQcm90b2NvbEV4dHJhY3R9IEV4dHJhY3RlZCBpbmZvcm1hdGlvbi5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBleHRyYWN0UHJvdG9jb2woYWRkcmVzcykge1xuICB2YXIgbWF0Y2ggPSBwcm90b2NvbHJlLmV4ZWMoYWRkcmVzcyk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcm90b2NvbDogbWF0Y2hbMV0gPyBtYXRjaFsxXS50b0xvd2VyQ2FzZSgpIDogJycsXG4gICAgc2xhc2hlczogISFtYXRjaFsyXSxcbiAgICByZXN0OiBtYXRjaFszXVxuICB9O1xufVxuXG4vKipcbiAqIFJlc29sdmUgYSByZWxhdGl2ZSBVUkwgcGF0aG5hbWUgYWdhaW5zdCBhIGJhc2UgVVJMIHBhdGhuYW1lLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByZWxhdGl2ZSBQYXRobmFtZSBvZiB0aGUgcmVsYXRpdmUgVVJMLlxuICogQHBhcmFtIHtTdHJpbmd9IGJhc2UgUGF0aG5hbWUgb2YgdGhlIGJhc2UgVVJMLlxuICogQHJldHVybiB7U3RyaW5nfSBSZXNvbHZlZCBwYXRobmFtZS5cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlKHJlbGF0aXZlLCBiYXNlKSB7XG4gIHZhciBwYXRoID0gKGJhc2UgfHwgJy8nKS5zcGxpdCgnLycpLnNsaWNlKDAsIC0xKS5jb25jYXQocmVsYXRpdmUuc3BsaXQoJy8nKSlcbiAgICAsIGkgPSBwYXRoLmxlbmd0aFxuICAgICwgbGFzdCA9IHBhdGhbaSAtIDFdXG4gICAgLCB1bnNoaWZ0ID0gZmFsc2VcbiAgICAsIHVwID0gMDtcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKHBhdGhbaV0gPT09ICcuJykge1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChwYXRoW2ldID09PSAnLi4nKSB7XG4gICAgICBwYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgaWYgKGkgPT09IDApIHVuc2hpZnQgPSB0cnVlO1xuICAgICAgcGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICh1bnNoaWZ0KSBwYXRoLnVuc2hpZnQoJycpO1xuICBpZiAobGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicpIHBhdGgucHVzaCgnJyk7XG5cbiAgcmV0dXJuIHBhdGguam9pbignLycpO1xufVxuXG4vKipcbiAqIFRoZSBhY3R1YWwgVVJMIGluc3RhbmNlLiBJbnN0ZWFkIG9mIHJldHVybmluZyBhbiBvYmplY3Qgd2UndmUgb3B0ZWQtaW4gdG9cbiAqIGNyZWF0ZSBhbiBhY3R1YWwgY29uc3RydWN0b3IgYXMgaXQncyBtdWNoIG1vcmUgbWVtb3J5IGVmZmljaWVudCBhbmRcbiAqIGZhc3RlciBhbmQgaXQgcGxlYXNlcyBteSBPQ0QuXG4gKlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge1N0cmluZ30gYWRkcmVzcyBVUkwgd2Ugd2FudCB0byBwYXJzZS5cbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jYXRpb24gTG9jYXRpb24gZGVmYXVsdHMgZm9yIHJlbGF0aXZlIHBhdGhzLlxuICogQHBhcmFtIHtCb29sZWFufEZ1bmN0aW9ufSBwYXJzZXIgUGFyc2VyIGZvciB0aGUgcXVlcnkgc3RyaW5nLlxuICogQGFwaSBwdWJsaWNcbiAqL1xuZnVuY3Rpb24gVVJMKGFkZHJlc3MsIGxvY2F0aW9uLCBwYXJzZXIpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVSTCkpIHtcbiAgICByZXR1cm4gbmV3IFVSTChhZGRyZXNzLCBsb2NhdGlvbiwgcGFyc2VyKTtcbiAgfVxuXG4gIHZhciByZWxhdGl2ZSwgZXh0cmFjdGVkLCBwYXJzZSwgaW5zdHJ1Y3Rpb24sIGluZGV4LCBrZXlcbiAgICAsIGluc3RydWN0aW9ucyA9IHJ1bGVzLnNsaWNlKClcbiAgICAsIHR5cGUgPSB0eXBlb2YgbG9jYXRpb25cbiAgICAsIHVybCA9IHRoaXNcbiAgICAsIGkgPSAwO1xuXG4gIC8vXG4gIC8vIFRoZSBmb2xsb3dpbmcgaWYgc3RhdGVtZW50cyBhbGxvd3MgdGhpcyBtb2R1bGUgdHdvIGhhdmUgY29tcGF0aWJpbGl0eSB3aXRoXG4gIC8vIDIgZGlmZmVyZW50IEFQSTpcbiAgLy9cbiAgLy8gMS4gTm9kZS5qcydzIGB1cmwucGFyc2VgIGFwaSB3aGljaCBhY2NlcHRzIGEgVVJMLCBib29sZWFuIGFzIGFyZ3VtZW50c1xuICAvLyAgICB3aGVyZSB0aGUgYm9vbGVhbiBpbmRpY2F0ZXMgdGhhdCB0aGUgcXVlcnkgc3RyaW5nIHNob3VsZCBhbHNvIGJlIHBhcnNlZC5cbiAgLy9cbiAgLy8gMi4gVGhlIGBVUkxgIGludGVyZmFjZSBvZiB0aGUgYnJvd3NlciB3aGljaCBhY2NlcHRzIGEgVVJMLCBvYmplY3QgYXNcbiAgLy8gICAgYXJndW1lbnRzLiBUaGUgc3VwcGxpZWQgb2JqZWN0IHdpbGwgYmUgdXNlZCBhcyBkZWZhdWx0IHZhbHVlcyAvIGZhbGwtYmFja1xuICAvLyAgICBmb3IgcmVsYXRpdmUgcGF0aHMuXG4gIC8vXG4gIGlmICgnb2JqZWN0JyAhPT0gdHlwZSAmJiAnc3RyaW5nJyAhPT0gdHlwZSkge1xuICAgIHBhcnNlciA9IGxvY2F0aW9uO1xuICAgIGxvY2F0aW9uID0gbnVsbDtcbiAgfVxuXG4gIGlmIChwYXJzZXIgJiYgJ2Z1bmN0aW9uJyAhPT0gdHlwZW9mIHBhcnNlcikgcGFyc2VyID0gcXMucGFyc2U7XG5cbiAgbG9jYXRpb24gPSBsb2xjYXRpb24obG9jYXRpb24pO1xuXG4gIC8vXG4gIC8vIEV4dHJhY3QgcHJvdG9jb2wgaW5mb3JtYXRpb24gYmVmb3JlIHJ1bm5pbmcgdGhlIGluc3RydWN0aW9ucy5cbiAgLy9cbiAgZXh0cmFjdGVkID0gZXh0cmFjdFByb3RvY29sKGFkZHJlc3MgfHwgJycpO1xuICByZWxhdGl2ZSA9ICFleHRyYWN0ZWQucHJvdG9jb2wgJiYgIWV4dHJhY3RlZC5zbGFzaGVzO1xuICB1cmwuc2xhc2hlcyA9IGV4dHJhY3RlZC5zbGFzaGVzIHx8IHJlbGF0aXZlICYmIGxvY2F0aW9uLnNsYXNoZXM7XG4gIHVybC5wcm90b2NvbCA9IGV4dHJhY3RlZC5wcm90b2NvbCB8fCBsb2NhdGlvbi5wcm90b2NvbCB8fCAnJztcbiAgYWRkcmVzcyA9IGV4dHJhY3RlZC5yZXN0O1xuXG4gIC8vXG4gIC8vIFdoZW4gdGhlIGF1dGhvcml0eSBjb21wb25lbnQgaXMgYWJzZW50IHRoZSBVUkwgc3RhcnRzIHdpdGggYSBwYXRoXG4gIC8vIGNvbXBvbmVudC5cbiAgLy9cbiAgaWYgKCFleHRyYWN0ZWQuc2xhc2hlcykgaW5zdHJ1Y3Rpb25zWzJdID0gWy8oLiopLywgJ3BhdGhuYW1lJ107XG5cbiAgZm9yICg7IGkgPCBpbnN0cnVjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpbnN0cnVjdGlvbiA9IGluc3RydWN0aW9uc1tpXTtcbiAgICBwYXJzZSA9IGluc3RydWN0aW9uWzBdO1xuICAgIGtleSA9IGluc3RydWN0aW9uWzFdO1xuXG4gICAgaWYgKHBhcnNlICE9PSBwYXJzZSkge1xuICAgICAgdXJsW2tleV0gPSBhZGRyZXNzO1xuICAgIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGVvZiBwYXJzZSkge1xuICAgICAgaWYgKH4oaW5kZXggPSBhZGRyZXNzLmluZGV4T2YocGFyc2UpKSkge1xuICAgICAgICBpZiAoJ251bWJlcicgPT09IHR5cGVvZiBpbnN0cnVjdGlvblsyXSkge1xuICAgICAgICAgIHVybFtrZXldID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoaW5kZXggKyBpbnN0cnVjdGlvblsyXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXJsW2tleV0gPSBhZGRyZXNzLnNsaWNlKGluZGV4KTtcbiAgICAgICAgICBhZGRyZXNzID0gYWRkcmVzcy5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKChpbmRleCA9IHBhcnNlLmV4ZWMoYWRkcmVzcykpKSB7XG4gICAgICB1cmxba2V5XSA9IGluZGV4WzFdO1xuICAgICAgYWRkcmVzcyA9IGFkZHJlc3Muc2xpY2UoMCwgaW5kZXguaW5kZXgpO1xuICAgIH1cblxuICAgIHVybFtrZXldID0gdXJsW2tleV0gfHwgKFxuICAgICAgcmVsYXRpdmUgJiYgaW5zdHJ1Y3Rpb25bM10gPyBsb2NhdGlvbltrZXldIHx8ICcnIDogJydcbiAgICApO1xuXG4gICAgLy9cbiAgICAvLyBIb3N0bmFtZSwgaG9zdCBhbmQgcHJvdG9jb2wgc2hvdWxkIGJlIGxvd2VyY2FzZWQgc28gdGhleSBjYW4gYmUgdXNlZCB0b1xuICAgIC8vIGNyZWF0ZSBhIHByb3BlciBgb3JpZ2luYC5cbiAgICAvL1xuICAgIGlmIChpbnN0cnVjdGlvbls0XSkgdXJsW2tleV0gPSB1cmxba2V5XS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgLy9cbiAgLy8gQWxzbyBwYXJzZSB0aGUgc3VwcGxpZWQgcXVlcnkgc3RyaW5nIGluIHRvIGFuIG9iamVjdC4gSWYgd2UncmUgc3VwcGxpZWRcbiAgLy8gd2l0aCBhIGN1c3RvbSBwYXJzZXIgYXMgZnVuY3Rpb24gdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBidWlsZC1pblxuICAvLyBwYXJzZXIuXG4gIC8vXG4gIGlmIChwYXJzZXIpIHVybC5xdWVyeSA9IHBhcnNlcih1cmwucXVlcnkpO1xuXG4gIC8vXG4gIC8vIElmIHRoZSBVUkwgaXMgcmVsYXRpdmUsIHJlc29sdmUgdGhlIHBhdGhuYW1lIGFnYWluc3QgdGhlIGJhc2UgVVJMLlxuICAvL1xuICBpZiAoXG4gICAgICByZWxhdGl2ZVxuICAgICYmIGxvY2F0aW9uLnNsYXNoZXNcbiAgICAmJiB1cmwucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLydcbiAgICAmJiAodXJsLnBhdGhuYW1lICE9PSAnJyB8fCBsb2NhdGlvbi5wYXRobmFtZSAhPT0gJycpXG4gICkge1xuICAgIHVybC5wYXRobmFtZSA9IHJlc29sdmUodXJsLnBhdGhuYW1lLCBsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH1cblxuICAvL1xuICAvLyBXZSBzaG91bGQgbm90IGFkZCBwb3J0IG51bWJlcnMgaWYgdGhleSBhcmUgYWxyZWFkeSB0aGUgZGVmYXVsdCBwb3J0IG51bWJlclxuICAvLyBmb3IgYSBnaXZlbiBwcm90b2NvbC4gQXMgdGhlIGhvc3QgYWxzbyBjb250YWlucyB0aGUgcG9ydCBudW1iZXIgd2UncmUgZ29pbmdcbiAgLy8gb3ZlcnJpZGUgaXQgd2l0aCB0aGUgaG9zdG5hbWUgd2hpY2ggY29udGFpbnMgbm8gcG9ydCBudW1iZXIuXG4gIC8vXG4gIGlmICghcmVxdWlyZWQodXJsLnBvcnQsIHVybC5wcm90b2NvbCkpIHtcbiAgICB1cmwuaG9zdCA9IHVybC5ob3N0bmFtZTtcbiAgICB1cmwucG9ydCA9ICcnO1xuICB9XG5cbiAgLy9cbiAgLy8gUGFyc2UgZG93biB0aGUgYGF1dGhgIGZvciB0aGUgdXNlcm5hbWUgYW5kIHBhc3N3b3JkLlxuICAvL1xuICB1cmwudXNlcm5hbWUgPSB1cmwucGFzc3dvcmQgPSAnJztcbiAgaWYgKHVybC5hdXRoKSB7XG4gICAgaW5zdHJ1Y3Rpb24gPSB1cmwuYXV0aC5zcGxpdCgnOicpO1xuICAgIHVybC51c2VybmFtZSA9IGluc3RydWN0aW9uWzBdIHx8ICcnO1xuICAgIHVybC5wYXNzd29yZCA9IGluc3RydWN0aW9uWzFdIHx8ICcnO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICAvL1xuICAvLyBUaGUgaHJlZiBpcyBqdXN0IHRoZSBjb21waWxlZCByZXN1bHQuXG4gIC8vXG4gIHVybC5ocmVmID0gdXJsLnRvU3RyaW5nKCk7XG59XG5cbi8qKlxuICogVGhpcyBpcyBjb252ZW5pZW5jZSBtZXRob2QgZm9yIGNoYW5naW5nIHByb3BlcnRpZXMgaW4gdGhlIFVSTCBpbnN0YW5jZSB0b1xuICogaW5zdXJlIHRoYXQgdGhleSBhbGwgcHJvcGFnYXRlIGNvcnJlY3RseS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gcGFydCAgICAgICAgICBQcm9wZXJ0eSB3ZSBuZWVkIHRvIGFkanVzdC5cbiAqIEBwYXJhbSB7TWl4ZWR9IHZhbHVlICAgICAgICAgIFRoZSBuZXdseSBhc3NpZ25lZCB2YWx1ZS5cbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gZm4gIFdoZW4gc2V0dGluZyB0aGUgcXVlcnksIGl0IHdpbGwgYmUgdGhlIGZ1bmN0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHRvIHBhcnNlIHRoZSBxdWVyeS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gc2V0dGluZyB0aGUgcHJvdG9jb2wsIGRvdWJsZSBzbGFzaCB3aWxsIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkIGZyb20gdGhlIGZpbmFsIHVybCBpZiBpdCBpcyB0cnVlLlxuICogQHJldHVybnMge1VSTH1cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHNldChwYXJ0LCB2YWx1ZSwgZm4pIHtcbiAgdmFyIHVybCA9IHRoaXM7XG5cbiAgc3dpdGNoIChwYXJ0KSB7XG4gICAgY2FzZSAncXVlcnknOlxuICAgICAgaWYgKCdzdHJpbmcnID09PSB0eXBlb2YgdmFsdWUgJiYgdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gKGZuIHx8IHFzLnBhcnNlKSh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdwb3J0JzpcbiAgICAgIHVybFtwYXJ0XSA9IHZhbHVlO1xuXG4gICAgICBpZiAoIXJlcXVpcmVkKHZhbHVlLCB1cmwucHJvdG9jb2wpKSB7XG4gICAgICAgIHVybC5ob3N0ID0gdXJsLmhvc3RuYW1lO1xuICAgICAgICB1cmxbcGFydF0gPSAnJztcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXJsLmhvc3QgPSB1cmwuaG9zdG5hbWUgKyc6JysgdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaG9zdG5hbWUnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICh1cmwucG9ydCkgdmFsdWUgKz0gJzonKyB1cmwucG9ydDtcbiAgICAgIHVybC5ob3N0ID0gdmFsdWU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2hvc3QnOlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG5cbiAgICAgIGlmICgvOlxcZCskLy50ZXN0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgIHVybC5wb3J0ID0gdmFsdWUucG9wKCk7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlLmpvaW4oJzonKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHVybC5ob3N0bmFtZSA9IHZhbHVlO1xuICAgICAgICB1cmwucG9ydCA9ICcnO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3Byb3RvY29sJzpcbiAgICAgIHVybC5wcm90b2NvbCA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB1cmwuc2xhc2hlcyA9ICFmbjtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAncGF0aG5hbWUnOlxuICAgICAgdXJsLnBhdGhuYW1lID0gdmFsdWUubGVuZ3RoICYmIHZhbHVlLmNoYXJBdCgwKSAhPT0gJy8nID8gJy8nICsgdmFsdWUgOiB2YWx1ZTtcblxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdXJsW3BhcnRdID0gdmFsdWU7XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJ1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucyA9IHJ1bGVzW2ldO1xuXG4gICAgaWYgKGluc1s0XSkgdXJsW2luc1sxXV0gPSB1cmxbaW5zWzFdXS50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgdXJsLm9yaWdpbiA9IHVybC5wcm90b2NvbCAmJiB1cmwuaG9zdCAmJiB1cmwucHJvdG9jb2wgIT09ICdmaWxlOidcbiAgICA/IHVybC5wcm90b2NvbCArJy8vJysgdXJsLmhvc3RcbiAgICA6ICdudWxsJztcblxuICB1cmwuaHJlZiA9IHVybC50b1N0cmluZygpO1xuXG4gIHJldHVybiB1cmw7XG59O1xuXG4vKipcbiAqIFRyYW5zZm9ybSB0aGUgcHJvcGVydGllcyBiYWNrIGluIHRvIGEgdmFsaWQgYW5kIGZ1bGwgVVJMIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmdpZnkgT3B0aW9uYWwgcXVlcnkgc3RyaW5naWZ5IGZ1bmN0aW9uLlxuICogQHJldHVybnMge1N0cmluZ31cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmeSkge1xuICBpZiAoIXN0cmluZ2lmeSB8fCAnZnVuY3Rpb24nICE9PSB0eXBlb2Ygc3RyaW5naWZ5KSBzdHJpbmdpZnkgPSBxcy5zdHJpbmdpZnk7XG5cbiAgdmFyIHF1ZXJ5XG4gICAgLCB1cmwgPSB0aGlzXG4gICAgLCBwcm90b2NvbCA9IHVybC5wcm90b2NvbDtcblxuICBpZiAocHJvdG9jb2wgJiYgcHJvdG9jb2wuY2hhckF0KHByb3RvY29sLmxlbmd0aCAtIDEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICB2YXIgcmVzdWx0ID0gcHJvdG9jb2wgKyAodXJsLnNsYXNoZXMgPyAnLy8nIDogJycpO1xuXG4gIGlmICh1cmwudXNlcm5hbWUpIHtcbiAgICByZXN1bHQgKz0gdXJsLnVzZXJuYW1lO1xuICAgIGlmICh1cmwucGFzc3dvcmQpIHJlc3VsdCArPSAnOicrIHVybC5wYXNzd29yZDtcbiAgICByZXN1bHQgKz0gJ0AnO1xuICB9XG5cbiAgcmVzdWx0ICs9IHVybC5ob3N0ICsgdXJsLnBhdGhuYW1lO1xuXG4gIHF1ZXJ5ID0gJ29iamVjdCcgPT09IHR5cGVvZiB1cmwucXVlcnkgPyBzdHJpbmdpZnkodXJsLnF1ZXJ5KSA6IHVybC5xdWVyeTtcbiAgaWYgKHF1ZXJ5KSByZXN1bHQgKz0gJz8nICE9PSBxdWVyeS5jaGFyQXQoMCkgPyAnPycrIHF1ZXJ5IDogcXVlcnk7XG5cbiAgaWYgKHVybC5oYXNoKSByZXN1bHQgKz0gdXJsLmhhc2g7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuVVJMLnByb3RvdHlwZSA9IHsgc2V0OiBzZXQsIHRvU3RyaW5nOiB0b1N0cmluZyB9O1xuXG4vL1xuLy8gRXhwb3NlIHRoZSBVUkwgcGFyc2VyIGFuZCBzb21lIGFkZGl0aW9uYWwgcHJvcGVydGllcyB0aGF0IG1pZ2h0IGJlIHVzZWZ1bCBmb3Jcbi8vIG90aGVycyBvciB0ZXN0aW5nLlxuLy9cblVSTC5leHRyYWN0UHJvdG9jb2wgPSBleHRyYWN0UHJvdG9jb2w7XG5VUkwubG9jYXRpb24gPSBsb2xjYXRpb247XG5VUkwucXMgPSBxcztcblxubW9kdWxlLmV4cG9ydHMgPSBVUkw7XG5cbn0se1wiLi9sb2xjYXRpb25cIjo2MixcInF1ZXJ5c3RyaW5naWZ5XCI6NTksXCJyZXF1aXJlcy1wb3J0XCI6NjB9XSw2MjpbZnVuY3Rpb24ocmVxdWlyZSxtb2R1bGUsZXhwb3J0cyl7XG4oZnVuY3Rpb24gKGdsb2JhbCl7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBzbGFzaGVzID0gL15bQS1aYS16XVtBLVphLXowLTkrLS5dKjpcXC9cXC8vO1xuXG4vKipcbiAqIFRoZXNlIHByb3BlcnRpZXMgc2hvdWxkIG5vdCBiZSBjb3BpZWQgb3IgaW5oZXJpdGVkIGZyb20uIFRoaXMgaXMgb25seSBuZWVkZWRcbiAqIGZvciBhbGwgbm9uIGJsb2IgVVJMJ3MgYXMgYSBibG9iIFVSTCBkb2VzIG5vdCBpbmNsdWRlIGEgaGFzaCwgb25seSB0aGVcbiAqIG9yaWdpbi5cbiAqXG4gKiBAdHlwZSB7T2JqZWN0fVxuICogQHByaXZhdGVcbiAqL1xudmFyIGlnbm9yZSA9IHsgaGFzaDogMSwgcXVlcnk6IDEgfVxuICAsIFVSTDtcblxuLyoqXG4gKiBUaGUgbG9jYXRpb24gb2JqZWN0IGRpZmZlcnMgd2hlbiB5b3VyIGNvZGUgaXMgbG9hZGVkIHRocm91Z2ggYSBub3JtYWwgcGFnZSxcbiAqIFdvcmtlciBvciB0aHJvdWdoIGEgd29ya2VyIHVzaW5nIGEgYmxvYi4gQW5kIHdpdGggdGhlIGJsb2JibGUgYmVnaW5zIHRoZVxuICogdHJvdWJsZSBhcyB0aGUgbG9jYXRpb24gb2JqZWN0IHdpbGwgY29udGFpbiB0aGUgVVJMIG9mIHRoZSBibG9iLCBub3QgdGhlXG4gKiBsb2NhdGlvbiBvZiB0aGUgcGFnZSB3aGVyZSBvdXIgY29kZSBpcyBsb2FkZWQgaW4uIFRoZSBhY3R1YWwgb3JpZ2luIGlzXG4gKiBlbmNvZGVkIGluIHRoZSBgcGF0aG5hbWVgIHNvIHdlIGNhbiB0aGFua2Z1bGx5IGdlbmVyYXRlIGEgZ29vZCBcImRlZmF1bHRcIlxuICogbG9jYXRpb24gZnJvbSBpdCBzbyB3ZSBjYW4gZ2VuZXJhdGUgcHJvcGVyIHJlbGF0aXZlIFVSTCdzIGFnYWluLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fFN0cmluZ30gbG9jIE9wdGlvbmFsIGRlZmF1bHQgbG9jYXRpb24gb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gbG9sY2F0aW9uIG9iamVjdC5cbiAqIEBhcGkgcHVibGljXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gbG9sY2F0aW9uKGxvYykge1xuICBsb2MgPSBsb2MgfHwgZ2xvYmFsLmxvY2F0aW9uIHx8IHt9O1xuICBVUkwgPSBVUkwgfHwgcmVxdWlyZSgnLi8nKTtcblxuICB2YXIgZmluYWxkZXN0aW5hdGlvbiA9IHt9XG4gICAgLCB0eXBlID0gdHlwZW9mIGxvY1xuICAgICwga2V5O1xuXG4gIGlmICgnYmxvYjonID09PSBsb2MucHJvdG9jb2wpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVSTCh1bmVzY2FwZShsb2MucGF0aG5hbWUpLCB7fSk7XG4gIH0gZWxzZSBpZiAoJ3N0cmluZycgPT09IHR5cGUpIHtcbiAgICBmaW5hbGRlc3RpbmF0aW9uID0gbmV3IFVSTChsb2MsIHt9KTtcbiAgICBmb3IgKGtleSBpbiBpZ25vcmUpIGRlbGV0ZSBmaW5hbGRlc3RpbmF0aW9uW2tleV07XG4gIH0gZWxzZSBpZiAoJ29iamVjdCcgPT09IHR5cGUpIHtcbiAgICBmb3IgKGtleSBpbiBsb2MpIHtcbiAgICAgIGlmIChrZXkgaW4gaWdub3JlKSBjb250aW51ZTtcbiAgICAgIGZpbmFsZGVzdGluYXRpb25ba2V5XSA9IGxvY1trZXldO1xuICAgIH1cblxuICAgIGlmIChmaW5hbGRlc3RpbmF0aW9uLnNsYXNoZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZmluYWxkZXN0aW5hdGlvbi5zbGFzaGVzID0gc2xhc2hlcy50ZXN0KGxvYy5ocmVmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmluYWxkZXN0aW5hdGlvbjtcbn07XG5cbn0pLmNhbGwodGhpcyx0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiA/IHdpbmRvdyA6IHt9KVxuXG59LHtcIi4vXCI6NjF9XX0se30sWzFdKSgxKVxufSk7XG5cblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c29ja2pzLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc29ja2pzLWNsaWVudC9kaXN0L3NvY2tqcy5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvc29ja2pzLWNsaWVudC9kaXN0L3NvY2tqcy5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyXHRtZW1vaXplID0gZnVuY3Rpb24gKGZuKSB7XG5cdHZhciBtZW1vO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0aWYgKHR5cGVvZiBtZW1vID09PSBcInVuZGVmaW5lZFwiKSBtZW1vID0gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHRyZXR1cm4gbWVtbztcblx0fTtcbn07XG5cbnZhciBpc09sZElFID0gbWVtb2l6ZShmdW5jdGlvbiAoKSB7XG5cdC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG5cdC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcblx0Ly8gVGVzdHMgZm9yIGV4aXN0ZW5jZSBvZiBzdGFuZGFyZCBnbG9iYWxzIGlzIHRvIGFsbG93IHN0eWxlLWxvYWRlclxuXHQvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcblx0Ly8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG5cdHJldHVybiB3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYjtcbn0pO1xuXG52YXIgZ2V0RWxlbWVudCA9IChmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW8gPSB7fTtcblxuXHRyZXR1cm4gZnVuY3Rpb24oc2VsZWN0b3IpIHtcblx0XHRpZiAodHlwZW9mIG1lbW9bc2VsZWN0b3JdID09PSBcInVuZGVmaW5lZFwiKSB7XG5cdFx0XHR2YXIgc3R5bGVUYXJnZXQgPSBmbi5jYWxsKHRoaXMsIHNlbGVjdG9yKTtcblx0XHRcdC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cdFx0XHRpZiAoc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3NlbGVjdG9yXSA9IHN0eWxlVGFyZ2V0O1xuXHRcdH1cblx0XHRyZXR1cm4gbWVtb1tzZWxlY3Rvcl1cblx0fTtcbn0pKGZ1bmN0aW9uICh0YXJnZXQpIHtcblx0cmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KVxufSk7XG5cbnZhciBzaW5nbGV0b24gPSBudWxsO1xudmFyXHRzaW5nbGV0b25Db3VudGVyID0gMDtcbnZhclx0c3R5bGVzSW5zZXJ0ZWRBdFRvcCA9IFtdO1xuXG52YXJcdGZpeFVybHMgPSByZXF1aXJlKFwiLi91cmxzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGxpc3QsIG9wdGlvbnMpIHtcblx0aWYgKHR5cGVvZiBERUJVRyAhPT0gXCJ1bmRlZmluZWRcIiAmJiBERUJVRykge1xuXHRcdGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBFcnJvcihcIlRoZSBzdHlsZS1sb2FkZXIgY2Fubm90IGJlIHVzZWQgaW4gYSBub24tYnJvd3NlciBlbnZpcm9ubWVudFwiKTtcblx0fVxuXG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdG9wdGlvbnMuYXR0cnMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRycyA9PT0gXCJvYmplY3RcIiA/IG9wdGlvbnMuYXR0cnMgOiB7fTtcblxuXHQvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cblx0Ly8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXHRpZiAoIW9wdGlvbnMuc2luZ2xldG9uKSBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcblxuXHQvLyBCeSBkZWZhdWx0LCBhZGQgPHN0eWxlPiB0YWdzIHRvIHRoZSA8aGVhZD4gZWxlbWVudFxuXHRpZiAoIW9wdGlvbnMuaW5zZXJ0SW50bykgb3B0aW9ucy5pbnNlcnRJbnRvID0gXCJoZWFkXCI7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgYm90dG9tIG9mIHRoZSB0YXJnZXRcblx0aWYgKCFvcHRpb25zLmluc2VydEF0KSBvcHRpb25zLmluc2VydEF0ID0gXCJib3R0b21cIjtcblxuXHR2YXIgc3R5bGVzID0gbGlzdFRvU3R5bGVzKGxpc3QsIG9wdGlvbnMpO1xuXG5cdGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZSAobmV3TGlzdCkge1xuXHRcdHZhciBtYXlSZW1vdmUgPSBbXTtcblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0XHRkb21TdHlsZS5yZWZzLS07XG5cdFx0XHRtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG5cdFx0fVxuXG5cdFx0aWYobmV3TGlzdCkge1xuXHRcdFx0dmFyIG5ld1N0eWxlcyA9IGxpc3RUb1N0eWxlcyhuZXdMaXN0LCBvcHRpb25zKTtcblx0XHRcdGFkZFN0eWxlc1RvRG9tKG5ld1N0eWxlcywgb3B0aW9ucyk7XG5cdFx0fVxuXG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtYXlSZW1vdmUubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBkb21TdHlsZSA9IG1heVJlbW92ZVtpXTtcblxuXHRcdFx0aWYoZG9tU3R5bGUucmVmcyA9PT0gMCkge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSBkb21TdHlsZS5wYXJ0c1tqXSgpO1xuXG5cdFx0XHRcdGRlbGV0ZSBzdHlsZXNJbkRvbVtkb21TdHlsZS5pZF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufTtcblxuZnVuY3Rpb24gYWRkU3R5bGVzVG9Eb20gKHN0eWxlcywgb3B0aW9ucykge1xuXHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gc3R5bGVzW2ldO1xuXHRcdHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG5cdFx0aWYoZG9tU3R5bGUpIHtcblx0XHRcdGRvbVN0eWxlLnJlZnMrKztcblxuXHRcdFx0Zm9yKHZhciBqID0gMDsgaiA8IGRvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdGRvbVN0eWxlLnBhcnRzW2pdKGl0ZW0ucGFydHNbal0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IoOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIHBhcnRzID0gW107XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtpZDogaXRlbS5pZCwgcmVmczogMSwgcGFydHM6IHBhcnRzfTtcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gbGlzdFRvU3R5bGVzIChsaXN0LCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZXMgPSBbXTtcblx0dmFyIG5ld1N0eWxlcyA9IHt9O1xuXG5cdGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdHZhciBpdGVtID0gbGlzdFtpXTtcblx0XHR2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcblx0XHR2YXIgY3NzID0gaXRlbVsxXTtcblx0XHR2YXIgbWVkaWEgPSBpdGVtWzJdO1xuXHRcdHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuXHRcdHZhciBwYXJ0ID0ge2NzczogY3NzLCBtZWRpYTogbWVkaWEsIHNvdXJjZU1hcDogc291cmNlTWFwfTtcblxuXHRcdGlmKCFuZXdTdHlsZXNbaWRdKSBzdHlsZXMucHVzaChuZXdTdHlsZXNbaWRdID0ge2lkOiBpZCwgcGFydHM6IFtwYXJ0XX0pO1xuXHRcdGVsc2UgbmV3U3R5bGVzW2lkXS5wYXJ0cy5wdXNoKHBhcnQpO1xuXHR9XG5cblx0cmV0dXJuIHN0eWxlcztcbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50IChvcHRpb25zLCBzdHlsZSkge1xuXHR2YXIgdGFyZ2V0ID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEludG8pXG5cblx0aWYgKCF0YXJnZXQpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydEludG8nIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcblx0fVxuXG5cdHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlc0luc2VydGVkQXRUb3Bbc3R5bGVzSW5zZXJ0ZWRBdFRvcC5sZW5ndGggLSAxXTtcblxuXHRpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJ0b3BcIikge1xuXHRcdGlmICghbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3ApIHtcblx0XHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIHRhcmdldC5maXJzdENoaWxkKTtcblx0XHR9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdFx0fVxuXHRcdHN0eWxlc0luc2VydGVkQXRUb3AucHVzaChzdHlsZSk7XG5cdH0gZWxzZSBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gXCJib3R0b21cIikge1xuXHRcdHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwib2JqZWN0XCIgJiYgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpIHtcblx0XHR2YXIgbmV4dFNpYmxpbmcgPSBnZXRFbGVtZW50KG9wdGlvbnMuaW5zZXJ0SW50byArIFwiIFwiICsgb3B0aW9ucy5pbnNlcnRBdC5iZWZvcmUpO1xuXHRcdHRhcmdldC5pbnNlcnRCZWZvcmUoc3R5bGUsIG5leHRTaWJsaW5nKTtcblx0fSBlbHNlIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJbU3R5bGUgTG9hZGVyXVxcblxcbiBJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgJ2luc2VydEF0JyAoJ29wdGlvbnMuaW5zZXJ0QXQnKSBmb3VuZC5cXG4gTXVzdCBiZSAndG9wJywgJ2JvdHRvbScsIG9yIE9iamVjdC5cXG4gKGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyI2luc2VydGF0KVxcblwiKTtcblx0fVxufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQgKHN0eWxlKSB7XG5cdGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSByZXR1cm4gZmFsc2U7XG5cdHN0eWxlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGUpO1xuXG5cdHZhciBpZHggPSBzdHlsZXNJbnNlcnRlZEF0VG9wLmluZGV4T2Yoc3R5bGUpO1xuXHRpZihpZHggPj0gMCkge1xuXHRcdHN0eWxlc0luc2VydGVkQXRUb3Auc3BsaWNlKGlkeCwgMSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlU3R5bGVFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cblx0YWRkQXR0cnMoc3R5bGUsIG9wdGlvbnMuYXR0cnMpO1xuXHRpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucywgc3R5bGUpO1xuXG5cdHJldHVybiBzdHlsZTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTGlua0VsZW1lbnQgKG9wdGlvbnMpIHtcblx0dmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcblxuXHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdG9wdGlvbnMuYXR0cnMucmVsID0gXCJzdHlsZXNoZWV0XCI7XG5cblx0YWRkQXR0cnMobGluaywgb3B0aW9ucy5hdHRycyk7XG5cdGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zLCBsaW5rKTtcblxuXHRyZXR1cm4gbGluaztcbn1cblxuZnVuY3Rpb24gYWRkQXR0cnMgKGVsLCBhdHRycykge1xuXHRPYmplY3Qua2V5cyhhdHRycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0ZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cnNba2V5XSk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpO1xuXG5cdCAgICBpZiAocmVzdWx0KSB7XG5cdCAgICBcdC8vIElmIHRyYW5zZm9ybSByZXR1cm5zIGEgdmFsdWUsIHVzZSB0aGF0IGluc3RlYWQgb2YgdGhlIG9yaWdpbmFsIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgcnVubmluZyBydW50aW1lIHRyYW5zZm9ybWF0aW9ucyBvbiB0aGUgY3NzLlxuXHQgICAgXHRvYmouY3NzID0gcmVzdWx0O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgIFx0Ly8gSWYgdGhlIHRyYW5zZm9ybSBmdW5jdGlvbiByZXR1cm5zIGEgZmFsc3kgdmFsdWUsIGRvbid0IGFkZCB0aGlzIGNzcy5cblx0ICAgIFx0Ly8gVGhpcyBhbGxvd3MgY29uZGl0aW9uYWwgbG9hZGluZyBvZiBjc3Ncblx0ICAgIFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHQgICAgXHRcdC8vIG5vb3Bcblx0ICAgIFx0fTtcblx0ICAgIH1cblx0fVxuXG5cdGlmIChvcHRpb25zLnNpbmdsZXRvbikge1xuXHRcdHZhciBzdHlsZUluZGV4ID0gc2luZ2xldG9uQ291bnRlcisrO1xuXG5cdFx0c3R5bGUgPSBzaW5nbGV0b24gfHwgKHNpbmdsZXRvbiA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKSk7XG5cblx0XHR1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcblx0XHRyZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuXG5cdH0gZWxzZSBpZiAoXG5cdFx0b2JqLnNvdXJjZU1hcCAmJlxuXHRcdHR5cGVvZiBVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwuY3JlYXRlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgVVJMLnJldm9rZU9iamVjdFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCJcblx0KSB7XG5cdFx0c3R5bGUgPSBjcmVhdGVMaW5rRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSB1cGRhdGVMaW5rLmJpbmQobnVsbCwgc3R5bGUsIG9wdGlvbnMpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cblx0XHRcdGlmKHN0eWxlLmhyZWYpIFVSTC5yZXZva2VPYmplY3RVUkwoc3R5bGUuaHJlZik7XG5cdFx0fTtcblx0fSBlbHNlIHtcblx0XHRzdHlsZSA9IGNyZWF0ZVN0eWxlRWxlbWVudChvcHRpb25zKTtcblx0XHR1cGRhdGUgPSBhcHBseVRvVGFnLmJpbmQobnVsbCwgc3R5bGUpO1xuXHRcdHJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG5cdFx0fTtcblx0fVxuXG5cdHVwZGF0ZShvYmopO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZSAobmV3T2JqKSB7XG5cdFx0aWYgKG5ld09iaikge1xuXHRcdFx0aWYgKFxuXHRcdFx0XHRuZXdPYmouY3NzID09PSBvYmouY3NzICYmXG5cdFx0XHRcdG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmXG5cdFx0XHRcdG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXBcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdHVwZGF0ZShvYmogPSBuZXdPYmopO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZW1vdmUoKTtcblx0XHR9XG5cdH07XG59XG5cbnZhciByZXBsYWNlVGV4dCA9IChmdW5jdGlvbiAoKSB7XG5cdHZhciB0ZXh0U3RvcmUgPSBbXTtcblxuXHRyZXR1cm4gZnVuY3Rpb24gKGluZGV4LCByZXBsYWNlbWVudCkge1xuXHRcdHRleHRTdG9yZVtpbmRleF0gPSByZXBsYWNlbWVudDtcblxuXHRcdHJldHVybiB0ZXh0U3RvcmUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJ1xcbicpO1xuXHR9O1xufSkoKTtcblxuZnVuY3Rpb24gYXBwbHlUb1NpbmdsZXRvblRhZyAoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuXHR2YXIgY3NzID0gcmVtb3ZlID8gXCJcIiA6IG9iai5jc3M7XG5cblx0aWYgKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSByZXBsYWNlVGV4dChpbmRleCwgY3NzKTtcblx0fSBlbHNlIHtcblx0XHR2YXIgY3NzTm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcyk7XG5cdFx0dmFyIGNoaWxkTm9kZXMgPSBzdHlsZS5jaGlsZE5vZGVzO1xuXG5cdFx0aWYgKGNoaWxkTm9kZXNbaW5kZXhdKSBzdHlsZS5yZW1vdmVDaGlsZChjaGlsZE5vZGVzW2luZGV4XSk7XG5cblx0XHRpZiAoY2hpbGROb2Rlcy5sZW5ndGgpIHtcblx0XHRcdHN0eWxlLmluc2VydEJlZm9yZShjc3NOb2RlLCBjaGlsZE5vZGVzW2luZGV4XSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHN0eWxlLmFwcGVuZENoaWxkKGNzc05vZGUpO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBhcHBseVRvVGFnIChzdHlsZSwgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgbWVkaWEgPSBvYmoubWVkaWE7XG5cblx0aWYobWVkaWEpIHtcblx0XHRzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSlcblx0fVxuXG5cdGlmKHN0eWxlLnN0eWxlU2hlZXQpIHtcblx0XHRzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG5cdH0gZWxzZSB7XG5cdFx0d2hpbGUoc3R5bGUuZmlyc3RDaGlsZCkge1xuXHRcdFx0c3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG5cdFx0fVxuXG5cdFx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTGluayAobGluaywgb3B0aW9ucywgb2JqKSB7XG5cdHZhciBjc3MgPSBvYmouY3NzO1xuXHR2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuXHQvKlxuXHRcdElmIGNvbnZlcnRUb0Fic29sdXRlVXJscyBpc24ndCBkZWZpbmVkLCBidXQgc291cmNlbWFwcyBhcmUgZW5hYmxlZFxuXHRcdGFuZCB0aGVyZSBpcyBubyBwdWJsaWNQYXRoIGRlZmluZWQgdGhlbiBsZXRzIHR1cm4gY29udmVydFRvQWJzb2x1dGVVcmxzXG5cdFx0b24gYnkgZGVmYXVsdC4gIE90aGVyd2lzZSBkZWZhdWx0IHRvIHRoZSBjb252ZXJ0VG9BYnNvbHV0ZVVybHMgb3B0aW9uXG5cdFx0ZGlyZWN0bHlcblx0Ki9cblx0dmFyIGF1dG9GaXhVcmxzID0gb3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgPT09IHVuZGVmaW5lZCAmJiBzb3VyY2VNYXA7XG5cblx0aWYgKG9wdGlvbnMuY29udmVydFRvQWJzb2x1dGVVcmxzIHx8IGF1dG9GaXhVcmxzKSB7XG5cdFx0Y3NzID0gZml4VXJscyhjc3MpO1xuXHR9XG5cblx0aWYgKHNvdXJjZU1hcCkge1xuXHRcdC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzI2NjAzODc1XG5cdFx0Y3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIiArIGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSkgKyBcIiAqL1wiO1xuXHR9XG5cblx0dmFyIGJsb2IgPSBuZXcgQmxvYihbY3NzXSwgeyB0eXBlOiBcInRleHQvY3NzXCIgfSk7XG5cblx0dmFyIG9sZFNyYyA9IGxpbmsuaHJlZjtcblxuXHRsaW5rLmhyZWYgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuXG5cdGlmKG9sZFNyYykgVVJMLnJldm9rZU9iamVjdFVSTChvbGRTcmMpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIlxuLyoqXG4gKiBXaGVuIHNvdXJjZSBtYXBzIGFyZSBlbmFibGVkLCBgc3R5bGUtbG9hZGVyYCB1c2VzIGEgbGluayBlbGVtZW50IHdpdGggYSBkYXRhLXVyaSB0b1xuICogZW1iZWQgdGhlIGNzcyBvbiB0aGUgcGFnZS4gVGhpcyBicmVha3MgYWxsIHJlbGF0aXZlIHVybHMgYmVjYXVzZSBub3cgdGhleSBhcmUgcmVsYXRpdmUgdG8gYVxuICogYnVuZGxlIGluc3RlYWQgb2YgdGhlIGN1cnJlbnQgcGFnZS5cbiAqXG4gKiBPbmUgc29sdXRpb24gaXMgdG8gb25seSB1c2UgZnVsbCB1cmxzLCBidXQgdGhhdCBtYXkgYmUgaW1wb3NzaWJsZS5cbiAqXG4gKiBJbnN0ZWFkLCB0aGlzIGZ1bmN0aW9uIFwiZml4ZXNcIiB0aGUgcmVsYXRpdmUgdXJscyB0byBiZSBhYnNvbHV0ZSBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZSBsb2NhdGlvbi5cbiAqXG4gKiBBIHJ1ZGltZW50YXJ5IHRlc3Qgc3VpdGUgaXMgbG9jYXRlZCBhdCBgdGVzdC9maXhVcmxzLmpzYCBhbmQgY2FuIGJlIHJ1biB2aWEgdGhlIGBucG0gdGVzdGAgY29tbWFuZC5cbiAqXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gIC8vIGdldCBjdXJyZW50IGxvY2F0aW9uXG4gIHZhciBsb2NhdGlvbiA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgd2luZG93LmxvY2F0aW9uO1xuXG4gIGlmICghbG9jYXRpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJmaXhVcmxzIHJlcXVpcmVzIHdpbmRvdy5sb2NhdGlvblwiKTtcbiAgfVxuXG5cdC8vIGJsYW5rIG9yIG51bGw/XG5cdGlmICghY3NzIHx8IHR5cGVvZiBjc3MgIT09IFwic3RyaW5nXCIpIHtcblx0ICByZXR1cm4gY3NzO1xuICB9XG5cbiAgdmFyIGJhc2VVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiArIGxvY2F0aW9uLmhvc3Q7XG4gIHZhciBjdXJyZW50RGlyID0gYmFzZVVybCArIGxvY2F0aW9uLnBhdGhuYW1lLnJlcGxhY2UoL1xcL1teXFwvXSokLywgXCIvXCIpO1xuXG5cdC8vIGNvbnZlcnQgZWFjaCB1cmwoLi4uKVxuXHQvKlxuXHRUaGlzIHJlZ3VsYXIgZXhwcmVzc2lvbiBpcyBqdXN0IGEgd2F5IHRvIHJlY3Vyc2l2ZWx5IG1hdGNoIGJyYWNrZXRzIHdpdGhpblxuXHRhIHN0cmluZy5cblxuXHQgL3VybFxccypcXCggID0gTWF0Y2ggb24gdGhlIHdvcmQgXCJ1cmxcIiB3aXRoIGFueSB3aGl0ZXNwYWNlIGFmdGVyIGl0IGFuZCB0aGVuIGEgcGFyZW5zXG5cdCAgICggID0gU3RhcnQgYSBjYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAoPzogID0gU3RhcnQgYSBub24tY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgICAgIFteKShdICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAoPzogID0gU3RhcnQgYW5vdGhlciBub24tY2FwdHVyaW5nIGdyb3Vwc1xuXHQgICAgICAgICAgICAgICAgIFteKShdKyAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICB8ICA9IE9SXG5cdCAgICAgICAgICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICAgICAgW14pKF0qICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIFxcKSAgPSBNYXRjaCBhIGVuZCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKSAgPSBFbmQgR3JvdXBcbiAgICAgICAgICAgICAgKlxcKSA9IE1hdGNoIGFueXRoaW5nIGFuZCB0aGVuIGEgY2xvc2UgcGFyZW5zXG4gICAgICAgICAgKSAgPSBDbG9zZSBub24tY2FwdHVyaW5nIGdyb3VwXG4gICAgICAgICAgKiAgPSBNYXRjaCBhbnl0aGluZ1xuICAgICAgICkgID0gQ2xvc2UgY2FwdHVyaW5nIGdyb3VwXG5cdCBcXCkgID0gTWF0Y2ggYSBjbG9zZSBwYXJlbnNcblxuXHQgL2dpICA9IEdldCBhbGwgbWF0Y2hlcywgbm90IHRoZSBmaXJzdC4gIEJlIGNhc2UgaW5zZW5zaXRpdmUuXG5cdCAqL1xuXHR2YXIgZml4ZWRDc3MgPSBjc3MucmVwbGFjZSgvdXJsXFxzKlxcKCgoPzpbXikoXXxcXCgoPzpbXikoXSt8XFwoW14pKF0qXFwpKSpcXCkpKilcXCkvZ2ksIGZ1bmN0aW9uKGZ1bGxNYXRjaCwgb3JpZ1VybCkge1xuXHRcdC8vIHN0cmlwIHF1b3RlcyAoaWYgdGhleSBleGlzdClcblx0XHR2YXIgdW5xdW90ZWRPcmlnVXJsID0gb3JpZ1VybFxuXHRcdFx0LnRyaW0oKVxuXHRcdFx0LnJlcGxhY2UoL15cIiguKilcIiQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSlcblx0XHRcdC5yZXBsYWNlKC9eJyguKiknJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KTtcblxuXHRcdC8vIGFscmVhZHkgYSBmdWxsIHVybD8gbm8gY2hhbmdlXG5cdFx0aWYgKC9eKCN8ZGF0YTp8aHR0cDpcXC9cXC98aHR0cHM6XFwvXFwvfGZpbGU6XFwvXFwvXFwvKS9pLnRlc3QodW5xdW90ZWRPcmlnVXJsKSkge1xuXHRcdCAgcmV0dXJuIGZ1bGxNYXRjaDtcblx0XHR9XG5cblx0XHQvLyBjb252ZXJ0IHRoZSB1cmwgdG8gYSBmdWxsIHVybFxuXHRcdHZhciBuZXdVcmw7XG5cblx0XHRpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvL1wiKSA9PT0gMCkge1xuXHRcdCAgXHQvL1RPRE86IHNob3VsZCB3ZSBhZGQgcHJvdG9jb2w/XG5cdFx0XHRuZXdVcmwgPSB1bnF1b3RlZE9yaWdVcmw7XG5cdFx0fSBlbHNlIGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi9cIikgPT09IDApIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIHRoZSBiYXNlIHVybFxuXHRcdFx0bmV3VXJsID0gYmFzZVVybCArIHVucXVvdGVkT3JpZ1VybDsgLy8gYWxyZWFkeSBzdGFydHMgd2l0aCAnLydcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gY3VycmVudCBkaXJlY3Rvcnlcblx0XHRcdG5ld1VybCA9IGN1cnJlbnREaXIgKyB1bnF1b3RlZE9yaWdVcmwucmVwbGFjZSgvXlxcLlxcLy8sIFwiXCIpOyAvLyBTdHJpcCBsZWFkaW5nICcuLydcblx0XHR9XG5cblx0XHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIHVybCguLi4pXG5cdFx0cmV0dXJuIFwidXJsKFwiICsgSlNPTi5zdHJpbmdpZnkobmV3VXJsKSArIFwiKVwiO1xuXHR9KTtcblxuXHQvLyBzZW5kIGJhY2sgdGhlIGZpeGVkIGNzc1xuXHRyZXR1cm4gZml4ZWRDc3M7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIHB1bnljb2RlID0gcmVxdWlyZSgncHVueWNvZGUnKTtcbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbmV4cG9ydHMucGFyc2UgPSB1cmxQYXJzZTtcbmV4cG9ydHMucmVzb2x2ZSA9IHVybFJlc29sdmU7XG5leHBvcnRzLnJlc29sdmVPYmplY3QgPSB1cmxSZXNvbHZlT2JqZWN0O1xuZXhwb3J0cy5mb3JtYXQgPSB1cmxGb3JtYXQ7XG5cbmV4cG9ydHMuVXJsID0gVXJsO1xuXG5mdW5jdGlvbiBVcmwoKSB7XG4gIHRoaXMucHJvdG9jb2wgPSBudWxsO1xuICB0aGlzLnNsYXNoZXMgPSBudWxsO1xuICB0aGlzLmF1dGggPSBudWxsO1xuICB0aGlzLmhvc3QgPSBudWxsO1xuICB0aGlzLnBvcnQgPSBudWxsO1xuICB0aGlzLmhvc3RuYW1lID0gbnVsbDtcbiAgdGhpcy5oYXNoID0gbnVsbDtcbiAgdGhpcy5zZWFyY2ggPSBudWxsO1xuICB0aGlzLnF1ZXJ5ID0gbnVsbDtcbiAgdGhpcy5wYXRobmFtZSA9IG51bGw7XG4gIHRoaXMucGF0aCA9IG51bGw7XG4gIHRoaXMuaHJlZiA9IG51bGw7XG59XG5cbi8vIFJlZmVyZW5jZTogUkZDIDM5ODYsIFJGQyAxODA4LCBSRkMgMjM5NlxuXG4vLyBkZWZpbmUgdGhlc2UgaGVyZSBzbyBhdCBsZWFzdCB0aGV5IG9ubHkgaGF2ZSB0byBiZVxuLy8gY29tcGlsZWQgb25jZSBvbiB0aGUgZmlyc3QgbW9kdWxlIGxvYWQuXG52YXIgcHJvdG9jb2xQYXR0ZXJuID0gL14oW2EtejAtOS4rLV0rOikvaSxcbiAgICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgZm9yIGEgc2ltcGxlIHBhdGggVVJMXG4gICAgc2ltcGxlUGF0aFBhdHRlcm4gPSAvXihcXC9cXC8/KD8hXFwvKVteXFw/XFxzXSopKFxcP1teXFxzXSopPyQvLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgICAvLyBXZSBhY3R1YWxseSBqdXN0IGF1dG8tZXNjYXBlIHRoZXNlLlxuICAgIGRlbGltcyA9IFsnPCcsICc+JywgJ1wiJywgJ2AnLCAnICcsICdcXHInLCAnXFxuJywgJ1xcdCddLFxuXG4gICAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgICB1bndpc2UgPSBbJ3snLCAnfScsICd8JywgJ1xcXFwnLCAnXicsICdgJ10uY29uY2F0KGRlbGltcyksXG5cbiAgICAvLyBBbGxvd2VkIGJ5IFJGQ3MsIGJ1dCBjYXVzZSBvZiBYU1MgYXR0YWNrcy4gIEFsd2F5cyBlc2NhcGUgdGhlc2UuXG4gICAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gICAgLy8gQ2hhcmFjdGVycyB0aGF0IGFyZSBuZXZlciBldmVyIGFsbG93ZWQgaW4gYSBob3N0bmFtZS5cbiAgICAvLyBOb3RlIHRoYXQgYW55IGludmFsaWQgY2hhcnMgYXJlIGFsc28gaGFuZGxlZCwgYnV0IHRoZXNlXG4gICAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gICAgLy8gdGhlbS5cbiAgICBub25Ib3N0Q2hhcnMgPSBbJyUnLCAnLycsICc/JywgJzsnLCAnIyddLmNvbmNhdChhdXRvRXNjYXBlKSxcbiAgICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gICAgaG9zdG5hbWVNYXhMZW4gPSAyNTUsXG4gICAgaG9zdG5hbWVQYXJ0UGF0dGVybiA9IC9eWythLXowLTlBLVpfLV17MCw2M30kLyxcbiAgICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgICAvLyBwcm90b2NvbHMgdGhhdCBjYW4gYWxsb3cgXCJ1bnNhZmVcIiBhbmQgXCJ1bndpc2VcIiBjaGFycy5cbiAgICB1bnNhZmVQcm90b2NvbCA9IHtcbiAgICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAgICdqYXZhc2NyaXB0Oic6IHRydWVcbiAgICB9LFxuICAgIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgICBob3N0bGVzc1Byb3RvY29sID0ge1xuICAgICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICAgIH0sXG4gICAgLy8gcHJvdG9jb2xzIHRoYXQgYWx3YXlzIGNvbnRhaW4gYSAvLyBiaXQuXG4gICAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICAgJ2h0dHAnOiB0cnVlLFxuICAgICAgJ2h0dHBzJzogdHJ1ZSxcbiAgICAgICdmdHAnOiB0cnVlLFxuICAgICAgJ2dvcGhlcic6IHRydWUsXG4gICAgICAnZmlsZSc6IHRydWUsXG4gICAgICAnaHR0cDonOiB0cnVlLFxuICAgICAgJ2h0dHBzOic6IHRydWUsXG4gICAgICAnZnRwOic6IHRydWUsXG4gICAgICAnZ29waGVyOic6IHRydWUsXG4gICAgICAnZmlsZTonOiB0cnVlXG4gICAgfSxcbiAgICBxdWVyeXN0cmluZyA9IHJlcXVpcmUoJ3F1ZXJ5c3RyaW5nJyk7XG5cbmZ1bmN0aW9uIHVybFBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpIHtcbiAgaWYgKHVybCAmJiB1dGlsLmlzT2JqZWN0KHVybCkgJiYgdXJsIGluc3RhbmNlb2YgVXJsKSByZXR1cm4gdXJsO1xuXG4gIHZhciB1ID0gbmV3IFVybDtcbiAgdS5wYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbiAgcmV0dXJuIHU7XG59XG5cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICghdXRpbC5pc1N0cmluZyh1cmwpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlBhcmFtZXRlciAndXJsJyBtdXN0IGJlIGEgc3RyaW5nLCBub3QgXCIgKyB0eXBlb2YgdXJsKTtcbiAgfVxuXG4gIC8vIENvcHkgY2hyb21lLCBJRSwgb3BlcmEgYmFja3NsYXNoLWhhbmRsaW5nIGJlaGF2aW9yLlxuICAvLyBCYWNrIHNsYXNoZXMgYmVmb3JlIHRoZSBxdWVyeSBzdHJpbmcgZ2V0IGNvbnZlcnRlZCB0byBmb3J3YXJkIHNsYXNoZXNcbiAgLy8gU2VlOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MjU5MTZcbiAgdmFyIHF1ZXJ5SW5kZXggPSB1cmwuaW5kZXhPZignPycpLFxuICAgICAgc3BsaXR0ZXIgPVxuICAgICAgICAgIChxdWVyeUluZGV4ICE9PSAtMSAmJiBxdWVyeUluZGV4IDwgdXJsLmluZGV4T2YoJyMnKSkgPyAnPycgOiAnIycsXG4gICAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgICAgc2xhc2hSZWdleCA9IC9cXFxcL2c7XG4gIHVTcGxpdFswXSA9IHVTcGxpdFswXS5yZXBsYWNlKHNsYXNoUmVnZXgsICcvJyk7XG4gIHVybCA9IHVTcGxpdC5qb2luKHNwbGl0dGVyKTtcblxuICB2YXIgcmVzdCA9IHVybDtcblxuICAvLyB0cmltIGJlZm9yZSBwcm9jZWVkaW5nLlxuICAvLyBUaGlzIGlzIHRvIHN1cHBvcnQgcGFyc2Ugc3R1ZmYgbGlrZSBcIiAgaHR0cDovL2Zvby5jb20gIFxcblwiXG4gIHJlc3QgPSByZXN0LnRyaW0oKTtcblxuICBpZiAoIXNsYXNoZXNEZW5vdGVIb3N0ICYmIHVybC5zcGxpdCgnIycpLmxlbmd0aCA9PT0gMSkge1xuICAgIC8vIFRyeSBmYXN0IHBhdGggcmVnZXhwXG4gICAgdmFyIHNpbXBsZVBhdGggPSBzaW1wbGVQYXRoUGF0dGVybi5leGVjKHJlc3QpO1xuICAgIGlmIChzaW1wbGVQYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSByZXN0O1xuICAgICAgdGhpcy5ocmVmID0gcmVzdDtcbiAgICAgIHRoaXMucGF0aG5hbWUgPSBzaW1wbGVQYXRoWzFdO1xuICAgICAgaWYgKHNpbXBsZVBhdGhbMl0pIHtcbiAgICAgICAgdGhpcy5zZWFyY2ggPSBzaW1wbGVQYXRoWzJdO1xuICAgICAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSBxdWVyeXN0cmluZy5wYXJzZSh0aGlzLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucXVlcnkgPSB0aGlzLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICB0aGlzLnNlYXJjaCA9ICcnO1xuICAgICAgICB0aGlzLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgdGhpcy5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHRoaXMuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFob3N0bGVzc1Byb3RvY29sW3Byb3RvXSAmJlxuICAgICAgKHNsYXNoZXMgfHwgKHByb3RvICYmICFzbGFzaGVkUHJvdG9jb2xbcHJvdG9dKSkpIHtcblxuICAgIC8vIHRoZXJlJ3MgYSBob3N0bmFtZS5cbiAgICAvLyB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgLywgPywgOywgb3IgIyBlbmRzIHRoZSBob3N0LlxuICAgIC8vXG4gICAgLy8gSWYgdGhlcmUgaXMgYW4gQCBpbiB0aGUgaG9zdG5hbWUsIHRoZW4gbm9uLWhvc3QgY2hhcnMgKmFyZSogYWxsb3dlZFxuICAgIC8vIHRvIHRoZSBsZWZ0IG9mIHRoZSBsYXN0IEAgc2lnbiwgdW5sZXNzIHNvbWUgaG9zdC1lbmRpbmcgY2hhcmFjdGVyXG4gICAgLy8gY29tZXMgKmJlZm9yZSogdGhlIEAtc2lnbi5cbiAgICAvLyBVUkxzIGFyZSBvYm5veGlvdXMuXG4gICAgLy9cbiAgICAvLyBleDpcbiAgICAvLyBodHRwOi8vYUBiQGMvID0+IHVzZXI6YUBiIGhvc3Q6Y1xuICAgIC8vIGh0dHA6Ly9hQGI/QGMgPT4gdXNlcjphIGhvc3Q6YyBwYXRoOi8/QGNcblxuICAgIC8vIHYwLjEyIFRPRE8oaXNhYWNzKTogVGhpcyBpcyBub3QgcXVpdGUgaG93IENocm9tZSBkb2VzIHRoaW5ncy5cbiAgICAvLyBSZXZpZXcgb3VyIHRlc3QgY2FzZSBhZ2FpbnN0IGJyb3dzZXJzIG1vcmUgY29tcHJlaGVuc2l2ZWx5LlxuXG4gICAgLy8gZmluZCB0aGUgZmlyc3QgaW5zdGFuY2Ugb2YgYW55IGhvc3RFbmRpbmdDaGFyc1xuICAgIHZhciBob3N0RW5kID0gLTE7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob3N0RW5kaW5nQ2hhcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG5cbiAgICAvLyBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgLy8gaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAvLyBQdWxsIHRoYXQgb2ZmLlxuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICB0aGlzLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vbkhvc3RDaGFycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGhlYyA9IHJlc3QuaW5kZXhPZihub25Ib3N0Q2hhcnNbaV0pO1xuICAgICAgaWYgKGhlYyAhPT0gLTEgJiYgKGhvc3RFbmQgPT09IC0xIHx8IGhlYyA8IGhvc3RFbmQpKVxuICAgICAgICBob3N0RW5kID0gaGVjO1xuICAgIH1cbiAgICAvLyBpZiB3ZSBzdGlsbCBoYXZlIG5vdCBoaXQgaXQsIHRoZW4gdGhlIGVudGlyZSB0aGluZyBpcyBhIGhvc3QuXG4gICAgaWYgKGhvc3RFbmQgPT09IC0xKVxuICAgICAgaG9zdEVuZCA9IHJlc3QubGVuZ3RoO1xuXG4gICAgdGhpcy5ob3N0ID0gcmVzdC5zbGljZSgwLCBob3N0RW5kKTtcbiAgICByZXN0ID0gcmVzdC5zbGljZShob3N0RW5kKTtcblxuICAgIC8vIHB1bGwgb3V0IHBvcnQuXG4gICAgdGhpcy5wYXJzZUhvc3QoKTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICB0aGlzLmhvc3RuYW1lID0gdGhpcy5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHRoaXMuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgICB0aGlzLmhvc3RuYW1lW3RoaXMuaG9zdG5hbWUubGVuZ3RoIC0gMV0gPT09ICddJztcblxuICAgIC8vIHZhbGlkYXRlIGEgbGl0dGxlLlxuICAgIGlmICghaXB2Nkhvc3RuYW1lKSB7XG4gICAgICB2YXIgaG9zdHBhcnRzID0gdGhpcy5ob3N0bmFtZS5zcGxpdCgvXFwuLyk7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgdGhpcy5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHRoaXMuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLy8gSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgdGhpcy5ob3N0bmFtZSA9IHB1bnljb2RlLnRvQVNDSUkodGhpcy5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgdmFyIHAgPSB0aGlzLnBvcnQgPyAnOicgKyB0aGlzLnBvcnQgOiAnJztcbiAgICB2YXIgaCA9IHRoaXMuaG9zdG5hbWUgfHwgJyc7XG4gICAgdGhpcy5ob3N0ID0gaCArIHA7XG4gICAgdGhpcy5ocmVmICs9IHRoaXMuaG9zdDtcblxuICAgIC8vIHN0cmlwIFsgYW5kIF0gZnJvbSB0aGUgaG9zdG5hbWVcbiAgICAvLyB0aGUgaG9zdCBmaWVsZCBzdGlsbCByZXRhaW5zIHRoZW0sIHRob3VnaFxuICAgIGlmIChpcHY2SG9zdG5hbWUpIHtcbiAgICAgIHRoaXMuaG9zdG5hbWUgPSB0aGlzLmhvc3RuYW1lLnN1YnN0cigxLCB0aGlzLmhvc3RuYW1lLmxlbmd0aCAtIDIpO1xuICAgICAgaWYgKHJlc3RbMF0gIT09ICcvJykge1xuICAgICAgICByZXN0ID0gJy8nICsgcmVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBub3cgcmVzdCBpcyBzZXQgdG8gdGhlIHBvc3QtaG9zdCBzdHVmZi5cbiAgLy8gY2hvcCBvZmYgYW55IGRlbGltIGNoYXJzLlxuICBpZiAoIXVuc2FmZVByb3RvY29sW2xvd2VyUHJvdG9dKSB7XG5cbiAgICAvLyBGaXJzdCwgbWFrZSAxMDAlIHN1cmUgdGhhdCBhbnkgXCJhdXRvRXNjYXBlXCIgY2hhcnMgZ2V0XG4gICAgLy8gZXNjYXBlZCwgZXZlbiBpZiBlbmNvZGVVUklDb21wb25lbnQgZG9lc24ndCB0aGluayB0aGV5XG4gICAgLy8gbmVlZCB0byBiZS5cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGF1dG9Fc2NhcGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgYWUgPSBhdXRvRXNjYXBlW2ldO1xuICAgICAgaWYgKHJlc3QuaW5kZXhPZihhZSkgPT09IC0xKVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIHZhciBlc2MgPSBlbmNvZGVVUklDb21wb25lbnQoYWUpO1xuICAgICAgaWYgKGVzYyA9PT0gYWUpIHtcbiAgICAgICAgZXNjID0gZXNjYXBlKGFlKTtcbiAgICAgIH1cbiAgICAgIHJlc3QgPSByZXN0LnNwbGl0KGFlKS5qb2luKGVzYyk7XG4gICAgfVxuICB9XG5cblxuICAvLyBjaG9wIG9mZiBmcm9tIHRoZSB0YWlsIGZpcnN0LlxuICB2YXIgaGFzaCA9IHJlc3QuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaCAhPT0gLTEpIHtcbiAgICAvLyBnb3QgYSBmcmFnbWVudCBzdHJpbmcuXG4gICAgdGhpcy5oYXNoID0gcmVzdC5zdWJzdHIoaGFzaCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoMCwgaGFzaCk7XG4gIH1cbiAgdmFyIHFtID0gcmVzdC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxbSAhPT0gLTEpIHtcbiAgICB0aGlzLnNlYXJjaCA9IHJlc3Quc3Vic3RyKHFtKTtcbiAgICB0aGlzLnF1ZXJ5ID0gcmVzdC5zdWJzdHIocW0gKyAxKTtcbiAgICBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgdGhpcy5xdWVyeSA9IHF1ZXJ5c3RyaW5nLnBhcnNlKHRoaXMucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgdGhpcy5zZWFyY2ggPSAnJztcbiAgICB0aGlzLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHRoaXMucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgICB0aGlzLmhvc3RuYW1lICYmICF0aGlzLnBhdGhuYW1lKSB7XG4gICAgdGhpcy5wYXRobmFtZSA9ICcvJztcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgaWYgKHRoaXMucGF0aG5hbWUgfHwgdGhpcy5zZWFyY2gpIHtcbiAgICB2YXIgcCA9IHRoaXMucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSB0aGlzLnNlYXJjaCB8fCAnJztcbiAgICB0aGlzLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICB0aGlzLmhyZWYgPSB0aGlzLmZvcm1hdCgpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIGZvcm1hdCBhIHBhcnNlZCBvYmplY3QgaW50byBhIHVybCBzdHJpbmdcbmZ1bmN0aW9uIHVybEZvcm1hdChvYmopIHtcbiAgLy8gZW5zdXJlIGl0J3MgYW4gb2JqZWN0LCBhbmQgbm90IGEgc3RyaW5nIHVybC5cbiAgLy8gSWYgaXQncyBhbiBvYmosIHRoaXMgaXMgYSBuby1vcC5cbiAgLy8gdGhpcyB3YXksIHlvdSBjYW4gY2FsbCB1cmxfZm9ybWF0KCkgb24gc3RyaW5nc1xuICAvLyB0byBjbGVhbiB1cCBwb3RlbnRpYWxseSB3b25reSB1cmxzLlxuICBpZiAodXRpbC5pc1N0cmluZyhvYmopKSBvYmogPSB1cmxQYXJzZShvYmopO1xuICBpZiAoIShvYmogaW5zdGFuY2VvZiBVcmwpKSByZXR1cm4gVXJsLnByb3RvdHlwZS5mb3JtYXQuY2FsbChvYmopO1xuICByZXR1cm4gb2JqLmZvcm1hdCgpO1xufVxuXG5VcmwucHJvdG90eXBlLmZvcm1hdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgYXV0aCA9IHRoaXMuYXV0aCB8fCAnJztcbiAgaWYgKGF1dGgpIHtcbiAgICBhdXRoID0gZW5jb2RlVVJJQ29tcG9uZW50KGF1dGgpO1xuICAgIGF1dGggPSBhdXRoLnJlcGxhY2UoLyUzQS9pLCAnOicpO1xuICAgIGF1dGggKz0gJ0AnO1xuICB9XG5cbiAgdmFyIHByb3RvY29sID0gdGhpcy5wcm90b2NvbCB8fCAnJyxcbiAgICAgIHBhdGhuYW1lID0gdGhpcy5wYXRobmFtZSB8fCAnJyxcbiAgICAgIGhhc2ggPSB0aGlzLmhhc2ggfHwgJycsXG4gICAgICBob3N0ID0gZmFsc2UsXG4gICAgICBxdWVyeSA9ICcnO1xuXG4gIGlmICh0aGlzLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHRoaXMuaG9zdDtcbiAgfSBlbHNlIGlmICh0aGlzLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAodGhpcy5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID9cbiAgICAgICAgdGhpcy5ob3N0bmFtZSA6XG4gICAgICAgICdbJyArIHRoaXMuaG9zdG5hbWUgKyAnXScpO1xuICAgIGlmICh0aGlzLnBvcnQpIHtcbiAgICAgIGhvc3QgKz0gJzonICsgdGhpcy5wb3J0O1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLnF1ZXJ5ICYmXG4gICAgICB1dGlsLmlzT2JqZWN0KHRoaXMucXVlcnkpICYmXG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnF1ZXJ5KS5sZW5ndGgpIHtcbiAgICBxdWVyeSA9IHF1ZXJ5c3RyaW5nLnN0cmluZ2lmeSh0aGlzLnF1ZXJ5KTtcbiAgfVxuXG4gIHZhciBzZWFyY2ggPSB0aGlzLnNlYXJjaCB8fCAocXVlcnkgJiYgKCc/JyArIHF1ZXJ5KSkgfHwgJyc7XG5cbiAgaWYgKHByb3RvY29sICYmIHByb3RvY29sLnN1YnN0cigtMSkgIT09ICc6JykgcHJvdG9jb2wgKz0gJzonO1xuXG4gIC8vIG9ubHkgdGhlIHNsYXNoZWRQcm90b2NvbHMgZ2V0IHRoZSAvLy4gIE5vdCBtYWlsdG86LCB4bXBwOiwgZXRjLlxuICAvLyB1bmxlc3MgdGhleSBoYWQgdGhlbSB0byBiZWdpbiB3aXRoLlxuICBpZiAodGhpcy5zbGFzaGVzIHx8XG4gICAgICAoIXByb3RvY29sIHx8IHNsYXNoZWRQcm90b2NvbFtwcm90b2NvbF0pICYmIGhvc3QgIT09IGZhbHNlKSB7XG4gICAgaG9zdCA9ICcvLycgKyAoaG9zdCB8fCAnJyk7XG4gICAgaWYgKHBhdGhuYW1lICYmIHBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSBwYXRobmFtZSA9ICcvJyArIHBhdGhuYW1lO1xuICB9IGVsc2UgaWYgKCFob3N0KSB7XG4gICAgaG9zdCA9ICcnO1xuICB9XG5cbiAgaWYgKGhhc2ggJiYgaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgaGFzaCA9ICcjJyArIGhhc2g7XG4gIGlmIChzZWFyY2ggJiYgc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBzZWFyY2ggPSAnPycgKyBzZWFyY2g7XG5cbiAgcGF0aG5hbWUgPSBwYXRobmFtZS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChtYXRjaCk7XG4gIH0pO1xuICBzZWFyY2ggPSBzZWFyY2gucmVwbGFjZSgnIycsICclMjMnKTtcblxuICByZXR1cm4gcHJvdG9jb2wgKyBob3N0ICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xufTtcblxuZnVuY3Rpb24gdXJsUmVzb2x2ZShzb3VyY2UsIHJlbGF0aXZlKSB7XG4gIHJldHVybiB1cmxQYXJzZShzb3VyY2UsIGZhbHNlLCB0cnVlKS5yZXNvbHZlKHJlbGF0aXZlKTtcbn1cblxuVXJsLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24ocmVsYXRpdmUpIHtcbiAgcmV0dXJuIHRoaXMucmVzb2x2ZU9iamVjdCh1cmxQYXJzZShyZWxhdGl2ZSwgZmFsc2UsIHRydWUpKS5mb3JtYXQoKTtcbn07XG5cbmZ1bmN0aW9uIHVybFJlc29sdmVPYmplY3Qoc291cmNlLCByZWxhdGl2ZSkge1xuICBpZiAoIXNvdXJjZSkgcmV0dXJuIHJlbGF0aXZlO1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZU9iamVjdChyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZU9iamVjdCA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIGlmICh1dGlsLmlzU3RyaW5nKHJlbGF0aXZlKSkge1xuICAgIHZhciByZWwgPSBuZXcgVXJsKCk7XG4gICAgcmVsLnBhcnNlKHJlbGF0aXZlLCBmYWxzZSwgdHJ1ZSk7XG4gICAgcmVsYXRpdmUgPSByZWw7XG4gIH1cblxuICB2YXIgcmVzdWx0ID0gbmV3IFVybCgpO1xuICB2YXIgdGtleXMgPSBPYmplY3Qua2V5cyh0aGlzKTtcbiAgZm9yICh2YXIgdGsgPSAwOyB0ayA8IHRrZXlzLmxlbmd0aDsgdGsrKykge1xuICAgIHZhciB0a2V5ID0gdGtleXNbdGtdO1xuICAgIHJlc3VsdFt0a2V5XSA9IHRoaXNbdGtleV07XG4gIH1cblxuICAvLyBoYXNoIGlzIGFsd2F5cyBvdmVycmlkZGVuLCBubyBtYXR0ZXIgd2hhdC5cbiAgLy8gZXZlbiBocmVmPVwiXCIgd2lsbCByZW1vdmUgaXQuXG4gIHJlc3VsdC5oYXNoID0gcmVsYXRpdmUuaGFzaDtcblxuICAvLyBpZiB0aGUgcmVsYXRpdmUgdXJsIGlzIGVtcHR5LCB0aGVuIHRoZXJlJ3Mgbm90aGluZyBsZWZ0IHRvIGRvIGhlcmUuXG4gIGlmIChyZWxhdGl2ZS5ocmVmID09PSAnJykge1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBocmVmcyBsaWtlIC8vZm9vL2JhciBhbHdheXMgY3V0IHRvIHRoZSBwcm90b2NvbC5cbiAgaWYgKHJlbGF0aXZlLnNsYXNoZXMgJiYgIXJlbGF0aXZlLnByb3RvY29sKSB7XG4gICAgLy8gdGFrZSBldmVyeXRoaW5nIGV4Y2VwdCB0aGUgcHJvdG9jb2wgZnJvbSByZWxhdGl2ZVxuICAgIHZhciBya2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICBmb3IgKHZhciByayA9IDA7IHJrIDwgcmtleXMubGVuZ3RoOyByaysrKSB7XG4gICAgICB2YXIgcmtleSA9IHJrZXlzW3JrXTtcbiAgICAgIGlmIChya2V5ICE9PSAncHJvdG9jb2wnKVxuICAgICAgICByZXN1bHRbcmtleV0gPSByZWxhdGl2ZVtya2V5XTtcbiAgICB9XG5cbiAgICAvL3VybFBhcnNlIGFwcGVuZHMgdHJhaWxpbmcgLyB0byB1cmxzIGxpa2UgaHR0cDovL3d3dy5leGFtcGxlLmNvbVxuICAgIGlmIChzbGFzaGVkUHJvdG9jb2xbcmVzdWx0LnByb3RvY29sXSAmJlxuICAgICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChyZWxhdGl2ZS5wcm90b2NvbCAmJiByZWxhdGl2ZS5wcm90b2NvbCAhPT0gcmVzdWx0LnByb3RvY29sKSB7XG4gICAgLy8gaWYgaXQncyBhIGtub3duIHVybCBwcm90b2NvbCwgdGhlbiBjaGFuZ2luZ1xuICAgIC8vIHRoZSBwcm90b2NvbCBkb2VzIHdlaXJkIHRoaW5nc1xuICAgIC8vIGZpcnN0LCBpZiBpdCdzIG5vdCBmaWxlOiwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBob3N0LFxuICAgIC8vIGFuZCBpZiB0aGVyZSB3YXMgYSBwYXRoXG4gICAgLy8gdG8gYmVnaW4gd2l0aCwgdGhlbiB3ZSBNVVNUIGhhdmUgYSBwYXRoLlxuICAgIC8vIGlmIGl0IGlzIGZpbGU6LCB0aGVuIHRoZSBob3N0IGlzIGRyb3BwZWQsXG4gICAgLy8gYmVjYXVzZSB0aGF0J3Mga25vd24gdG8gYmUgaG9zdGxlc3MuXG4gICAgLy8gYW55dGhpbmcgZWxzZSBpcyBhc3N1bWVkIHRvIGJlIGFic29sdXRlLlxuICAgIGlmICghc2xhc2hlZFByb3RvY29sW3JlbGF0aXZlLnByb3RvY29sXSkge1xuICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhyZWxhdGl2ZSk7XG4gICAgICBmb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgICAgICAgdmFyIGsgPSBrZXlzW3ZdO1xuICAgICAgICByZXN1bHRba10gPSByZWxhdGl2ZVtrXTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICByZXN1bHQucHJvdG9jb2wgPSByZWxhdGl2ZS5wcm90b2NvbDtcbiAgICBpZiAoIXJlbGF0aXZlLmhvc3QgJiYgIWhvc3RsZXNzUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIgcmVsUGF0aCA9IChyZWxhdGl2ZS5wYXRobmFtZSB8fCAnJykuc3BsaXQoJy8nKTtcbiAgICAgIHdoaWxlIChyZWxQYXRoLmxlbmd0aCAmJiAhKHJlbGF0aXZlLmhvc3QgPSByZWxQYXRoLnNoaWZ0KCkpKTtcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdCkgcmVsYXRpdmUuaG9zdCA9ICcnO1xuICAgICAgaWYgKCFyZWxhdGl2ZS5ob3N0bmFtZSkgcmVsYXRpdmUuaG9zdG5hbWUgPSAnJztcbiAgICAgIGlmIChyZWxQYXRoWzBdICE9PSAnJykgcmVsUGF0aC51bnNoaWZ0KCcnKTtcbiAgICAgIGlmIChyZWxQYXRoLmxlbmd0aCA8IDIpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICByZXN1bHQucGF0aG5hbWUgPSByZWxQYXRoLmpvaW4oJy8nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsYXRpdmUucGF0aG5hbWU7XG4gICAgfVxuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gICAgcmVzdWx0Lmhvc3QgPSByZWxhdGl2ZS5ob3N0IHx8ICcnO1xuICAgIHJlc3VsdC5hdXRoID0gcmVsYXRpdmUuYXV0aDtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0O1xuICAgIHJlc3VsdC5wb3J0ID0gcmVsYXRpdmUucG9ydDtcbiAgICAvLyB0byBzdXBwb3J0IGh0dHAucmVxdWVzdFxuICAgIGlmIChyZXN1bHQucGF0aG5hbWUgfHwgcmVzdWx0LnNlYXJjaCkge1xuICAgICAgdmFyIHAgPSByZXN1bHQucGF0aG5hbWUgfHwgJyc7XG4gICAgICB2YXIgcyA9IHJlc3VsdC5zZWFyY2ggfHwgJyc7XG4gICAgICByZXN1bHQucGF0aCA9IHAgKyBzO1xuICAgIH1cbiAgICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHZhciBpc1NvdXJjZUFicyA9IChyZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSxcbiAgICAgIGlzUmVsQWJzID0gKFxuICAgICAgICAgIHJlbGF0aXZlLmhvc3QgfHxcbiAgICAgICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICAgKSxcbiAgICAgIG11c3RFbmRBYnMgPSAoaXNSZWxBYnMgfHwgaXNTb3VyY2VBYnMgfHxcbiAgICAgICAgICAgICAgICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksXG4gICAgICByZW1vdmVBbGxEb3RzID0gbXVzdEVuZEFicyxcbiAgICAgIHNyY1BhdGggPSByZXN1bHQucGF0aG5hbWUgJiYgcmVzdWx0LnBhdGhuYW1lLnNwbGl0KCcvJykgfHwgW10sXG4gICAgICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICAgIHBzeWNob3RpYyA9IHJlc3VsdC5wcm90b2NvbCAmJiAhc2xhc2hlZFByb3RvY29sW3Jlc3VsdC5wcm90b2NvbF07XG5cbiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAvLyBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gIC8vIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDtcbiAgICAgIGVsc2Ugc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTtcbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuXG4gIGlmIChpc1JlbEFicykge1xuICAgIC8vIGl0J3MgYWJzb2x1dGUuXG4gICAgcmVzdWx0Lmhvc3QgPSAocmVsYXRpdmUuaG9zdCB8fCByZWxhdGl2ZS5ob3N0ID09PSAnJykgP1xuICAgICAgICAgICAgICAgICAgcmVsYXRpdmUuaG9zdCA6IHJlc3VsdC5ob3N0O1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IChyZWxhdGl2ZS5ob3N0bmFtZSB8fCByZWxhdGl2ZS5ob3N0bmFtZSA9PT0gJycpID9cbiAgICAgICAgICAgICAgICAgICAgICByZWxhdGl2ZS5ob3N0bmFtZSA6IHJlc3VsdC5ob3N0bmFtZTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHNyY1BhdGggPSByZWxQYXRoO1xuICAgIC8vIGZhbGwgdGhyb3VnaCB0byB0aGUgZG90LWhhbmRsaW5nIGJlbG93LlxuICB9IGVsc2UgaWYgKHJlbFBhdGgubGVuZ3RoKSB7XG4gICAgLy8gaXQncyByZWxhdGl2ZVxuICAgIC8vIHRocm93IGF3YXkgdGhlIGV4aXN0aW5nIGZpbGUsIGFuZCB0YWtlIHRoZSBuZXcgcGF0aCBpbnN0ZWFkLlxuICAgIGlmICghc3JjUGF0aCkgc3JjUGF0aCA9IFtdO1xuICAgIHNyY1BhdGgucG9wKCk7XG4gICAgc3JjUGF0aCA9IHNyY1BhdGguY29uY2F0KHJlbFBhdGgpO1xuICAgIHJlc3VsdC5zZWFyY2ggPSByZWxhdGl2ZS5zZWFyY2g7XG4gICAgcmVzdWx0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnk7XG4gIH0gZWxzZSBpZiAoIXV0aWwuaXNOdWxsT3JVbmRlZmluZWQocmVsYXRpdmUuc2VhcmNoKSkge1xuICAgIC8vIGp1c3QgcHVsbCBvdXQgdGhlIHNlYXJjaC5cbiAgICAvLyBsaWtlIGhyZWY9Jz9mb28nLlxuICAgIC8vIFB1dCB0aGlzIGFmdGVyIHRoZSBvdGhlciB0d28gY2FzZXMgYmVjYXVzZSBpdCBzaW1wbGlmaWVzIHRoZSBib29sZWFuc1xuICAgIGlmIChwc3ljaG90aWMpIHtcbiAgICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gc3JjUGF0aC5zaGlmdCgpO1xuICAgICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgICAgLy90aGlzIGVzcGVjaWFsbHkgaGFwcGVucyBpbiBjYXNlcyBsaWtlXG4gICAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Lmhvc3Quc3BsaXQoJ0AnKSA6IGZhbHNlO1xuICAgICAgaWYgKGF1dGhJbkhvc3QpIHtcbiAgICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICAgIHJlc3VsdC5ob3N0ID0gcmVzdWx0Lmhvc3RuYW1lID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIC8vdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAoIXV0aWwuaXNOdWxsKHJlc3VsdC5wYXRobmFtZSkgfHwgIXV0aWwuaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAgIChyZXN1bHQuaG9zdCB8fCByZWxhdGl2ZS5ob3N0IHx8IHNyY1BhdGgubGVuZ3RoID4gMSkgJiZcbiAgICAgIChsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJykgfHwgbGFzdCA9PT0gJycpO1xuXG4gIC8vIHN0cmlwIHNpbmdsZSBkb3RzLCByZXNvbHZlIGRvdWJsZSBkb3RzIHRvIHBhcmVudCBkaXJcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHNyY1BhdGgubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIGxhc3QgPSBzcmNQYXRoW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgIH0gZWxzZSBpZiAobGFzdCA9PT0gJy4uJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNyY1BhdGguc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmICghbXVzdEVuZEFicyAmJiAhcmVtb3ZlQWxsRG90cykge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgc3JjUGF0aC51bnNoaWZ0KCcuLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChtdXN0RW5kQWJzICYmIHNyY1BhdGhbMF0gIT09ICcnICYmXG4gICAgICAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fFxuICAgICAgKHNyY1BhdGhbMF0gJiYgc3JjUGF0aFswXS5jaGFyQXQoMCkgPT09ICcvJyk7XG5cbiAgLy8gcHV0IHRoZSBob3N0IGJhY2tcbiAgaWYgKHBzeWNob3RpYykge1xuICAgIHJlc3VsdC5ob3N0bmFtZSA9IHJlc3VsdC5ob3N0ID0gaXNBYnNvbHV0ZSA/ICcnIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyY1BhdGgubGVuZ3RoID8gc3JjUGF0aC5zaGlmdCgpIDogJyc7XG4gICAgLy9vY2NhdGlvbmFseSB0aGUgYXV0aCBjYW4gZ2V0IHN0dWNrIG9ubHkgaW4gaG9zdFxuICAgIC8vdGhpcyBlc3BlY2lhbGx5IGhhcHBlbnMgaW4gY2FzZXMgbGlrZVxuICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgdmFyIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCF1dGlsLmlzTnVsbChyZXN1bHQucGF0aG5hbWUpIHx8ICF1dGlsLmlzTnVsbChyZXN1bHQuc2VhcmNoKSkge1xuICAgIHJlc3VsdC5wYXRoID0gKHJlc3VsdC5wYXRobmFtZSA/IHJlc3VsdC5wYXRobmFtZSA6ICcnKSArXG4gICAgICAgICAgICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gIH1cbiAgcmVzdWx0LmF1dGggPSByZWxhdGl2ZS5hdXRoIHx8IHJlc3VsdC5hdXRoO1xuICByZXN1bHQuc2xhc2hlcyA9IHJlc3VsdC5zbGFzaGVzIHx8IHJlbGF0aXZlLnNsYXNoZXM7XG4gIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcblxuVXJsLnByb3RvdHlwZS5wYXJzZUhvc3QgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGhvc3QgPSB0aGlzLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICB0aGlzLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSB0aGlzLmhvc3RuYW1lID0gaG9zdDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy91cmwvdXJsLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzU3RyaW5nOiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gdHlwZW9mKGFyZykgPT09ICdzdHJpbmcnO1xuICB9LFxuICBpc09iamVjdDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHR5cGVvZihhcmcpID09PSAnb2JqZWN0JyAmJiBhcmcgIT09IG51bGw7XG4gIH0sXG4gIGlzTnVsbDogZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGFyZyA9PT0gbnVsbDtcbiAgfSxcbiAgaXNOdWxsT3JVbmRlZmluZWQ6IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBhcmcgPT0gbnVsbDtcbiAgfVxufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vbm9kZV9tb2R1bGVzL3VybC91dGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy91cmwvdXRpbC5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBfX3Jlc291cmNlUXVlcnkgV29ya2VyR2xvYmFsU2NvcGUgc2VsZiAqL1xuLyogZXNsaW50IHByZWZlci1kZXN0cnVjdHVyaW5nOiBvZmYgKi9cblxuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5jb25zdCBzdHJpcEFuc2kgPSByZXF1aXJlKCdzdHJpcC1hbnNpJyk7XG5jb25zdCBsb2cgPSByZXF1aXJlKCdsb2dsZXZlbCcpLmdldExvZ2dlcignd2VicGFjay1kZXYtc2VydmVyJyk7XG5jb25zdCBzb2NrZXQgPSByZXF1aXJlKCcuL3NvY2tldCcpO1xuY29uc3Qgb3ZlcmxheSA9IHJlcXVpcmUoJy4vb3ZlcmxheScpO1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50U2NyaXB0U291cmNlKCkge1xuICAvLyBgZG9jdW1lbnQuY3VycmVudFNjcmlwdGAgaXMgdGhlIG1vc3QgYWNjdXJhdGUgd2F5IHRvIGZpbmQgdGhlIGN1cnJlbnQgc2NyaXB0LFxuICAvLyBidXQgaXMgbm90IHN1cHBvcnRlZCBpbiBhbGwgYnJvd3NlcnMuXG4gIGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KSB7IHJldHVybiBkb2N1bWVudC5jdXJyZW50U2NyaXB0LmdldEF0dHJpYnV0ZSgnc3JjJyk7IH1cbiAgLy8gRmFsbCBiYWNrIHRvIGdldHRpbmcgYWxsIHNjcmlwdHMgaW4gdGhlIGRvY3VtZW50LlxuICBjb25zdCBzY3JpcHRFbGVtZW50cyA9IGRvY3VtZW50LnNjcmlwdHMgfHwgW107XG4gIGNvbnN0IGN1cnJlbnRTY3JpcHQgPSBzY3JpcHRFbGVtZW50c1tzY3JpcHRFbGVtZW50cy5sZW5ndGggLSAxXTtcbiAgaWYgKGN1cnJlbnRTY3JpcHQpIHsgcmV0dXJuIGN1cnJlbnRTY3JpcHQuZ2V0QXR0cmlidXRlKCdzcmMnKTsgfVxuICAvLyBGYWlsIGFzIHRoZXJlIHdhcyBubyBzY3JpcHQgdG8gdXNlLlxuICB0aHJvdyBuZXcgRXJyb3IoJ1tXRFNdIEZhaWxlZCB0byBnZXQgY3VycmVudCBzY3JpcHQgc291cmNlLicpO1xufVxuXG5sZXQgdXJsUGFydHM7XG5sZXQgaG90UmVsb2FkID0gdHJ1ZTtcbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICBjb25zdCBxcyA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2gudG9Mb3dlckNhc2UoKTtcbiAgaG90UmVsb2FkID0gcXMuaW5kZXhPZignaG90cmVsb2FkPWZhbHNlJykgPT09IC0xO1xufVxuaWYgKHR5cGVvZiBfX3Jlc291cmNlUXVlcnkgPT09ICdzdHJpbmcnICYmIF9fcmVzb3VyY2VRdWVyeSkge1xuICAvLyBJZiB0aGlzIGJ1bmRsZSBpcyBpbmxpbmVkLCB1c2UgdGhlIHJlc291cmNlIHF1ZXJ5IHRvIGdldCB0aGUgY29ycmVjdCB1cmwuXG4gIHVybFBhcnRzID0gdXJsLnBhcnNlKF9fcmVzb3VyY2VRdWVyeS5zdWJzdHIoMSkpO1xufSBlbHNlIHtcbiAgLy8gRWxzZSwgZ2V0IHRoZSB1cmwgZnJvbSB0aGUgPHNjcmlwdD4gdGhpcyBmaWxlIHdhcyBjYWxsZWQgd2l0aC5cbiAgbGV0IHNjcmlwdEhvc3QgPSBnZXRDdXJyZW50U2NyaXB0U291cmNlKCk7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuICBzY3JpcHRIb3N0ID0gc2NyaXB0SG9zdC5yZXBsYWNlKC9cXC9bXlxcL10rJC8sICcnKTtcbiAgdXJsUGFydHMgPSB1cmwucGFyc2UoKHNjcmlwdEhvc3QgfHwgJy8nKSwgZmFsc2UsIHRydWUpO1xufVxuXG5pZiAoIXVybFBhcnRzLnBvcnQgfHwgdXJsUGFydHMucG9ydCA9PT0gJzAnKSB7XG4gIHVybFBhcnRzLnBvcnQgPSBzZWxmLmxvY2F0aW9uLnBvcnQ7XG59XG5cbmxldCBob3QgPSBmYWxzZTtcbmxldCBpbml0aWFsID0gdHJ1ZTtcbmxldCBjdXJyZW50SGFzaCA9ICcnO1xubGV0IHVzZVdhcm5pbmdPdmVybGF5ID0gZmFsc2U7XG5sZXQgdXNlRXJyb3JPdmVybGF5ID0gZmFsc2U7XG5sZXQgdXNlUHJvZ3Jlc3MgPSBmYWxzZTtcblxuY29uc3QgSU5GTyA9ICdpbmZvJztcbmNvbnN0IFdBUk5JTkcgPSAnd2FybmluZyc7XG5jb25zdCBFUlJPUiA9ICdlcnJvcic7XG5jb25zdCBOT05FID0gJ25vbmUnO1xuXG4vLyBTZXQgdGhlIGRlZmF1bHQgbG9nIGxldmVsXG5sb2cuc2V0RGVmYXVsdExldmVsKElORk8pO1xuXG4vLyBTZW5kIG1lc3NhZ2VzIHRvIHRoZSBvdXRzaWRlLCBzbyBwbHVnaW5zIGNhbiBjb25zdW1lIGl0LlxuZnVuY3Rpb24gc2VuZE1zZyh0eXBlLCBkYXRhKSB7XG4gIGlmIChcbiAgICB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgIShzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpKVxuICApIHtcbiAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgIHR5cGU6ICd3ZWJwYWNrJyArIHR5cGUsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSwgJyonKTtcbiAgfVxufVxuXG5jb25zdCBvblNvY2tldE1zZyA9IHtcbiAgaG90OiBmdW5jdGlvbiBtc2dIb3QoKSB7XG4gICAgaG90ID0gdHJ1ZTtcbiAgICBsb2cuaW5mbygnW1dEU10gSG90IE1vZHVsZSBSZXBsYWNlbWVudCBlbmFibGVkLicpO1xuICB9LFxuICBpbnZhbGlkOiBmdW5jdGlvbiBtc2dJbnZhbGlkKCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBBcHAgdXBkYXRlZC4gUmVjb21waWxpbmcuLi4nKTtcbiAgICAvLyBmaXhlcyAjMTA0Mi4gb3ZlcmxheSBkb2Vzbid0IGNsZWFyIGlmIGVycm9ycyBhcmUgZml4ZWQgYnV0IHdhcm5pbmdzIHJlbWFpbi5cbiAgICBpZiAodXNlV2FybmluZ092ZXJsYXkgfHwgdXNlRXJyb3JPdmVybGF5KSBvdmVybGF5LmNsZWFyKCk7XG4gICAgc2VuZE1zZygnSW52YWxpZCcpO1xuICB9LFxuICBoYXNoOiBmdW5jdGlvbiBtc2dIYXNoKGhhc2gpIHtcbiAgICBjdXJyZW50SGFzaCA9IGhhc2g7XG4gIH0sXG4gICdzdGlsbC1vayc6IGZ1bmN0aW9uIHN0aWxsT2soKSB7XG4gICAgbG9nLmluZm8oJ1tXRFNdIE5vdGhpbmcgY2hhbmdlZC4nKTtcbiAgICBpZiAodXNlV2FybmluZ092ZXJsYXkgfHwgdXNlRXJyb3JPdmVybGF5KSBvdmVybGF5LmNsZWFyKCk7XG4gICAgc2VuZE1zZygnU3RpbGxPaycpO1xuICB9LFxuICAnbG9nLWxldmVsJzogZnVuY3Rpb24gbG9nTGV2ZWwobGV2ZWwpIHtcbiAgICBjb25zdCBob3RDdHggPSByZXF1aXJlLmNvbnRleHQoJ3dlYnBhY2svaG90JywgZmFsc2UsIC9eXFwuXFwvbG9nJC8pO1xuICAgIGlmIChob3RDdHgua2V5cygpLmluZGV4T2YoJy4vbG9nJykgIT09IC0xKSB7XG4gICAgICBob3RDdHgoJy4vbG9nJykuc2V0TG9nTGV2ZWwobGV2ZWwpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGxldmVsKSB7XG4gICAgICBjYXNlIElORk86XG4gICAgICBjYXNlIEVSUk9SOlxuICAgICAgICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgV0FSTklORzpcbiAgICAgICAgLy8gbG9nbGV2ZWwncyB3YXJuaW5nIG5hbWUgaXMgZGlmZmVyZW50IGZyb20gd2VicGFjaydzXG4gICAgICAgIGxvZy5zZXRMZXZlbCgnd2FybicpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTk9ORTpcbiAgICAgICAgbG9nLmRpc2FibGVBbGwoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBsb2cuZXJyb3IoJ1tXRFNdIFVua25vd24gY2xpZW50TG9nTGV2ZWwgXFwnJyArIGxldmVsICsgJ1xcJycpO1xuICAgIH1cbiAgfSxcbiAgb3ZlcmxheTogZnVuY3Rpb24gbXNnT3ZlcmxheSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHlwZW9mICh2YWx1ZSkgPT09ICdib29sZWFuJykge1xuICAgICAgICB1c2VXYXJuaW5nT3ZlcmxheSA9IGZhbHNlO1xuICAgICAgICB1c2VFcnJvck92ZXJsYXkgPSB2YWx1ZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgICAgdXNlV2FybmluZ092ZXJsYXkgPSB2YWx1ZS53YXJuaW5ncztcbiAgICAgICAgdXNlRXJyb3JPdmVybGF5ID0gdmFsdWUuZXJyb3JzO1xuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgcHJvZ3Jlc3M6IGZ1bmN0aW9uIG1zZ1Byb2dyZXNzKHByb2dyZXNzKSB7XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHVzZVByb2dyZXNzID0gcHJvZ3Jlc3M7XG4gICAgfVxuICB9LFxuICAncHJvZ3Jlc3MtdXBkYXRlJzogZnVuY3Rpb24gcHJvZ3Jlc3NVcGRhdGUoZGF0YSkge1xuICAgIGlmICh1c2VQcm9ncmVzcykgbG9nLmluZm8oJ1tXRFNdICcgKyBkYXRhLnBlcmNlbnQgKyAnJSAtICcgKyBkYXRhLm1zZyArICcuJyk7XG4gIH0sXG4gIG9rOiBmdW5jdGlvbiBtc2dPaygpIHtcbiAgICBzZW5kTXNnKCdPaycpO1xuICAgIGlmICh1c2VXYXJuaW5nT3ZlcmxheSB8fCB1c2VFcnJvck92ZXJsYXkpIG92ZXJsYXkuY2xlYXIoKTtcbiAgICBpZiAoaW5pdGlhbCkgcmV0dXJuIGluaXRpYWwgPSBmYWxzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG4gICAgcmVsb2FkQXBwKCk7XG4gIH0sXG4gICdjb250ZW50LWNoYW5nZWQnOiBmdW5jdGlvbiBjb250ZW50Q2hhbmdlZCgpIHtcbiAgICBsb2cuaW5mbygnW1dEU10gQ29udGVudCBiYXNlIGNoYW5nZWQuIFJlbG9hZGluZy4uLicpO1xuICAgIHNlbGYubG9jYXRpb24ucmVsb2FkKCk7XG4gIH0sXG4gIHdhcm5pbmdzOiBmdW5jdGlvbiBtc2dXYXJuaW5ncyh3YXJuaW5ncykge1xuICAgIGxvZy53YXJuKCdbV0RTXSBXYXJuaW5ncyB3aGlsZSBjb21waWxpbmcuJyk7XG4gICAgY29uc3Qgc3RyaXBwZWRXYXJuaW5ncyA9IHdhcm5pbmdzLm1hcChmdW5jdGlvbiBtYXAod2FybmluZykgeyByZXR1cm4gc3RyaXBBbnNpKHdhcm5pbmcpOyB9KTtcbiAgICBzZW5kTXNnKCdXYXJuaW5ncycsIHN0cmlwcGVkV2FybmluZ3MpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaXBwZWRXYXJuaW5ncy5sZW5ndGg7IGkrKykgeyBsb2cud2FybihzdHJpcHBlZFdhcm5pbmdzW2ldKTsgfVxuICAgIGlmICh1c2VXYXJuaW5nT3ZlcmxheSkgb3ZlcmxheS5zaG93TWVzc2FnZSh3YXJuaW5ncyk7XG5cbiAgICBpZiAoaW5pdGlhbCkgcmV0dXJuIGluaXRpYWwgPSBmYWxzZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXR1cm4tYXNzaWduXG4gICAgcmVsb2FkQXBwKCk7XG4gIH0sXG4gIGVycm9yczogZnVuY3Rpb24gbXNnRXJyb3JzKGVycm9ycykge1xuICAgIGxvZy5lcnJvcignW1dEU10gRXJyb3JzIHdoaWxlIGNvbXBpbGluZy4gUmVsb2FkIHByZXZlbnRlZC4nKTtcbiAgICBjb25zdCBzdHJpcHBlZEVycm9ycyA9IGVycm9ycy5tYXAoZnVuY3Rpb24gbWFwKGVycm9yKSB7IHJldHVybiBzdHJpcEFuc2koZXJyb3IpOyB9KTtcbiAgICBzZW5kTXNnKCdFcnJvcnMnLCBzdHJpcHBlZEVycm9ycyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpcHBlZEVycm9ycy5sZW5ndGg7IGkrKykgeyBsb2cuZXJyb3Ioc3RyaXBwZWRFcnJvcnNbaV0pOyB9XG4gICAgaWYgKHVzZUVycm9yT3ZlcmxheSkgb3ZlcmxheS5zaG93TWVzc2FnZShlcnJvcnMpO1xuICB9LFxuICBlcnJvcjogZnVuY3Rpb24gbXNnRXJyb3IoZXJyb3IpIHtcbiAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICB9LFxuICBjbG9zZTogZnVuY3Rpb24gbXNnQ2xvc2UoKSB7XG4gICAgbG9nLmVycm9yKCdbV0RTXSBEaXNjb25uZWN0ZWQhJyk7XG4gICAgc2VuZE1zZygnQ2xvc2UnKTtcbiAgfVxufTtcblxubGV0IGhvc3RuYW1lID0gdXJsUGFydHMuaG9zdG5hbWU7XG5sZXQgcHJvdG9jb2wgPSB1cmxQYXJ0cy5wcm90b2NvbDtcblxuXG4vLyBjaGVjayBpcHY0IGFuZCBpcHY2IGBhbGwgaG9zdG5hbWVgXG5pZiAoaG9zdG5hbWUgPT09ICcwLjAuMC4wJyB8fCBob3N0bmFtZSA9PT0gJzo6Jykge1xuICAvLyB3aHkgZG8gd2UgbmVlZCB0aGlzIGNoZWNrP1xuICAvLyBob3N0bmFtZSBuL2EgZm9yIGZpbGUgcHJvdG9jb2wgKGV4YW1wbGUsIHdoZW4gdXNpbmcgZWxlY3Ryb24sIGlvbmljKVxuICAvLyBzZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrL3dlYnBhY2stZGV2LXNlcnZlci9wdWxsLzM4NFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tYml0d2lzZVxuICBpZiAoc2VsZi5sb2NhdGlvbi5ob3N0bmFtZSAmJiAhIX5zZWxmLmxvY2F0aW9uLnByb3RvY29sLmluZGV4T2YoJ2h0dHAnKSkge1xuICAgIGhvc3RuYW1lID0gc2VsZi5sb2NhdGlvbi5ob3N0bmFtZTtcbiAgfVxufVxuXG4vLyBgaG9zdG5hbWVgIGNhbiBiZSBlbXB0eSB3aGVuIHRoZSBzY3JpcHQgcGF0aCBpcyByZWxhdGl2ZS4gSW4gdGhhdCBjYXNlLCBzcGVjaWZ5aW5nXG4vLyBhIHByb3RvY29sIHdvdWxkIHJlc3VsdCBpbiBhbiBpbnZhbGlkIFVSTC5cbi8vIFdoZW4gaHR0cHMgaXMgdXNlZCBpbiB0aGUgYXBwLCBzZWN1cmUgd2Vic29ja2V0cyBhcmUgYWx3YXlzIG5lY2Vzc2FyeVxuLy8gYmVjYXVzZSB0aGUgYnJvd3NlciBkb2Vzbid0IGFjY2VwdCBub24tc2VjdXJlIHdlYnNvY2tldHMuXG5pZiAoaG9zdG5hbWUgJiYgKHNlbGYubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonIHx8IHVybFBhcnRzLmhvc3RuYW1lID09PSAnMC4wLjAuMCcpKSB7XG4gIHByb3RvY29sID0gc2VsZi5sb2NhdGlvbi5wcm90b2NvbDtcbn1cblxuY29uc3Qgc29ja2V0VXJsID0gdXJsLmZvcm1hdCh7XG4gIHByb3RvY29sOiBwcm90b2NvbCxcbiAgYXV0aDogdXJsUGFydHMuYXV0aCxcbiAgaG9zdG5hbWU6IGhvc3RuYW1lLFxuICBwb3J0OiB1cmxQYXJ0cy5wb3J0LFxuICBwYXRobmFtZTogdXJsUGFydHMucGF0aCA9PSBudWxsIHx8IHVybFBhcnRzLnBhdGggPT09ICcvJyA/ICcvc29ja2pzLW5vZGUnIDogdXJsUGFydHMucGF0aFxufSk7XG5cbnNvY2tldChzb2NrZXRVcmwsIG9uU29ja2V0TXNnKTtcblxubGV0IGlzVW5sb2FkaW5nID0gZmFsc2U7XG5zZWxmLmFkZEV2ZW50TGlzdGVuZXIoJ2JlZm9yZXVubG9hZCcsIGZ1bmN0aW9uIGJlZm9yZVVubG9hZCgpIHtcbiAgaXNVbmxvYWRpbmcgPSB0cnVlO1xufSk7XG5cbmZ1bmN0aW9uIHJlbG9hZEFwcCgpIHtcbiAgaWYgKGlzVW5sb2FkaW5nIHx8ICFob3RSZWxvYWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGhvdCkge1xuICAgIGxvZy5pbmZvKCdbV0RTXSBBcHAgaG90IHVwZGF0ZS4uLicpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBnbG9iYWwtcmVxdWlyZVxuICAgIGNvbnN0IGhvdEVtaXR0ZXIgPSByZXF1aXJlKCd3ZWJwYWNrL2hvdC9lbWl0dGVyJyk7XG4gICAgaG90RW1pdHRlci5lbWl0KCd3ZWJwYWNrSG90VXBkYXRlJywgY3VycmVudEhhc2gpO1xuICAgIGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgJiYgc2VsZi53aW5kb3cpIHtcbiAgICAgIC8vIGJyb2FkY2FzdCB1cGRhdGUgdG8gd2luZG93XG4gICAgICBzZWxmLnBvc3RNZXNzYWdlKCd3ZWJwYWNrSG90VXBkYXRlJyArIGN1cnJlbnRIYXNoLCAnKicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBsZXQgcm9vdFdpbmRvdyA9IHNlbGY7XG4gICAgLy8gdXNlIHBhcmVudCB3aW5kb3cgZm9yIHJlbG9hZCAoaW4gY2FzZSB3ZSdyZSBpbiBhbiBpZnJhbWUgd2l0aCBubyB2YWxpZCBzcmMpXG4gICAgY29uc3QgaW50ZXJ2YWxJZCA9IHNlbGYuc2V0SW50ZXJ2YWwoZnVuY3Rpb24gZmluZFJvb3RXaW5kb3coKSB7XG4gICAgICBpZiAocm9vdFdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2Fib3V0OicpIHtcbiAgICAgICAgLy8gcmVsb2FkIGltbWVkaWF0ZWx5IGlmIHByb3RvY29sIGlzIHZhbGlkXG4gICAgICAgIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm9vdFdpbmRvdyA9IHJvb3RXaW5kb3cucGFyZW50O1xuICAgICAgICBpZiAocm9vdFdpbmRvdy5wYXJlbnQgPT09IHJvb3RXaW5kb3cpIHtcbiAgICAgICAgICAvLyBpZiBwYXJlbnQgZXF1YWxzIGN1cnJlbnQgd2luZG93IHdlJ3ZlIHJlYWNoZWQgdGhlIHJvb3Qgd2hpY2ggd291bGQgY29udGludWUgZm9yZXZlciwgc28gdHJpZ2dlciBhIHJlbG9hZCBhbnl3YXlzXG4gICAgICAgICAgYXBwbHlSZWxvYWQocm9vdFdpbmRvdywgaW50ZXJ2YWxJZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5UmVsb2FkKHJvb3RXaW5kb3csIGludGVydmFsSWQpIHtcbiAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgIGxvZy5pbmZvKCdbV0RTXSBBcHAgdXBkYXRlZC4gUmVsb2FkaW5nLi4uJyk7XG4gICAgcm9vdFdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgfVxufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50P2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMVxuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9pbmRleC5qcz9odHRwOi8vbG9jYWxob3N0OjMwMDFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBUaGUgZXJyb3Igb3ZlcmxheSBpcyBpbnNwaXJlZCAoYW5kIG1vc3RseSBjb3BpZWQpIGZyb20gQ3JlYXRlIFJlYWN0IEFwcCAoaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29raW5jdWJhdG9yL2NyZWF0ZS1yZWFjdC1hcHApXG4vLyBUaGV5LCBpbiB0dXJuLCBnb3QgaW5zcGlyZWQgYnkgd2VicGFjay1ob3QtbWlkZGxld2FyZSAoaHR0cHM6Ly9naXRodWIuY29tL2dsZW5qYW1pbi93ZWJwYWNrLWhvdC1taWRkbGV3YXJlKS5cblxuY29uc3QgYW5zaUhUTUwgPSByZXF1aXJlKCdhbnNpLWh0bWwnKTtcbmNvbnN0IEVudGl0aWVzID0gcmVxdWlyZSgnaHRtbC1lbnRpdGllcycpLkFsbEh0bWxFbnRpdGllcztcblxuY29uc3QgZW50aXRpZXMgPSBuZXcgRW50aXRpZXMoKTtcblxuY29uc3QgY29sb3JzID0ge1xuICByZXNldDogWyd0cmFuc3BhcmVudCcsICd0cmFuc3BhcmVudCddLFxuICBibGFjazogJzE4MTgxOCcsXG4gIHJlZDogJ0UzNjA0OScsXG4gIGdyZWVuOiAnQjNDQjc0JyxcbiAgeWVsbG93OiAnRkZEMDgwJyxcbiAgYmx1ZTogJzdDQUZDMicsXG4gIG1hZ2VudGE6ICc3RkFDQ0EnLFxuICBjeWFuOiAnQzNDMkVGJyxcbiAgbGlnaHRncmV5OiAnRUJFN0UzJyxcbiAgZGFya2dyZXk6ICc2RDc4OTEnXG59O1xuYW5zaUhUTUwuc2V0Q29sb3JzKGNvbG9ycyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU92ZXJsYXlJZnJhbWUob25JZnJhbWVMb2FkKSB7XG4gIGNvbnN0IGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpO1xuICBpZnJhbWUuaWQgPSAnd2VicGFjay1kZXYtc2VydmVyLWNsaWVudC1vdmVybGF5JztcbiAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gIGlmcmFtZS5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XG4gIGlmcmFtZS5zdHlsZS5sZWZ0ID0gMDtcbiAgaWZyYW1lLnN0eWxlLnRvcCA9IDA7XG4gIGlmcmFtZS5zdHlsZS5yaWdodCA9IDA7XG4gIGlmcmFtZS5zdHlsZS5ib3R0b20gPSAwO1xuICBpZnJhbWUuc3R5bGUud2lkdGggPSAnMTAwdncnO1xuICBpZnJhbWUuc3R5bGUuaGVpZ2h0ID0gJzEwMHZoJztcbiAgaWZyYW1lLnN0eWxlLmJvcmRlciA9ICdub25lJztcbiAgaWZyYW1lLnN0eWxlLnpJbmRleCA9IDk5OTk5OTk5OTk7XG4gIGlmcmFtZS5vbmxvYWQgPSBvbklmcmFtZUxvYWQ7XG4gIHJldHVybiBpZnJhbWU7XG59XG5cbmZ1bmN0aW9uIGFkZE92ZXJsYXlEaXZUbyhpZnJhbWUpIHtcbiAgY29uc3QgZGl2ID0gaWZyYW1lLmNvbnRlbnREb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZGl2LmlkID0gJ3dlYnBhY2stZGV2LXNlcnZlci1jbGllbnQtb3ZlcmxheS1kaXYnO1xuICBkaXYuc3R5bGUucG9zaXRpb24gPSAnZml4ZWQnO1xuICBkaXYuc3R5bGUuYm94U2l6aW5nID0gJ2JvcmRlci1ib3gnO1xuICBkaXYuc3R5bGUubGVmdCA9IDA7XG4gIGRpdi5zdHlsZS50b3AgPSAwO1xuICBkaXYuc3R5bGUucmlnaHQgPSAwO1xuICBkaXYuc3R5bGUuYm90dG9tID0gMDtcbiAgZGl2LnN0eWxlLndpZHRoID0gJzEwMHZ3JztcbiAgZGl2LnN0eWxlLmhlaWdodCA9ICcxMDB2aCc7XG4gIGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAncmdiYSgwLCAwLCAwLCAwLjg1KSc7XG4gIGRpdi5zdHlsZS5jb2xvciA9ICcjRThFOEU4JztcbiAgZGl2LnN0eWxlLmZvbnRGYW1pbHkgPSAnTWVubG8sIENvbnNvbGFzLCBtb25vc3BhY2UnO1xuICBkaXYuc3R5bGUuZm9udFNpemUgPSAnbGFyZ2UnO1xuICBkaXYuc3R5bGUucGFkZGluZyA9ICcycmVtJztcbiAgZGl2LnN0eWxlLmxpbmVIZWlnaHQgPSAnMS4yJztcbiAgZGl2LnN0eWxlLndoaXRlU3BhY2UgPSAncHJlLXdyYXAnO1xuICBkaXYuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XG4gIGlmcmFtZS5jb250ZW50RG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICByZXR1cm4gZGl2O1xufVxuXG5sZXQgb3ZlcmxheUlmcmFtZSA9IG51bGw7XG5sZXQgb3ZlcmxheURpdiA9IG51bGw7XG5sZXQgbGFzdE9uT3ZlcmxheURpdlJlYWR5ID0gbnVsbDtcblxuZnVuY3Rpb24gZW5zdXJlT3ZlcmxheURpdkV4aXN0cyhvbk92ZXJsYXlEaXZSZWFkeSkge1xuICBpZiAob3ZlcmxheURpdikge1xuICAgIC8vIEV2ZXJ5dGhpbmcgaXMgcmVhZHksIGNhbGwgdGhlIGNhbGxiYWNrIHJpZ2h0IGF3YXkuXG4gICAgb25PdmVybGF5RGl2UmVhZHkob3ZlcmxheURpdik7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gQ3JlYXRpbmcgYW4gaWZyYW1lIG1heSBiZSBhc3luY2hyb25vdXMgc28gd2UnbGwgc2NoZWR1bGUgdGhlIGNhbGxiYWNrLlxuICAvLyBJbiBjYXNlIG9mIG11bHRpcGxlIGNhbGxzLCBsYXN0IGNhbGxiYWNrIHdpbnMuXG4gIGxhc3RPbk92ZXJsYXlEaXZSZWFkeSA9IG9uT3ZlcmxheURpdlJlYWR5O1xuXG4gIGlmIChvdmVybGF5SWZyYW1lKSB7XG4gICAgLy8gV2UncmUgYWxyZWFkeSBjcmVhdGluZyBpdC5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDcmVhdGUgaWZyYW1lIGFuZCwgd2hlbiBpdCBpcyByZWFkeSwgYSBkaXYgaW5zaWRlIGl0LlxuICBvdmVybGF5SWZyYW1lID0gY3JlYXRlT3ZlcmxheUlmcmFtZShmdW5jdGlvbiBjYigpIHtcbiAgICBvdmVybGF5RGl2ID0gYWRkT3ZlcmxheURpdlRvKG92ZXJsYXlJZnJhbWUpO1xuICAgIC8vIE5vdyB3ZSBjYW4gdGFsayFcbiAgICBsYXN0T25PdmVybGF5RGl2UmVhZHkob3ZlcmxheURpdik7XG4gIH0pO1xuXG4gIC8vIFphbGdvIGFsZXJ0OiBvbklmcmFtZUxvYWQoKSB3aWxsIGJlIGNhbGxlZCBlaXRoZXIgc3luY2hyb25vdXNseVxuICAvLyBvciBhc3luY2hyb25vdXNseSBkZXBlbmRpbmcgb24gdGhlIGJyb3dzZXIuXG4gIC8vIFdlIGRlbGF5IGFkZGluZyBpdCBzbyBgb3ZlcmxheUlmcmFtZWAgaXMgc2V0IHdoZW4gYG9uSWZyYW1lTG9hZGAgZmlyZXMuXG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQob3ZlcmxheUlmcmFtZSk7XG59XG5cbmZ1bmN0aW9uIHNob3dNZXNzYWdlT3ZlcmxheShtZXNzYWdlKSB7XG4gIGVuc3VyZU92ZXJsYXlEaXZFeGlzdHMoZnVuY3Rpb24gY2IoZGl2KSB7XG4gICAgLy8gTWFrZSBpdCBsb29rIHNpbWlsYXIgdG8gb3VyIHRlcm1pbmFsLlxuICAgIGRpdi5pbm5lckhUTUwgPSAnPHNwYW4gc3R5bGU9XCJjb2xvcjogIycgKyBjb2xvcnMucmVkICtcbiAgICAgICAgICAgICAgICAgICAgJ1wiPkZhaWxlZCB0byBjb21waWxlLjwvc3Bhbj48YnI+PGJyPicgK1xuICAgICAgICAgICAgICAgICAgICBhbnNpSFRNTChlbnRpdGllcy5lbmNvZGUobWVzc2FnZSkpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVzdHJveUVycm9yT3ZlcmxheSgpIHtcbiAgaWYgKCFvdmVybGF5RGl2KSB7XG4gICAgLy8gSXQgaXMgbm90IHRoZXJlIGluIHRoZSBmaXJzdCBwbGFjZS5cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhbmQgcmVzZXQgaW50ZXJuYWwgc3RhdGUuXG4gIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQob3ZlcmxheUlmcmFtZSk7XG4gIG92ZXJsYXlEaXYgPSBudWxsO1xuICBvdmVybGF5SWZyYW1lID0gbnVsbDtcbiAgbGFzdE9uT3ZlcmxheURpdlJlYWR5ID0gbnVsbDtcbn1cblxuLy8gU3VjY2Vzc2Z1bCBjb21waWxhdGlvbi5cbmV4cG9ydHMuY2xlYXIgPSBmdW5jdGlvbiBoYW5kbGVTdWNjZXNzKCkge1xuICBkZXN0cm95RXJyb3JPdmVybGF5KCk7XG59O1xuXG4vLyBDb21waWxhdGlvbiB3aXRoIGVycm9ycyAoZS5nLiBzeW50YXggZXJyb3Igb3IgbWlzc2luZyBtb2R1bGVzKS5cbmV4cG9ydHMuc2hvd01lc3NhZ2UgPSBmdW5jdGlvbiBoYW5kbGVNZXNzYWdlKG1lc3NhZ2VzKSB7XG4gIHNob3dNZXNzYWdlT3ZlcmxheShtZXNzYWdlc1swXSk7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L292ZXJsYXkuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9jbGllbnQvb3ZlcmxheS5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IFNvY2tKUyA9IHJlcXVpcmUoJ3NvY2tqcy1jbGllbnQvZGlzdC9zb2NranMnKTtcblxubGV0IHJldHJpZXMgPSAwO1xubGV0IHNvY2sgPSBudWxsO1xuXG5mdW5jdGlvbiBzb2NrZXQodXJsLCBoYW5kbGVycykge1xuICBzb2NrID0gbmV3IFNvY2tKUyh1cmwpO1xuXG4gIHNvY2sub25vcGVuID0gZnVuY3Rpb24gb25vcGVuKCkge1xuICAgIHJldHJpZXMgPSAwO1xuICB9O1xuXG4gIHNvY2sub25jbG9zZSA9IGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKHJldHJpZXMgPT09IDApIHsgaGFuZGxlcnMuY2xvc2UoKTsgfVxuXG4gICAgLy8gVHJ5IHRvIHJlY29ubmVjdC5cbiAgICBzb2NrID0gbnVsbDtcblxuICAgIC8vIEFmdGVyIDEwIHJldHJpZXMgc3RvcCB0cnlpbmcsIHRvIHByZXZlbnQgbG9nc3BhbS5cbiAgICBpZiAocmV0cmllcyA8PSAxMCkge1xuICAgICAgLy8gRXhwb25lbnRpYWxseSBpbmNyZWFzZSB0aW1lb3V0IHRvIHJlY29ubmVjdC5cbiAgICAgIC8vIFJlc3BlY3RmdWxseSBjb3BpZWQgZnJvbSB0aGUgcGFja2FnZSBgZ290YC5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1taXhlZC1vcGVyYXRvcnMsIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllc1xuICAgICAgY29uc3QgcmV0cnlJbk1zID0gMTAwMCAqIE1hdGgucG93KDIsIHJldHJpZXMpICsgTWF0aC5yYW5kb20oKSAqIDEwMDtcbiAgICAgIHJldHJpZXMgKz0gMTtcblxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiBjYigpIHtcbiAgICAgICAgc29ja2V0KHVybCwgaGFuZGxlcnMpO1xuICAgICAgfSwgcmV0cnlJbk1zKTtcbiAgICB9XG4gIH07XG5cbiAgc29jay5vbm1lc3NhZ2UgPSBmdW5jdGlvbiBvbm1lc3NhZ2UoZSkge1xuICAgIC8vIFRoaXMgYXNzdW1lcyB0aGF0IGFsbCBkYXRhIHNlbnQgdmlhIHRoZSB3ZWJzb2NrZXQgaXMgSlNPTi5cbiAgICBjb25zdCBtc2cgPSBKU09OLnBhcnNlKGUuZGF0YSk7XG4gICAgaWYgKGhhbmRsZXJzW21zZy50eXBlXSkgeyBoYW5kbGVyc1ttc2cudHlwZV0obXNnLmRhdGEpOyB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc29ja2V0O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spLWRldi1zZXJ2ZXIvY2xpZW50L3NvY2tldC5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay1kZXYtc2VydmVyL2NsaWVudC9zb2NrZXQuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cdHJldHVybiAvW1xcdTAwMWJcXHUwMDliXVtbKCkjOz9dKig/OlswLTldezEsNH0oPzo7WzAtOV17MCw0fSkqKT9bMC05QS1QUlpjZi1ucXJ5PT48XS9nO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS1kZXYtc2VydmVyL25vZGVfbW9kdWxlcy9hbnNpLXJlZ2V4L2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL2Fuc2ktcmVnZXgvaW5kZXguanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFuc2lSZWdleCA9IHJlcXVpcmUoJ2Fuc2ktcmVnZXgnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChzdHIpIHtcblx0cmV0dXJuIHR5cGVvZiBzdHIgPT09ICdzdHJpbmcnID8gc3RyLnJlcGxhY2UoYW5zaVJlZ2V4LCAnJykgOiBzdHI7XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spLWRldi1zZXJ2ZXIvbm9kZV9tb2R1bGVzL3N0cmlwLWFuc2kvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2stZGV2LXNlcnZlci9ub2RlX21vZHVsZXMvc3RyaXAtYW5zaS9pbmRleC5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XG59IGNhdGNoKGUpIHtcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcblx0XHRnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZighbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgbWFwID0ge1xuXHRcIi4vbG9nXCI6IFwiLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzXCJcbn07XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18od2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkpO1xufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0dmFyIGlkID0gbWFwW3JlcV07XG5cdGlmKCEoaWQgKyAxKSkgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKTtcblx0cmV0dXJuIGlkO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSBcIi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90IF5cXFxcLlxcXFwvbG9nJFwiO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9ob3Qgbm9ucmVjdXJzaXZlIF5cXC5cXC9sb2ckXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdCBeXFwuXFwvbG9nJFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLypnbG9iYWxzIHdpbmRvdyBfX3dlYnBhY2tfaGFzaF9fICovXG5pZihtb2R1bGUuaG90KSB7XG5cdHZhciBsYXN0SGFzaDtcblx0dmFyIHVwVG9EYXRlID0gZnVuY3Rpb24gdXBUb0RhdGUoKSB7XG5cdFx0cmV0dXJuIGxhc3RIYXNoLmluZGV4T2YoX193ZWJwYWNrX2hhc2hfXykgPj0gMDtcblx0fTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblx0dmFyIGNoZWNrID0gZnVuY3Rpb24gY2hlY2soKSB7XG5cdFx0bW9kdWxlLmhvdC5jaGVjayh0cnVlKS50aGVuKGZ1bmN0aW9uKHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRpZighdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiKTtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIChQcm9iYWJseSBiZWNhdXNlIG9mIHJlc3RhcnRpbmcgdGhlIHdlYnBhY2stZGV2LXNlcnZlcilcIik7XG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZighdXBUb0RhdGUoKSkge1xuXHRcdFx0XHRjaGVjaygpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXF1aXJlKFwiLi9sb2ctYXBwbHktcmVzdWx0XCIpKHVwZGF0ZWRNb2R1bGVzLCB1cGRhdGVkTW9kdWxlcyk7XG5cblx0XHRcdGlmKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIEFwcCBpcyB1cCB0byBkYXRlLlwiKTtcblx0XHRcdH1cblxuXHRcdH0pLmNhdGNoKGZ1bmN0aW9uKGVycikge1xuXHRcdFx0dmFyIHN0YXR1cyA9IG1vZHVsZS5ob3Quc3RhdHVzKCk7XG5cdFx0XHRpZihbXCJhYm9ydFwiLCBcImZhaWxcIl0uaW5kZXhPZihzdGF0dXMpID49IDApIHtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIENhbm5vdCBhcHBseSB1cGRhdGUuIE5lZWQgdG8gZG8gYSBmdWxsIHJlbG9hZCFcIik7XG5cdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBcIiArIGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG5cdFx0XHRcdHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBVcGRhdGUgZmFpbGVkOiBcIiArIGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdHZhciBob3RFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblx0aG90RW1pdHRlci5vbihcIndlYnBhY2tIb3RVcGRhdGVcIiwgZnVuY3Rpb24oY3VycmVudEhhc2gpIHtcblx0XHRsYXN0SGFzaCA9IGN1cnJlbnRIYXNoO1xuXHRcdGlmKCF1cFRvRGF0ZSgpICYmIG1vZHVsZS5ob3Quc3RhdHVzKCkgPT09IFwiaWRsZVwiKSB7XG5cdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQ2hlY2tpbmcgZm9yIHVwZGF0ZXMgb24gdGhlIHNlcnZlci4uLlwiKTtcblx0XHRcdGNoZWNrKCk7XG5cdFx0fVxuXHR9KTtcblx0bG9nKFwiaW5mb1wiLCBcIltITVJdIFdhaXRpbmcgZm9yIHVwZGF0ZSBzaWduYWwgZnJvbSBXRFMuLi5cIik7XG59IGVsc2Uge1xuXHR0aHJvdyBuZXcgRXJyb3IoXCJbSE1SXSBIb3QgTW9kdWxlIFJlcGxhY2VtZW50IGlzIGRpc2FibGVkLlwiKTtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9ob3QvZGV2LXNlcnZlci5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvZGV2LXNlcnZlci5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgRXZlbnRFbWl0dGVyID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbm1vZHVsZS5leHBvcnRzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2hvdC9lbWl0dGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9lbWl0dGVyLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVwZGF0ZWRNb2R1bGVzLCByZW5ld2VkTW9kdWxlcykge1xuXHR2YXIgdW5hY2NlcHRlZE1vZHVsZXMgPSB1cGRhdGVkTW9kdWxlcy5maWx0ZXIoZnVuY3Rpb24obW9kdWxlSWQpIHtcblx0XHRyZXR1cm4gcmVuZXdlZE1vZHVsZXMgJiYgcmVuZXdlZE1vZHVsZXMuaW5kZXhPZihtb2R1bGVJZCkgPCAwO1xuXHR9KTtcblx0dmFyIGxvZyA9IHJlcXVpcmUoXCIuL2xvZ1wiKTtcblxuXHRpZih1bmFjY2VwdGVkTW9kdWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIFRoZSBmb2xsb3dpbmcgbW9kdWxlcyBjb3VsZG4ndCBiZSBob3QgdXBkYXRlZDogKFRoZXkgd291bGQgbmVlZCBhIGZ1bGwgcmVsb2FkISlcIik7XG5cdFx0dW5hY2NlcHRlZE1vZHVsZXMuZm9yRWFjaChmdW5jdGlvbihtb2R1bGVJZCkge1xuXHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdICAtIFwiICsgbW9kdWxlSWQpO1xuXHRcdH0pO1xuXHR9XG5cblx0aWYoIXJlbmV3ZWRNb2R1bGVzIHx8IHJlbmV3ZWRNb2R1bGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBOb3RoaW5nIGhvdCB1cGRhdGVkLlwiKTtcblx0fSBlbHNlIHtcblx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gVXBkYXRlZCBtb2R1bGVzOlwiKTtcblx0XHRyZW5ld2VkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKG1vZHVsZUlkKSB7XG5cdFx0XHRpZih0eXBlb2YgbW9kdWxlSWQgPT09IFwic3RyaW5nXCIgJiYgbW9kdWxlSWQuaW5kZXhPZihcIiFcIikgIT09IC0xKSB7XG5cdFx0XHRcdHZhciBwYXJ0cyA9IG1vZHVsZUlkLnNwbGl0KFwiIVwiKTtcblx0XHRcdFx0bG9nLmdyb3VwQ29sbGFwc2VkKFwiaW5mb1wiLCBcIltITVJdICAtIFwiICsgcGFydHMucG9wKCkpO1xuXHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0XHRcdGxvZy5ncm91cEVuZChcImluZm9cIik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gIC0gXCIgKyBtb2R1bGVJZCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0dmFyIG51bWJlcklkcyA9IHJlbmV3ZWRNb2R1bGVzLmV2ZXJ5KGZ1bmN0aW9uKG1vZHVsZUlkKSB7XG5cdFx0XHRyZXR1cm4gdHlwZW9mIG1vZHVsZUlkID09PSBcIm51bWJlclwiO1xuXHRcdH0pO1xuXHRcdGlmKG51bWJlcklkcylcblx0XHRcdGxvZyhcImluZm9cIiwgXCJbSE1SXSBDb25zaWRlciB1c2luZyB0aGUgTmFtZWRNb2R1bGVzUGx1Z2luIGZvciBtb2R1bGUgbmFtZXMuXCIpO1xuXHR9XG59O1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzXG4vLyBtb2R1bGUgaWQgPSAuL25vZGVfbW9kdWxlcy93ZWJwYWNrL2hvdC9sb2ctYXBwbHktcmVzdWx0LmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsInZhciBsb2dMZXZlbCA9IFwiaW5mb1wiO1xuXG5mdW5jdGlvbiBkdW1teSgpIHt9XG5cbmZ1bmN0aW9uIHNob3VsZExvZyhsZXZlbCkge1xuXHR2YXIgc2hvdWxkTG9nID0gKGxvZ0xldmVsID09PSBcImluZm9cIiAmJiBsZXZlbCA9PT0gXCJpbmZvXCIpIHx8XG5cdFx0KFtcImluZm9cIiwgXCJ3YXJuaW5nXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwid2FybmluZ1wiKSB8fFxuXHRcdChbXCJpbmZvXCIsIFwid2FybmluZ1wiLCBcImVycm9yXCJdLmluZGV4T2YobG9nTGV2ZWwpID49IDAgJiYgbGV2ZWwgPT09IFwiZXJyb3JcIik7XG5cdHJldHVybiBzaG91bGRMb2c7XG59XG5cbmZ1bmN0aW9uIGxvZ0dyb3VwKGxvZ0ZuKSB7XG5cdHJldHVybiBmdW5jdGlvbihsZXZlbCwgbXNnKSB7XG5cdFx0aWYoc2hvdWxkTG9nKGxldmVsKSkge1xuXHRcdFx0bG9nRm4obXNnKTtcblx0XHR9XG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGV2ZWwsIG1zZykge1xuXHRpZihzaG91bGRMb2cobGV2ZWwpKSB7XG5cdFx0aWYobGV2ZWwgPT09IFwiaW5mb1wiKSB7XG5cdFx0XHRjb25zb2xlLmxvZyhtc2cpO1xuXHRcdH0gZWxzZSBpZihsZXZlbCA9PT0gXCJ3YXJuaW5nXCIpIHtcblx0XHRcdGNvbnNvbGUud2Fybihtc2cpO1xuXHRcdH0gZWxzZSBpZihsZXZlbCA9PT0gXCJlcnJvclwiKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKG1zZyk7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgZ3JvdXAgPSBjb25zb2xlLmdyb3VwIHx8IGR1bW15O1xudmFyIGdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZCB8fCBkdW1teTtcbnZhciBncm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQgfHwgZHVtbXk7XG5cbm1vZHVsZS5leHBvcnRzLmdyb3VwID0gbG9nR3JvdXAoZ3JvdXApO1xuXG5tb2R1bGUuZXhwb3J0cy5ncm91cENvbGxhcHNlZCA9IGxvZ0dyb3VwKGdyb3VwQ29sbGFwc2VkKTtcblxubW9kdWxlLmV4cG9ydHMuZ3JvdXBFbmQgPSBsb2dHcm91cChncm91cEVuZCk7XG5cbm1vZHVsZS5leHBvcnRzLnNldExvZ0xldmVsID0gZnVuY3Rpb24obGV2ZWwpIHtcblx0bG9nTGV2ZWwgPSBsZXZlbDtcbn07XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvaG90L2xvZy5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9ob3QvbG9nLmpzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vKmdsb2JhbHMgX193ZWJwYWNrX2hhc2hfXyAqL1xuaWYobW9kdWxlLmhvdCkge1xuXHR2YXIgbGFzdEhhc2g7XG5cdHZhciB1cFRvRGF0ZSA9IGZ1bmN0aW9uIHVwVG9EYXRlKCkge1xuXHRcdHJldHVybiBsYXN0SGFzaC5pbmRleE9mKF9fd2VicGFja19oYXNoX18pID49IDA7XG5cdH07XG5cdHZhciBsb2cgPSByZXF1aXJlKFwiLi9sb2dcIik7XG5cdHZhciBjaGVjayA9IGZ1bmN0aW9uIGNoZWNrKCkge1xuXHRcdG1vZHVsZS5ob3QuY2hlY2soKS50aGVuKGZ1bmN0aW9uKHVwZGF0ZWRNb2R1bGVzKSB7XG5cdFx0XHRpZighdXBkYXRlZE1vZHVsZXMpIHtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIENhbm5vdCBmaW5kIHVwZGF0ZS4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiKTtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIChQcm9iYWJseSBiZWNhdXNlIG9mIHJlc3RhcnRpbmcgdGhlIHdlYnBhY2stZGV2LXNlcnZlcilcIik7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1vZHVsZS5ob3QuYXBwbHkoe1xuXHRcdFx0XHRpZ25vcmVVbmFjY2VwdGVkOiB0cnVlLFxuXHRcdFx0XHRpZ25vcmVEZWNsaW5lZDogdHJ1ZSxcblx0XHRcdFx0aWdub3JlRXJyb3JlZDogdHJ1ZSxcblx0XHRcdFx0b25VbmFjY2VwdGVkOiBmdW5jdGlvbihkYXRhKSB7XG5cdFx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIklnbm9yZWQgYW4gdXBkYXRlIHRvIHVuYWNjZXB0ZWQgbW9kdWxlIFwiICsgZGF0YS5jaGFpbi5qb2luKFwiIC0+IFwiKSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9uRGVjbGluZWQ6IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHRcdFx0XHRsb2coXCJ3YXJuaW5nXCIsIFwiSWdub3JlZCBhbiB1cGRhdGUgdG8gZGVjbGluZWQgbW9kdWxlIFwiICsgZGF0YS5jaGFpbi5qb2luKFwiIC0+IFwiKSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdG9uRXJyb3JlZDogZnVuY3Rpb24oZGF0YSkge1xuXHRcdFx0XHRcdGxvZyhcImVycm9yXCIsIGRhdGEuZXJyb3IpO1xuXHRcdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJJZ25vcmVkIGFuIGVycm9yIHdoaWxlIHVwZGF0aW5nIG1vZHVsZSBcIiArIGRhdGEubW9kdWxlSWQgKyBcIiAoXCIgKyBkYXRhLnR5cGUgKyBcIilcIik7XG5cdFx0XHRcdH1cblx0XHRcdH0pLnRoZW4oZnVuY3Rpb24ocmVuZXdlZE1vZHVsZXMpIHtcblx0XHRcdFx0aWYoIXVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRjaGVjaygpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmVxdWlyZShcIi4vbG9nLWFwcGx5LXJlc3VsdFwiKSh1cGRhdGVkTW9kdWxlcywgcmVuZXdlZE1vZHVsZXMpO1xuXG5cdFx0XHRcdGlmKHVwVG9EYXRlKCkpIHtcblx0XHRcdFx0XHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gQXBwIGlzIHVwIHRvIGRhdGUuXCIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHR9KS5jYXRjaChmdW5jdGlvbihlcnIpIHtcblx0XHRcdHZhciBzdGF0dXMgPSBtb2R1bGUuaG90LnN0YXR1cygpO1xuXHRcdFx0aWYoW1wiYWJvcnRcIiwgXCJmYWlsXCJdLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG5cdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBDYW5ub3QgY2hlY2sgZm9yIHVwZGF0ZS4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiKTtcblx0XHRcdFx0bG9nKFwid2FybmluZ1wiLCBcIltITVJdIFwiICsgZXJyLnN0YWNrIHx8IGVyci5tZXNzYWdlKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBVcGRhdGUgY2hlY2sgZmFpbGVkOiBcIiArIGVyci5zdGFjayB8fCBlcnIubWVzc2FnZSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH07XG5cdHZhciBob3RFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblx0aG90RW1pdHRlci5vbihcIndlYnBhY2tIb3RVcGRhdGVcIiwgZnVuY3Rpb24oY3VycmVudEhhc2gpIHtcblx0XHRsYXN0SGFzaCA9IGN1cnJlbnRIYXNoO1xuXHRcdGlmKCF1cFRvRGF0ZSgpKSB7XG5cdFx0XHR2YXIgc3RhdHVzID0gbW9kdWxlLmhvdC5zdGF0dXMoKTtcblx0XHRcdGlmKHN0YXR1cyA9PT0gXCJpZGxlXCIpIHtcblx0XHRcdFx0bG9nKFwiaW5mb1wiLCBcIltITVJdIENoZWNraW5nIGZvciB1cGRhdGVzIG9uIHRoZSBzZXJ2ZXIuLi5cIik7XG5cdFx0XHRcdGNoZWNrKCk7XG5cdFx0XHR9IGVsc2UgaWYoW1wiYWJvcnRcIiwgXCJmYWlsXCJdLmluZGV4T2Yoc3RhdHVzKSA+PSAwKSB7XG5cdFx0XHRcdGxvZyhcIndhcm5pbmdcIiwgXCJbSE1SXSBDYW5ub3QgYXBwbHkgdXBkYXRlIGFzIGEgcHJldmlvdXMgdXBkYXRlIFwiICsgc3RhdHVzICsgXCJlZC4gTmVlZCB0byBkbyBhIGZ1bGwgcmVsb2FkIVwiKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXHRsb2coXCJpbmZvXCIsIFwiW0hNUl0gV2FpdGluZyBmb3IgdXBkYXRlIHNpZ25hbCBmcm9tIFdEUy4uLlwiKTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihcIltITVJdIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnQgaXMgZGlzYWJsZWQuXCIpO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2hvdC9vbmx5LWRldi1zZXJ2ZXIuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svaG90L29ubHktZGV2LXNlcnZlci5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUiA9IHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyA/IFJlZmxlY3QgOiBudWxsXG52YXIgUmVmbGVjdEFwcGx5ID0gUiAmJiB0eXBlb2YgUi5hcHBseSA9PT0gJ2Z1bmN0aW9uJ1xuICA/IFIuYXBwbHlcbiAgOiBmdW5jdGlvbiBSZWZsZWN0QXBwbHkodGFyZ2V0LCByZWNlaXZlciwgYXJncykge1xuICAgIHJldHVybiBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbCh0YXJnZXQsIHJlY2VpdmVyLCBhcmdzKTtcbiAgfVxuXG52YXIgUmVmbGVjdE93bktleXNcbmlmIChSICYmIHR5cGVvZiBSLm93bktleXMgPT09ICdmdW5jdGlvbicpIHtcbiAgUmVmbGVjdE93bktleXMgPSBSLm93bktleXNcbn0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpXG4gICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0KSk7XG4gIH07XG59IGVsc2Uge1xuICBSZWZsZWN0T3duS2V5cyA9IGZ1bmN0aW9uIFJlZmxlY3RPd25LZXlzKHRhcmdldCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0YXJnZXQpO1xuICB9O1xufVxuXG5mdW5jdGlvbiBQcm9jZXNzRW1pdFdhcm5pbmcod2FybmluZykge1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLndhcm4pIGNvbnNvbGUud2Fybih3YXJuaW5nKTtcbn1cblxudmFyIE51bWJlcklzTmFOID0gTnVtYmVyLmlzTmFOIHx8IGZ1bmN0aW9uIE51bWJlcklzTmFOKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRFbWl0dGVyO1xuXG4vLyBCYWNrd2FyZHMtY29tcGF0IHdpdGggbm9kZSAwLjEwLnhcbkV2ZW50RW1pdHRlci5FdmVudEVtaXR0ZXIgPSBFdmVudEVtaXR0ZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50cyA9IHVuZGVmaW5lZDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX2V2ZW50c0NvdW50ID0gMDtcbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuX21heExpc3RlbmVycyA9IHVuZGVmaW5lZDtcblxuLy8gQnkgZGVmYXVsdCBFdmVudEVtaXR0ZXJzIHdpbGwgcHJpbnQgYSB3YXJuaW5nIGlmIG1vcmUgdGhhbiAxMCBsaXN0ZW5lcnMgYXJlXG4vLyBhZGRlZCB0byBpdC4gVGhpcyBpcyBhIHVzZWZ1bCBkZWZhdWx0IHdoaWNoIGhlbHBzIGZpbmRpbmcgbWVtb3J5IGxlYWtzLlxudmFyIGRlZmF1bHRNYXhMaXN0ZW5lcnMgPSAxMDtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KEV2ZW50RW1pdHRlciwgJ2RlZmF1bHRNYXhMaXN0ZW5lcnMnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIH0sXG4gIHNldDogZnVuY3Rpb24oYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdudW1iZXInIHx8IGFyZyA8IDAgfHwgTnVtYmVySXNOYU4oYXJnKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSB2YWx1ZSBvZiBcImRlZmF1bHRNYXhMaXN0ZW5lcnNcIiBpcyBvdXQgb2YgcmFuZ2UuIEl0IG11c3QgYmUgYSBub24tbmVnYXRpdmUgbnVtYmVyLiBSZWNlaXZlZCAnICsgYXJnICsgJy4nKTtcbiAgICB9XG4gICAgZGVmYXVsdE1heExpc3RlbmVycyA9IGFyZztcbiAgfVxufSk7XG5cbkV2ZW50RW1pdHRlci5pbml0ID0gZnVuY3Rpb24oKSB7XG5cbiAgaWYgKHRoaXMuX2V2ZW50cyA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBOdW1iZXJJc05hTihuKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgb2YgXCJuXCIgaXMgb3V0IG9mIHJhbmdlLiBJdCBtdXN0IGJlIGEgbm9uLW5lZ2F0aXZlIG51bWJlci4gUmVjZWl2ZWQgJyArIG4gKyAnLicpO1xuICB9XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgYXJncyA9IFtdO1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgYXJncy5wdXNoKGFyZ3VtZW50c1tpXSk7XG4gIHZhciBkb0Vycm9yID0gKHR5cGUgPT09ICdlcnJvcicpO1xuXG4gIHZhciBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMgIT09IHVuZGVmaW5lZClcbiAgICBkb0Vycm9yID0gKGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQpO1xuICBlbHNlIGlmICghZG9FcnJvcilcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgLy8gSWYgdGhlcmUgaXMgbm8gJ2Vycm9yJyBldmVudCBsaXN0ZW5lciB0aGVuIHRocm93LlxuICBpZiAoZG9FcnJvcikge1xuICAgIHZhciBlcjtcbiAgICBpZiAoYXJncy5sZW5ndGggPiAwKVxuICAgICAgZXIgPSBhcmdzWzBdO1xuICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAvLyBOb3RlOiBUaGUgY29tbWVudHMgb24gdGhlIGB0aHJvd2AgbGluZXMgYXJlIGludGVudGlvbmFsLCB0aGV5IHNob3dcbiAgICAgIC8vIHVwIGluIE5vZGUncyBvdXRwdXQgaWYgdGhpcyByZXN1bHRzIGluIGFuIHVuaGFuZGxlZCBleGNlcHRpb24uXG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkICdlcnJvcicgZXZlbnRcbiAgICB9XG4gICAgLy8gQXQgbGVhc3QgZ2l2ZSBzb21lIGtpbmQgb2YgY29udGV4dCB0byB0aGUgdXNlclxuICAgIHZhciBlcnIgPSBuZXcgRXJyb3IoJ1VuaGFuZGxlZCBlcnJvci4nICsgKGVyID8gJyAoJyArIGVyLm1lc3NhZ2UgKyAnKScgOiAnJykpO1xuICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgdGhyb3cgZXJyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICB9XG5cbiAgdmFyIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKGhhbmRsZXIgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gZmFsc2U7XG5cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUmVmbGVjdEFwcGx5KGhhbmRsZXIsIHRoaXMsIGFyZ3MpO1xuICB9IGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBSZWZsZWN0QXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufTtcblxuZnVuY3Rpb24gX2FkZExpc3RlbmVyKHRhcmdldCwgdHlwZSwgbGlzdGVuZXIsIHByZXBlbmQpIHtcbiAgdmFyIG07XG4gIHZhciBldmVudHM7XG4gIHZhciBleGlzdGluZztcblxuICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIFwibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgRnVuY3Rpb24uIFJlY2VpdmVkIHR5cGUgJyArIHR5cGVvZiBsaXN0ZW5lcik7XG4gIH1cblxuICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGFyZ2V0LmVtaXQoJ25ld0xpc3RlbmVyJywgdHlwZSxcbiAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmxpc3RlbmVyID8gbGlzdGVuZXIubGlzdGVuZXIgOiBsaXN0ZW5lcik7XG5cbiAgICAgIC8vIFJlLWFzc2lnbiBgZXZlbnRzYCBiZWNhdXNlIGEgbmV3TGlzdGVuZXIgaGFuZGxlciBjb3VsZCBoYXZlIGNhdXNlZCB0aGVcbiAgICAgIC8vIHRoaXMuX2V2ZW50cyB0byBiZSBhc3NpZ25lZCB0byBhIG5ldyBvYmplY3RcbiAgICAgIGV2ZW50cyA9IHRhcmdldC5fZXZlbnRzO1xuICAgIH1cbiAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXTtcbiAgfVxuXG4gIGlmIChleGlzdGluZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9XG4gICAgICAgIHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6IFtleGlzdGluZywgbGlzdGVuZXJdO1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgIH0gZWxzZSBpZiAocHJlcGVuZCkge1xuICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4aXN0aW5nLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBsaXN0ZW5lciBsZWFrXG4gICAgbSA9ICRnZXRNYXhMaXN0ZW5lcnModGFyZ2V0KTtcbiAgICBpZiAobSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSAmJiAhZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgLy8gTm8gZXJyb3IgY29kZSBmb3IgdGhpcyBzaW5jZSBpdCBpcyBhIFdhcm5pbmdcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheFxuICAgICAgdmFyIHcgPSBuZXcgRXJyb3IoJ1Bvc3NpYmxlIEV2ZW50RW1pdHRlciBtZW1vcnkgbGVhayBkZXRlY3RlZC4gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxlbmd0aCArICcgJyArIFN0cmluZyh0eXBlKSArICcgbGlzdGVuZXJzICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWRkZWQuIFVzZSBlbWl0dGVyLnNldE1heExpc3RlbmVycygpIHRvICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnaW5jcmVhc2UgbGltaXQnKTtcbiAgICAgIHcubmFtZSA9ICdNYXhMaXN0ZW5lcnNFeGNlZWRlZFdhcm5pbmcnO1xuICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgdy50eXBlID0gdHlwZTtcbiAgICAgIHcuY291bnQgPSBleGlzdGluZy5sZW5ndGg7XG4gICAgICBQcm9jZXNzRW1pdFdhcm5pbmcodyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub24gPSBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyO1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnByZXBlbmRMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gX2FkZExpc3RlbmVyKHRoaXMsIHR5cGUsIGxpc3RlbmVyLCB0cnVlKTtcbiAgICB9O1xuXG5mdW5jdGlvbiBvbmNlV3JhcHBlcigpIHtcbiAgdmFyIGFyZ3MgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyZ3MucHVzaChhcmd1bWVudHNbaV0pO1xuICBpZiAoIXRoaXMuZmlyZWQpIHtcbiAgICB0aGlzLnRhcmdldC5yZW1vdmVMaXN0ZW5lcih0aGlzLnR5cGUsIHRoaXMud3JhcEZuKTtcbiAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICBSZWZsZWN0QXBwbHkodGhpcy5saXN0ZW5lciwgdGhpcy50YXJnZXQsIGFyZ3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBzdGF0ZSA9IHsgZmlyZWQ6IGZhbHNlLCB3cmFwRm46IHVuZGVmaW5lZCwgdGFyZ2V0OiB0YXJnZXQsIHR5cGU6IHR5cGUsIGxpc3RlbmVyOiBsaXN0ZW5lciB9O1xuICB2YXIgd3JhcHBlZCA9IG9uY2VXcmFwcGVyLmJpbmQoc3RhdGUpO1xuICB3cmFwcGVkLmxpc3RlbmVyID0gbGlzdGVuZXI7XG4gIHN0YXRlLndyYXBGbiA9IHdyYXBwZWQ7XG4gIHJldHVybiB3cmFwcGVkO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiBvbmNlKHR5cGUsIGxpc3RlbmVyKSB7XG4gIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgfVxuICB0aGlzLm9uKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZE9uY2VMaXN0ZW5lciA9XG4gICAgZnVuY3Rpb24gcHJlcGVuZE9uY2VMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICAgIHRoaXMucHJlcGVuZExpc3RlbmVyKHR5cGUsIF9vbmNlV3JhcCh0aGlzLCB0eXBlLCBsaXN0ZW5lcikpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuLy8gRW1pdHMgYSAncmVtb3ZlTGlzdGVuZXInIGV2ZW50IGlmIGFuZCBvbmx5IGlmIHRoZSBsaXN0ZW5lciB3YXMgcmVtb3ZlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXIgPVxuICAgIGZ1bmN0aW9uIHJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICB2YXIgbGlzdCwgZXZlbnRzLCBwb3NpdGlvbiwgaSwgb3JpZ2luYWxMaXN0ZW5lcjtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJsaXN0ZW5lclwiIGFyZ3VtZW50IG11c3QgYmUgb2YgdHlwZSBGdW5jdGlvbi4gUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIGxpc3RlbmVyKTtcbiAgICAgIH1cblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgbGlzdCA9IGV2ZW50c1t0eXBlXTtcbiAgICAgIGlmIChsaXN0ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBpZiAobGlzdCA9PT0gbGlzdGVuZXIgfHwgbGlzdC5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIGV2ZW50c1t0eXBlXTtcbiAgICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyKVxuICAgICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIGxpc3QubGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBsaXN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBvc2l0aW9uID0gLTE7XG5cbiAgICAgICAgZm9yIChpID0gbGlzdC5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0ZW5lciB8fCBsaXN0W2ldLmxpc3RlbmVyID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgb3JpZ2luYWxMaXN0ZW5lciA9IGxpc3RbaV0ubGlzdGVuZXI7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9zaXRpb24gPCAwKVxuICAgICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gMClcbiAgICAgICAgICBsaXN0LnNoaWZ0KCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHNwbGljZU9uZShsaXN0LCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdC5sZW5ndGggPT09IDEpXG4gICAgICAgICAgZXZlbnRzW3R5cGVdID0gbGlzdFswXTtcblxuICAgICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpXG4gICAgICAgICAgdGhpcy5lbWl0KCdyZW1vdmVMaXN0ZW5lcicsIHR5cGUsIG9yaWdpbmFsTGlzdGVuZXIgfHwgbGlzdGVuZXIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzLCBpO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICAvLyBub3QgbGlzdGVuaW5nIGZvciByZW1vdmVMaXN0ZW5lciwgbm8gbmVlZCB0byBlbWl0XG4gICAgICBpZiAoZXZlbnRzLnJlbW92ZUxpc3RlbmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgfSBlbHNlIGlmIChldmVudHNbdHlwZV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmICgtLXRoaXMuX2V2ZW50c0NvdW50ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgICBlbHNlXG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICAvLyBlbWl0IHJlbW92ZUxpc3RlbmVyIGZvciBhbGwgbGlzdGVuZXJzIG9uIGFsbCBldmVudHNcbiAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZXZlbnRzKTtcbiAgICAgICAgdmFyIGtleTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgIGlmIChrZXkgPT09ICdyZW1vdmVMaXN0ZW5lcicpIGNvbnRpbnVlO1xuICAgICAgICAgIHRoaXMucmVtb3ZlQWxsTGlzdGVuZXJzKGtleSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoJ3JlbW92ZUxpc3RlbmVyJyk7XG4gICAgICAgIHRoaXMuX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIHRoaXMuX2V2ZW50c0NvdW50ID0gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIGxpc3RlbmVycyA9IGV2ZW50c1t0eXBlXTtcblxuICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcnMpO1xuICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGZvciAoaSA9IGxpc3RlbmVycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIodHlwZSwgbGlzdGVuZXJzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5mdW5jdGlvbiBfbGlzdGVuZXJzKHRhcmdldCwgdHlwZSwgdW53cmFwKSB7XG4gIHZhciBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpXG4gICAgcmV0dXJuIFtdO1xuXG4gIHZhciBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICBpZiAoZXZsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKVxuICAgIHJldHVybiBbXTtcblxuICBpZiAodHlwZW9mIGV2bGlzdGVuZXIgPT09ICdmdW5jdGlvbicpXG4gICAgcmV0dXJuIHVud3JhcCA/IFtldmxpc3RlbmVyLmxpc3RlbmVyIHx8IGV2bGlzdGVuZXJdIDogW2V2bGlzdGVuZXJdO1xuXG4gIHJldHVybiB1bndyYXAgP1xuICAgIHVud3JhcExpc3RlbmVycyhldmxpc3RlbmVyKSA6IGFycmF5Q2xvbmUoZXZsaXN0ZW5lciwgZXZsaXN0ZW5lci5sZW5ndGgpO1xufVxuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHJldHVybiBfbGlzdGVuZXJzKHRoaXMsIHR5cGUsIHRydWUpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5yYXdMaXN0ZW5lcnMgPSBmdW5jdGlvbiByYXdMaXN0ZW5lcnModHlwZSkge1xuICByZXR1cm4gX2xpc3RlbmVycyh0aGlzLCB0eXBlLCBmYWxzZSk7XG59O1xuXG5FdmVudEVtaXR0ZXIubGlzdGVuZXJDb3VudCA9IGZ1bmN0aW9uKGVtaXR0ZXIsIHR5cGUpIHtcbiAgaWYgKHR5cGVvZiBlbWl0dGVyLmxpc3RlbmVyQ291bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5saXN0ZW5lckNvdW50KHR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsaXN0ZW5lckNvdW50LmNhbGwoZW1pdHRlciwgdHlwZSk7XG4gIH1cbn07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUubGlzdGVuZXJDb3VudCA9IGxpc3RlbmVyQ291bnQ7XG5mdW5jdGlvbiBsaXN0ZW5lckNvdW50KHR5cGUpIHtcbiAgdmFyIGV2ZW50cyA9IHRoaXMuX2V2ZW50cztcblxuICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybiBldmxpc3RlbmVyLmxlbmd0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5ldmVudE5hbWVzID0gZnVuY3Rpb24gZXZlbnROYW1lcygpIHtcbiAgcmV0dXJuIHRoaXMuX2V2ZW50c0NvdW50ID4gMCA/IFJlZmxlY3RPd25LZXlzKHRoaXMuX2V2ZW50cykgOiBbXTtcbn07XG5cbmZ1bmN0aW9uIGFycmF5Q2xvbmUoYXJyLCBuKSB7XG4gIHZhciBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG47ICsraSlcbiAgICBjb3B5W2ldID0gYXJyW2ldO1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAoOyBpbmRleCArIDEgPCBsaXN0Lmxlbmd0aDsgaW5kZXgrKylcbiAgICBsaXN0W2luZGV4XSA9IGxpc3RbaW5kZXggKyAxXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gdW53cmFwTGlzdGVuZXJzKGFycikge1xuICB2YXIgcmV0ID0gbmV3IEFycmF5KGFyci5sZW5ndGgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJldC5sZW5ndGg7ICsraSkge1xuICAgIHJldFtpXSA9IGFycltpXS5saXN0ZW5lciB8fCBhcnJbaV07XG4gIH1cbiAgcmV0dXJuIHJldDtcbn1cblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qc1xuLy8gbW9kdWxlIGlkID0gLi9ub2RlX21vZHVsZXMvd2VicGFjay9ub2RlX21vZHVsZXMvZXZlbnRzL2V2ZW50cy5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhbmltYXRpb25zKCkge1xuICBjb25zb2xlLmxvZygnaW0gcmVhZHkhJyk7XG4gIHZhciBmaXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmFkZS1pbi1yaWdodCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpci5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3YXlwb2ludCA9IG5ldyBXYXlwb2ludCh7XG4gICAgZWxlbWVudDpmaXJbaV0sXG4gICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmFkZUluUmlnaHQnKTtcbiAgICB9LFxuICAgIG9mZnNldDogJzEwMCUnXG4gIH0pXG4gIH1cblxuICB2YXIgZmkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmFkZS1pbicpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHdheXBvaW50ID0gbmV3IFdheXBvaW50KHtcbiAgICBlbGVtZW50OmZpW2ldLFxuICAgIGhhbmRsZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2ZhZGVJbicpO1xuICAgIH0sXG4gICAgb2Zmc2V0OiAnMTAwJSdcbiAgfSlcbiAgfVxuXG4gIHZhciBmaXUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZmFkZS1pbi11cCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpdS5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3YXlwb2ludCA9IG5ldyBXYXlwb2ludCh7XG4gICAgZWxlbWVudDpmaXVbaV0sXG4gICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmFkZUluVXAnKTtcbiAgICB9LFxuICAgIG9mZnNldDogJzEwMCUnXG4gIH0pXG4gIH1cblxuICB2YXIgZmlsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZhZGUtaW4tbGVmdCcpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGZpbC5sZW5ndGg7IGkrKykge1xuICAgIHZhciB3YXlwb2ludCA9IG5ldyBXYXlwb2ludCh7XG4gICAgZWxlbWVudDpmaWxbaV0sXG4gICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnZmFkZUluTGVmdCcpO1xuICAgIH0sXG4gICAgb2Zmc2V0OiAnNzUlJ1xuICB9KVxuICB9XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvY29tcG9uZW50cy9hbmltYXRpb25zLmpzIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGF6eSgpIHtcbiAgdmFyIHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgncGxhY2Vob2xkZXInKTtcblxuICAgICAgaWYgKHBsYWNlaG9sZGVyLmxlbmd0aCkge1xuICAgICAgICB2YXIgc21hbGwgPSBwbGFjZWhvbGRlclswXS5xdWVyeVNlbGVjdG9yKCcuaW1nLXNtYWxsJyk7XG4gICAgICAgIC8vIDE6IGxvYWQgc21hbGwgaW1hZ2UgYW5kIHNob3cgaXRcbiAgICAgICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWcuc3JjID0gc21hbGwuc3JjO1xuICAgICAgICBpbWcub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgc21hbGwuY2xhc3NMaXN0LmFkZCgnbG9hZGVkJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gMjogbG9hZCBsYXJnZSBpbWFnZVxuICAgICAgICB2YXIgaW1nTGFyZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nTGFyZ2Uuc3JjID0gcGxhY2Vob2xkZXJbMF0uZGF0YXNldC5sYXJnZTtcbiAgICAgICAgaW1nTGFyZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGltZ0xhcmdlLmNsYXNzTGlzdC5hZGQoJ2xvYWRlZCcpO1xuICAgICAgICB9O1xuICAgICAgICBwbGFjZWhvbGRlclswXS5hcHBlbmRDaGlsZChpbWdMYXJnZSk7XG4gICAgICB9XG5cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jb21wb25lbnRzL2xhenkuanMiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzbW9vdGhTY3JvbGwoKSB7XG4gIGpRdWVyeShcImFcIikub24oJ2NsaWNrJywgZnVuY3Rpb24oZXZlbnQpIHtcblxuICAgICAgLy8gTWFrZSBzdXJlIHRoaXMuaGFzaCBoYXMgYSB2YWx1ZSBiZWZvcmUgb3ZlcnJpZGluZyBkZWZhdWx0IGJlaGF2aW9yXG4gICAgICBpZiAodGhpcy5oYXNoICE9PSBcIlwiKSB7XG4gICAgICAgIC8vIFByZXZlbnQgZGVmYXVsdCBhbmNob3IgY2xpY2sgYmVoYXZpb3JcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAvLyBTdG9yZSBoYXNoXG4gICAgICAgIHZhciBoYXNoID0gdGhpcy5oYXNoO1xuXG4gICAgICAgIC8vIFVzaW5nIGpRdWVyeSdzIGFuaW1hdGUoKSBtZXRob2QgdG8gYWRkIHNtb290aCBwYWdlIHNjcm9sbFxuICAgICAgICAvLyBUaGUgb3B0aW9uYWwgbnVtYmVyICg4MDApIHNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0YWtlcyB0byBzY3JvbGwgdG8gdGhlIHNwZWNpZmllZCBhcmVhXG4gICAgICAgIGpRdWVyeSgnaHRtbCwgYm9keScpLmFuaW1hdGUoe1xuICAgICAgICAgIHNjcm9sbFRvcDogalF1ZXJ5KGhhc2gpLm9mZnNldCgpLnRvcFxuICAgICAgICB9LCA4MDAsIGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgICAvLyBBZGQgaGFzaCAoIykgdG8gVVJMIHdoZW4gZG9uZSBzY3JvbGxpbmcgKGRlZmF1bHQgY2xpY2sgYmVoYXZpb3IpXG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhhc2ggPSBoYXNoO1xuICAgICAgICB9KTtcbiAgICAgIH0gLy8gRW5kIGlmXG4gICAgfSk7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvY29tcG9uZW50cy9zbW9vdGhTY3JvbGwuanMiLCIvKiBnbG9iYWwgSVNfREVWICovXG5cblxuaW1wb3J0IGxhenkgZnJvbSAnLi9jb21wb25lbnRzL2xhenknO1xuaW1wb3J0IGFuaW1hdGlvbnMgZnJvbSAnLi9jb21wb25lbnRzL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHNjcm9sbCBmcm9tICcuL2NvbXBvbmVudHMvc21vb3RoU2Nyb2xsJztcbmZ1bmN0aW9uIGxvYWRlZCgpIHtcblxuICBsYXp5KCk7XG4gIGFuaW1hdGlvbnMoKTtcbiAgc2Nyb2xsKCk7IFxufVxuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbG9hZGVkKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9tYWluLmpzIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTItMSEuLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvbGliL2luZGV4LmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc3R5bGUuc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gUHJlcGFyZSBjc3NUcmFuc2Zvcm1hdGlvblxudmFyIHRyYW5zZm9ybTtcblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/P3JlZi0tMi0xIS4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zdHlsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS0yLTEhLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3N0eWxlLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3N0eWxlcy9zdHlsZS5zY3NzXG4vLyBtb2R1bGUgaWQgPSAuL3NyYy9zdHlsZXMvc3R5bGUuc2Nzc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9